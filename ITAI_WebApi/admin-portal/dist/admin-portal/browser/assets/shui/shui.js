(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a3, b2) => {
    for (var prop in b2 || (b2 = {}))
      if (__hasOwnProp.call(b2, prop))
        __defNormalProp(a3, prop, b2[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop))
          __defNormalProp(a3, prop, b2[prop]);
      }
    return a3;
  };
  var __spreadProps = (a3, b2) => __defProps(a3, __getOwnPropDescs(b2));
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __require = /* @__PURE__ */ ((x2) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x2, {
    get: (a3, b2) => (typeof require !== "undefined" ? require : a3)[b2]
  }) : x2)(function(x2) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x2 + '" is not supported');
  });
  var __commonJS = (cb, mod) => function __require2() {
    return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toModule = (module) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i7 = decorators.length - 1, decorator; i7 >= 0; i7--)
      if (decorator = decorators[i7])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result)
      __defProp(target, key, result);
    return result;
  };
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e8) {
          reject(e8);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e8) {
          reject(e8);
        }
      };
      var step = (x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // ../../../../node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "../../../../node_modules/tslib/tslib.js"(exports, module) {
      var __extends2;
      var __assign2;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter2;
      var __generator2;
      var __exportStar2;
      var __values2;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues2;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __createBinding2;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports2) {
            factory(createExporter(root, createExporter(exports2)));
          });
        } else if (typeof module === "object" && typeof module.exports === "object") {
          factory(createExporter(root, createExporter(module.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports2, previous) {
          if (exports2 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports2, "__esModule", { value: true });
            } else {
              exports2.__esModule = true;
            }
          }
          return function(id, v2) {
            return exports2[id] = previous ? previous(id, v2) : v2;
          };
        }
      })(function(exporter) {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b2) {
          d3.__proto__ = b2;
        } || function(d3, b2) {
          for (var p3 in b2)
            if (b2.hasOwnProperty(p3))
              d3[p3] = b2[p3];
        };
        __extends2 = function(d3, b2) {
          extendStatics(d3, b2);
          function __() {
            this.constructor = d3;
          }
          d3.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
        };
        __assign2 = Object.assign || function(t5) {
          for (var s5, i7 = 1, n8 = arguments.length; i7 < n8; i7++) {
            s5 = arguments[i7];
            for (var p3 in s5)
              if (Object.prototype.hasOwnProperty.call(s5, p3))
                t5[p3] = s5[p3];
          }
          return t5;
        };
        __rest2 = function(s5, e8) {
          var t5 = {};
          for (var p3 in s5)
            if (Object.prototype.hasOwnProperty.call(s5, p3) && e8.indexOf(p3) < 0)
              t5[p3] = s5[p3];
          if (s5 != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i7 = 0, p3 = Object.getOwnPropertySymbols(s5); i7 < p3.length; i7++) {
              if (e8.indexOf(p3[i7]) < 0 && Object.prototype.propertyIsEnumerable.call(s5, p3[i7]))
                t5[p3[i7]] = s5[p3[i7]];
            }
          return t5;
        };
        __decorate2 = function(decorators, target, key, desc) {
          var c3 = arguments.length, r4 = c3 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d3;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r4 = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i7 = decorators.length - 1; i7 >= 0; i7--)
              if (d3 = decorators[i7])
                r4 = (c3 < 3 ? d3(r4) : c3 > 3 ? d3(target, key, r4) : d3(target, key)) || r4;
          return c3 > 3 && r4 && Object.defineProperty(target, key, r4), r4;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter2 = function(thisArg, _arguments, P2, generator) {
          function adopt(value) {
            return value instanceof P2 ? value : new P2(function(resolve) {
              resolve(value);
            });
          }
          return new (P2 || (P2 = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e8) {
                reject(e8);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e8) {
                reject(e8);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator2 = function(thisArg, body) {
          var _2 = { label: 0, sent: function() {
            if (t5[0] & 1)
              throw t5[1];
            return t5[1];
          }, trys: [], ops: [] }, f2, y2, t5, g2;
          return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
            return this;
          }), g2;
          function verb(n8) {
            return function(v2) {
              return step([n8, v2]);
            };
          }
          function step(op) {
            if (f2)
              throw new TypeError("Generator is already executing.");
            while (_2)
              try {
                if (f2 = 1, y2 && (t5 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t5 = y2["return"]) && t5.call(y2), 0) : y2.next) && !(t5 = t5.call(y2, op[1])).done)
                  return t5;
                if (y2 = 0, t5)
                  op = [op[0] & 2, t5.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t5 = op;
                    break;
                  case 4:
                    _2.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _2.label++;
                    y2 = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _2.ops.pop();
                    _2.trys.pop();
                    continue;
                  default:
                    if (!(t5 = _2.trys, t5 = t5.length > 0 && t5[t5.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _2 = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t5 || op[1] > t5[0] && op[1] < t5[3])) {
                      _2.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _2.label < t5[1]) {
                      _2.label = t5[1];
                      t5 = op;
                      break;
                    }
                    if (t5 && _2.label < t5[2]) {
                      _2.label = t5[2];
                      _2.ops.push(op);
                      break;
                    }
                    if (t5[2])
                      _2.ops.pop();
                    _2.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _2);
              } catch (e8) {
                op = [6, e8];
                y2 = 0;
              } finally {
                f2 = t5 = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __createBinding2 = function(o8, m2, k2, k22) {
          if (k22 === void 0)
            k22 = k2;
          o8[k22] = m2[k2];
        };
        __exportStar2 = function(m2, exports2) {
          for (var p3 in m2)
            if (p3 !== "default" && !exports2.hasOwnProperty(p3))
              exports2[p3] = m2[p3];
        };
        __values2 = function(o8) {
          var s5 = typeof Symbol === "function" && Symbol.iterator, m2 = s5 && o8[s5], i7 = 0;
          if (m2)
            return m2.call(o8);
          if (o8 && typeof o8.length === "number")
            return {
              next: function() {
                if (o8 && i7 >= o8.length)
                  o8 = void 0;
                return { value: o8 && o8[i7++], done: !o8 };
              }
            };
          throw new TypeError(s5 ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o8, n8) {
          var m2 = typeof Symbol === "function" && o8[Symbol.iterator];
          if (!m2)
            return o8;
          var i7 = m2.call(o8), r4, ar = [], e8;
          try {
            while ((n8 === void 0 || n8-- > 0) && !(r4 = i7.next()).done)
              ar.push(r4.value);
          } catch (error) {
            e8 = { error };
          } finally {
            try {
              if (r4 && !r4.done && (m2 = i7["return"]))
                m2.call(i7);
            } finally {
              if (e8)
                throw e8.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i7 = 0; i7 < arguments.length; i7++)
            ar = ar.concat(__read2(arguments[i7]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s5 = 0, i7 = 0, il = arguments.length; i7 < il; i7++)
            s5 += arguments[i7].length;
          for (var r4 = Array(s5), k2 = 0, i7 = 0; i7 < il; i7++)
            for (var a3 = arguments[i7], j = 0, jl = a3.length; j < jl; j++, k2++)
              r4[k2] = a3[j];
          return r4;
        };
        __await2 = function(v2) {
          return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g2 = generator.apply(thisArg, _arguments || []), i7, q = [];
          return i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
            return this;
          }, i7;
          function verb(n8) {
            if (g2[n8])
              i7[n8] = function(v2) {
                return new Promise(function(a3, b2) {
                  q.push([n8, v2, a3, b2]) > 1 || resume(n8, v2);
                });
              };
          }
          function resume(n8, v2) {
            try {
              step(g2[n8](v2));
            } catch (e8) {
              settle(q[0][3], e8);
            }
          }
          function step(r4) {
            r4.value instanceof __await2 ? Promise.resolve(r4.value.v).then(fulfill, reject) : settle(q[0][2], r4);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f2, v2) {
            if (f2(v2), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function(o8) {
          var i7, p3;
          return i7 = {}, verb("next"), verb("throw", function(e8) {
            throw e8;
          }), verb("return"), i7[Symbol.iterator] = function() {
            return this;
          }, i7;
          function verb(n8, f2) {
            i7[n8] = o8[n8] ? function(v2) {
              return (p3 = !p3) ? { value: __await2(o8[n8](v2)), done: n8 === "return" } : f2 ? f2(v2) : v2;
            } : f2;
          }
        };
        __asyncValues2 = function(o8) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m2 = o8[Symbol.asyncIterator], i7;
          return m2 ? m2.call(o8) : (o8 = typeof __values2 === "function" ? __values2(o8) : o8[Symbol.iterator](), i7 = {}, verb("next"), verb("throw"), verb("return"), i7[Symbol.asyncIterator] = function() {
            return this;
          }, i7);
          function verb(n8) {
            i7[n8] = o8[n8] && function(v2) {
              return new Promise(function(resolve, reject) {
                v2 = o8[n8](v2), settle(resolve, reject, v2.done, v2.value);
              });
            };
          }
          function settle(resolve, reject, d3, v2) {
            Promise.resolve(v2).then(function(v3) {
              resolve({ value: v3, done: d3 });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        __importStar2 = function(mod) {
          if (mod && mod.__esModule)
            return mod;
          var result = {};
          if (mod != null) {
            for (var k2 in mod)
              if (Object.hasOwnProperty.call(mod, k2))
                result[k2] = mod[k2];
          }
          result["default"] = mod;
          return result;
        };
        __importDefault2 = function(mod) {
          return mod && mod.__esModule ? mod : { "default": mod };
        };
        __classPrivateFieldGet2 = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        };
        exporter("__extends", __extends2);
        exporter("__assign", __assign2);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter2);
        exporter("__generator", __generator2);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values2);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues2);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      });
    }
  });

  // ../../../../node_modules/@lit/reactive-element/css-tag.js
  var t = window;
  var e = t.ShadowRoot && (t.ShadyCSS === void 0 || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
  var s = Symbol();
  var n = new WeakMap();
  var o = class {
    constructor(t5, e8, n8) {
      if (this._$cssResult$ = true, n8 !== s)
        throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
      this.cssText = t5, this.t = e8;
    }
    get styleSheet() {
      let t5 = this.o;
      const s5 = this.t;
      if (e && t5 === void 0) {
        const e8 = s5 !== void 0 && s5.length === 1;
        e8 && (t5 = n.get(s5)), t5 === void 0 && ((this.o = t5 = new CSSStyleSheet()).replaceSync(this.cssText), e8 && n.set(s5, t5));
      }
      return t5;
    }
    toString() {
      return this.cssText;
    }
  };
  var r = (t5) => new o(typeof t5 == "string" ? t5 : t5 + "", void 0, s);
  var i = (t5, ...e8) => {
    const n8 = t5.length === 1 ? t5[0] : e8.reduce((e9, s5, n9) => e9 + ((t6) => {
      if (t6._$cssResult$ === true)
        return t6.cssText;
      if (typeof t6 == "number")
        return t6;
      throw Error("Value passed to 'css' function must be a 'css' function result: " + t6 + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
    })(s5) + t5[n9 + 1], t5[0]);
    return new o(n8, t5, s);
  };
  var S = (s5, n8) => {
    e ? s5.adoptedStyleSheets = n8.map((t5) => t5 instanceof CSSStyleSheet ? t5 : t5.styleSheet) : n8.forEach((e8) => {
      const n9 = document.createElement("style"), o8 = t.litNonce;
      o8 !== void 0 && n9.setAttribute("nonce", o8), n9.textContent = e8.cssText, s5.appendChild(n9);
    });
  };
  var c = e ? (t5) => t5 : (t5) => t5 instanceof CSSStyleSheet ? ((t6) => {
    let e8 = "";
    for (const s5 of t6.cssRules)
      e8 += s5.cssText;
    return r(e8);
  })(t5) : t5;

  // ../../../../node_modules/@lit/reactive-element/reactive-element.js
  var s2;
  var e2 = window;
  var r2 = e2.trustedTypes;
  var h = r2 ? r2.emptyScript : "";
  var o2 = e2.reactiveElementPolyfillSupport;
  var n2 = { toAttribute(t5, i7) {
    switch (i7) {
      case Boolean:
        t5 = t5 ? h : null;
        break;
      case Object:
      case Array:
        t5 = t5 == null ? t5 : JSON.stringify(t5);
    }
    return t5;
  }, fromAttribute(t5, i7) {
    let s5 = t5;
    switch (i7) {
      case Boolean:
        s5 = t5 !== null;
        break;
      case Number:
        s5 = t5 === null ? null : Number(t5);
        break;
      case Object:
      case Array:
        try {
          s5 = JSON.parse(t5);
        } catch (t6) {
          s5 = null;
        }
    }
    return s5;
  } };
  var a = (t5, i7) => i7 !== t5 && (i7 == i7 || t5 == t5);
  var l = { attribute: true, type: String, converter: n2, reflect: false, hasChanged: a };
  var d = "finalized";
  var u = class extends HTMLElement {
    constructor() {
      super(), this._$Ei = new Map(), this.isUpdatePending = false, this.hasUpdated = false, this._$El = null, this._$Eu();
    }
    static addInitializer(t5) {
      var i7;
      this.finalize(), ((i7 = this.h) !== null && i7 !== void 0 ? i7 : this.h = []).push(t5);
    }
    static get observedAttributes() {
      this.finalize();
      const t5 = [];
      return this.elementProperties.forEach((i7, s5) => {
        const e8 = this._$Ep(s5, i7);
        e8 !== void 0 && (this._$Ev.set(e8, s5), t5.push(e8));
      }), t5;
    }
    static createProperty(t5, i7 = l) {
      if (i7.state && (i7.attribute = false), this.finalize(), this.elementProperties.set(t5, i7), !i7.noAccessor && !this.prototype.hasOwnProperty(t5)) {
        const s5 = typeof t5 == "symbol" ? Symbol() : "__" + t5, e8 = this.getPropertyDescriptor(t5, s5, i7);
        e8 !== void 0 && Object.defineProperty(this.prototype, t5, e8);
      }
    }
    static getPropertyDescriptor(t5, i7, s5) {
      return { get() {
        return this[i7];
      }, set(e8) {
        const r4 = this[t5];
        this[i7] = e8, this.requestUpdate(t5, r4, s5);
      }, configurable: true, enumerable: true };
    }
    static getPropertyOptions(t5) {
      return this.elementProperties.get(t5) || l;
    }
    static finalize() {
      if (this.hasOwnProperty(d))
        return false;
      this[d] = true;
      const t5 = Object.getPrototypeOf(this);
      if (t5.finalize(), t5.h !== void 0 && (this.h = [...t5.h]), this.elementProperties = new Map(t5.elementProperties), this._$Ev = new Map(), this.hasOwnProperty("properties")) {
        const t6 = this.properties, i7 = [...Object.getOwnPropertyNames(t6), ...Object.getOwnPropertySymbols(t6)];
        for (const s5 of i7)
          this.createProperty(s5, t6[s5]);
      }
      return this.elementStyles = this.finalizeStyles(this.styles), true;
    }
    static finalizeStyles(i7) {
      const s5 = [];
      if (Array.isArray(i7)) {
        const e8 = new Set(i7.flat(1 / 0).reverse());
        for (const i8 of e8)
          s5.unshift(c(i8));
      } else
        i7 !== void 0 && s5.push(c(i7));
      return s5;
    }
    static _$Ep(t5, i7) {
      const s5 = i7.attribute;
      return s5 === false ? void 0 : typeof s5 == "string" ? s5 : typeof t5 == "string" ? t5.toLowerCase() : void 0;
    }
    _$Eu() {
      var t5;
      this._$E_ = new Promise((t6) => this.enableUpdating = t6), this._$AL = new Map(), this._$Eg(), this.requestUpdate(), (t5 = this.constructor.h) === null || t5 === void 0 || t5.forEach((t6) => t6(this));
    }
    addController(t5) {
      var i7, s5;
      ((i7 = this._$ES) !== null && i7 !== void 0 ? i7 : this._$ES = []).push(t5), this.renderRoot !== void 0 && this.isConnected && ((s5 = t5.hostConnected) === null || s5 === void 0 || s5.call(t5));
    }
    removeController(t5) {
      var i7;
      (i7 = this._$ES) === null || i7 === void 0 || i7.splice(this._$ES.indexOf(t5) >>> 0, 1);
    }
    _$Eg() {
      this.constructor.elementProperties.forEach((t5, i7) => {
        this.hasOwnProperty(i7) && (this._$Ei.set(i7, this[i7]), delete this[i7]);
      });
    }
    createRenderRoot() {
      var t5;
      const s5 = (t5 = this.shadowRoot) !== null && t5 !== void 0 ? t5 : this.attachShadow(this.constructor.shadowRootOptions);
      return S(s5, this.constructor.elementStyles), s5;
    }
    connectedCallback() {
      var t5;
      this.renderRoot === void 0 && (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (t5 = this._$ES) === null || t5 === void 0 || t5.forEach((t6) => {
        var i7;
        return (i7 = t6.hostConnected) === null || i7 === void 0 ? void 0 : i7.call(t6);
      });
    }
    enableUpdating(t5) {
    }
    disconnectedCallback() {
      var t5;
      (t5 = this._$ES) === null || t5 === void 0 || t5.forEach((t6) => {
        var i7;
        return (i7 = t6.hostDisconnected) === null || i7 === void 0 ? void 0 : i7.call(t6);
      });
    }
    attributeChangedCallback(t5, i7, s5) {
      this._$AK(t5, s5);
    }
    _$EO(t5, i7, s5 = l) {
      var e8;
      const r4 = this.constructor._$Ep(t5, s5);
      if (r4 !== void 0 && s5.reflect === true) {
        const h3 = (((e8 = s5.converter) === null || e8 === void 0 ? void 0 : e8.toAttribute) !== void 0 ? s5.converter : n2).toAttribute(i7, s5.type);
        this._$El = t5, h3 == null ? this.removeAttribute(r4) : this.setAttribute(r4, h3), this._$El = null;
      }
    }
    _$AK(t5, i7) {
      var s5;
      const e8 = this.constructor, r4 = e8._$Ev.get(t5);
      if (r4 !== void 0 && this._$El !== r4) {
        const t6 = e8.getPropertyOptions(r4), h3 = typeof t6.converter == "function" ? { fromAttribute: t6.converter } : ((s5 = t6.converter) === null || s5 === void 0 ? void 0 : s5.fromAttribute) !== void 0 ? t6.converter : n2;
        this._$El = r4, this[r4] = h3.fromAttribute(i7, t6.type), this._$El = null;
      }
    }
    requestUpdate(t5, i7, s5) {
      let e8 = true;
      t5 !== void 0 && (((s5 = s5 || this.constructor.getPropertyOptions(t5)).hasChanged || a)(this[t5], i7) ? (this._$AL.has(t5) || this._$AL.set(t5, i7), s5.reflect === true && this._$El !== t5 && (this._$EC === void 0 && (this._$EC = new Map()), this._$EC.set(t5, s5))) : e8 = false), !this.isUpdatePending && e8 && (this._$E_ = this._$Ej());
    }
    _$Ej() {
      return __async(this, null, function* () {
        this.isUpdatePending = true;
        try {
          yield this._$E_;
        } catch (t6) {
          Promise.reject(t6);
        }
        const t5 = this.scheduleUpdate();
        return t5 != null && (yield t5), !this.isUpdatePending;
      });
    }
    scheduleUpdate() {
      return this.performUpdate();
    }
    performUpdate() {
      var t5;
      if (!this.isUpdatePending)
        return;
      this.hasUpdated, this._$Ei && (this._$Ei.forEach((t6, i8) => this[i8] = t6), this._$Ei = void 0);
      let i7 = false;
      const s5 = this._$AL;
      try {
        i7 = this.shouldUpdate(s5), i7 ? (this.willUpdate(s5), (t5 = this._$ES) === null || t5 === void 0 || t5.forEach((t6) => {
          var i8;
          return (i8 = t6.hostUpdate) === null || i8 === void 0 ? void 0 : i8.call(t6);
        }), this.update(s5)) : this._$Ek();
      } catch (t6) {
        throw i7 = false, this._$Ek(), t6;
      }
      i7 && this._$AE(s5);
    }
    willUpdate(t5) {
    }
    _$AE(t5) {
      var i7;
      (i7 = this._$ES) === null || i7 === void 0 || i7.forEach((t6) => {
        var i8;
        return (i8 = t6.hostUpdated) === null || i8 === void 0 ? void 0 : i8.call(t6);
      }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t5)), this.updated(t5);
    }
    _$Ek() {
      this._$AL = new Map(), this.isUpdatePending = false;
    }
    get updateComplete() {
      return this.getUpdateComplete();
    }
    getUpdateComplete() {
      return this._$E_;
    }
    shouldUpdate(t5) {
      return true;
    }
    update(t5) {
      this._$EC !== void 0 && (this._$EC.forEach((t6, i7) => this._$EO(i7, this[i7], t6)), this._$EC = void 0), this._$Ek();
    }
    updated(t5) {
    }
    firstUpdated(t5) {
    }
  };
  u[d] = true, u.elementProperties = new Map(), u.elementStyles = [], u.shadowRootOptions = { mode: "open" }, o2 == null || o2({ ReactiveElement: u }), ((s2 = e2.reactiveElementVersions) !== null && s2 !== void 0 ? s2 : e2.reactiveElementVersions = []).push("1.6.3");

  // ../../../../node_modules/lit-html/lit-html.js
  var t2;
  var i2 = window;
  var s3 = i2.trustedTypes;
  var e3 = s3 ? s3.createPolicy("lit-html", { createHTML: (t5) => t5 }) : void 0;
  var o3 = "$lit$";
  var n3 = `lit$${(Math.random() + "").slice(9)}$`;
  var l2 = "?" + n3;
  var h2 = `<${l2}>`;
  var r3 = document;
  var u2 = () => r3.createComment("");
  var d2 = (t5) => t5 === null || typeof t5 != "object" && typeof t5 != "function";
  var c2 = Array.isArray;
  var v = (t5) => c2(t5) || typeof (t5 == null ? void 0 : t5[Symbol.iterator]) == "function";
  var a2 = "[ 	\n\f\r]";
  var f = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
  var _ = /-->/g;
  var m = />/g;
  var p = RegExp(`>|${a2}(?:([^\\s"'>=/]+)(${a2}*=${a2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
  var g = /'/g;
  var $ = /"/g;
  var y = /^(?:script|style|textarea|title)$/i;
  var w = (t5) => (i7, ...s5) => ({ _$litType$: t5, strings: i7, values: s5 });
  var x = w(1);
  var b = w(2);
  var T = Symbol.for("lit-noChange");
  var A = Symbol.for("lit-nothing");
  var E = new WeakMap();
  var C = r3.createTreeWalker(r3, 129, null, false);
  function P(t5, i7) {
    if (!Array.isArray(t5) || !t5.hasOwnProperty("raw"))
      throw Error("invalid template strings array");
    return e3 !== void 0 ? e3.createHTML(i7) : i7;
  }
  var V = (t5, i7) => {
    const s5 = t5.length - 1, e8 = [];
    let l5, r4 = i7 === 2 ? "<svg>" : "", u3 = f;
    for (let i8 = 0; i8 < s5; i8++) {
      const s6 = t5[i8];
      let d3, c3, v2 = -1, a3 = 0;
      for (; a3 < s6.length && (u3.lastIndex = a3, c3 = u3.exec(s6), c3 !== null); )
        a3 = u3.lastIndex, u3 === f ? c3[1] === "!--" ? u3 = _ : c3[1] !== void 0 ? u3 = m : c3[2] !== void 0 ? (y.test(c3[2]) && (l5 = RegExp("</" + c3[2], "g")), u3 = p) : c3[3] !== void 0 && (u3 = p) : u3 === p ? c3[0] === ">" ? (u3 = l5 != null ? l5 : f, v2 = -1) : c3[1] === void 0 ? v2 = -2 : (v2 = u3.lastIndex - c3[2].length, d3 = c3[1], u3 = c3[3] === void 0 ? p : c3[3] === '"' ? $ : g) : u3 === $ || u3 === g ? u3 = p : u3 === _ || u3 === m ? u3 = f : (u3 = p, l5 = void 0);
      const w2 = u3 === p && t5[i8 + 1].startsWith("/>") ? " " : "";
      r4 += u3 === f ? s6 + h2 : v2 >= 0 ? (e8.push(d3), s6.slice(0, v2) + o3 + s6.slice(v2) + n3 + w2) : s6 + n3 + (v2 === -2 ? (e8.push(void 0), i8) : w2);
    }
    return [P(t5, r4 + (t5[s5] || "<?>") + (i7 === 2 ? "</svg>" : "")), e8];
  };
  var N = class {
    constructor({ strings: t5, _$litType$: i7 }, e8) {
      let h3;
      this.parts = [];
      let r4 = 0, d3 = 0;
      const c3 = t5.length - 1, v2 = this.parts, [a3, f2] = V(t5, i7);
      if (this.el = N.createElement(a3, e8), C.currentNode = this.el.content, i7 === 2) {
        const t6 = this.el.content, i8 = t6.firstChild;
        i8.remove(), t6.append(...i8.childNodes);
      }
      for (; (h3 = C.nextNode()) !== null && v2.length < c3; ) {
        if (h3.nodeType === 1) {
          if (h3.hasAttributes()) {
            const t6 = [];
            for (const i8 of h3.getAttributeNames())
              if (i8.endsWith(o3) || i8.startsWith(n3)) {
                const s5 = f2[d3++];
                if (t6.push(i8), s5 !== void 0) {
                  const t7 = h3.getAttribute(s5.toLowerCase() + o3).split(n3), i9 = /([.?@])?(.*)/.exec(s5);
                  v2.push({ type: 1, index: r4, name: i9[2], strings: t7, ctor: i9[1] === "." ? H : i9[1] === "?" ? L : i9[1] === "@" ? z : k });
                } else
                  v2.push({ type: 6, index: r4 });
              }
            for (const i8 of t6)
              h3.removeAttribute(i8);
          }
          if (y.test(h3.tagName)) {
            const t6 = h3.textContent.split(n3), i8 = t6.length - 1;
            if (i8 > 0) {
              h3.textContent = s3 ? s3.emptyScript : "";
              for (let s5 = 0; s5 < i8; s5++)
                h3.append(t6[s5], u2()), C.nextNode(), v2.push({ type: 2, index: ++r4 });
              h3.append(t6[i8], u2());
            }
          }
        } else if (h3.nodeType === 8)
          if (h3.data === l2)
            v2.push({ type: 2, index: r4 });
          else {
            let t6 = -1;
            for (; (t6 = h3.data.indexOf(n3, t6 + 1)) !== -1; )
              v2.push({ type: 7, index: r4 }), t6 += n3.length - 1;
          }
        r4++;
      }
    }
    static createElement(t5, i7) {
      const s5 = r3.createElement("template");
      return s5.innerHTML = t5, s5;
    }
  };
  function S2(t5, i7, s5 = t5, e8) {
    var o8, n8, l5, h3;
    if (i7 === T)
      return i7;
    let r4 = e8 !== void 0 ? (o8 = s5._$Co) === null || o8 === void 0 ? void 0 : o8[e8] : s5._$Cl;
    const u3 = d2(i7) ? void 0 : i7._$litDirective$;
    return (r4 == null ? void 0 : r4.constructor) !== u3 && ((n8 = r4 == null ? void 0 : r4._$AO) === null || n8 === void 0 || n8.call(r4, false), u3 === void 0 ? r4 = void 0 : (r4 = new u3(t5), r4._$AT(t5, s5, e8)), e8 !== void 0 ? ((l5 = (h3 = s5)._$Co) !== null && l5 !== void 0 ? l5 : h3._$Co = [])[e8] = r4 : s5._$Cl = r4), r4 !== void 0 && (i7 = S2(t5, r4._$AS(t5, i7.values), r4, e8)), i7;
  }
  var M = class {
    constructor(t5, i7) {
      this._$AV = [], this._$AN = void 0, this._$AD = t5, this._$AM = i7;
    }
    get parentNode() {
      return this._$AM.parentNode;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    u(t5) {
      var i7;
      const { el: { content: s5 }, parts: e8 } = this._$AD, o8 = ((i7 = t5 == null ? void 0 : t5.creationScope) !== null && i7 !== void 0 ? i7 : r3).importNode(s5, true);
      C.currentNode = o8;
      let n8 = C.nextNode(), l5 = 0, h3 = 0, u3 = e8[0];
      for (; u3 !== void 0; ) {
        if (l5 === u3.index) {
          let i8;
          u3.type === 2 ? i8 = new R(n8, n8.nextSibling, this, t5) : u3.type === 1 ? i8 = new u3.ctor(n8, u3.name, u3.strings, this, t5) : u3.type === 6 && (i8 = new Z(n8, this, t5)), this._$AV.push(i8), u3 = e8[++h3];
        }
        l5 !== (u3 == null ? void 0 : u3.index) && (n8 = C.nextNode(), l5++);
      }
      return C.currentNode = r3, o8;
    }
    v(t5) {
      let i7 = 0;
      for (const s5 of this._$AV)
        s5 !== void 0 && (s5.strings !== void 0 ? (s5._$AI(t5, s5, i7), i7 += s5.strings.length - 2) : s5._$AI(t5[i7])), i7++;
    }
  };
  var R = class {
    constructor(t5, i7, s5, e8) {
      var o8;
      this.type = 2, this._$AH = A, this._$AN = void 0, this._$AA = t5, this._$AB = i7, this._$AM = s5, this.options = e8, this._$Cp = (o8 = e8 == null ? void 0 : e8.isConnected) === null || o8 === void 0 || o8;
    }
    get _$AU() {
      var t5, i7;
      return (i7 = (t5 = this._$AM) === null || t5 === void 0 ? void 0 : t5._$AU) !== null && i7 !== void 0 ? i7 : this._$Cp;
    }
    get parentNode() {
      let t5 = this._$AA.parentNode;
      const i7 = this._$AM;
      return i7 !== void 0 && (t5 == null ? void 0 : t5.nodeType) === 11 && (t5 = i7.parentNode), t5;
    }
    get startNode() {
      return this._$AA;
    }
    get endNode() {
      return this._$AB;
    }
    _$AI(t5, i7 = this) {
      t5 = S2(this, t5, i7), d2(t5) ? t5 === A || t5 == null || t5 === "" ? (this._$AH !== A && this._$AR(), this._$AH = A) : t5 !== this._$AH && t5 !== T && this._(t5) : t5._$litType$ !== void 0 ? this.g(t5) : t5.nodeType !== void 0 ? this.$(t5) : v(t5) ? this.T(t5) : this._(t5);
    }
    k(t5) {
      return this._$AA.parentNode.insertBefore(t5, this._$AB);
    }
    $(t5) {
      this._$AH !== t5 && (this._$AR(), this._$AH = this.k(t5));
    }
    _(t5) {
      this._$AH !== A && d2(this._$AH) ? this._$AA.nextSibling.data = t5 : this.$(r3.createTextNode(t5)), this._$AH = t5;
    }
    g(t5) {
      var i7;
      const { values: s5, _$litType$: e8 } = t5, o8 = typeof e8 == "number" ? this._$AC(t5) : (e8.el === void 0 && (e8.el = N.createElement(P(e8.h, e8.h[0]), this.options)), e8);
      if (((i7 = this._$AH) === null || i7 === void 0 ? void 0 : i7._$AD) === o8)
        this._$AH.v(s5);
      else {
        const t6 = new M(o8, this), i8 = t6.u(this.options);
        t6.v(s5), this.$(i8), this._$AH = t6;
      }
    }
    _$AC(t5) {
      let i7 = E.get(t5.strings);
      return i7 === void 0 && E.set(t5.strings, i7 = new N(t5)), i7;
    }
    T(t5) {
      c2(this._$AH) || (this._$AH = [], this._$AR());
      const i7 = this._$AH;
      let s5, e8 = 0;
      for (const o8 of t5)
        e8 === i7.length ? i7.push(s5 = new R(this.k(u2()), this.k(u2()), this, this.options)) : s5 = i7[e8], s5._$AI(o8), e8++;
      e8 < i7.length && (this._$AR(s5 && s5._$AB.nextSibling, e8), i7.length = e8);
    }
    _$AR(t5 = this._$AA.nextSibling, i7) {
      var s5;
      for ((s5 = this._$AP) === null || s5 === void 0 || s5.call(this, false, true, i7); t5 && t5 !== this._$AB; ) {
        const i8 = t5.nextSibling;
        t5.remove(), t5 = i8;
      }
    }
    setConnected(t5) {
      var i7;
      this._$AM === void 0 && (this._$Cp = t5, (i7 = this._$AP) === null || i7 === void 0 || i7.call(this, t5));
    }
  };
  var k = class {
    constructor(t5, i7, s5, e8, o8) {
      this.type = 1, this._$AH = A, this._$AN = void 0, this.element = t5, this.name = i7, this._$AM = e8, this.options = o8, s5.length > 2 || s5[0] !== "" || s5[1] !== "" ? (this._$AH = Array(s5.length - 1).fill(new String()), this.strings = s5) : this._$AH = A;
    }
    get tagName() {
      return this.element.tagName;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AI(t5, i7 = this, s5, e8) {
      const o8 = this.strings;
      let n8 = false;
      if (o8 === void 0)
        t5 = S2(this, t5, i7, 0), n8 = !d2(t5) || t5 !== this._$AH && t5 !== T, n8 && (this._$AH = t5);
      else {
        const e9 = t5;
        let l5, h3;
        for (t5 = o8[0], l5 = 0; l5 < o8.length - 1; l5++)
          h3 = S2(this, e9[s5 + l5], i7, l5), h3 === T && (h3 = this._$AH[l5]), n8 || (n8 = !d2(h3) || h3 !== this._$AH[l5]), h3 === A ? t5 = A : t5 !== A && (t5 += (h3 != null ? h3 : "") + o8[l5 + 1]), this._$AH[l5] = h3;
      }
      n8 && !e8 && this.j(t5);
    }
    j(t5) {
      t5 === A ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t5 != null ? t5 : "");
    }
  };
  var H = class extends k {
    constructor() {
      super(...arguments), this.type = 3;
    }
    j(t5) {
      this.element[this.name] = t5 === A ? void 0 : t5;
    }
  };
  var I = s3 ? s3.emptyScript : "";
  var L = class extends k {
    constructor() {
      super(...arguments), this.type = 4;
    }
    j(t5) {
      t5 && t5 !== A ? this.element.setAttribute(this.name, I) : this.element.removeAttribute(this.name);
    }
  };
  var z = class extends k {
    constructor(t5, i7, s5, e8, o8) {
      super(t5, i7, s5, e8, o8), this.type = 5;
    }
    _$AI(t5, i7 = this) {
      var s5;
      if ((t5 = (s5 = S2(this, t5, i7, 0)) !== null && s5 !== void 0 ? s5 : A) === T)
        return;
      const e8 = this._$AH, o8 = t5 === A && e8 !== A || t5.capture !== e8.capture || t5.once !== e8.once || t5.passive !== e8.passive, n8 = t5 !== A && (e8 === A || o8);
      o8 && this.element.removeEventListener(this.name, this, e8), n8 && this.element.addEventListener(this.name, this, t5), this._$AH = t5;
    }
    handleEvent(t5) {
      var i7, s5;
      typeof this._$AH == "function" ? this._$AH.call((s5 = (i7 = this.options) === null || i7 === void 0 ? void 0 : i7.host) !== null && s5 !== void 0 ? s5 : this.element, t5) : this._$AH.handleEvent(t5);
    }
  };
  var Z = class {
    constructor(t5, i7, s5) {
      this.element = t5, this.type = 6, this._$AN = void 0, this._$AM = i7, this.options = s5;
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AI(t5) {
      S2(this, t5);
    }
  };
  var B = i2.litHtmlPolyfillSupport;
  B == null || B(N, R), ((t2 = i2.litHtmlVersions) !== null && t2 !== void 0 ? t2 : i2.litHtmlVersions = []).push("2.8.0");
  var D = (t5, i7, s5) => {
    var e8, o8;
    const n8 = (e8 = s5 == null ? void 0 : s5.renderBefore) !== null && e8 !== void 0 ? e8 : i7;
    let l5 = n8._$litPart$;
    if (l5 === void 0) {
      const t6 = (o8 = s5 == null ? void 0 : s5.renderBefore) !== null && o8 !== void 0 ? o8 : null;
      n8._$litPart$ = l5 = new R(i7.insertBefore(u2(), t6), t6, void 0, s5 != null ? s5 : {});
    }
    return l5._$AI(t5), l5;
  };

  // ../../../../node_modules/lit-element/lit-element.js
  var l3;
  var o4;
  var s4 = class extends u {
    constructor() {
      super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
    }
    createRenderRoot() {
      var t5, e8;
      const i7 = super.createRenderRoot();
      return (t5 = (e8 = this.renderOptions).renderBefore) !== null && t5 !== void 0 || (e8.renderBefore = i7.firstChild), i7;
    }
    update(t5) {
      const i7 = this.render();
      this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t5), this._$Do = D(i7, this.renderRoot, this.renderOptions);
    }
    connectedCallback() {
      var t5;
      super.connectedCallback(), (t5 = this._$Do) === null || t5 === void 0 || t5.setConnected(true);
    }
    disconnectedCallback() {
      var t5;
      super.disconnectedCallback(), (t5 = this._$Do) === null || t5 === void 0 || t5.setConnected(false);
    }
    render() {
      return T;
    }
  };
  s4.finalized = true, s4._$litElement$ = true, (l3 = globalThis.litElementHydrateSupport) === null || l3 === void 0 || l3.call(globalThis, { LitElement: s4 });
  var n4 = globalThis.litElementPolyfillSupport;
  n4 == null || n4({ LitElement: s4 });
  ((o4 = globalThis.litElementVersions) !== null && o4 !== void 0 ? o4 : globalThis.litElementVersions = []).push("3.3.3");

  // ../../../../node_modules/tslib/modules/index.js
  var import_tslib = __toModule(require_tslib());
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet
  } = import_tslib.default;

  // ../../../../node_modules/@lit/reactive-element/decorators/custom-element.js
  var e4 = (e8) => (n8) => typeof n8 == "function" ? ((e9, n9) => (customElements.define(e9, n9), n9))(e8, n8) : ((e9, n9) => {
    const { kind: t5, elements: s5 } = n9;
    return { kind: t5, elements: s5, finisher(n10) {
      customElements.define(e9, n10);
    } };
  })(e8, n8);

  // ../../../../node_modules/@lit/reactive-element/decorators/property.js
  var i3 = (i7, e8) => e8.kind === "method" && e8.descriptor && !("value" in e8.descriptor) ? __spreadProps(__spreadValues({}, e8), { finisher(n8) {
    n8.createProperty(e8.key, i7);
  } }) : { kind: "field", key: Symbol(), placement: "own", descriptor: {}, originalKey: e8.key, initializer() {
    typeof e8.initializer == "function" && (this[e8.key] = e8.initializer.call(this));
  }, finisher(n8) {
    n8.createProperty(e8.key, i7);
  } };
  var e5 = (i7, e8, n8) => {
    e8.constructor.createProperty(n8, i7);
  };
  function n5(n8) {
    return (t5, o8) => o8 !== void 0 ? e5(n8, t5, o8) : i3(n8, t5);
  }

  // ../../../../node_modules/@lit/reactive-element/decorators/state.js
  function t3(t5) {
    return n5(__spreadProps(__spreadValues({}, t5), { state: true }));
  }

  // ../../../../node_modules/@lit/reactive-element/decorators/base.js
  var o5 = ({ finisher: e8, descriptor: t5 }) => (o8, n8) => {
    var r4;
    if (n8 === void 0) {
      const n9 = (r4 = o8.originalKey) !== null && r4 !== void 0 ? r4 : o8.key, i7 = t5 != null ? { kind: "method", placement: "prototype", key: n9, descriptor: t5(o8.key) } : __spreadProps(__spreadValues({}, o8), { key: n9 });
      return e8 != null && (i7.finisher = function(t6) {
        e8(t6, n9);
      }), i7;
    }
    {
      const r5 = o8.constructor;
      t5 !== void 0 && Object.defineProperty(o8, n8, t5(n8)), e8 == null || e8(r5, n8);
    }
  };

  // ../../../../node_modules/@lit/reactive-element/decorators/query.js
  function i4(i7, n8) {
    return o5({ descriptor: (o8) => {
      const t5 = { get() {
        var o9, n9;
        return (n9 = (o9 = this.renderRoot) === null || o9 === void 0 ? void 0 : o9.querySelector(i7)) !== null && n9 !== void 0 ? n9 : null;
      }, enumerable: true, configurable: true };
      if (n8) {
        const n9 = typeof o8 == "symbol" ? Symbol() : "__" + o8;
        t5.get = function() {
          var o9, t6;
          return this[n9] === void 0 && (this[n9] = (t6 = (o9 = this.renderRoot) === null || o9 === void 0 ? void 0 : o9.querySelector(i7)) !== null && t6 !== void 0 ? t6 : null), this[n9];
        };
      }
      return t5;
    } });
  }

  // ../../../../node_modules/@lit/reactive-element/decorators/query-assigned-elements.js
  var n6;
  var e6 = ((n6 = window.HTMLSlotElement) === null || n6 === void 0 ? void 0 : n6.prototype.assignedElements) != null ? (o8, n8) => o8.assignedElements(n8) : (o8, n8) => o8.assignedNodes(n8).filter((o9) => o9.nodeType === Node.ELEMENT_NODE);

  // ../utils/custom-event-dispatcher.js
  var dispatchCustomEvent = function(component, eventName, detail = null, bubbles = true, composed = true) {
    component.dispatchEvent(new CustomEvent(eventName, {
      bubbles,
      composed,
      detail
    }));
  };

  // ../utils/attribute-changed-event-dispatcher.js
  var dispatchAttributeChangedEvent = function(component, changedProperties, listOfProperties) {
    changedProperties.forEach((_value, key) => {
      const changedProperty = key.toString();
      const propertyInKebabCase = changedProperty.toString().replace(/([A-Z])/g, "-$1").toLowerCase();
      if (listOfProperties.includes(changedProperty)) {
        dispatchCustomEvent(component, `${propertyInKebabCase}-changed`, null, false);
      }
    });
  };

  // ../utils/control-state-mixin.ts
  var ControlStateMixin = (superClass) => {
    class ControlStateMixinElement extends superClass {
      constructor() {
        super(...arguments);
        this.disabled = void 0;
        this.tabindex = "0";
      }
      attributeChangedCallback(name, oldval, newval) {
        super.attributeChangedCallback(name, oldval, newval);
        if (name === "disabled") {
          this.setAttribute("aria-disabled", JSON.stringify(this.disabled));
        }
      }
      updated(changedProperties) {
        super.updated(changedProperties);
        if (changedProperties.has("disabled")) {
          this.handleDisabledChange();
        }
        const listOfProperties = ["disabled"];
        dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      }
      handleDisabledChange() {
        var _a4;
        if (this.disabled) {
          this.setAttribute("data-previous-tabindex", (_a4 = this.getAttribute("tabindex")) != null ? _a4 : "");
          this.removeAttribute("tabindex");
          this.blur();
        } else {
          const previousTabindex = this.dataset.previousTabindex;
          if (Number.isInteger(parseInt(previousTabindex != null ? previousTabindex : "", 10))) {
            this.setAttribute("tabindex", previousTabindex != null ? previousTabindex : "");
          }
        }
      }
    }
    __decorateClass([
      n5({ type: Boolean, reflect: true })
    ], ControlStateMixinElement.prototype, "disabled", 2);
    __decorateClass([
      n5({ type: String, reflect: true })
    ], ControlStateMixinElement.prototype, "tabindex", 2);
    return ControlStateMixinElement;
  };

  // ../utils/environment.js
  var ShuiEnvironment = {
    isTouchDevice: null,
    setIsTouchDevice(value) {
      this.isTouchDevice = value;
    }
  };

  // ../utils/modernizr.js
  !function(e8, n8, t5) {
    function o8(e9, n9) {
      return typeof e9 === n9;
    }
    function i7() {
      var e9, n9, t6, i8, s6, a4, r5;
      for (var l6 in u3)
        if (u3.hasOwnProperty(l6)) {
          if (e9 = [], n9 = u3[l6], n9.name && (e9.push(n9.name.toLowerCase()), n9.options && n9.options.aliases && n9.options.aliases.length))
            for (t6 = 0; t6 < n9.options.aliases.length; t6++)
              e9.push(n9.options.aliases[t6].toLowerCase());
          for (i8 = o8(n9.fn, "function") ? n9.fn() : n9.fn, s6 = 0; s6 < e9.length; s6++)
            a4 = e9[s6], r5 = a4.split("."), r5.length === 1 ? Modernizr2[r5[0]] = i8 : (!Modernizr2[r5[0]] || Modernizr2[r5[0]] instanceof Boolean || (Modernizr2[r5[0]] = new Boolean(Modernizr2[r5[0]])), Modernizr2[r5[0]][r5[1]] = i8), p3.push((i8 ? "" : "no-") + r5.join("-"));
        }
    }
    function s5(e9) {
      var n9 = h3.className, t6 = Modernizr2._config.classPrefix || "";
      if (m2 && (n9 = n9.baseVal), Modernizr2._config.enableJSClass) {
        var o9 = new RegExp("(^|\\s)" + t6 + "no-js(\\s|$)");
        n9 = n9.replace(o9, "$1" + t6 + "js$2");
      }
      Modernizr2._config.enableClasses && (n9 += " " + t6 + e9.join(" " + t6), m2 ? h3.className.baseVal = n9 : h3.className = n9);
    }
    function a3(e9, n9) {
      if (typeof e9 == "object")
        for (var t6 in e9)
          c3(e9, t6) && a3(t6, e9[t6]);
      else {
        e9 = e9.toLowerCase();
        var o9 = e9.split("."), i8 = Modernizr2[o9[0]];
        if (o9.length == 2 && (i8 = i8[o9[1]]), typeof i8 != "undefined")
          return Modernizr2;
        n9 = typeof n9 == "function" ? n9() : n9, o9.length == 1 ? Modernizr2[o9[0]] = n9 : (!Modernizr2[o9[0]] || Modernizr2[o9[0]] instanceof Boolean || (Modernizr2[o9[0]] = new Boolean(Modernizr2[o9[0]])), Modernizr2[o9[0]][o9[1]] = n9), s5([(n9 && n9 != 0 ? "" : "no-") + o9.join("-")]), Modernizr2._trigger(e9, n9);
      }
      return Modernizr2;
    }
    function r4() {
      return typeof n8.createElement != "function" ? n8.createElement(arguments[0]) : m2 ? n8.createElementNS.call(n8, "http://www.w3.org/2000/svg", arguments[0]) : n8.createElement.apply(n8, arguments);
    }
    function l5() {
      var e9 = n8.body;
      return e9 || (e9 = r4(m2 ? "svg" : "body"), e9.fake = true), e9;
    }
    function f2(e9, t6, o9, i8) {
      var s6, a4, f3, u4, d4 = "modernizr", c4 = r4("div"), p4 = l5();
      if (parseInt(o9, 10))
        for (; o9--; )
          f3 = r4("div"), f3.id = i8 ? i8[o9] : d4 + (o9 + 1), c4.appendChild(f3);
      return s6 = r4("style"), s6.type = "text/css", s6.id = "s" + d4, (p4.fake ? p4 : c4).appendChild(s6), p4.appendChild(c4), s6.styleSheet ? s6.styleSheet.cssText = e9 : s6.appendChild(n8.createTextNode(e9)), c4.id = d4, p4.fake && (p4.style.background = "", p4.style.overflow = "hidden", u4 = h3.style.overflow, h3.style.overflow = "hidden", h3.appendChild(p4)), a4 = t6(c4, e9), p4.fake ? (p4.parentNode.removeChild(p4), h3.style.overflow = u4, h3.offsetHeight) : c4.parentNode.removeChild(c4), !!a4;
    }
    var u3 = [], d3 = { _version: "3.6.0", _config: { classPrefix: "", enableClasses: true, enableJSClass: true, usePrefixes: true }, _q: [], on: function(e9, n9) {
      var t6 = this;
      setTimeout(function() {
        n9(t6[e9]);
      }, 0);
    }, addTest: function(e9, n9, t6) {
      u3.push({ name: e9, fn: n9, options: t6 });
    }, addAsyncTest: function(e9) {
      u3.push({ name: null, fn: e9 });
    } }, Modernizr2 = function() {
    };
    Modernizr2.prototype = d3, Modernizr2 = new Modernizr2();
    var c3, p3 = [], h3 = n8.documentElement, m2 = h3.nodeName.toLowerCase() === "svg";
    !function() {
      var e9 = {}.hasOwnProperty;
      c3 = o8(e9, "undefined") || o8(e9.call, "undefined") ? function(e10, n9) {
        return n9 in e10 && o8(e10.constructor.prototype[n9], "undefined");
      } : function(n9, t6) {
        return e9.call(n9, t6);
      };
    }(), d3._l = {}, d3.on = function(e9, n9) {
      this._l[e9] || (this._l[e9] = []), this._l[e9].push(n9), Modernizr2.hasOwnProperty(e9) && setTimeout(function() {
        Modernizr2._trigger(e9, Modernizr2[e9]);
      }, 0);
    }, d3._trigger = function(e9, n9) {
      if (this._l[e9]) {
        var t6 = this._l[e9];
        setTimeout(function() {
          var e10, o9;
          for (e10 = 0; e10 < t6.length; e10++)
            (o9 = t6[e10])(n9);
        }, 0), delete this._l[e9];
      }
    }, Modernizr2._q.push(function() {
      d3.addTest = a3;
    });
    var v2 = function() {
      var n9 = e8.matchMedia || e8.msMatchMedia;
      return n9 ? function(e9) {
        var t6 = n9(e9);
        return t6 && t6.matches || false;
      } : function(n10) {
        var t6 = false;
        return f2("@media " + n10 + " { #modernizr { position: absolute; } }", function(n11) {
          t6 = (e8.getComputedStyle ? e8.getComputedStyle(n11, null) : n11.currentStyle).position == "absolute";
        }), t6;
      };
    }();
    d3.mq = v2, Modernizr2.addTest("hovermq", v2("(hover)")), i7(), s5(p3), delete d3.addTest, delete d3.addAsyncTest;
    for (var g2 = 0; g2 < Modernizr2._q.length; g2++)
      Modernizr2._q[g2]();
    e8.Modernizr = Modernizr2;
  }(window, document);

  // ../utils/device-identifier.js
  var deviceIdentifier = {
    isTouch: false,
    isTouchDevice: function isTouchDevice() {
      if (ShuiEnvironment.isTouchDevice !== null) {
        this.isTouch = ShuiEnvironment.isTouchDevice;
        return this.isTouch;
      }
      if (!Modernizr.hovermq) {
        this.isTouch = true;
      } else {
        this.isTouch = false;
      }
      return this.isTouch;
    }
  };

  // ../utils/keycode.js
  var KEYCODE = {
    TAB: { keycode: 9, code: "Tab" },
    ENTER: { keycode: 13, code: "Enter" },
    SPACE: { keycode: 32, code: "Space" },
    ESCAPE: { keycode: 27, code: "Escape" },
    ARROW_LEFT: { keycode: 37, code: "ArrowLeft" },
    ARROW_UP: { keycode: 38, code: "ArrowUp" },
    ARROW_RIGHT: { keycode: 39, code: "ArrowRight" },
    ARROW_DOWN: { keycode: 40, code: "ArrowDown" },
    NUM_0: { keycode: 48, code: "Digit0" },
    NUM_1: { keycode: 49, code: "Digit1" },
    NUM_9: { keycode: 57, code: "Digit9" },
    NUMPAD_0: { keycode: 96, code: "Numpad0" },
    NUMPAD_1: { keycode: 97, code: "Numpad1" },
    NUMPAD_9: { keycode: 105, code: "Numpad9" },
    V: { keycode: 86, code: "KeyV" },
    C: { keycode: 67, code: "KeyC" },
    A: { keycode: 65, code: "KeyA" },
    X: { keycode: 88, code: "KeyX" },
    Y: { keycode: 89, code: "KeyY" },
    Z: { keycode: 90, code: "KeyZ" },
    NUMPAD_ENTER: { code: "NumpadEnter" }
  };

  // ../utils/keyboardInteraction.js
  function keyboardInteraction(e8, key) {
    return e8.code === key.code || e8.keyCode === key.keycode;
  }
  function numberkeyInteraction(e8) {
    return e8.keyCode >= KEYCODE.NUM_0.keycode && e8.keyCode <= KEYCODE.NUM_9.keycode || e8.code.match(/^Digit(\d)$/) || e8.keyCode >= KEYCODE.NUMPAD_0.keycode && e8.keyCode <= KEYCODE.NUMPAD_9.keycode || e8.code.match(/^Numpad(\d)$/);
  }

  // ../utils/focus-blur-mixin.ts
  var FocusBlurMixin = (superClass) => {
    class FocusBlurMixinElementextends extends superClass {
      handleFocus() {
        this.addEventListener("keyup", this.handleKeyup);
      }
      handleBlur() {
        var _a4;
        this.removeEventListener("keyup", this.handleKeyup);
        const focusItem = (_a4 = this.shadowRoot) == null ? void 0 : _a4.querySelector(".focus-item");
        if (focusItem) {
          focusItem.classList.remove("item-focused");
        } else {
          this.classList.remove("item-focused");
        }
      }
      firstUpdated() {
        this.addEventListener("focus", () => this.handleFocus());
        this.addEventListener("blur", () => this.handleBlur());
      }
      handleKeyup(e8) {
        var _a4;
        const focusItem = (_a4 = this.shadowRoot) == null ? void 0 : _a4.querySelector(".focus-item");
        if (keyboardInteraction(e8, KEYCODE.TAB) && !this.disabled) {
          if (focusItem) {
            focusItem.classList.add("item-focused");
          } else {
            this.classList.add("item-focused");
          }
        }
        if (keyboardInteraction(e8, KEYCODE.SPACE)) {
          this._spaceKeyAction();
        }
        if (keyboardInteraction(e8, KEYCODE.ENTER)) {
          this._enterKeyAction();
        }
      }
      _spaceKeyAction() {
        return;
      }
      _enterKeyAction() {
        return;
      }
    }
    return FocusBlurMixinElementextends;
  };

  // ../utils/interactive-area.js
  var DISABLED = true;
  var minTouchSize = `48px`;
  var Presets = {
    default: fixedMinSize(),
    defaultLeftAligned: {
      right: "initial",
      left: `0%`,
      top: `50%`,
      width: "100%",
      height: "100%",
      "min-width": minTouchSize,
      "min-height": minTouchSize,
      transform: "translate(0%,-50%)"
    },
    defaultRightAligned: {
      left: "initial",
      right: `0%`,
      top: `50%`,
      width: "100%",
      height: "100%",
      "min-width": minTouchSize,
      "min-height": minTouchSize,
      transform: "translate(0%,-50%)"
    }
  };
  function fixedMinSize({
    size = `var(--sh-interactive-area-min-touch-size, ${minTouchSize})`,
    width = size,
    height = size
  } = {}) {
    return {
      left: `50%`,
      top: `50%`,
      width: "100%",
      height: "100%",
      "outline-offset": "-1px",
      "min-width": width,
      "min-height": height,
      transform: "translate(-50%,-50%)"
    };
  }
  function extendInteractiveArea(selector = ":host", cssProps = Presets.default) {
    return DISABLED ? i`` : i`
        ${r(`${selector}:after {
      content: '';
      position: absolute;
      outline: var(--sh-interactive-area-outline, none);
      display: var(--sh-interactive-area-display, block);
      ${Object.entries(cssProps).map(([k2, v2]) => `${k2}: ${v2};`).join("\n")}
    }`)}
      `;
  }

  // ../utils/keyboardInteraction.ts
  function keyboardInteraction2(e8, key) {
    return e8.code === key.code || e8.keyCode === key.keycode;
  }

  // ../utils/keycode.ts
  var KEYCODE2 = {
    TAB: { keycode: 9, code: "Tab" },
    ENTER: { keycode: 13, code: "Enter" },
    SPACE: { keycode: 32, code: "Space" },
    ESCAPE: { keycode: 27, code: "Escape" },
    ARROW_LEFT: { keycode: 37, code: "ArrowLeft" },
    ARROW_UP: { keycode: 38, code: "ArrowUp" },
    ARROW_RIGHT: { keycode: 39, code: "ArrowRight" },
    ARROW_DOWN: { keycode: 40, code: "ArrowDown" },
    NUM_0: { keycode: 48, code: "Digit0" },
    NUM_1: { keycode: 49, code: "Digit1" },
    NUM_9: { keycode: 57, code: "Digit9" },
    NUMPAD_0: { keycode: 96, code: "Numpad0" },
    NUMPAD_1: { keycode: 97, code: "Numpad1" },
    NUMPAD_9: { keycode: 105, code: "Numpad9" },
    V: { keycode: 86, code: "KeyV" },
    C: { keycode: 67, code: "KeyC" },
    A: { keycode: 65, code: "KeyA" },
    X: { keycode: 88, code: "KeyX" },
    Y: { keycode: 89, code: "KeyY" },
    Z: { keycode: 90, code: "KeyZ" },
    NUMPAD_ENTER: { code: "NumpadEnter" }
  };

  // ../utils/window-location.js
  var windowLocation = {
    setWindowLocationHRef(url) {
      window.location.href = url;
    }
  };

  // ../sh-icon/src/sh-icon.font.lit.scss.js
  var sh_icon_font_lit_scss_default = i`/* native icons */
:host([icon=calculate]) .first:before {
  content: "\\E000";
}

:host([icon=calendar]) .first:before {
  content: "\\E001";
}

:host([icon=edit]) .first:before {
  content: "\\E003";
}

:host([icon=export]) .first:before {
  content: "\\E004";
}

:host([icon=favorite]) .first:before {
  content: "\\E005";
}

:host([icon=filter]) .first:before {
  content: "\\E006";
}

:host([icon=home]) .first:before {
  content: "\\E008";
}

:host([icon=import]) .first:before {
  content: "\\E009";
}

:host([icon=layout-1x1]) .first:before {
  content: "\\E00A";
}

:host([icon=layout-2x1]) .first:before {
  content: "\\E00B";
}

:host([icon=layout-2x2]) .first:before {
  content: "\\E00C";
}

:host([icon=layout-3x2]) .first:before {
  content: "\\E00D";
}

:host([icon=layout-4x4]) .first:before {
  content: "\\E00E";
}

:host([icon=lock]) .first:before {
  content: "\\E00F";
}

:host([icon=marker]) .first:before {
  content: "\\E010";
}

:host([icon=minus]) .first:before {
  content: "\\E011";
}

:host([icon=open]) .first:before {
  content: "\\E012";
}

:host([icon=pan]) .first:before {
  content: "\\E013";
}

:host([icon=patient]) .first:before {
  content: "\\E014";
}

:host([icon=patient-browser]) .first:before {
  content: "\\E015";
}

:host([icon=patient-scheduler]) .first:before {
  content: "\\E016";
}

:host([icon=pause]) .first:before {
  content: "\\E017";
}

:host([icon=play]) .first:before {
  content: "\\E018";
}

:host([icon=plus]) .first:before {
  content: "\\E019";
}

:host([icon=print]) .first:before {
  content: "\\E01A";
}

:host([icon=radiation]) .first:before {
  content: "\\E01B";
}

:host([icon=redo]) .first:before {
  content: "\\E01C";
}

:host([icon=rotate-2d]) .first:before {
  content: "\\E01D";
}

:host([icon=rotate-3d]) .first:before {
  content: "\\E01E";
}

:host([icon=save]) .first:before {
  content: "\\E01F";
}

:host([icon=save-as]) .first:before {
  content: "\\E020";
}

:host([icon=scanner]) .first:before {
  content: "\\E021";
}

:host([icon=search]) .first:before {
  content: "\\E022";
}

:host([icon=skip-backward]) .first:before {
  content: "\\E024";
}

:host([icon=skip-forward]) .first:before {
  content: "\\E025";
}

:host([icon=snapshot]) .first:before {
  content: "\\E026";
}

:host([icon=stop]) .first:before {
  content: "\\E027";
}

:host([icon=studies]) .first:before {
  content: "\\E028";
}

:host([icon=text]) .first:before {
  content: "\\E029";
}

:host([icon=undo]) .first:before {
  content: "\\E02A";
}

:host([icon=unlock]) .first:before {
  content: "\\E02B";
}

:host([icon=up]) .first:before,
:host([icon=arrow-face-up-l]) .first:before {
  content: "\\E02C";
}

:host([icon=windowing]) .first:before {
  content: "\\E02D";
}

:host([icon=zoom]) .first:before {
  content: "\\E02E";
}

:host([icon=zoom-minus]) .first:before {
  content: "\\E02F";
}

:host([icon=zoom-plus]) .first:before {
  content: "\\E030";
}

:host([icon=menu]) .first:before {
  content: "\\E035";
}

:host([icon=left-s]) .first:before,
:host([icon=arrow-face-left-s]) .first:before {
  content: "\\E036";
}

:host([icon=right-s]) .first:before,
:host([icon=arrow-face-right-s]) .first:before {
  content: "\\E037";
}

:host([icon=up-s]) .first:before,
:host([icon=arrow-face-up-s]) .first:before {
  content: "\\E038";
}

:host([icon=arrow-down-s]) .first:before,
:host([icon=arrow-line-down-s]) .first:before {
  content: "\\E039";
}

:host([icon=arrow-left-s]) .first:before,
:host([icon=arrow-line-left-s]) .first:before {
  content: "\\E03A";
}

:host([icon=arrow-right-s]) .first:before,
:host([icon=arrow-line-right-s]) .first:before {
  content: "\\E03B";
}

:host([icon=arrow-up-s]) .first:before,
:host([icon=arrow-line-up-s]) .first:before {
  content: "\\E03C";
}

:host([icon=down-s]) .first:before,
:host([icon=arrow-face-down-s]) .first:before {
  content: "\\E03D";
}

:host([icon=chapter]) .first:before {
  content: "\\E03E";
}

:host([icon=document]) .first:before {
  content: "\\E03F";
}

:host([icon=page]) .first:before {
  content: "\\E040";
}

:host([icon=pdf]) .first:before {
  content: "\\E041";
}

:host([icon=more]) .first:before {
  content: "\\E042";
}

:host([icon=grid-3d]) .first:before {
  content: "\\E043";
}

:host([icon=backward-4d]) .first:before {
  content: "\\E044";
}

:host([icon=data-correct-4d]) .first:before {
  content: "\\E045";
}

:host([icon=data-correct-4d]) .first:after {
  content: "\\EDDE";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=forward-4d]) .first:before {
  content: "\\E046";
}

:host([icon=series-create-4d]) .first:before {
  content: "\\E047";
}

:host([icon=series-create-4d]) .first:after {
  content: "\\EDDD";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=series-split-4d]) .first:before {
  content: "\\E048";
}

:host([icon=series-split-4d]) .first:after {
  content: "\\EDD8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=ablation-catheter-settings]) .first:before {
  content: "\\E049";
}

:host([icon=ablation-catheter-connection-settings]) .first:before {
  content: "\\E04A";
}

:host([icon=acquisition-note]) .first:before {
  content: "\\E04B";
}

:host([icon=acquisition-time]) .first:before {
  content: "\\E04C";
}

:host([icon=acquisition-wizard]) .first:before {
  content: "\\E04D";
}

:host([icon=action-failed]) .first:before {
  content: "\\E04E";
}

:host([icon=add-circle]) .first:before,
:host([icon=circle-add]) .first:before {
  content: "\\E04F";
}

:host([icon=add-line]) .first:before,
:host([icon=line-add]) .first:before {
  content: "\\E050";
}

:host([icon=add-needle]) .first:before,
:host([icon=needle-add]) .first:before {
  content: "\\E051";
}

:host([icon=add-polygon]) .first:before,
:host([icon=polygon-add]) .first:before {
  content: "\\E052";
}

:host([icon=add-rectangle]) .first:before {
  content: "\\E053";
}

:host([icon=add-snapshot]) .first:before,
:host([icon=add-snapshot-to-finding]) .first:before {
  content: "\\E054";
}

:host([icon=adjust-c-arm]) .first:before,
:host([icon=adjust-c-arm-3d]) .first:before {
  content: "\\E057";
}

:host([icon=adjust-gamma-level]) .first:before {
  content: "\\E058";
}

:host([icon=adjust-needle]) .first:before {
  content: "\\E059";
}

:host([icon=adjust-objects]) .first:before {
  content: "\\E05A";
}

:host([icon=adjust-virtual-stent]) .first:before {
  content: "\\E05B";
}

:host([icon=adjustment-volume-hide]) .first:before {
  content: "\\E05C";
}

:host([icon=adjustment-volume-hide]) .first:after {
  content: "\\EDE0";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=airways-measurement]) .first:before {
  content: "\\E05D";
}

:host([icon=airways-measurement]) .first:after {
  content: "\\EDDF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=algorithm-parameters-default]) .first:before {
  content: "\\E05E";
}

:host([icon=anatomical-background]) .first:before {
  content: "\\E05F";
}

:host([icon=angio-view]) .first:before {
  content: "\\E060";
}

:host([icon=annulus-plane]) .first:before {
  content: "\\E061";
}

:host([icon=annulus-plane]) .first:after {
  content: "\\EDEE";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=aorta-reference-region]) .first:before {
  content: "\\E062";
}

:host([icon=aorta-reference-region]) .first:after {
  content: "\\EDED";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=aortic-valve-plane]) .first:before {
  content: "\\E063";
}

:host([icon=aortic-valve-plane]) .first:after {
  content: "\\EDEC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=apply-segment-orientation]) .first:before {
  content: "\\E064";
}

:host([icon=apply-segment-orientation]) .first:after {
  content: "\\EDEB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=arrow-down-2]) .first:before {
  content: "\\E065";
}

:host([icon=arrow-left-2]) .first:before {
  content: "\\E066";
}

:host([icon=arrow-right-2]) .first:before {
  content: "\\E067";
}

:host([icon=arrow-up-2]) .first:before {
  content: "\\E068";
}

:host([icon=auto-iso]) .first:before {
  content: "\\E06A";
}

:host([icon=auto-iso]) .first:after {
  content: "\\EE42";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=auto-map-image]) .first:before {
  content: "\\E06B";
}

:host([icon=auto-map-image]) .first:after {
  content: "\\EE41";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=auto-pixelshift]) .first:before {
  content: "\\E06C";
}

:host([icon=auto-segmentation]) .first:before {
  content: "\\E06D";
}

:host([icon=c-arm]) .first:before {
  content: "\\E06E";
}

:host([icon=auto-tod]) .first:before {
  content: "\\E06F";
}

:host([icon=arrow-down]) .first:before,
:host([icon=arrow-line-down-l]) .first:before {
  content: "\\E070";
}

:host([icon=arrow]) .first:before {
  content: "\\E071";
}

:host([icon=angle]) .first:before {
  content: "\\E072";
}

:host([icon=arrow-up]) .first:before,
:host([icon=arrow-line-up-l]) .first:before {
  content: "\\E073";
}

:host([icon=arrow-right]) .first:before,
:host([icon=arrow-line-right-l]) .first:before {
  content: "\\E074";
}

:host([icon=arrow-left]) .first:before,
:host([icon=arrow-line-left-l]) .first:before {
  content: "\\E075";
}

:host([icon=three-point-mode]) .first:before {
  content: "\\E076";
}

:host([icon=artery-define]) .first:before {
  content: "\\E077";
}

:host([icon=artery-define]) .first:after {
  content: "\\EDEA";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=balance-out-pressure]) .first:before {
  content: "\\E078";
}

:host([icon=battery-1-vertical]) .first:before {
  content: "\\E079";
}

:host([icon=battery-2-vertical]) .first:before {
  content: "\\E07A";
}

:host([icon=battery-3-horizontal]) .first:before {
  content: "\\E07B";
}

:host([icon=battery-3-vertical]) .first:before {
  content: "\\E07C";
}

:host([icon=battery-4-vertical]) .first:before {
  content: "\\E07D";
}

:host([icon=battery-charging]) .first:before,
:host([icon=battery-charging-horizontal]) .first:before {
  content: "\\E07E";
}

:host([icon=battery-empty-horizontal]) .first:before {
  content: "\\E07F";
}

:host([icon=battery-full-horizontal]) .first:before {
  content: "\\E080";
}

:host([icon=battery-full-vertical]) .first:before {
  content: "\\E081";
}

:host([icon=battery-1-horizontal]) .first:before,
:host([icon=battery-low-horizontal]) .first:before,
:host([icon=battery-1-horizontal]) .first:before {
  content: "\\E082";
}

:host([size=xs][icon=battery-2-horizontal]) .first:before {
  content: "\\ED39";
}

:host([size=xs][icon=battery-3-horizontal]) .first:before {
  content: "\\ED3A";
}

:host([size=xs][icon=battery-4-horizontal]) .first:before {
  content: "\\ED3B";
}

:host([icon=bd-vessel-assign]) .first:before,
:host([icon=bd-vessel-align]) .first:before {
  content: "\\E083";
}

:host([icon=black-box]) .first:before {
  content: "\\E084";
}

:host([icon=blood-lv-edit]) .first:before {
  content: "\\E085";
}

:host([icon=blood-lv-edit]) .first:after {
  content: "\\EE40";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=blood-removal]) .first:before {
  content: "\\E086";
}

:host([icon=blood-removal]) .first:after {
  content: "\\EDE9";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=blood-volume]) .first:before {
  content: "\\E087";
}

:host([icon=blood-volume]) .first:after {
  content: "\\EDE8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bold]) .first:before {
  content: "\\E088";
}

:host([icon=bone-cad-active]) .first:before {
  content: "\\E089";
}

:host([icon=bone-cad-display]) .first:before {
  content: "\\E08A";
}

:host([icon=bone-removal]) .first:before {
  content: "\\E08B";
}

:host([icon=bone-removal]) .first:after {
  content: "\\EDE7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bone-removal-auto]) .first:before {
  content: "\\E08C";
}

:host([icon=bone-removal-auto]) .first:after {
  content: "\\EDE6";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bone-removal-body]) .first:before {
  content: "\\E08D";
}

:host([icon=bone-removal-body-de]) .first:before {
  content: "\\E08E";
}

:host([icon=bone-removal-edit]) .first:before {
  content: "\\E08F";
}

:host([icon=bone-removal-edit]) .first:after {
  content: "\\EDE5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bone-removal-head]) .first:before {
  content: "\\E090";
}

:host([icon=bone-removal-head-de]) .first:before {
  content: "\\E091";
}

:host([icon=bone-removal-leg]) .first:before {
  content: "\\E092";
}

:host([icon=bone-removal-structure-isolation]) .first:before {
  content: "\\E093";
}

:host([icon=bone-removal-structure-isolation]) .first:after {
  content: "\\EDE4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bone-removal-tools]) .first:before {
  content: "\\E094";
}

:host([icon=bone-removal-tools]) .first:after {
  content: "\\EDE3";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bones-hide]) .first:before {
  content: "\\E095";
}

:host([icon=bones-hide]) .first:after {
  content: "\\EDE1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bones-show]) .first:before {
  content: "\\E096";
}

:host([icon=bones-show]) .first:after {
  content: "\\EDE2";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=bookmark-add]) .first:before {
  content: "\\E097";
}

:host([icon=bookmark-segment]) .first:before {
  content: "\\E098";
}

:host([icon=brain]) .first:before {
  content: "\\E099";
}

:host([icon=breast-biopsy]) .first:before {
  content: "\\E09A";
}

:host([icon=breast-lesion-marker]) .first:before {
  content: "\\E09B";
}

:host([icon=brightness-decrease]) .first:before {
  content: "\\E09C";
}

:host([icon=brightness-increase]) .first:before {
  content: "\\E09D";
}

:host([icon=broad-worklist-query]) .first:before {
  content: "\\E09E";
}

:host([icon=bullets]) .first:before {
  content: "\\E09F";
}

:host([icon=cable-winder]) .first:before {
  content: "\\E0A0";
}

:host([icon=calcium-remove]) .first:before {
  content: "\\E0A1";
}

:host([icon=calcium-remove]) .first:after {
  content: "\\EE33";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=calculation-cancel]) .first:before {
  content: "\\E0A2";
}

:host([icon=caliper-measurement]) .first:before {
  content: "\\E0A3";
}

:host([icon=cardiac-layout-edit]) .first:before {
  content: "\\E0A4";
}

:host([icon=cardiac-layout-edit]) .first:after {
  content: "\\EE3F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cardiac-mask-edit]) .first:before {
  content: "\\E0A5";
}

:host([icon=cardiac-mask-edit]) .first:after {
  content: "\\EE36";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cardiac-output]) .first:before {
  content: "\\E0A6";
}

:host([icon=care-position]) .first:before {
  content: "\\E0A7";
}

:host([icon=care-position]) .first:after {
  content: "\\EE35";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cascoring-show-original]) .first:before {
  content: "\\E0A8";
}

:host([icon=catheter-pullback]) .first:before {
  content: "\\E0A9";
}

:host([icon=cava-calculate]) .first:before {
  content: "\\E0AA";
}

:host([icon=cava-calculate]) .first:after {
  content: "\\EE20";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cava-prepare]) .first:before {
  content: "\\E0AB";
}

:host([icon=cava-prepare]) .first:after {
  content: "\\EE1F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chamber-left]) .first:before {
  content: "\\E0AC";
}

:host([icon=chamber-left]) .first:after {
  content: "\\ECBB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chamber-middle]) .first:before {
  content: "\\E0AD";
}

:host([icon=chamber-middle]) .first:after {
  content: "\\ECBC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chamber-right]) .first:before {
  content: "\\E0AE";
}

:host([icon=chamber-right]) .first:after {
  content: "\\ECBD";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=change-view]) .first:before {
  content: "\\E0AF";
}

:host([icon=change-view]) .first:after {
  content: "\\EE1E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cinematic-vrt]) .first:before {
  content: "\\E0B0";
}

:host([icon=cinematic-vrt]) .first:after {
  content: "\\E9F6";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=cinematic-vrt]) .second:before {
  content: "\\EE31";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=cinematic-vrt]) .second:after {
  content: "\\EE32";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=coil-information]) .first:before {
  content: "\\E0B2";
}

:host([icon=coils-hide]) .first:before {
  content: "\\E0B3";
}

:host([icon=coils-hide]) .first:after {
  content: "\\EE1D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=colon-show-marked]) .first:before {
  content: "\\E0B4";
}

:host([icon=colon-show-marked]) .first:after {
  content: "\\EE1C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=colon-solid-view]) .first:before {
  content: "\\E0B5";
}

:host([icon=combine]) .first:before,
:host([icon=structure-combine]) .first:before {
  content: "\\E0B6";
}

:host([icon=compare-protocols]) .first:before {
  content: "\\E0B7";
}

:host([icon=compute-maps]) .first:before {
  content: "\\E0B8";
}

:host([icon=configurations-sync]) .first:before,
:host([icon=sync-configurations]) .first:before {
  content: "\\E0B9";
}

:host([icon=contour-copy]) .first:before {
  content: "\\E0BB";
}

:host([icon=contour-delete-all]) .first:before {
  content: "\\E0BC";
}

:host([icon=contour-delete-single]) .first:before {
  content: "\\E0BD";
}

:host([icon=contour-draw-new]) .first:before {
  content: "\\E0BE";
}

:host([icon=contour-edit]) .first:before {
  content: "\\E0BF";
}

:host([icon=contour-edit-slices]) .first:before {
  content: "\\E0C0";
}

:host([icon=contour-preview]) .first:before {
  content: "\\E0C1";
}

:host([icon=contour-preview]) .first:after {
  content: "\\EE15";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=contour-redraw]) .first:before {
  content: "\\E0C2";
}

:host([icon=contour-reflect]) .first:before {
  content: "\\E0C3";
}

:host([icon=contour-threshold]) .first:before {
  content: "\\E0C5";
}

:host([icon=contour-undo]) .first:before {
  content: "\\E0C6";
}

:host([icon=contours-compute]) .first:before {
  content: "\\E0C7";
}

:host([icon=contours-compute]) .first:after {
  content: "\\EE3D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=contour-rv-edit]) .first:before,
:host([icon=contours-edit]) .first:before {
  content: "\\E0C8";
}

:host([icon=contour-rv-edit]) .first:after,
:host([icon=contours-edit]) .first:after {
  content: "\\EE3E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=contours-reset]) .first:before {
  content: "\\E0C9";
}

:host([icon=contours-reset]) .first:after {
  content: "\\EE14";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=contours-show]) .first:before {
  content: "\\E0CA";
}

:host([icon=contours-show]) .first:after {
  content: "\\EE13";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=contrast-agent-administration-applied]) .first:before,
:host([icon=contrast-agent-completed]) .first:before {
  content: "\\E0CB";
}

:host([icon=contrast-decrease]) .first:before {
  content: "\\E0CC";
}

:host([icon=contrast-increase]) .first:before {
  content: "\\E0CD";
}

:host([icon=contrast-optimum]) .first:before {
  content: "\\E0CE";
}

:host([icon=control-panel]) .first:before {
  content: "\\E0CF";
}

:host([icon=convert-to]) .first:before {
  content: "\\E0D0";
}

:host([icon=copy-and-go]) .first:before {
  content: "\\E0D1";
}

:host([icon=copy-image-to-clipboard]) .first:before {
  content: "\\E0D2";
}

:host([icon=copy-paste]) .first:before {
  content: "\\E0D3";
}

:host([icon=copy-reference-new]) .first:before {
  content: "\\E0D4";
}

:host([icon=copy-reference-source]) .first:before {
  content: "\\E0D5";
}

:host([icon=copy-reference-target]) .first:before {
  content: "\\E0D6";
}

:host([icon=coronary-tree]) .first:before {
  content: "\\E0DA";
}

:host([icon=correlated-cursors]) .first:before {
  content: "\\E0DB";
}

:host([icon=create-view-catheter-lab]) .first:before {
  content: "\\E0DC";
}

:host([icon=csi-matrix-interpolated]) .first:before {
  content: "\\E0DD";
}

:host([icon=csi-matrix-scan]) .first:before {
  content: "\\E0DE";
}

:host([icon=ct-laser-zero]) .first:before {
  content: "\\E0DF";
}

:host([icon=ct-laser-zero]) .first:after {
  content: "\\EE12 ";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cut]) .first:before {
  content: "\\E0E0";
}

:host([icon=cutline-3d-draw]) .first:before {
  content: "\\E0E1";
}

:host([icon=down]) .first:before,
:host([icon=arrow-face-down-l]) .first:before {
  content: "\\E0E3";
}

:host([icon=distance-line]) .first:before {
  content: "\\E0E4";
}

:host([icon=delete]) .first:before {
  content: "\\E0E5";
}

:host([icon=checkmark]) .first:before {
  content: "\\E0E6";
}

:host([icon=contrast-administration]) .first:before,
:host([icon=injection]) .first:before {
  content: "\\E0E7";
}

:host([icon=scheduled]) .first:before,
:host([icon=time]) .first:before {
  content: "\\E0E8";
}

:host([icon=patient-scan]) .first:before {
  content: "\\E0E9";
}

:host([icon=reconstruction-running]) .first:before {
  content: "\\E0EA";
}

:host([icon=circle-filled]) .first:before {
  content: "\\E0EB";
}

:host([icon=circle-half]) .first:before {
  content: "\\E0EC";
}

:host([icon=circle-outline]) .first:before {
  content: "\\E0ED";
}

:host([icon=apps]) .first:before {
  content: "\\E0EE";
}

:host([icon=camera]) .first:before,
:host([icon=movie]) .first:before {
  content: "\\E0EF";
}

:host([icon=library]) .first:before {
  content: "\\E0F0";
}

:host([icon=upload-partner]) .first:before {
  content: "\\E0F7";
}

:host([icon=upload-user]) .first:before {
  content: "\\E0F9";
}

:host([icon=reject]) .first:before {
  content: "\\E0F3";
}

:host([icon=sort-custom]) .first:before {
  content: "\\E0F4";
}

:host([icon=standby]) .first:before {
  content: "\\E0F5";
}

:host([icon=user-avatar]) .first:before {
  content: "\\E0F8";
}

:host([icon=show]) .first:before {
  content: "\\E101";
}

:host([icon=pause-circle]) .first:before {
  content: "\\E121";
}

:host([icon=gantry-tilt-zero]) .first:before {
  content: "\\E127";
}

:host([icon=go-to-console]) .first:before {
  content: "\\E128";
}

:host([icon=table-height]) .first:before {
  content: "\\E12B";
}

:host([icon=table-in]) .first:before {
  content: "\\E12C";
}

:host([icon=table-longitudinal]) .first:before {
  content: "\\E12D";
}

:host([icon=table-out]) .first:before {
  content: "\\E12E";
}

:host([icon=voice-command-record]) .first:before {
  content: "\\E12F";
}

:host([icon=heart-bodypart]) .first:before {
  content: "\\E131";
}

:host([icon=image]) .first:before {
  content: "\\E132";
}

:host([icon=edit-partner]) .first:before,
:host([icon=partner-edit]) .first:before {
  content: "\\E136";
}

:host([icon=edit-user]) .first:before,
:host([icon=user-edit]) .first:before {
  content: "\\E137";
}

:host([icon=logoff]) .first:before {
  content: "\\E138";
}

:host([icon=invert]) .first:before {
  content: "\\E145";
}

:host([icon=image-text-custom]) .first:before {
  content: "\\E141";
}

:host([icon=image-text-configuration]) .first:before {
  content: "\\E140";
}

:host([icon=image-text-full]) .first:before {
  content: "\\E142";
}

:host([icon=rotate-left]) .first:before {
  content: "\\E14B";
}

:host([icon=rotate-right]) .first:before {
  content: "\\E14E";
}

:host([icon=finding-add]) .first:before {
  content: "\\E139";
}

:host([icon=finding-add]) .first:before {
  content: "\\E139";
}

:host([icon=mip]) .first:before {
  content: "\\E152";
}

:host([icon=roi-circle]) .first:before {
  content: "\\E153";
}

:host([icon=roi-ellipsis]) .first:before {
  content: "\\E154";
}

:host([icon=roi-freehand]) .first:before {
  content: "\\E155";
}

:host([icon=roi-polygonal]) .first:before {
  content: "\\E156";
}

:host([icon=roi-rectangle]) .first:before {
  content: "\\E157";
}

:host([icon=scroll]) .first:before {
  content: "\\E15A";
}

:host([icon=vrt]) .first:before {
  content: "\\E158";
}

:host([icon=vrt]) .first:after {
  content: "\\EE33";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=vrt]) .second:before {
  content: "\\EE31";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=vrt]) .second:after {
  content: "\\EE32";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=delete-number]) .first:before {
  content: "\\E901";
}

:host([icon=compass-direction]) .first:before {
  content: "\\E900";
}

:host([icon=speakers-off]) .first:before {
  content: "\\E904";
}

:host([icon=speakers-on]) .first:before {
  content: "\\E905";
}

:host([icon=workstation-free-fd]) .first:before {
  content: "\\E933";
}

:host([icon=timer]) .first:before {
  content: "\\E92f";
}

:host([icon=switch-monitor]) .first:before {
  content: "\\E92e";
}

:host([icon=signal-strength-5]) .first:before {
  content: "\\E92C";
}

:host([icon=signal-strength-0]) .first:before {
  content: "\\E92C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=show-all-monitors]) .first:before {
  content: "\\E923";
}

:host([icon=reset]) .first:before {
  content: "\\E91E";
}

:host([icon=patient-size-small]) .first:before {
  content: "\\E91B";
}

:host([icon=patient-size-large]) .first:before {
  content: "\\E91A";
}

:host([icon=open-chat]) .first:before {
  content: "\\E919";
}

:host([icon=focus-small]) .first:before {
  content: "\\E914";
}

:host([icon=focus-big]) .first:before {
  content: "\\E913";
}

:host([icon=fluoroscopy-control]) .first:before {
  content: "\\E912";
}

:host([icon=exposure-time-increase]) .first:before {
  content: "\\E911";
}

:host([icon=exposure-time-decrease]) .first:before {
  content: "\\E910";
}

:host([icon=expert-i]) .first:before {
  content: "\\E90F";
}

:host([icon=dual-monitor-mode]) .first:before {
  content: "\\E90E";
}

:host([icon=channel-3]) .first:before {
  content: "\\E909";
}

:host([icon=channel-2]) .first:before {
  content: "\\E908";
}

:host([icon=channel-1]) .first:before {
  content: "\\E907";
}

:host([icon=send-message]) .first:before {
  content: "\\E906";
}

:host([icon=like]) .first:before {
  content: "\\E93D";
}

:host([icon=dislike]) .first:before {
  content: "\\E939";
}

:host([icon=double-arrow-face-up-s]) .first:before {
  content: "\\E941";
}

:host([icon=double-arrow-face-down-s]) .first:before {
  content: "\\E93E";
}

:host([icon=double-arrow-face-left-s]) .first:before {
  content: "\\E93F";
}

:host([icon=double-arrow-face-right-s]) .first:before {
  content: "\\E940";
}

:host([icon=sync-on]) .first:before {
  content: "\\E94B";
}

:host([icon=share]) .first:before {
  content: "\\E948";
}

:host([icon=laser]) .first:before {
  content: "\\E943";
}

:host([icon=monitors]) .first:before,
:host([icon=monitor]) .first:before {
  content: "\\E942";
}

:host([icon=positive-negative]) .first:before {
  content: "\\E94E";
}

:host([icon=connected-tablet-0]) .first:before {
  content: "\\E95C";
}

:host([icon=connected-tablet-1]) .first:before {
  content: "\\E95D";
}

:host([icon=connected-tablet-2]) .first:before {
  content: "\\E95E";
}

:host([icon=connected-tablet-3]) .first:before {
  content: "\\E95F";
}

:host([icon=connected-tablet-4]) .first:before {
  content: "\\E960";
}

:host([icon=connected-tablet-5]) .first:before {
  content: "\\E961";
}

:host([icon=rating]) .first:before {
  content: "\\E922";
}

:host([icon=delivery]) .first:before {
  content: "\\E962";
}

:host([icon=envelope]) .first:before {
  content: "\\E963";
}

:host([icon=eraser]) .first:before {
  content: "\\E964";
}

:host([icon=financial-value]) .first:before {
  content: "\\E965";
}

:host([icon=image-quality-check]) .first:before {
  content: "\\E966";
}

:host([icon=refresh]) .first:before {
  content: "\\E96F";
}

:host([icon=scanner-settings]) .first:before {
  content: "\\E970";
}

:host([icon=series]) .first:before {
  content: "\\E971";
}

:host([icon=upload]) .first:before {
  content: "\\E974";
}

:host([icon=colon-solid-view]) .first:before {
  content: "\\E975";
}

:host([icon=drug-pharmaceutical]) .first:before,
:host([icon=medications]) .first:before {
  content: "\\E976";
}

:host([icon=liver]) .first:before {
  content: "\\E979";
}

:host([icon=mark-left]) .first:before {
  content: "\\E97C";
}

:host([icon=mark-right]) .first:before {
  content: "\\E97D";
}

:host([icon=surgery]) .first:before {
  content: "\\E97E";
}

:host([icon=blood-pressure]) .first:before {
  content: "\\E98E";
}

:host([icon=dashboard]) .first:before {
  content: "\\E9A2";
}

:host([icon=doctor-visit]) .first:before {
  content: "\\E9A6";
}

:host([icon=feedback-add]) .first:before {
  content: "\\E9A5";
}

:host([icon=group-series-configuration]) .first:before {
  content: "\\E9A4";
}

:host([icon=heart-chart]) .first:before {
  content: "\\E9A3";
}

:host([icon=kitmed-report]) .first:before {
  content: "\\E9AB";
}

:host([icon=locum-circles]) .first:before {
  content: "\\E9AC";
}

:host([icon=note-add]) .first:before {
  content: "\\E9B9";
}

:host([icon=observations]) .first:before {
  content: "\\E9B8";
}

:host([icon=open-tasks-add]) .first:before {
  content: "\\E9B7";
}

:host([icon=patient-insurance]) .first:before {
  content: "\\E9B6";
}

:host([icon=patient-measurement]) .first:before {
  content: "\\E9B5";
}

:host([icon=result-group-configuration]) .first:before {
  content: "\\E9B4";
}

:host([icon=studies-medical]) .first:before {
  content: "\\E9B3";
}

:host([icon=web-data-entry]) .first:before {
  content: "\\E9B2";
}

:host([icon=weight-measurement]) .first:before {
  content: "\\E9B1";
}

:host([icon=change-password]) .first:before {
  content: "\\E9BC";
}

:host([icon=comment]) .first:before {
  content: "\\E9CA";
}

:host([icon=kitpro]) .first:before {
  content: "\\E9C9";
}

:host([icon=histogram]) .first:before {
  content: "\\E9C8";
}

:host([icon=fine-tuning]) .first:before {
  content: "\\E9C7";
}

:host([icon=download]) .first:before {
  content: "\\E9C6";
}

:host([icon=wellbeing-good]) .first:before,
:host([icon=good]) .first:before {
  content: "\\E9C3";
}

:host([icon=trending-graph]) .first:before {
  content: "\\E9C2";
}

:host([icon=report-new]) .first:before {
  content: "\\E9C1";
}

:host([icon=report]) .first:before {
  content: "\\E9C0";
}

:host([icon=patient-add]) .first:before {
  content: "\\E9BF";
}

:host([icon=open-tasks]) .first:before {
  content: "\\E9BE";
}

:host([icon=message-history]) .first:before {
  content: "\\E9BD";
}

:host([icon=fullscreen]) .first:before {
  content: "\\E9CE";
}

:host([icon=exit-fullscreen]) .first:before {
  content: "\\E9CD";
}

:host([icon=alpha-blending]) .first:before {
  content: "\\E9F2";
}

:host([icon=central-library]) .first:before {
  content: "\\E9F1";
}

:host([icon=cloud-download]) .first:before {
  content: "\\E9F0";
}

:host([icon=cloud-upload]) .first:before {
  content: "\\E9EE";
}

:host([icon=factory-default]) .first:before {
  content: "\\E9EA";
}

:host([icon=group-chat]) .first:before {
  content: "\\E9E7";
}

:host([icon=manual-phasing]) .first:before {
  content: "\\E9DF";
}

:host([icon=music-via-headphones]) .first:before {
  content: "\\E9DE";
}

:host([icon=music-via-speakers]) .first:before {
  content: "\\E9DD";
}

:host([icon=nerve-stimulation]) .first:before {
  content: "\\E9DC";
}

:host([icon=not-tablet-approved]) .first:before {
  content: "\\E9DB";
}

:host([icon=qr-code]) .first:before {
  content: "\\E9D6";
}

:host([icon=report-template-edit]) .first:before {
  content: "\\E9CF";
}

:host([icon=report-template-assignment]) .first:before {
  content: "\\E9D0";
}

:host([icon=rt-laser-switch]) .first:before {
  content: "\\E98B";
}

:host([icon=rt-laser-zero]) .first:before {
  content: "\\E991";
}

:host([icon=sar-simulation-limit-exceeded]) .first:before,
:host([icon=sar-stimulation-limit-exceeded]) .first:before {
  content: "\\E994";
}

:host([icon=spine]) .first:before {
  content: "\\E9FA";
}

:host([icon=user]) .first:before {
  content: "\\E9F9";
}

:host([icon=ventilation]) .first:before {
  content: "\\E9F6";
}

:host([icon=workflow-settings-active-mode]) .first:before {
  content: "\\E9F5";
}

:host([icon=workflow-settings-inactive-mode]) .first:before {
  content: "\\E9F4";
}

:host([icon=workflow-switch]) .first:before {
  content: "\\E9F3";
}

:host([icon=desktop-sharing]) .first:before {
  content: "\\EA08";
}

:host([icon=maximize]) .first:before {
  content: "\\EA04";
}

:host([icon=minimize]) .first:before {
  content: "\\EA03";
}

:host([icon=restore]) .first:before {
  content: "\\EA01";
}

:host([icon=quick-guidance]) .first:before {
  content: "\\EA02";
}

:host([icon=workstation]) .first:before {
  content: "\\E9FF";
}

:host([icon=zoom-pan]) .first:before {
  content: "\\EA0F";
}

:host([icon=dicom-data-not-included]) .first:before {
  content: "\\EA22";
}

:host([icon=image-export]) .first:before {
  content: "\\EA3C";
}

:host([icon=job-view]) .first:before {
  content: "\\EA3E";
}

:host([icon=patient-reject]) .first:before {
  content: "\\EA3F";
}

:host([icon=store-snapshot-segment]) .first:before {
  content: "\\EA40";
}

:host([icon=distance-ratio]) .first:before {
  content: "\\EA46";
}

:host([icon=injection-ready]) .first:before {
  content: "\\EA49";
}

:host([icon=pause-add]) .first:before {
  content: "\\EA53";
}

:host([icon=pause-remove]) .first:before {
  content: "\\EA54";
}

:host([icon=location-pin]) .first:before {
  content: "\\EA5B";
}

:host([icon=procedure-add]) .first:before {
  content: "\\EA5C";
}

:host([icon=structured-report]) .first:before {
  content: "\\EA5D";
}

:host([icon=study-pass]) .first:before {
  content: "\\EA5E";
}

:host([icon=blood-glucose]) .first:before {
  content: "\\EA61";
}

:host([icon=camera-enable]) .first:before {
  content: "\\EA62";
}

:host([icon=camera-swap]) .first:before {
  content: "\\EA63";
}

:host([icon=connect-to-hospital]) .first:before {
  content: "\\EA64";
}

:host([icon=hang-up-call]) .first:before {
  content: "\\EA65";
}

:host([icon=hospital-add]) .first:before {
  content: "\\EA66";
}

:host([icon=hospital]) .first:before {
  content: "\\EA67";
}

:host([icon=manage-message-templates]) .first:before {
  content: "\\EA68";
}

:host([icon=microphone-enable]) .first:before {
  content: "\\EA69";
}

:host([icon=phone]) .first:before {
  content: "\\EA6A";
}

:host([icon=questionnaire-symptom]) .first:before {
  content: "\\EA6B";
}

:host([icon=start-video-call]) .first:before {
  content: "\\EA6C";
}

:host([icon=step-count]) .first:before {
  content: "\\EA6D";
}

:host([icon=thermometer]) .first:before {
  content: "\\EA6E";
}

:host([icon=video-call-accept]) .first:before {
  content: "\\EA6F";
}

:host([icon=active-directory]) .first:before {
  content: "\\EA70";
}

:host([icon=brightness]) .first:before {
  content: "\\EA71";
}

:host([icon=delete-all]) .first:before {
  content: "\\EA78";
}

:host([icon=favorite-off]) .first:before {
  content: "\\EA7d";
}

:host([icon=image-forward]) .first:before {
  content: "\\EA7e";
}

:host([icon=virtual-collimation]) .first:before {
  content: "\\EA8b";
}

:host([icon=windowing-presets]) .first:before {
  content: "\\EA8c";
}

:host([icon=software-update]) .first:before {
  content: "\\EA7A";
}

:host([icon=cloud]) .first:before {
  content: "\\EA9B";
}

:host([icon=region-language]) .first:before {
  content: "\\EA9C";
}

:host([icon=image-metadata-edit]) .first:before {
  content: "\\EA9E";
}

:host([icon=attention-chat]) .first:before {
  content: "\\EAA3";
}

:host([icon=document-raw]) .first:before {
  content: "\\EAA2";
}

:host([icon=image-quality-assesment]) .first:before {
  content: "\\EAA1";
}

:host([icon=parked-view]) .first:before {
  content: "\\EAA8";
}

:host([icon=patient-history-studies]) .first:before {
  content: "\\EAA7";
}

:host([icon=dicom]) .first:before {
  content: "\\EAA9";
}

:host([icon=next-scene]) .first:before {
  content: "\\EAAA";
}

:host([icon=previous-scene]) .first:before {
  content: "\\EAAC";
}

:host([icon=parked-view-gallery]) .first:before {
  content: "\\EAAB";
}

:host([icon=demonstrate-visuals]) .first:before {
  content: "\\EAAD";
}

:host([icon=recording]) .first:before {
  content: "\\EAB2";
}

:host([icon=table-target-home]) .first:before {
  content: "\\EABA";
}

:host([icon=table-target-iso-center]) .first:before {
  content: "\\EABB";
}

:host([icon=export-to-xls]) .first:before {
  content: "\\EABD";
}

:host([icon=subitem-add]) .first:before {
  content: "\\EAC1";
}

:host([icon=user-group-edit]) .first:before {
  content: "\\EAC2";
}

:host([icon=image-flavor]) .first:before {
  content: "\\EAC0";
}

:host([icon=waterproof]) .first:before {
  content: "\\EAC3";
}

:host([icon=attachment]) .first:before {
  content: "\\EAC8";
}

:host([icon=command-prompt]) .first:before {
  content: "\\EAC9";
}

:host([icon=comment-add]) .first:before {
  content: "\\EACC";
}

:host([icon=dicom-configuration]) .first:before {
  content: "\\EACD";
}

:host([icon=dicom-search]) .first:before {
  content: "\\EACE";
}

:host([icon=filter-cancel]) .first:before {
  content: "\\EACF";
}

:host([icon=laboratory-results-edit]) .first:before {
  content: "\\EAD0";
}

:host([icon=laboratory-results-search]) .first:before {
  content: "\\EAD1";
}

:host([icon=laboratory-results]) .first:before {
  content: "\\EAD2";
}

:host([icon=laboratory-system]) .first:before {
  content: "\\EAD3";
}

:host([icon=log]) .first:before {
  content: "\\EAD4";
}

:host([icon=order-add]) .first:before {
  content: "\\EAD5";
}

:host([icon=order]) .first:before {
  content: "\\EAD8";
}

:host([icon=resize-tile-to-large]) .first:before {
  content: "\\EAD9";
}

:host([icon=resize-tile-to-small]) .first:before {
  content: "\\EADA";
}

:host([icon=translators-connection]) .first:before {
  content: "\\EADB";
}

:host([icon=wizard]) .first:before {
  content: "\\EADC";
}

:host([icon=layout-1x2]) .first:before {
  content: "\\EAE9";
}

:host([icon=private]) .first:before {
  content: "\\EAE6";
}

:host([icon=battery-4-horizontal]) .first:before {
  content: "\\EAEE";
}

:host([icon=battery-2-horizontal]) .first:before {
  content: "\\EAED";
}

:host([icon=bar-code]) .first:before {
  content: "\\EAEC";
}

:host([icon=apple]) .first:before {
  content: "\\EAEB";
}

:host([icon=apple-eaten]) .first:before {
  content: "\\EAEA";
}

:host([icon=remote-service-connected]) .first:before {
  content: "\\EAF3";
}

:host([icon=patient-open-tasks]) .first:before {
  content: "\\EAF2";
}

:host([icon=monitor-settings]) .first:before {
  content: "\\EAF1";
}

:host([icon=keyboard]) .first:before {
  content: "\\EAF0";
}

:host([icon=duration]) .first:before {
  content: "\\EAEF";
}

:host([icon=move-mask]) .first:before {
  content: "\\EAFC";
}

:host([icon=cr-cassette]) .first:before {
  content: "\\EAFB";
}

:host([icon=annotations]) .first:before {
  content: "\\EAFA";
}

:host([icon=annotations-edit]) .first:before {
  content: "\\EAF9";
}

:host([icon=annotations-delete]) .first:before {
  content: "\\EAF8";
}

:host([icon=calendar-monthly]) .first:before {
  content: "\\EB2C";
}

:host([icon=calendar-weekly]) .first:before {
  content: "\\EB2D";
}

:host([icon=toolbar-accept-reject]) .first:before {
  content: "\\EB34";
}

:host([icon=step-variants]) .first:before {
  content: "\\EB33";
}

:host([icon=program-template]) .first:before {
  content: "\\EB32";
}

:host([icon=program]) .first:before {
  content: "\\EB31";
}

:host([icon=create-new-step-variants]) .first:before {
  content: "\\EB30";
}

:host([icon=create-new-program-templates]) .first:before {
  content: "\\EB2F";
}

:host([icon=create-new-program]) .first:before {
  content: "\\EB2E";
}

:host([icon=patient-list]) .first:before {
  content: "\\EB3E";
}

:host([icon=layout-split-view]) .first:before {
  content: "\\EB3D";
}

:host([icon=layout-edit]) .first:before {
  content: "\\EB3C";
}

:host([icon=layout-5x4]) .first:before {
  content: "\\EB3B";
}

:host([icon=layout-4x3]) .first:before {
  content: "\\EB3A";
}

:host([icon=layout-3x3]) .first:before {
  content: "\\EB39";
}

:host([icon=layout-3x1]) .first:before {
  content: "\\EB38";
}

:host([icon=image-enlarge]) .first:before {
  content: "\\EB37";
}

:host([icon=export-to-csv]) .first:before {
  content: "\\EB36";
}

:host([icon=dicom-reset]) .first:before {
  content: "\\EB35";
}

:host([icon=shopping-cart-add]) .first:before {
  content: "\\EB41";
}

:host([icon=sync-off]) .first:before {
  content: "\\EB40";
}

:host([icon=dice]) .first:before {
  content: "\\EB06";
}

:host([icon=edge-enhancement-dicom]) .first:before {
  content: "\\EB05";
}

:host([icon=edge-enhancement-high]) .first:before {
  content: "\\EB04";
}

:host([icon=edge-enhancement-off]) .first:before {
  content: "\\EAFF";
}

:host([icon=expand-collapse]) .first:before {
  content: "\\EAFE";
}

:host([icon=handcontrol]) .first:before {
  content: "\\EB0B";
}

:host([icon=image-enhancement]) .first:before {
  content: "\\EB0A";
}

:host([icon=image-enhancement-advanced]) .first:before {
  content: "\\EB09";
}

:host([icon=match-settings]) .first:before {
  content: "\\EB1A";
}

:host([icon=patient-orientation-switch]) .first:before {
  content: "\\EB29";
}

:host([icon=radiation-high]) .first:before {
  content: "\\EB28";
}

:host([icon=repeat]) .first:before {
  content: "\\EB22";
}

:host([icon=report-template-search]) .first:before {
  content: "\\EB21";
}

:host([icon=technician-access]) .first:before {
  content: "\\EB20";
}

:host([icon=pain-scale]) .first:before {
  content: "\\EB2B";
}

:host([icon=patient-management]) .first:before {
  content: "\\EB48";
}

:host([icon=collision]) .first:before {
  content: "\\EB47";
}

:host([icon=browser]) .first:before {
  content: "\\EB46";
}

:host([icon=speaker-enable]) .first:before {
  content: "\\EB50";
}

:host([icon=user-group]) .first:before {
  content: "\\EB51";
}

:host([icon=drive]) .first:before {
  content: "\\EB65";
}

:host([icon=editing-rights]) .first:before {
  content: "\\EB62";
}

:host([icon=mammography-system]) .first:before {
  content: "\\EB61";
}

:host([icon=merge]) .first:before {
  content: "\\EB60";
}

:host([icon=metal-artifact]) .first:before {
  content: "\\EB5F";
}

:host([icon=pat-factor-low]) .first:before {
  content: "\\EB5E";
}

:host([icon=pat-factor-medium]) .first:before {
  content: "\\EB5D";
}

:host([icon=patient-copy-to]) .first:before {
  content: "\\EB5C";
}

:host([icon=patient-move-to]) .first:before {
  content: "\\EB5B";
}

:host([icon=rescue-brake-release]) .first:before {
  content: "\\EB59";
}

:host([icon=sending-job]) .first:before {
  content: "\\EB56";
}

:host([icon=split-horizontally]) .first:before {
  content: "\\EB68";
}

:host([icon=split-vertically]) .first:before {
  content: "\\EB67";
}

:host([icon=stress-layout-edit]) .first:before {
  content: "\\EB66";
}

:host([icon=stress-layout-reset]) .first:before {
  content: "\\EB6F";
}

:host([icon=stress-layout-show]) .first:before {
  content: "\\EB6E";
}

:host([icon=study-merge]) .first:before {
  content: "\\EB6D";
}

:host([icon=study-split]) .first:before {
  content: "\\EB6C";
}

:host([icon=unread]) .first:before {
  content: "\\EB6B";
}

:host([icon=viewing-rights]) .first:before {
  content: "\\EB6A";
}

:host([icon=advanced]) .first:before {
  content: "\\EB72";
}

:host([icon=battery-charging-vertical]) .first:before {
  content: "\\EB73";
}

:host([icon=battery-empty-vertical]) .first:before {
  content: "\\EB74";
}

:host([icon=c-arm-park-position]) .first:before {
  content: "\\EB75";
}

:host([icon=c-arm-save-position]) .first:before {
  content: "\\EB76";
}

:host([icon=c-arm-table]) .first:before {
  content: "\\EB77";
}

:host([icon=distance-calibration]) .first:before {
  content: "\\EB7C";
}

:host([icon=radiation-filter]) .first:before {
  content: "\\EB89";
}

:host([icon=sync-zoom-pan]) .first:before {
  content: "\\EB87";
}

:host([icon=sync-across-timepoints]) .first:before {
  content: "\\EB85";
}

:host([icon=sync-scroll]) .first:before {
  content: "\\EB86";
}

:host([icon=wifi]) .first:before {
  content: "\\EB84";
}

:host([icon=sign-in]) .first:before {
  content: "\\EB8B";
}

:host([icon=sign-out]) .first:before {
  content: "\\EB8C";
}

:host([icon=multiple-patients]) .first:before {
  content: "\\EB7F";
}

:host([icon=inr-medication-quarter-dose]) .first:before,
:host([icon=medication-quarter-dose]) .first:before {
  content: "\\EB8D";
}

:host([icon=rotate-to-0]) .first:before {
  content: "\\EBA5";
}

:host([icon=note-share]) .first:before {
  content: "\\EBA4";
}

:host([icon=metal-artifact-labeling]) .first:before {
  content: "\\EBA3";
}

:host([icon=import-from-usb-stick]) .first:before {
  content: "\\EBA2";
}

:host([icon=import-from-network]) .first:before {
  content: "\\EBA1";
}

:host([icon=export-to-usb-stick]) .first:before {
  content: "\\EBA0";
}

:host([icon=export-to-network]) .first:before {
  content: "\\EB9F";
}

:host([icon=export-to-dvd]) .first:before {
  content: "\\EB9E";
}

:host([icon=contrast]) .first:before {
  content: "\\EB9D";
}

:host([icon=utilities]) .first:before {
  content: "\\EBB2";
}

:host([icon=studies-medical-edit]) .first:before {
  content: "\\EBB1";
}

:host([icon=studies-medical-duplicate]) .first:before {
  content: "\\EBB0";
}

:host([icon=open-tasks-duplicate]) .first:before {
  content: "\\EBAF";
}

:host([icon=ethernet]) .first:before {
  content: "\\EBAE";
}

:host([icon=add-to-list]) .first:before {
  content: "\\EBD8";
}

:host([icon=bar-code-scanner]) .first:before {
  content: "\\EBD7";
}

:host([icon=footswitch-battery-2]) .first:before {
  content: "\\EBD2";
}

:host([icon=footswitch-battery-3]) .first:before {
  content: "\\EBD1";
}

:host([icon=footswitch-battery-4]) .first:before {
  content: "\\EBD0";
}

:host([icon=footswitch-battery-full]) .first:before {
  content: "\\EBCE";
}

:host([icon=handcontrol-battery-2]) .first:before {
  content: "\\EBCC";
}

:host([icon=handcontrol-battery-3]) .first:before {
  content: "\\EBCB";
}

:host([icon=handcontrol-battery-4]) .first:before {
  content: "\\EBCA";
}

:host([icon=handcontrol-battery-full]) .first:before {
  content: "\\EBC9";
}

:host([icon=injection-pump]) .first:before {
  content: "\\EBC8";
}

:host([icon=laboratory-system-scheduler]) .first:before {
  content: "\\EBC7";
}

:host([icon=open-tasks-quality]) .first:before {
  content: "\\EBC6";
}

:host([icon=remote-desktop]) .first:before {
  content: "\\EBC5";
}

:host([icon=remote-desktop-cancel]) .first:before {
  content: "\\EBC3";
}

:host([icon=utility-chart]) .first:before,
:host([icon=utility-cart]) .first:before {
  content: "\\EBBB";
}

:host([icon=window]) .first:before {
  content: "\\EBBA";
}

:host([icon=hematology]) .first:before {
  content: "\\EBDC";
}

:host([icon=copy-reference-target-table]) .first:before {
  content: "\\EBDB";
}

:host([icon=copy-reference-source-table]) .first:before {
  content: "\\EBDA";
}

:host([icon=touch-ui-home]) .first:before {
  content: "\\EBDE";
}

:host([icon=batch-orders]) .first:before {
  content: "\\EBED";
}

:host([icon=body-registration-anterior-posterior]) .first:before {
  content: "\\EBEC";
}

:host([icon=body-registration-lateral]) .first:before {
  content: "\\EBEB";
}

:host([icon=body-registration-superior-inferior]) .first:before {
  content: "\\EBEA";
}

:host([icon=cold-storage]) .first:before {
  content: "\\EBE9";
}

:host([icon=document-format]) .first:before {
  content: "\\EBE8";
}

:host([icon=document-scanner]) .first:before {
  content: "\\EBE7";
}

:host([icon=notification-off]) .first:before {
  content: "\\EBE3";
}

:host([icon=workflow-guided]) .first:before {
  content: "\\EBE2";
}

:host([icon=door-closed]) .first:before {
  content: "\\EBF2";
}

:host([icon=door-open]) .first:before {
  content: "\\EBF3";
}

:host([icon=reference-image-lock]) .first:before {
  content: "\\EBF8";
}

:host([icon=transfer-to-reference]) .first:before {
  content: "\\EBFB";
}

:host([icon=multiselect]) .first:before {
  content: "\\EBF6";
}

:host([icon=media-library]) .first:before {
  content: "\\EBF5";
}

:host([icon=rotate-text]) .first:before {
  content: "\\EBF9";
}

:host([icon=community]) .first:before {
  content: "\\EBFC";
}

:host([icon=study-forward]) .first:before {
  content: "\\EBFD";
}

:host([icon=detector-big]) .first:before {
  content: "\\EBFF";
}

:host([icon=detector-big-handle]) .first:before {
  content: "\\EBFE";
}

:host([icon=detector-small]) .first:before {
  content: "\\EC00";
}

:host([icon=detector-standard]) .first:before {
  content: "\\EC02";
}

:host([icon=detector-standard-handle]) .first:before {
  content: "\\EC01";
}

:host([icon=document-margins]) .first:before {
  content: "\\EC03";
}

:host([icon=highlighter]) .first:before {
  content: "\\EC0D";
}

:host([icon=image-save]) .first:before {
  content: "\\EC0E";
}

:host([icon=series-save]) .first:before {
  content: "\\EC12";
}

:host([icon=myocardial-map-t1]) .first:before {
  content: "\\EC0F";
}

:host([icon=myocardial-map-t2]) .first:before {
  content: "\\EC11";
}

:host([icon=myocardial-map-t2-star]) .first:before {
  content: "\\EC10";
}

:host([icon=speaker-bluetooth]) .first:before {
  content: "\\EC13";
}

:host([icon=study-received]) .first:before {
  content: "\\EC15";
}

:host([icon=table-view-switch]) .first:before {
  content: "\\EC16";
}

:host([icon=sort-ascending]) .first:before {
  content: "\\EC1E";
}

:host([icon=sort-descending]) .first:before {
  content: "\\EC1F";
}

:host([icon=resize-segments]) .first:before {
  content: "\\EC20";
}

:host([icon=pin]) .first:before {
  content: "\\EC24";
}

:host([icon=unpin]) .first:before {
  content: "\\EC25";
}

:host([icon=patient-orientation-define]) .first:before {
  content: "\\EC23";
}

:host([icon=monitoring-viewer]) .first:before {
  content: "\\EC22";
}

:host([icon=layout-grid]) .first:before {
  content: "\\EC21";
}

:host([icon=tree-map]) .first:before {
  content: "\\EC35";
}

:host([icon=scatter-plot]) .first:before {
  content: "\\EC34";
}

:host([icon=pivot-table]) .first:before {
  content: "\\EC33";
}

:host([icon=pie-chart]) .first:before {
  content: "\\EC32";
}

:host([icon=kpi]) .first:before {
  content: "\\EC30";
}

:host([icon=thumbnail-viewmode]) .first:before {
  content: "\\EC4B";
}

:host([icon=preview-mode]) .first:before {
  content: "\\EC38";
}

:host([icon=cp-mode]) .first:before {
  content: "\\EC31";
}

:host([icon=range-tools]) .first:before {
  content: "\\EC48";
}

:host([icon=mr-conditional]) .first:before {
  content: "\\EC37";
}

:host([icon=pacs]) .first:before {
  content: "\\EC4E";
}

:host([icon=kvm-switch]) .first:before {
  content: "\\EC4D";
}

:host([icon=weight]) .first:before {
  content: "\\EC4F";
}

:host([icon=scheduled-autofill]) .first:before {
  content: "\\EC52";
}

:host([icon=other-devices]) .first:before {
  content: "\\EC51";
}

:host([icon=image-not-available]) .first:before {
  content: "\\EA7f";
}

:host(:not([color])[icon=image-not-available]) .first:after {
  content: "\\E996";
  color: rgba(var(--functional-red));
}

:host(:not([color])[icon=image-not-available]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([icon=dicom-archivable]) .first:before {
  content: "\\EA1A";
}

:host([size=xs][icon=dicom-archivable]) .first:before {
  content: "\\EA19";
}

:host([icon=organizer-tree]) .first:before {
  content: "\\EB81";
}

:host([size=xs][icon=organizer-tree]) .first:before {
  content: "\\EB80";
}

:host([icon=marked]) .first:before {
  content: "\\EAE8";
}

:host([size=xs][icon=marked]) .first:before {
  content: "\\EAE7";
}

:host([icon=analytics]) .first:before {
  content: "\\EA48";
}

:host([size=xs][icon=analytics]) .first:before {
  content: "\\EA47";
}

:host([icon=validate-all]) .first:before {
  content: "\\EAF5";
}

:host([size=s][icon=validate-all]) .first:before {
  content: "\\EAF4";
}

:host([icon=shopping-cart]) .first:before {
  content: "\\EAF7";
}

:host([size=xs][icon=shopping-cart]) .first:before {
  content: "\\EAF6";
}

:host([size=xs][icon=open-link]) .first:before {
  content: "\\EAB5";
}

:host([size=s][icon=open-link]) .first:before {
  content: "\\EAB6";
}

:host([size=m][icon=open-link]) .first:before {
  content: "\\EAB7";
}

:host([icon=settings]) .first:before {
  content: "\\E023";
}

:host([size=s][icon=settings]) .first:before {
  content: "\\EBFA";
}

:host([icon=notification-center]) .first:before {
  content: "\\E135";
}

:host([size=s][icon=notification-center]) .first:before {
  content: "\\EBF7";
}

:host([icon=dragable]) .first:before,
:host([icon=draggable]) .first:before,
:host([icon=draggable-vertical-s]) .first:before {
  content: "\\EA7C";
}

:host([size=s][icon=draggable-vertical-s]) .first:before {
  content: "\\EC06";
}

:host([size=xs][icon=draggable-vertical-s]) .first:before {
  content: "\\EC19";
}

:host([size=xs][icon=draggable-horizontal-s]) .first:before {
  content: "\\EC18";
}

:host([size=s][icon=draggable-horizontal-s]) .first:before {
  content: "\\EC1A";
}

:host([size=m][icon=draggable-horizontal-s]) .first:before {
  content: "\\EC1B";
}

:host([size=l][icon=draggable-horizontal-s]) .first:before {
  content: "\\EC1B";
}

:host([size=xs][icon=draggable-horizontal-l]) .first:before {
  content: "\\EC05";
}

:host([size=s][icon=draggable-horizontal-l]) .first:before {
  content: "\\EC04";
}

:host([size=m][icon=draggable-horizontal-l]) .first:before {
  content: "\\EC05";
}

:host([size=l][icon=draggable-horizontal-l]) .first:before {
  content: "\\EC04";
}

:host([size=xs][icon=bookmark]) .first:before {
  content: "\\EBEF";
}

:host([size=s][icon=bookmark]) .first:before {
  content: "\\EBF0";
}

:host([size=m][icon=bookmark]) .first:before {
  content: "\\EBF1";
}

:host([size=l][icon=bookmark]) .first:before {
  content: "\\EBF0";
}

:host([icon=help]) .first:before {
  content: "\\E007";
}

:host([size=xs][icon=help]) .first:before {
  content: "\\EA9D";
}

:host([size=s][icon=help]) .first:before {
  content: "\\EBF4";
}

:host([size=xs][icon=standard-privacy]) .first:before {
  content: "\\EA39";
}

:host([size=s][icon=standard-privacy]) .first:before {
  content: "\\EA3A";
}

:host([size=m][icon=standard-privacy]) .first:before {
  content: "\\EA3B";
}

:host([size=l][icon=standard-privacy]) .first:before {
  content: "\\EA3A";
}

:host([size=xs][icon=restrictive-privacy]) .first:before {
  content: "\\EA36";
}

:host([size=s][icon=restrictive-privacy]) .first:before {
  content: "\\EA37";
}

:host([size=m][icon=restrictive-privacy]) .first:before {
  content: "\\EA38";
}

:host([size=l][icon=restrictive-privacy]) .first:before {
  content: "\\EA37";
}

:host([size=xs][icon=no-data-minimization]) .first:before {
  content: "\\EA33";
}

:host([size=s][icon=no-data-minimization]) .first:before {
  content: "\\EA34";
}

:host([size=m][icon=no-data-minimization]) .first:before {
  content: "\\EA35";
}

:host([size=l][icon=no-data-minimization]) .first:before {
  content: "\\EA34";
}

:host([size=xs][icon=high-privacy]) .first:before {
  content: "\\EA30";
}

:host([size=s][icon=high-privacy]) .first:before {
  content: "\\EA31";
}

:host([size=m][icon=high-privacy]) .first:before {
  content: "\\EA32";
}

:host([size=l][icon=high-privacy]) .first:before {
  content: "\\EA31";
}

:host([size=xs][icon=customized-privacy]) .first:before {
  content: "\\EA2D";
}

:host([size=s][icon=customized-privacy]) .first:before {
  content: "\\EA2E";
}

:host([size=m][icon=customized-privacy]) .first:before {
  content: "\\EA2F";
}

:host([size=l][icon=customized-privacy]) .first:before {
  content: "\\EA2E";
}

:host([size=xs][icon=result-table]) .first:before {
  content: "\\EB57";
}

:host([size=s][icon=result-table]) .first:before {
  content: "\\EB57";
}

:host([size=m][icon=result-table]) .first:before {
  content: "\\EB58";
}

:host([size=l][icon=result-table]) .first:before {
  content: "\\EB58";
}

:host([size=xs][icon=information]) .first:before {
  content: "\\E950";
}

:host([size=xs][icon=information]) .first:after {
  content: "\\E032";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=information]) .first:before {
  content: "\\E957";
}

:host([size=s][icon=information]) .first:after {
  content: "\\E959";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=information]) .first:before {
  content: "\\E94F";
}

:host([size=m][icon=information]) .first:after {
  content: "\\E952";
  color: rgb(var(--ui-7));
}

:host([size=l][icon=information]) .first:before {
  content: "\\E957";
}

:host([size=l][icon=information]) .first:after {
  content: "\\E959";
  color: rgb(var(--ui-7));
}

:host(:not([color])[size=xs][icon=information]) .first:before {
  content: "\\E950";
  color: #6e7b9f;
}

:host(:not([color])[size=xs][icon=information]) .first:after {
  content: "\\E032";
  color: #ffffff;
}

:host(:not([color])[size=s][icon=information]) .first:before {
  content: "\\E957";
  color: #6e7b9f;
}

:host(:not([color])[size=s][icon=information]) .first:after {
  content: "\\E959";
  color: #ffffff;
}

:host(:not([color])[size=m][icon=information]) .first:before {
  content: "\\E94F";
  color: #6e7b9f;
}

:host(:not([color])[size=m][icon=information]) .first:after {
  content: "\\E952";
  color: #ffffff;
}

:host(:not([color])[size=l][icon=information]) .first:before {
  content: "\\E957";
  color: #6e7b9f;
}

:host(:not([color])[size=l][icon=information]) .first:after {
  content: "\\E959";
  color: #ffffff;
}

:host([icon=confirmation]) .first:before {
  content: "\\E0BA";
}

:host([icon=confirmation]) .first:after {
  content: "\\EA5A";
  color: #ffffff;
}

:host(:not([color])[icon=confirmation]) .first:before {
  content: "\\E0BA";
  color: #6e7b9f;
}

:host(:not([color])[icon=confirmation]) .first:after {
  content: "\\EA5A";
  color: #ffffff;
}

:host([size=xs][icon=confirmation]) .first:before {
  content: "\\EA58";
}

:host([size=xs][icon=confirmation]) .first:after {
  content: "\\EA59";
  color: #ffffff;
}

:host(:not([color])[size=xs][icon=confirmation]) .first:before {
  content: "\\EA58";
  color: #6e7b9f;
}

:host(:not([color])[size=xs][icon=confirmation]) .first:after {
  content: "\\EA59";
  color: #ffffff;
}

:host([size=xs][color][icon=error]) .first:before {
  content: "\\E950";
}

:host([size=xs][color][icon=error]) .first:after {
  content: "\\E031";
  color: rgb(var(--ui-7));
}

:host([size=xs]:not([color])[icon=error]) .first:before {
  content: "\\E950";
  color: rgba(var(--functional-red), var(--opacity-1));
}

:host([size=xs]:not([color])[icon=error]) .first:after {
  content: "\\E031";
  color: white;
}

:host([size=s][color][icon=error]) .first:before {
  content: "\\E957";
}

:host([size=s][color][icon=error]) .first:after {
  content: "\\E958";
  color: rgb(var(--ui-7));
}

:host([size=s]:not([color])[icon=error]) .first:before {
  content: "\\E957";
  color: rgba(var(--functional-red), var(--opacity-1));
}

:host([size=s]:not([color])[icon=error]) .first:after {
  content: "\\E958";
  color: white;
}

:host([size=m][color][icon=error]) .first:before {
  content: "\\E94F";
}

:host([size=m][color][icon=error]) .first:after {
  content: "\\E951";
  color: rgb(var(--ui-7));
}

:host([size=m]:not([color])[icon=error]) .first:before {
  content: "\\E94F";
  color: rgba(var(--functional-red), var(--opacity-1));
}

:host([size=m]:not([color])[icon=error]) .first:after {
  content: "\\E951";
  color: white;
}

:host([size=l][color][icon=error]) .first:before {
  content: "\\E957";
}

:host([size=l][color][icon=error]) .first:after {
  content: "\\E958";
  color: rgb(var(--ui-7));
}

:host([size=l]:not([color])[icon=error]) .first:before {
  content: "\\E957";
  color: rgba(var(--functional-red), var(--opacity-1));
}

:host([size=l]:not([color])[icon=error]) .first:after {
  content: "\\E958";
  color: white;
}

:host([size=xs][icon=cancel]) .first:before {
  content: "\\E002";
}

:host([size=s][icon=cancel]) .first:before {
  content: "\\E98D";
}

:host([size=m][icon=cancel]) .first:before {
  content: "\\E98C";
}

:host([size=l][icon=cancel]) .first:before {
  content: "\\E98D";
}

:host([size=xs][color][icon=success]) .first:before {
  content: "\\E950";
}

:host([size=xs][color][icon=success]) .first:after {
  content: "\\E033";
  color: rgb(var(--ui-7));
}

:host([size=xs]:not([color])[icon=success]) .first:before {
  content: "\\E950";
  color: rgba(var(--functional-green), var(--opacity-1));
}

:host([size=xs]:not([color])[icon=success]) .first:after {
  content: "\\E033";
  color: white;
}

:host([size=s][color][icon=success]) .first:before {
  content: "\\E957";
}

:host([size=s][color][icon=success]) .first:after {
  content: "\\E95A";
  color: rgb(var(--ui-7));
}

:host([size=s]:not([color])[icon=success]) .first:before {
  content: "\\E957";
  color: rgba(var(--functional-green), var(--opacity-1));
}

:host([size=s]:not([color])[icon=success]) .first:after {
  content: "\\E95A";
  color: white;
}

:host([size=m][color][icon=success]) .first:before {
  content: "\\E94F";
}

:host([size=m][color][icon=success]) .first:after {
  content: "\\E953";
  color: rgb(var(--ui-7));
}

:host([size=m]:not([color])[icon=success]) .first:before {
  content: "\\E94F";
  color: rgba(var(--functional-green), var(--opacity-1));
}

:host([size=m]:not([color])[icon=success]) .first:after {
  content: "\\E953";
  color: white;
}

:host([size=l][color][icon=success]) .first:before {
  content: "\\E957";
}

:host([size=l][color][icon=success]) .first:after {
  content: "\\E95A";
  color: rgb(var(--ui-7));
}

:host([size=l]:not([color])[icon=success]) .first:before {
  content: "\\E957";
  color: rgba(var(--functional-green), var(--opacity-1));
}

:host([size=l]:not([color])[icon=success]) .first:after {
  content: "\\E95A";
  color: white;
}

:host([size=xs][color][icon=warning]) .first:before {
  content: "\\E950";
}

:host([size=xs][color][icon=warning]) .first:after {
  content: "\\E034";
  color: rgb(var(--ui-7));
}

:host([size=xs]:not([color])[icon=warning]) .first:before {
  content: "\\E950";
  color: rgba(var(--functional-yellow), var(--opacity-1));
}

:host([size=xs]:not([color])[icon=warning]) .first:after {
  content: "\\E034";
  color: black;
}

:host([size=s][color][icon=warning]) .first:before {
  content: "\\E957";
}

:host([size=s][color][icon=warning]) .first:after {
  content: "\\E95B";
  color: rgb(var(--ui-7));
}

:host([size=s]:not([color])[icon=warning]) .first:before {
  content: "\\E957";
  color: rgba(var(--functional-yellow), var(--opacity-1));
}

:host([size=s]:not([color])[icon=warning]) .first:after {
  content: "\\E95B";
  color: black;
}

:host([size=m][color][icon=warning]) .first:before {
  content: "\\E94F";
}

:host([size=m][color][icon=warning]) .first:after {
  content: "\\E954";
  color: rgb(var(--ui-7));
}

:host([size=m]:not([color])[icon=warning]) .first:before {
  content: "\\E94F";
  color: rgba(var(--functional-yellow), var(--opacity-1));
}

:host([size=m]:not([color])[icon=warning]) .first:after {
  content: "\\E954";
  color: black;
}

:host([size=l][color][icon=warning]) .first:before {
  content: "\\E957";
}

:host([size=l][color][icon=warning]) .first:after {
  content: "\\E95B";
  color: rgb(var(--ui-7));
}

:host([size=l]:not([color])[icon=warning]) .first:before {
  content: "\\E957";
  color: rgba(var(--functional-yellow), var(--opacity-1));
}

:host([size=l]:not([color])[icon=warning]) .first:after {
  content: "\\E95B";
  color: black;
}

:host([color][icon=in-progress]) .first:before {
  content: "\\EB07";
}

:host(:not([color])[icon=in-progress]) .first:before {
  content: "\\EB1C";
  color: #66bcea;
}

:host(:not([color])[icon=in-progress]) .first:after {
  content: "\\EB1B";
  color: black;
}

:host([size=xs][icon=pat-factor]) .first:before {
  content: "\\EA83";
}

:host([size=m][icon=pat-factor]) .first:before {
  content: "\\EA84";
}

:host([icon=generic-lesion-marker]) .first:before {
  content: "\\EBB3";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host(:not([color])[icon=generic-lesion-marker]) .first:after {
  content: "\\EBB4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=generic-lesion-marker]) .first:after {
  content: "\\EBB4";
}

:host([icon=liver-lesion-marker]) .first:before {
  content: "\\EBB8";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host(:not([color])[icon=liver-lesion-marker]) .first:after {
  content: "\\EBB9";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=liver-lesion-marker]) .first:after {
  content: "\\EBB9";
}

:host([icon=lung-lesion-marker]) .first:before {
  content: "\\EBB5";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=lung-lesion-marker]) .first:after {
  content: "\\EBB6 ";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host(:not([color])[icon=lung-lesion-marker]) .second:before {
  content: "\\EBB7 ";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=lung-lesion-marker]) .second:before {
  content: "\\EBB7 ";
}

:host([icon=two-d-view]) .first:before,
:host([icon=view-2d]) .first:before {
  content: "\\E14F";
}

:host([icon=two-d-view]) .first:after,
:host([icon=view-2d]) .first:after {
  content: "\\E151";
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([icon=airways-analyse]) .first:before {
  content: "\\E0FE";
}

:host([icon=airways-analyse]) .first:after {
  content: "\\E0FD";
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([icon=hide]) .first:before {
  content: "\\E100";
}

:host([icon=hide]) .first:after {
  content: "\\E0FF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-first-supine]) .first:before {
  content: "\\E102";
}

:host([icon=head-first-supine]) .first:after {
  content: "\\E103";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-first-left-lateral]) .first:before {
  content: "\\E104";
}

:host([icon=head-first-left-lateral]) .first:after {
  content: "\\E105";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-first-right-lateral]) .first:before {
  content: "\\E106";
}

:host([icon=head-first-right-lateral]) .first:after {
  content: "\\E107";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-first-prone]) .first:before {
  content: "\\E108";
}

:host([icon=head-first-prone]) .first:after {
  content: "\\E109";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=feet-first-supine]) .first:before {
  content: "\\E10A";
}

:host([icon=feet-first-supine]) .first:after {
  content: "\\E10B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=feet-first-left-lateral]) .first:before {
  content: "\\E10A";
}

:host([icon=feet-first-left-lateral]) .first:after {
  content: "\\E10C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=feet-first-right-lateral]) .first:before {
  content: "\\E10A";
}

:host([icon=feet-first-right-lateral]) .first:after {
  content: "\\E10D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-left-supine]) .first:before {
  content: "\\E10F";
}

:host([icon=head-left-supine]) .first:after {
  content: "\\E110";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-right-supine]) .first:before {
  content: "\\E111";
}

:host([icon=head-right-supine]) .first:after {
  content: "\\E112";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-left-prone]) .first:before {
  content: "\\E113";
}

:host([icon=head-left-prone]) .first:after {
  content: "\\E114";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=head-right-prone]) .first:before {
  content: "\\E115";
}

:host([icon=head-right-prone]) .first:after {
  content: "\\E116";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=upright]) .first:before {
  content: "\\E117";
}

:host([icon=upright]) .first:after {
  content: "\\E118";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=position-undefined]) .first:before {
  content: "\\E10A";
}

:host([icon=position-undefined]) .first:after {
  content: "\\E119";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=plantar]) .first:before {
  content: "\\E10A";
}

:host([icon=plantar]) .first:after {
  content: "\\E11A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=superman-supine-wrist]) .first:before {
  content: "\\E11F";
}

:host([icon=superman-supine-wrist]) .first:after {
  content: "\\E11C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=superman-prone-wrist]) .first:before {
  content: "\\E11D";
}

:host([icon=superman-prone-wrist]) .first:after {
  content: "\\E11E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=superman-supine-elbow]) .first:before {
  content: "\\E11B";
}

:host([icon=superman-supine-elbow]) .first:after {
  content: "\\E11C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=superman-prone-elbow]) .first:before {
  content: "\\E120";
}

:host([icon=superman-prone-elbow]) .first:after {
  content: "\\E11E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=gantry-tilt]) .first:before {
  content: "\\E130";
}

:host([icon=gantry-tilt]) .first:after {
  content: "\\E122";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=gantry-tilt-left]) .first:before {
  content: "\\E123";
}

:host([icon=gantry-tilt-left]) .first:after {
  content: "\\E124";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=gantry-tilt-right]) .first:before {
  content: "\\E126";
}

:host([icon=gantry-tilt-right]) .first:after {
  content: "\\E125";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=image-hide]) .first:before {
  content: "\\E12A";
}

:host([icon=image-hide]) .first:after {
  content: "\\E129";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=image-text-hide]) .first:before {
  content: "\\E144";
}

:host([icon=image-text-hide]) .first:after {
  content: "\\E143";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=rotate-cw-90]) .first:before {
  content: "\\E149";
}

:host([icon=rotate-cw-90]) .first:after {
  content: "\\E14A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=rotate-ccw-90]) .first:before {
  content: "\\E147";
}

:host([icon=rotate-ccw-90]) .first:after {
  content: "\\E148";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pixel-lens]) .first:before {
  content: "\\E146";
}

:host([icon=pixel-lens]) .first:after {
  content: "\\E150";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=rotate-perpendicular]) .first:before {
  content: "\\E14C";
}

:host([icon=rotate-perpendicular]) .first:after {
  content: "\\E14D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=flip-horizontal]) .first:before {
  content: "\\E13B";
}

:host([icon=flip-horizontal]) .first:after {
  content: "\\E13A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=flip-vertical]) .first:before {
  content: "\\E13F";
}

:host([icon=flip-vertical]) .first:after {
  content: "\\E13E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=flip-popup]) .first:before {
  content: "\\E13D";
}

:host([icon=flip-popup]) .first:after {
  content: "\\E13C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=ecg-connection-state]) .first:before {
  content: "\\E902";
}

:host([icon=ecg-connection-state]) .first:after {
  content: "\\E903";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=signal-strength-4]) .first:before {
  content: "\\E92A";
}

:host([icon=signal-strength-4]) .first:after {
  content: "\\E92B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=signal-strength-3]) .first:before {
  content: "\\E928";
}

:host([icon=signal-strength-3]) .first:after {
  content: "\\E929";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=signal-strength-2]) .first:before {
  content: "\\E926";
}

:host([icon=signal-strength-2]) .first:after {
  content: "\\E927";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=signal-strength-1]) .first:before {
  content: "\\E924";
}

:host([icon=signal-strength-1]) .first:after {
  content: "\\E925";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=select-monitor]) .first:before {
  content: "\\E920";
}

:host([icon=select-monitor]) .first:after {
  content: "\\E91F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=patient-table]) .first:before {
  content: "\\E91D";
}

:host([icon=patient-table]) .first:after {
  content: "\\E91C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=intervention-layout-switch]) .first:before {
  content: "\\E916";
}

:host([icon=intervention-layout-switch]) .first:after {
  content: "\\E915";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=connection-quality-low]) .first:before {
  content: "\\E90C";
}

:host([icon=connection-quality-low]) .first:after {
  content: "\\E90D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=compass-direction-w]) .first:before {
  content: "\\E90B";
  color: #000000;
}

:host([icon=compass-direction-w]) .first:after {
  content: "\\E90A";
  color: rgba(var(--functional-yellow), var(--opacity-1));
}

:host([icon=show-breathing-curve]) .first:before {
  content: "\\E949";
}

:host([icon=show-breathing-curve]) .first:after {
  content: "\\E94A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=relative-zero-position]) .first:before {
  content: "\\E946";
}

:host([icon=relative-zero-position]) .first:after {
  content: "\\E947";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=patient-mark]) .first:before {
  content: "\\E944";
}

:host([icon=patient-mark]) .first:after {
  content: "\\E945";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=physician]) .first:before {
  content: "\\E94C";
}

:host([icon=physician]) .first:after {
  content: "\\E94D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=table-removal]) .first:before {
  content: "\\E972";
}

:host([icon=table-removal]) .first:after {
  content: "\\E973";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=mdt-ready]) .first:before {
  content: "\\E96D";
}

:host([icon=mdt-ready]) .first:after {
  content: "\\E96E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=kidneys]) .first:before {
  content: "\\E977";
}

:host([icon=kidneys]) .first:after {
  content: "\\E978";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lung]) .first:before {
  content: "\\E97A";
}

:host([icon=lung]) .first:after {
  content: "\\E97B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=light-funnel]) .first:before {
  content: "\\E986";
}

:host([icon=light-funnel]) .first:after {
  content: "\\E987";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=light-ring]) .first:before {
  content: "\\E988";
}

:host([icon=light-ring]) .first:after {
  content: "\\E989";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=show-laser-crosshair]) .first:before,
:host([icon=laser-crosshair-show]) .first:before {
  content: "\\E99A";
}

:host([icon=show-laser-crosshair]) .first:after,
:host([icon=laser-crosshair-show]) .first:after {
  content: "\\E99B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=user-position-left]) .first:before {
  content: "\\E99C";
}

:host([icon=user-position-left]) .first:after {
  content: "\\E99D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=user-position-right]) .first:before {
  content: "\\E99E";
}

:host([icon=user-position-right]) .first:after {
  content: "\\E99F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=inr-medication]) .first:before,
:host([icon=inr-measurement]) .first:before {
  content: "\\E9A9";
}

:host([icon=inr-medication]) .first:after,
:host([icon=inr-measurement]) .first:after {
  content: "\\E9A8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=laboratory]) .first:before {
  content: "\\E9C4";
}

:host([icon=laboratory]) .first:after {
  content: "\\E9C5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=fov-segment]) .first:before {
  content: "\\E9E9";
}

:host([icon=fov-segment]) .first:after {
  content: "\\E9E8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=light-bore]) .first:before {
  content: "\\E9E5";
}

:host([icon=light-bore]) .first:after {
  content: "\\E9E6";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=light-outer-ring]) .first:before {
  content: "\\E9E3";
}

:host([icon=light-outer-ring]) .first:after {
  content: "\\E9E4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lobes-edit-sync]) .first:before {
  content: "\\E9E2";
}

:host([icon=lobes-edit-sync]) .first:after {
  content: "\\E9E1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=open-reconstruction-tab]) .first:before {
  content: "\\E9DA";
}

:host([icon=open-reconstruction-tab]) .first:after {
  content: "\\E9D9";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=patient-position-change]) .first:before {
  content: "\\E9D8";
}

:host([icon=patient-position-change]) .first:after {
  content: "\\E9D7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=qr-code-scan]) .first:before {
  content: "\\E9D4";
}

:host([icon=qr-code-scan]) .first:after {
  content: "\\E9D5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=reference-segment]) .first:before {
  content: "\\E9D2";
}

:host([icon=reference-segment]) .first:after {
  content: "\\E9D1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=show-hide-peak-information-map]) .first:before {
  content: "\\E992";
}

:host([icon=show-hide-peak-information-map]) .first:after {
  content: "\\E98A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=show-hide-saturation-region]) .first:before {
  content: "\\E9FE";
}

:host([icon=show-hide-saturation-region]) .first:after {
  content: "\\E9FD";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=skull-unfolding]) .first:before {
  content: "\\E9FC";
}

:host([icon=skull-unfolding]) .first:after {
  content: "\\E9FB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=user-planes]) .first:before {
  content: "\\E9F7";
}

:host([icon=user-planes]) .first:after {
  content: "\\E9F8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=move-to-rt-laser]) .first:before {
  content: "\\EA0E";
}

:host([icon=move-to-rt-laser]) .first:after {
  content: "\\EA0D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=move-to-ct-laser]) .first:before {
  content: "\\EA0B";
}

:host([icon=move-to-ct-laser]) .first:after {
  content: "\\EA0C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=disc-space-1]) .first:before {
  content: "\\EA11";
}

:host([icon=disc-space-1]) .first:after {
  content: "\\EA15";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=disc-space-2]) .first:before {
  content: "\\EA16";
}

:host([icon=disc-space-2]) .first:after {
  content: "\\EA15";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=disc-space-3]) .first:before {
  content: "\\EA12";
}

:host([icon=disc-space-3]) .first:after {
  content: "\\EA15";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=disc-space-4]) .first:before {
  content: "\\EA13";
}

:host([icon=disc-space-4]) .first:after {
  content: "\\EA15";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=disc-space-5]) .first:before {
  content: "\\EA14";
}

:host([icon=disc-space-5]) .first:after {
  content: "\\EA15";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=annotations-hide]) .first:before {
  content: "\\EA10";
}

:host([icon=annotations-hide]) .first:after {
  content: "\\EA17";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=table-longitudinal-closeup]) .first:before {
  content: "\\EA41";
}

:host([icon=table-longitudinal-closeup]) .first:after {
  content: "\\EA42";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=move-table-top-only]) .first:before {
  content: "\\EA43";
}

:host([icon=move-table-top-only]) .first:after {
  content: "\\EA44";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=light-all]) .first:before {
  content: "\\E985";
}

:host([icon=light-all]) .first:after {
  content: "\\EA45";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=vessel-lumen-show]) .first:before {
  content: "\\EA4A";
}

:host([icon=vessel-lumen-show]) .first:after {
  content: "\\EA4C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pulmonary-density]) .first:before {
  content: "\\EA50";
}

:host([icon=pulmonary-density]) .first:after {
  content: "\\EA51";
  color: #be1818;
}

:host([icon=graphics-hide]) .first:before {
  content: "\\EA55";
}

:host([icon=graphics-hide]) .first:after {
  content: "\\EA56";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pulse-oximetry]) .first:before {
  content: "\\EA5F";
}

:host([icon=pulse-oximetry]) .first:after {
  content: "\\EA60";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chessboard-view]) .first:before {
  content: "\\EA72";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chessboard-view]) .first:after {
  content: "\\EA73";
}

:host([icon=contour-cut-axial-caudal]) .first:before {
  content: "\\EA74";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=contour-cut-axial-caudal]) .first:after {
  content: "\\EA75";
}

:host([icon=contour-cut-axial-cranial]) .first:before {
  content: "\\EA76";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=contour-cut-axial-cranial]) .first:after {
  content: "\\EA77";
}

:host([icon=poi-crosshair-move]) .first:before {
  content: "\\EA85";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=poi-crosshair-move]) .first:after {
  content: "\\EA86";
}

:host([icon=poi-new]) .first:before {
  content: "\\EA87";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=poi-new]) .first:after {
  content: "\\EA88";
}

:host([icon=poi-to-crosshair]) .first:before {
  content: "\\EA89";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=poi-to-crosshair]) .first:after {
  content: "\\EA8a";
}

:host([icon=breast]) .first:before {
  content: "\\E056";
}

:host([icon=breast]) .first:after {
  content: "\\E0D8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=breast-analytics]) .first:before {
  content: "\\E0D9";
}

:host([icon=breast-analytics]) .first:after {
  content: "\\EA8D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=clinical-trial-matching]) .first:before {
  content: "\\EA8E";
}

:host([icon=clinical-trial-matching]) .first:after {
  content: "\\EA8F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=coronary-artery-disease]) .first:before {
  content: "\\EA90";
}

:host([icon=coronary-artery-disease]) .first:after {
  content: "\\E0DA";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=infectious-disease]) .first:before {
  content: "\\EA91";
}

:host([icon=infectious-disease]) .first:after {
  content: "\\EA92";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=infectious-disease-analytics]) .first:before {
  content: "\\EA93";
}

:host([icon=infectious-disease-analytics]) .first:after {
  content: "\\EA92";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lung-analytics]) .first:before {
  content: "\\EA94";
}

:host([icon=lung-analytics]) .first:after {
  content: "\\EA95";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=prostate]) .first:before {
  content: "\\EA96";
}

:host([icon=prostate]) .first:after {
  content: "\\EA97";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=prostate-analytics]) .first:before {
  content: "\\EA98";
}

:host([icon=prostate-analytics]) .first:after {
  content: "\\EA97";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=valvular-heart-disease]) .first:before {
  content: "\\EA99";
}

:host([icon=valvular-heart-disease]) .first:after {
  content: "\\EA9A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=three-d-camera]) .first:before {
  content: "\\EAA0";
}

:host([icon=three-d-camera]) .first:after {
  content: "\\EA9F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=radiopaedia]) .first:before {
  content: "\\EAA6";
}

:host([icon=radiopaedia]) .first:after {
  content: "\\EAA5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=auto-organ-segmentation]) .first:before {
  content: "\\EAAE";
}

:host([icon=auto-organ-segmentation]) .first:after {
  content: "\\EAAF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=isocontour]) .first:before {
  content: "\\EAB0";
}

:host([icon=isocontour]) .first:after {
  content: "\\EAB1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=series-angle]) .first:before {
  content: "\\EAB8";
}

:host([icon=series-angle]) .first:after {
  content: "\\EAB9";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=table-move-to-laser-guidance-position]) .first:before {
  content: "\\EAC5";
}

:host([icon=table-move-to-laser-guidance-position]) .first:after {
  content: "\\EAC4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cutline-smooth]) .first:before {
  content: "\\EAC6";
}

:host([icon=cutline-smooth]) .first:after {
  content: "\\EAC7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=combined-trending-graph]) .first:before {
  content: "\\EACA";
}

:host([icon=combined-trending-graph]) .first:after {
  content: "\\EACB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=sample-delete]) .first:before {
  content: "\\EAD6";
}

:host([icon=sample-delete]) .first:after {
  content: "\\EAD7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=sample-search]) .first:before {
  content: "\\EADE";
}

:host([icon=sample-search]) .first:after {
  content: "\\EADF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=samples]) .first:before {
  content: "\\EAE0";
}

:host([icon=samples]) .first:after {
  content: "\\EAE1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=trending-graph-pronounced]) .first:before {
  content: "\\EAE4";
}

:host([icon=trending-graph-pronounced]) .first:after {
  content: "\\EAE5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=sample]) .first:before {
  content: "\\EB44";
}

:host([icon=sample]) .first:after {
  content: "\\EB45";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=send-rating-feedback]) .first:before {
  content: "\\EB42";
}

:host([icon=send-rating-feedback]) .first:after {
  content: "\\EB43";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=edge-enhancement-low]) .first:before {
  content: "\\EB03";
}

:host([icon=edge-enhancement-low]) .first:after {
  content: "\\EB02";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=edge-enhancement-medium]) .first:before {
  content: "\\EB00";
}

:host([icon=edge-enhancement-medium]) .first:after {
  content: "\\EB01";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-filter-high]) .first:before {
  content: "\\EB19";
}

:host([icon=noise-reduce-filter-high]) .first:after {
  content: "\\EB18";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-filter-low]) .first:before {
  content: "\\EB19";
}

:host([icon=noise-reduce-filter-low]) .first:after {
  content: "\\EB17";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-filter-medium]) .first:before {
  content: "\\EB19";
}

:host([icon=noise-reduce-filter-medium]) .first:after {
  content: "\\EB16";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-filter-off]) .first:before {
  content: "\\EB15";
}

:host([icon=noise-reduce-filter-off]) .first:after {
  content: "\\EB14";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-lih-high]) .first:before {
  content: "\\EB13";
}

:host([icon=noise-reduce-lih-high]) .first:after {
  content: "\\EB12";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-lih-low]) .first:before {
  content: "\\EB13";
}

:host([icon=noise-reduce-lih-low]) .first:after {
  content: "\\EB11";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-lih-medium]) .first:before {
  content: "\\EB13";
}

:host([icon=noise-reduce-lih-medium]) .first:after {
  content: "\\EB10";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-live-image-high]) .first:before {
  content: "\\EB0F";
}

:host([icon=noise-reduce-live-image-high]) .first:after {
  content: "\\EB0E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-live-image-low]) .first:before {
  content: "\\EB0F";
}

:host([icon=noise-reduce-live-image-low]) .first:after {
  content: "\\EB0D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=noise-reduce-live-image-medium]) .first:before {
  content: "\\EB0F";
}

:host([icon=noise-reduce-live-image-medium]) .first:after {
  content: "\\EB0C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=radiation-low]) .first:before {
  content: "\\EB26";
}

:host([icon=radiation-low]) .first:after {
  content: "\\EB25";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=radiation-medium]) .first:before {
  content: "\\EB23";
}

:host([icon=radiation-medium]) .first:after {
  content: "\\EB24";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=ed-percent]) .first:before {
  content: "\\EB64";
}

:host([icon=ed-percent]) .first:after {
  content: "\\EB63";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=stress-layout-hide]) .first:before {
  content: "\\EB71";
}

:host([icon=stress-layout-hide]) .first:after {
  content: "\\EB70";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=wifi-1]) .first:before {
  content: "\\EB82";
}

:host([icon=wifi-1]) .first:after {
  content: "\\EB83";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=wifi-2]) .first:before {
  content: "\\EB7A";
}

:host([icon=wifi-2]) .first:after {
  content: "\\EB7B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=wifi-3]) .first:before {
  content: "\\EB78";
}

:host([icon=wifi-3]) .first:after {
  content: "\\EB79";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=fuse-images]) .first:before {
  content: "\\EB7D";
}

:host([icon=fuse-images]) .first:after {
  content: "\\EB7E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=inr-medication-full-dose]) .first:before,
:host([icon=medication-full-dose]) .first:before {
  content: "\\EB90";
}

:host([icon=inr-medication-full-dose]) .first:after,
:host([icon=medication-full-dose]) .first:after {
  content: "\\EB91";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=inr-medication-half-dose]) .first:before,
:host([icon=medication-half-dose]) .first:before {
  content: "\\EB8E";
}

:host([icon=inr-medication-half-dose]) .first:after,
:host([icon=medication-half-dose]) .first:after {
  content: "\\EB8F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=gantry-expand]) .first:before {
  content: "\\EBAD";
}

:host([icon=gantry-expand]) .first:after {
  content: "\\EBAC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=delete-point]) .first:before {
  content: "\\EBD5";
}

:host([icon=delete-point]) .first:after {
  content: "\\EBD6";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=usb-stick-space-1]) .first:before {
  content: "\\EBC1";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=usb-stick-space-1]) .first:after {
  content: "\\EBC0";
}

:host([icon=usb-stick-space]) .first:before,
:host([icon=usb-stick-space-2]) .first:before {
  content: "\\EBC1";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=usb-stick-space]) .first:after,
:host([icon=usb-stick-space-2]) .first:after {
  content: "\\EBBF";
}

:host([icon=usb-stick-space-3]) .first:before {
  content: "\\EBC1";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=usb-stick-space-3]) .first:after {
  content: "\\EBBE";
}

:host([icon=usb-stick-space-4]) .first:before {
  content: "\\EBC1";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=usb-stick-space-4]) .first:after {
  content: "\\EBBD";
}

:host([icon=usb-stick-space-5]) .first:before {
  content: "\\EBC1";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=usb-stick-space-5]) .first:after {
  content: "\\EBBC";
}

:host([icon=mute-alarm]) .first:before {
  content: "\\EBE0";
}

:host([icon=mute-alarm]) .first:after {
  content: "\\EBE1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lung-breathing-percentile]) .first:before {
  content: "\\EBE5";
}

:host([icon=lung-breathing-percentile]) .first:after {
  content: "\\EBE4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=heart-left-ventricle]) .first:before {
  content: "\\EC07";
}

:host([icon=heart-left-ventricle]) .first:after {
  content: "\\EC08";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=heart-ventricles]) .first:before {
  content: "\\EC09";
}

:host([icon=heart-ventricles]) .first:after {
  content: "\\EC0A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=heart-ventricles-manual]) .first:before {
  content: "\\EC0B";
}

:host([icon=heart-ventricles-manual]) .first:after {
  content: "\\EC0C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=vertebrae-centering]) .first:before {
  content: "\\EC17";
}

:host([icon=vertebrae-centering]) .first:after {
  content: "\\EC14";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lung-breathing-percentile-restart]) .first:before {
  content: "\\EC1D";
}

:host([icon=lung-breathing-percentile-restart]) .first:after {
  content: "\\EC1C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=position-lateral-right]) .first:before,
:host([icon=patient-position-lateral-left]) .first:before {
  content: "\\EC2E";
}

:host([icon=position-lateral-right]) .first:after,
:host([icon=patient-position-lateral-left]) .first:after {
  content: "\\EC2F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=position-lateral-left]) .first:before,
:host([icon=patient-position-lateral-right]) .first:before {
  content: "\\EC2D";
}

:host([icon=position-lateral-left]) .first:after,
:host([icon=patient-position-lateral-right]) .first:after {
  content: "\\EC2C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=position-prone]) .first:before,
:host([icon=patient-position-supine]) .first:before {
  content: "\\EC29";
}

:host([icon=position-prone]) .first:after,
:host([icon=patient-position-supine]) .first:after {
  content: "\\EC28";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=position-supine]) .first:before,
:host([icon=patient-position-prone]) .first:before {
  content: "\\EC2B";
}

:host([icon=position-supine]) .first:after,
:host([icon=patient-position-prone]) .first:after {
  content: "\\EC2A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=virtual-reality]) .first:before {
  content: "\\EC27";
}

:host([icon=virtual-reality]) .first:after {
  content: "\\EC26";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=spine-ranges]) .first:before {
  content: "\\EC49";
}

:host([icon=spine-ranges]) .first:after {
  content: "\\EC4A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=position-display-medium]) .first:before {
  content: "\\EC4C";
}

:host([icon=position-display-medium]) .first:after {
  content: "\\EC36";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=footswitch-battery-1]) .first:before {
  content: "\\EBD3";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=footswitch-battery-1]) .first:after {
  content: "\\EBD4";
}

:host([icon=footswitch-battery-empty]) .first:before {
  content: "\\EBD3";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=footswitch-battery-empty]) .first:after {
  content: "\\EBCF";
}

:host([icon=handcontrol-battery-1]) .first:before {
  content: "\\EBCD";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=handcontrol-battery-1]) .first:after {
  content: "\\EBD4";
}

:host([icon=handcontrol-battery-empty]) .first:before {
  content: "\\EBCD";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=handcontrol-battery-empty]) .first:after {
  content: "\\EBCF";
}

:host([icon=test-image]) .first:before {
  content: "\\EB1F";
}

:host([icon=test-image]) .first:after {
  content: "\\EB1E";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=test-image]) .second:before {
  content: "\\EB1D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=isolate-volume]) .first:before {
  content: "\\EBAB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=isolate-volume]) .first:after {
  content: "\\EBAA";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=isolate-volume]) .second:before {
  content: "\\EBA9";
}

:host([icon=download-completed]) .first:before {
  content: "\\EA79";
}

:host([icon=download-completed]) .first:after {
  content: "\\E990";
}

:host([icon=download-completed]) .second:before {
  content: "\\E995";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host(:not([color])[icon=download-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=download-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([icon=import-completed]) .first:before {
  content: "\\EA80";
}

:host([icon=import-completed]) .first:after {
  content: "\\EA81";
}

:host([icon=import-completed]) .second:before {
  content: "\\EA82";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host(:not([color])[icon=import-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=import-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([icon=rt-laser-not-zero]) .first:before {
  content: "\\E993";
}

:host([icon=rt-laser-not-zero]) .first:after {
  content: "\\EA4B";
  color: rgb(var(--functional-yellow));
}

:host([icon=rt-laser-not-zero]) .second:before {
  content: "\\EAB3";
  color: #000000;
}

:host([icon=connection-quality-medium]) .first:before {
  content: "\\E93C";
}

:host([icon=connection-quality-medium]) .first:after {
  content: "\\E93B";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=connection-quality-medium]) .second:before {
  content: "\\E93A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=feet-first-prone]) .first:before {
  content: "\\E10A";
}

:host([icon=feet-first-prone]) .first:after {
  content: "\\E10E";
}

:host([icon=feet-first-prone]) .second:before {
  content: "\\E921";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=corner-menu-br-bounding-box]) .first:before {
  content: "\\E9ED";
}

:host([icon=corner-menu-br-bounding-box]) .first:after {
  content: "\\E9EC";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=corner-menu-br-bounding-box]) .second:before {
  content: "\\E9EB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=vessel-coronary-ffr]) .first:before {
  content: "\\EA4D";
}

:host([icon=vessel-coronary-ffr]) .first:after {
  content: "\\EA4E";
}

:host([icon=vessel-coronary-ffr]) .second:before {
  content: "\\EA4F";
}

:host(:not([color])[icon=vessel-coronary-ffr]) .first:before {
  content: "\\EA4D";
  color: #ffff00;
}

:host(:not([color])[icon=vessel-coronary-ffr]) .first:after {
  content: "\\EA4E";
  color: #52c1ff;
}

:host(:not([color])[icon=vessel-coronary-ffr]) .second:before {
  content: "\\EA4F";
  color: #be1818;
}

:host([icon=aspect-overlay-hide]) .first:before {
  content: "\\EB93";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host(:not([color])[icon=aspect-overlay-hide]) .first:after {
  content: "\\EB95";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=aspect-overlay-hide]) .first:after {
  content: "\\EB94";
}

:host([icon=aspect-score]) .first:before {
  content: "\\EB96";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host(:not([color])[icon=aspect-score]) .first:after {
  content: "\\EB98";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=aspect-score]) .first:after {
  content: "\\EB97";
}

:host([icon=aspect-score-cancel]) .first:before {
  content: "\\EB99";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host(:not([color])[icon=aspect-score-cancel]) .first:after {
  content: "\\EB9B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=aspect-score-cancel]) .first:after {
  content: "\\EB9A";
}

:host([icon=aspect-score-confirm]) .first:before {
  content: "\\EB9C";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host(:not([color])[icon=aspect-score-confirm]) .first:after {
  content: "\\EB9B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=aspect-score-confirm]) .first:after {
  content: "\\EB9A";
}

:host([icon=connection-quality-high]) .first:before {
  content: "\\E937";
}

:host([icon=connection-quality-high]) .first:after {
  content: "\\E938";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=connection-quality-high]) .second:before {
  content: "\\E935";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=connection-quality-high]) .second:after {
  content: "\\E936";
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host(:not([color])[icon=lines-show]) .first:before {
  content: "\\E917";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([color][icon=lines-show]) .first:before {
  content: "\\E917";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=lines-show]) .first:after {
  content: "\\E918";
}

:host([icon=show-hide-metal]) .first:before {
  content: "\\E956";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=show-hide-metal]) .first:after {
  content: "\\E955";
}

:host([icon=topogram]) .first:before {
  content: "\\E931";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=topogram]) .first:after {
  content: "\\E932";
}

:host([icon=mdt-postponed]) .first:before {
  content: "\\E96A";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=mdt-postponed]) .first:after {
  content: "\\E96B";
}

:host(:not([color])[icon=mdt-postponed]) .second:before {
  content: "\\E96C";
  color: rgba(var(--ui-1), 0);
}

:host([color][icon=mdt-postponed]) .second:before {
  content: "\\E96C";
  color: #000000;
}

:host([icon=trend-up]) .first:before {
  content: "\\E982";
}

:host(:not([color])[icon=trend-up]) .first:after {
  content: "\\E983";
  color: rgba(var(--ui-1), 0);
}

:host([color][icon=trend-up]) .first:after {
  content: "\\E983";
  color: #ffffff;
}

:host([icon=trend-stable]) .first:before {
  content: "\\E981";
}

:host(:not([color])[icon=trend-stable]) .first:after {
  content: "\\E984";
  color: rgba(var(--ui-1), 0);
}

:host([color][icon=trend-stable]) .first:after {
  content: "\\E984";
  color: #000000;
}

:host([icon=trend-down]) .first:before {
  content: "\\E97F";
}

:host(:not([color])[icon=trend-down]) .first:after {
  content: "\\E980";
  color: rgba(var(--ui-1), 0);
}

:host([color][icon=trend-down]) .first:after {
  content: "\\E980";
  color: #ffffff;
}

:host([icon=blood-pressure-completed]) .first:before {
  content: "\\E98F";
}

:host([icon=blood-pressure-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=blood-pressure-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=blood-pressure-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=blood-pressure-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=pain-scale-completed]) .first:before {
  content: "\\EB2A";
}

:host([icon=pain-scale-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=pain-scale-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=pain-scale-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=pain-scale-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=kvm-switch-completed]) .first:before {
  content: "\\EC50";
}

:host([icon=kvm-switch-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=kvm-switch-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=kvm-switch-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=kvm-switch-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=handcontrol-wifi-error]) .first:before {
  content: "\\EBE6";
}

:host([icon=handcontrol-wifi-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=handcontrol-wifi-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=handcontrol-wifi-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=handcontrol-wifi-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=blood-pressure-error]) .first:before {
  content: "\\E98F";
}

:host([icon=blood-pressure-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=blood-pressure-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=blood-pressure-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=blood-pressure-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=blood-pressure-in-progress]) .first:before {
  content: "\\E98F";
}

:host([icon=blood-pressure-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=blood-pressure-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=blood-pressure-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=blood-pressure-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=blood-pressure-warning]) .first:before {
  content: "\\E98F";
}

:host([icon=blood-pressure-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=blood-pressure-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=blood-pressure-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=blood-pressure-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=inr-completed]) .first:before,
:host([icon=inr-measurement-completed]) .first:before {
  content: "\\E9A7";
}

:host([icon=inr-completed]) .first:after,
:host([icon=inr-measurement-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=inr-completed]) .first:after,
:host(:not([color])[icon=inr-measurement-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=inr-completed]) .second:before,
:host(:not([color])[icon=inr-measurement-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=inr-completed]) .second:before,
:host([color][icon=inr-measurement-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=inr-error]) .first:before,
:host([icon=inr-measurement-error]) .first:before {
  content: "\\E9A7";
}

:host([icon=inr-error]) .first:after,
:host([icon=inr-measurement-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=inr-error]) .first:after,
:host(:not([color])[icon=inr-measurement-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=inr-error]) .second:before,
:host(:not([color])[icon=inr-measurement-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=inr-error]) .second:before,
:host([color][icon=inr-measurement-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=inr-in-progress]) .first:before,
:host([icon=inr-measurement-in-progress]) .first:before {
  content: "\\E9A7";
}

:host([icon=inr-in-progress]) .first:after,
:host([icon=inr-measurement-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=inr-in-progress]) .first:after,
:host(:not([color])[icon=inr-measurement-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=inr-in-progress]) .second:before,
:host(:not([color])[icon=inr-measurement-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=inr-in-progress]) .second:before,
:host([color][icon=inr-measurement-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=inr-warning]) .first:before,
:host([icon=inr-measurement-warning]) .first:before {
  content: "\\E9A7";
}

:host([icon=inr-warning]) .first:after,
:host([icon=inr-measurement-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=inr-warning]) .first:after,
:host(:not([color])[icon=inr-measurement-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=inr-warning]) .second:before,
:host(:not([color])[icon=inr-measurement-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=inr-warning]) .second:before,
:host([color][icon=inr-measurement-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=kitmed-report-warning]) .first:before {
  content: "\\E9AA";
}

:host([icon=kitmed-report-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=kitmed-report-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=kitmed-report-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=kitmed-report-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=kitpro-warning]) .first:before {
  content: "\\E9AD";
}

:host([icon=kitpro-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=kitpro-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=kitpro-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=kitpro-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=active-implant-warning]) .first:before {
  content: "\\EAFD";
}

:host([icon=active-implant-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=active-implant-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=active-implant-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=active-implant-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=radiation-high-warning]) .first:before {
  content: "\\EB27";
}

:host([icon=radiation-high-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=radiation-high-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=radiation-high-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=radiation-high-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=medication-completed]) .first:before,
:host([icon=inr-medication-completed]) .first:before {
  content: "\\E9AF";
}

:host([icon=medication-completed]) .first:after,
:host([icon=inr-medication-completed]) .first:after {
  content: "\\E9AE";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=medication-completed]) .second:before,
:host([icon=inr-medication-completed]) .second:before {
  content: "\\E990";
}

:host(:not([color])[icon=medication-completed]) .second:before,
:host(:not([color])[icon=inr-medication-completed]) .second:before {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=medication-completed]) .second:after,
:host(:not([color])[icon=inr-medication-completed]) .second:after {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=medication-completed]) .second:after,
:host([color][icon=inr-medication-completed]) .second:after {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=medication-error]) .first:before,
:host([icon=inr-medication-error]) .first:before {
  content: "\\E9AF";
}

:host([icon=medication-error]) .first:after,
:host([icon=inr-medication-error]) .first:after {
  content: "\\E9AE";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=medication-error]) .second:before,
:host([icon=inr-medication-error]) .second:before {
  content: "\\E996";
}

:host(:not([color])[icon=medication-error]) .second:before,
:host(:not([color])[icon=inr-medication-error]) .second:before {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=medication-error]) .second:after,
:host(:not([color])[icon=inr-medication-error]) .second:after {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=medication-error]) .second:after,
:host([color][icon=inr-medication-error]) .second:after {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=medication-in-progress]) .first:before,
:host([icon=inr-medication-in-progress]) .first:before {
  content: "\\E9AF";
}

:host([icon=medication-in-progress]) .first:after,
:host([icon=inr-medication-in-progress]) .first:after {
  content: "\\E9AE";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=medication-in-progress]) .second:before,
:host([icon=inr-medication-in-progress]) .second:before {
  content: "\\E998";
}

:host(:not([color])[icon=medication-in-progress]) .second:before,
:host(:not([color])[icon=inr-medication-in-progress]) .second:before {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=medication-in-progress]) .second:after,
:host(:not([color])[icon=inr-medication-in-progress]) .second:after {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=medication-in-progress]) .second:after,
:host([color][icon=inr-medication-in-progress]) .second:after {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=medication-warning]) .first:before,
:host([icon=inr-medication-warning]) .first:before {
  content: "\\E9AF";
}

:host([icon=medication-warning]) .first:after,
:host([icon=inr-medication-warning]) .first:after {
  content: "\\E9AE";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=medication-warning]) .second:before,
:host([icon=inr-medication-warning]) .second:before {
  content: "\\E9A0";
}

:host(:not([color])[icon=medication-warning]) .second:before,
:host(:not([color])[icon=inr-medication-warning]) .second:before {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=medication-warning]) .second:after,
:host(:not([color])[icon=inr-medication-warning]) .second:after {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=medication-warning]) .second:after,
:host([color][icon=inr-medication-warning]) .second:after {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=message-read-notification]) .first:before {
  content: "\\E9B0";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=message-read-notification]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=message-read-notification]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=message-read-notification]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=message-read-notification]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=remote-desktop-active]) .first:before {
  content: "\\EBC4";
}

:host([icon=remote-desktop-active]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=remote-desktop-active]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=remote-desktop-active]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=remote-desktop-active]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=weight-measurement-completed]) .first:before {
  content: "\\E9BB";
}

:host([icon=weight-measurement-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=weight-measurement-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=weight-measurement-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=weight-measurement-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=remote-service-error]) .first:before {
  content: "\\EBD9";
}

:host([icon=remote-service-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=remote-service-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=remote-service-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=remote-service-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=remote-service-warning]) .first:before {
  content: "\\EBD9";
}

:host([icon=remote-service-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=remote-service-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=remote-service-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=remote-service-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=weight-measurement-error]) .first:before {
  content: "\\E9BB";
}

:host([icon=weight-measurement-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=weight-measurement-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=weight-measurement-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=weight-measurement-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=weight-measurement-in-progress]) .first:before {
  content: "\\E9BB";
}

:host([icon=weight-measurement-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=weight-measurement-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=weight-measurement-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=weight-measurement-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=weight-measurement-warning]) .first:before {
  content: "\\E9BB";
}

:host([icon=weight-measurement-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=weight-measurement-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=weight-measurement-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=weight-measurement-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=wellbeing-completed]) .first:before {
  content: "\\E9BA";
}

:host([icon=wellbeing-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=wellbeing-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=wellbeing-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=wellbeing-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=wellbeing-error]) .first:before {
  content: "\\E9BA";
}

:host([icon=wellbeing-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=wellbeing-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=wellbeing-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=wellbeing-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=wellbeing-in-progress]) .first:before {
  content: "\\E9BA";
}

:host([icon=wellbeing-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=wellbeing-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=wellbeing-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=wellbeing-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=wellbeing-warning]) .first:before {
  content: "\\E9BA";
}

:host([icon=wellbeing-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=wellbeing-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=wellbeing-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=wellbeing-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=sending-completed]) .first:before {
  content: "\\E9CC";
}

:host([icon=sending-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=sending-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=sending-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=sending-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=sending-failed]) .first:before {
  content: "\\E9CC";
}

:host([icon=sending-failed]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=sending-failed]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=sending-failed]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=sending-failed]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=sending-in-progress]) .first:before {
  content: "\\E9CC";
}

:host([icon=sending-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=sending-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=sending-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=sending-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=radiation-dose-warning]) .first:before {
  content: "\\E9D3";
}

:host([icon=radiation-dose-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=radiation-dose-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=radiation-dose-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=radiation-dose-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=radiation-error]) .first:before {
  content: "\\E9D3";
}

:host([icon=radiation-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=radiation-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=radiation-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=radiation-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=radiation-ready]) .first:before {
  content: "\\E9D3";
}

:host([icon=radiation-ready]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=radiation-ready]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=radiation-ready]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=radiation-ready]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=dicom-confirmation]) .first:before {
  content: "\\EA07";
}

:host([icon=dicom-confirmation]) .first:after {
  content: "\\EA06";
}

:host(:not([color])[icon=dicom-confirmation]) .first:after {
  content: "\\EA06";
  color: #6e7b9f;
}

:host(:not([color])[icon=dicom-confirmation]) .second:before {
  content: "\\EA05";
  color: #ffffff;
}

:host([color][icon=dicom-confirmation]) .second:before {
  content: "\\EA05";
  color: #ffffff;
}

:host([icon=system-information]) .first:before {
  content: "\\EA00";
}

:host([icon=system-information]) .first:after {
  content: "\\EA0A";
}

:host(:not([color])[icon=system-information]) .first:after {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=system-information]) .second:before {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=system-information]) .second:before {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=dicom-archived]) .first:before {
  content: "\\EA1B";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=xs][icon=dicom-archived]) .first:after {
  content: "\\EA1C";
}

:host(:not([color])[size=xs][icon=dicom-archived]) .first:after {
  content: "\\EA1C";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=xs][icon=dicom-archived]) .second:before {
  content: "\\EA1D";
  color: #ffffff;
}

:host([color][size=xs][icon=dicom-archived]) .second:before {
  content: "\\EA1D";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=dicom-archived]) .first:before {
  content: "\\EA1E";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=s][icon=dicom-archived]) .first:after {
  content: "\\EA1F";
}

:host(:not([color])[size=s][icon=dicom-archived]) .first:after {
  content: "\\EA1F";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=s][icon=dicom-archived]) .second:before {
  content: "\\EA20";
  color: #ffffff;
}

:host([color][size=s][icon=dicom-archived]) .second:before {
  content: "\\EA20";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=dicom-archived]) .first:before {
  content: "\\EA07";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=m][icon=dicom-archived]) .first:after {
  content: "\\E990";
}

:host(:not([color])[size=m][icon=dicom-archived]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=m][icon=dicom-archived]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][size=m][icon=dicom-archived]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([size=l][icon=dicom-archived]) .first:before {
  content: "\\EA1E";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=l][icon=dicom-archived]) .first:after {
  content: "\\EA1F";
}

:host(:not([color])[size=l][icon=dicom-archived]) .first:after {
  content: "\\EA1F";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=l][icon=dicom-archived]) .second:before {
  content: "\\EA20";
  color: #ffffff;
}

:host([color][size=l][icon=dicom-archived]) .second:before {
  content: "\\EA20";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=dicom-failed]) .first:before {
  content: "\\EA1B";
}

:host([size=xs][icon=dicom-failed]) .first:after {
  content: "\\EA21";
}

:host(:not([color])[size=xs][icon=dicom-failed]) .first:after {
  content: "\\EA21";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=xs][icon=dicom-failed]) .second:before {
  content: "\\EA23";
  color: #ffffff;
}

:host([color][size=xs][icon=dicom-failed]) .second:before {
  content: "\\EA23";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=dicom-failed]) .first:before {
  content: "\\EA1E";
}

:host([size=s][icon=dicom-failed]) .first:after {
  content: "\\EA24";
}

:host(:not([color])[size=s][icon=dicom-failed]) .first:after {
  content: "\\EA24";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=s][icon=dicom-failed]) .second:before {
  content: "\\EA25";
  color: #ffffff;
}

:host([color][size=s][icon=dicom-failed]) .second:before {
  content: "\\EA25";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=dicom-failed]) .first:before {
  content: "\\EA07";
}

:host([size=m][icon=dicom-failed]) .first:after {
  content: "\\E996";
}

:host(:not([color])[size=m][icon=dicom-failed]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=m][icon=dicom-failed]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][size=m][icon=dicom-failed]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([size=l][icon=dicom-failed]) .first:before {
  content: "\\EA1E";
}

:host([size=l][icon=dicom-failed]) .first:after {
  content: "\\EA24";
}

:host(:not([color])[size=l][icon=dicom-failed]) .first:after {
  content: "\\EA24";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=l][icon=dicom-failed]) .second:before {
  content: "\\EA25";
  color: #ffffff;
}

:host([color][size=l][icon=dicom-failed]) .second:before {
  content: "\\EA25";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=dicom-sending-in-progress]) .first:before {
  content: "\\EA1B";
}

:host([size=xs][icon=dicom-sending-in-progress]) .first:after {
  content: "\\EA26";
}

:host(:not([color])[size=xs][icon=dicom-sending-in-progress]) .first:after {
  content: "\\EA26";
  color: #52c1ff;
}

:host(:not([color])[size=xs][icon=dicom-sending-in-progress]) .second:before {
  content: "\\EA27";
  color: #000000;
}

:host([color][size=xs][icon=dicom-sending-in-progress]) .second:before {
  content: "\\EA27";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=dicom-sending-in-progress]) .first:before {
  content: "\\EA1E";
}

:host([size=s][icon=dicom-sending-in-progress]) .first:after {
  content: "\\EA28";
}

:host(:not([color])[size=s][icon=dicom-sending-in-progress]) .first:after {
  content: "\\EA28";
  color: #52c1ff;
}

:host(:not([color])[size=s][icon=dicom-sending-in-progress]) .second:before {
  content: "\\EA29";
  color: #000000;
}

:host([color][size=s][icon=dicom-sending-in-progress]) .second:before {
  content: "\\EA29";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=dicom-sending-in-progress]) .first:before {
  content: "\\EA07";
}

:host([size=m][icon=dicom-sending-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[size=m][icon=dicom-sending-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[size=m][icon=dicom-sending-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][size=m][icon=dicom-sending-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([size=l][icon=dicom-sending-in-progress]) .first:before {
  content: "\\EA1E";
}

:host([size=l][icon=dicom-sending-in-progress]) .first:after {
  content: "\\EA28";
}

:host(:not([color])[size=l][icon=dicom-sending-in-progress]) .first:after {
  content: "\\EA28";
  color: #52c1ff;
}

:host(:not([color])[size=l][icon=dicom-sending-in-progress]) .second:before {
  content: "\\EA29";
  color: #000000;
}

:host([color][size=l][icon=dicom-sending-in-progress]) .second:before {
  content: "\\EA29";
  color: rgb(var(--ui-7));
}

:host([icon=dicom-information]) .first:before {
  content: "\\EA07";
}

:host([icon=dicom-information]) .first:after {
  content: "\\EA0A";
}

:host(:not([color])[icon=dicom-information]) .first:after {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=dicom-information]) .second:before {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=dicom-information]) .second:before {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([icon=order-information]) .first:before {
  content: "\\EADD";
}

:host([icon=order-information]) .first:after {
  content: "\\EA0A";
}

:host(:not([color])[icon=order-information]) .first:after {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=order-information]) .second:before {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=order-information]) .second:before {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([icon=samples-information]) .first:before {
  content: "\\EAE2";
}

:host([icon=samples-information]) .first:after {
  content: "\\EAE3";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=samples-information]) .second:before {
  content: "\\EA0A";
}

:host(:not([color])[icon=samples-information]) .second:before {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=samples-information]) .second:after {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=samples-information]) .second:after {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=export-failed]) .first:before {
  content: "\\EA2A";
}

:host([size=xs][icon=export-failed]) .first:after {
  content: "\\EA21";
}

:host(:not([color])[size=xs][icon=export-failed]) .first:after {
  content: "\\EA21";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=xs][icon=export-failed]) .second:before {
  content: "\\EA23";
  color: #ffffff;
}

:host([color][size=xs][icon=export-failed]) .second:before {
  content: "\\EA23";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=export-failed]) .first:before {
  content: "\\EA2B";
}

:host([size=s][icon=export-failed]) .first:after {
  content: "\\EA24";
}

:host(:not([color])[size=s][icon=export-failed]) .first:after {
  content: "\\EA24";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=s][icon=export-failed]) .second:before {
  content: "\\EA25";
  color: #ffffff;
}

:host([color][size=s][icon=export-failed]) .second:before {
  content: "\\EA25";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=export-failed]) .first:before {
  content: "\\EA2C";
}

:host([size=m][icon=export-failed]) .first:after {
  content: "\\E996";
}

:host(:not([color])[size=m][icon=export-failed]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=m][icon=export-failed]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][size=m][icon=export-failed]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([size=l][icon=export-failed]) .first:before {
  content: "\\EA2B";
}

:host([size=l][icon=export-failed]) .first:after {
  content: "\\EA24";
}

:host(:not([color])[size=l][icon=export-failed]) .first:after {
  content: "\\EA24";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=l][icon=export-failed]) .second:before {
  content: "\\EA25";
  color: #ffffff;
}

:host([color][size=l][icon=export-failed]) .second:before {
  content: "\\EA25";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=export-finished]) .first:before {
  content: "\\EA2A";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=xs][icon=export-finished]) .first:after {
  content: "\\EA1C";
}

:host(:not([color])[size=xs][icon=export-finished]) .first:after {
  content: "\\EA1C";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=xs][icon=export-finished]) .second:before {
  content: "\\EA1D";
  color: #ffffff;
}

:host([color][size=xs][icon=export-finished]) .second:before {
  content: "\\EA1D";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=export-finished]) .first:before {
  content: "\\EA2B";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=s][icon=export-finished]) .first:after {
  content: "\\EA1F";
}

:host(:not([color])[size=s][icon=export-finished]) .first:after {
  content: "\\EA1F";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=s][icon=export-finished]) .second:before {
  content: "\\EA20";
  color: #ffffff;
}

:host([color][size=s][icon=export-finished]) .second:before {
  content: "\\EA20";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=export-finished]) .first:before {
  content: "\\EA2C";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=m][icon=export-finished]) .first:after {
  content: "\\E990";
}

:host(:not([color])[size=m][icon=export-finished]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=m][icon=export-finished]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][size=m][icon=export-finished]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([size=l][icon=export-finished]) .first:before {
  content: "\\EA2B";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([size=l][icon=export-finished]) .first:after {
  content: "\\EA1F";
}

:host(:not([color])[size=l][icon=export-finished]) .first:after {
  content: "\\EA1F";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=l][icon=export-finished]) .second:before {
  content: "\\EA20";
  color: #ffffff;
}

:host([color][size=l][icon=export-finished]) .second:before {
  content: "\\EA20";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=export-in-progress]) .first:before {
  content: "\\EA2A";
}

:host([size=xs][icon=export-in-progress]) .first:after {
  content: "\\EA26";
}

:host(:not([color])[size=xs][icon=export-in-progress]) .first:after {
  content: "\\EA26";
  color: #52c1ff;
}

:host(:not([color])[size=xs][icon=export-in-progress]) .second:before {
  content: "\\EA27";
  color: #000000;
}

:host([color][size=xs][icon=export-in-progress]) .second:before {
  content: "\\EA27";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=export-in-progress]) .first:before {
  content: "\\EA2B";
}

:host([size=s][icon=export-in-progress]) .first:after {
  content: "\\EA28";
}

:host(:not([color])[size=s][icon=export-in-progress]) .first:after {
  content: "\\EA28";
  color: #52c1ff;
}

:host(:not([color])[size=s][icon=export-in-progress]) .second:before {
  content: "\\EA29";
  color: #000000;
}

:host([color][size=s][icon=export-in-progress]) .second:before {
  content: "\\EA29";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=export-in-progress]) .first:before {
  content: "\\EA2C";
}

:host([size=m][icon=export-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[size=m][icon=export-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[size=m][icon=export-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][size=m][icon=export-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([size=l][icon=export-in-progress]) .first:before {
  content: "\\EA2B";
}

:host([size=l][icon=export-in-progress]) .first:after {
  content: "\\EA28";
}

:host(:not([color])[size=l][icon=export-in-progress]) .first:after {
  content: "\\EA28";
  color: #52c1ff;
}

:host(:not([color])[size=l][icon=export-in-progress]) .second:before {
  content: "\\EA29";
  color: #000000;
}

:host([color][size=l][icon=export-in-progress]) .second:before {
  content: "\\EA29";
  color: rgb(var(--ui-7));
}

:host([icon=print-completed]) .first:before {
  content: "\\E9CB";
}

:host([icon=print-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=print-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=print-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=print-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=print-completed]) .first:before {
  content: "\\EA57";
}

:host([size=s][icon=print-completed]) .first:after {
  content: "\\EA1F";
}

:host(:not([color])[size=s][icon=print-completed]) .first:after {
  content: "\\EA1F";
  color: rgb(var(--functional-green));
}

:host(:not([color])[size=s][icon=print-completed]) .second:before {
  content: "\\EA20";
  color: #ffffff;
}

:host([color][size=s][icon=print-completed]) .second:before {
  content: "\\EA20";
  color: rgb(var(--ui-7));
}

:host([icon=print-error]) .first:before {
  content: "\\E9CB";
}

:host([icon=print-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=print-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=print-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=print-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=print-error]) .first:before {
  content: "\\EA57";
}

:host([size=s][icon=print-error]) .first:after {
  content: "\\EA24";
}

:host(:not([color])[size=s][icon=print-error]) .first:after {
  content: "\\EA24";
  color: rgb(var(--functional-red));
}

:host(:not([color])[size=s][icon=print-error]) .second:before {
  content: "\\EA25";
  color: #ffffff;
}

:host([size=s][icon=print-error]) .second:before {
  content: "\\EA25";
  color: rgb(var(--ui-7));
}

:host([icon=patient-error]) .first:before {
  content: "\\EABE";
}

:host([icon=patient-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=patient-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=patient-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=patient-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=print-in-progress]) .first:before {
  content: "\\E9CB";
}

:host([icon=print-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=print-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=print-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=print-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=patient-in-progress]) .first:before {
  content: "\\EABE";
}

:host([icon=patient-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=patient-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=patient-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=patient-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=print-in-progress]) .first:before {
  content: "\\EA57";
}

:host([size=s][icon=print-in-progress]) .first:after {
  content: "\\EA28";
}

:host(:not([color])[size=s][icon=print-in-progress]) .first:after {
  content: "\\EA28";
  color: #52c1ff;
}

:host(:not([color])[size=s][icon=print-in-progress]) .second:before {
  content: "\\EA29";
  color: #000000;
}

:host([color][size=s][icon=print-in-progress]) .second:before {
  content: "\\EA29";
  color: rgb(var(--ui-7));
}

:host([icon=image-processing-error]) .first:before {
  content: "\\EA3D";
}

:host([icon=image-processing-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=image-processing-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=image-processing-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=image-processing-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=open-tasks-error]) .first:before {
  content: "\\EA52";
}

:host([color][icon=open-tasks-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=open-tasks-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=open-tasks-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=open-tasks-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=open-tasks-error]) .first:before {
  content: "\\EA52";
  color: rgba(var(--ui-1), var(--opacity-1));
}

:host([icon=open-tasks-error]) .first:after {
  content: "\\E996";
}

:host([color][icon=open-tasks-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=addin-info]) .first:before {
  content: "\\E055";
}

:host([icon=addin-info]) .first:after {
  content: "\\EA0A";
}

:host(:not([color])[icon=addin-info]) .first:after {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=addin-info]) .second:before {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=addin-info]) .second:before {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([icon=addin-warning]) .first:before {
  content: "\\E055";
}

:host([icon=addin-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=addin-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=addin-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=addin-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=auto-align-scout-failed]) .first:before {
  content: "\\E069";
}

:host([icon=auto-align-scout-failed]) .first:after {
  content: "\\EA0A";
}

:host(:not([color])[icon=addin-info]) .first:after {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=addin-info]) .second:before {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=addin-info]) .second:before {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([icon=close-patient]) .first:before,
:host([icon=patient-success]) .first:before,
:host([icon=patient-completed]) .first:before {
  content: "\\E0B1";
}

:host([icon=close-patient]) .first:after,
:host([icon=patient-success]) .first:after,
:host([icon=patient-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=close-patient]) .first:after,
:host(:not([color])[icon=patient-success]) .first:after,
:host(:not([color])[icon=patient-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=close-patient]) .second:before,
:host(:not([color])[icon=patient-success]) .second:before,
:host(:not([color])[icon=patient-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=close-patient]) .second:before,
:host([color][icon=patient-success]) .second:before,
:host([color][icon=patient-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=patient-warning]) .first:before {
  content: "\\E0B1";
}

:host([icon=patient-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=patient-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=patient-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=patient-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=patient-status-unknown]) .first:before {
  content: "\\E0B1";
}

:host([icon=patient-status-unknown]) .first:after {
  content: "\\EA06";
}

:host(:not([color])[icon=patient-status-unknown]) .first:after {
  content: "\\EA06";
  color: #6e7b9f;
}

:host(:not([color])[icon=patient-status-unknown]) .second:before {
  content: "\\EA05";
  color: #ffffff;
}

:host([color][icon=patient-status-unknown]) .second:before {
  content: "\\EA05";
  color: rgb(var(--ui-7));
}

:host([icon=copy-reference-target-busy]) .first:before {
  content: "\\E0D7";
}

:host([icon=copy-reference-target-busy]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=copy-reference-target-busy]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=copy-reference-target-busy]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([icon=copy-reference-target-error]) .first:before {
  content: "\\E0D7";
}

:host([icon=copy-reference-target-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=copy-reference-target-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=copy-reference-target-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([icon=copy-reference-target-warning]) .first:before {
  content: "\\E0D7";
}

:host([icon=copy-reference-target-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=copy-reference-target-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=copy-reference-target-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([icon=mdt-done]) .first:before {
  content: "\\E967";
}

:host([icon=mdt-done]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=mdt-done]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=mdt-done]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([icon=low-frame-rate]) .first:before {
  content: "\\E9E0";
}

:host([icon=low-frame-rate]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=low-frame-rate]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=low-frame-rate]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([icon=cloud-sync]) .first:before {
  content: "\\E9EF";
}

:host([icon=cloud-sync]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=cloud-sync]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=cloud-sync]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=cloud-sync]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=cloud-completed]) .first:before {
  content: "\\E9EF";
}

:host([icon=cloud-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=cloud-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=cloud-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=cloud-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=cloud-warning]) .first:before {
  content: "\\E9EF";
}

:host([icon=cloud-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=cloud-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=cloud-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([icon=cloud-error]) .first:before {
  content: "\\E9EF";
}

:host([icon=cloud-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=cloud-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=cloud-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=cloud-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=show-all-monitors-error]) .first:before {
  content: "\\EAA4";
}

:host([color][icon=show-all-monitors-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=show-all-monitors-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=show-all-monitors-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=show-all-monitors-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=show-all-monitors-warning]) .first:before {
  content: "\\EAA4";
}

:host([icon=show-all-monitors-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=show-all-monitors-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=show-all-monitors-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=show-all-monitors-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=match]) .first:before {
  content: "\\EAB4";
}

:host([color][icon=match]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=match]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=match]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=match]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=shopping-cart-success]) .first:before {
  content: "\\EB3F";
}

:host([icon=shopping-cart-success]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=shopping-cart-success]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=shopping-cart-success]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=shopping-cart-success]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=scanner-error]) .first:before {
  content: "\\EB4D";
}

:host([icon=scanner-error]) .first:after {
  content: "\\EB4E";
}

:host(:not([color])[icon=scanner-error]) .first:after {
  content: "\\EB4E";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=scanner-error]) .second:before {
  content: "\\EB4F";
  color: #ffffff;
}

:host([color][icon=scanner-error]) .second:before {
  content: "\\EB4F";
  color: rgb(var(--ui-7));
}

:host([icon=scanner-success]) .first:before {
  content: "\\EB4D";
}

:host([icon=scanner-success]) .first:after {
  content: "\\EB49";
}

:host(:not([color])[icon=scanner-success]) .first:after {
  content: "\\EB49";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=scanner-success]) .second:before {
  content: "\\EB4A";
  color: #ffffff;
}

:host([color][icon=scanner-success]) .second:before {
  content: "\\EB4A";
  color: rgb(var(--ui-7));
}

:host([icon=scanner-in-progress]) .first:before {
  content: "\\EB4D";
}

:host([icon=scanner-in-progress]) .first:after {
  content: "\\EB4C";
}

:host(:not([color])[icon=scanner-in-progress]) .first:after {
  content: "\\EB4B";
  color: #000000;
}

:host(:not([color])[icon=scanner-in-progress]) .second:before {
  content: "\\EB4C";
  color: #52c1ff;
}

:host([color][icon=scanner-in-progress]) .second:before {
  content: "\\EB4B";
  color: rgb(var(--ui-7));
}

:host([icon=temperature-error]) .first:before {
  content: "\\EB55";
}

:host([icon=temperature-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=temperature-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=temperature-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=temperature-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=temperature-warning]) .first:before {
  content: "\\EB53";
}

:host([icon=temperature-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=temperature-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=temperature-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=temperature-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=temperature-success]) .first:before {
  content: "\\EB54";
}

:host([icon=temperature-success]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=temperature-success]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=temperature-success]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=temperature-success]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=acquisition-error]) .first:before,
:host([icon=tube-error]) .first:before {
  content: "\\EB52";
}

:host([icon=acquisition-error]) .first:after,
:host([icon=tube-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=acquisition-error]) .first:after,
:host(:not([color])[icon=tube-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=acquisition-error]) .second:before,
:host(:not([color])[icon=tube-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=acquisition-error]) .second:before,
:host([color][icon=tube-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=wifi-error]) .first:before {
  content: "\\EB69";
}

:host([icon=wifi-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=wifi-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=wifi-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=wifi-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=ethernet-error]) .first:before {
  content: "\\EB8A";
}

:host([icon=ethernet-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=ethernet-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=ethernet-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=ethernet-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=signal-strength-error]) .first:before {
  content: "\\EB88";
}

:host([icon=signal-strength-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=signal-strength-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=signal-strength-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=signal-strength-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=network-export-error]) .first:before {
  content: "\\EBA8";
}

:host([icon=network-export-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=network-export-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=network-export-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=network-export-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=network-import-error]) .first:before {
  content: "\\EBDF";
}

:host([icon=network-import-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=network-import-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=network-import-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=network-import-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=usb-export-error]) .first:before {
  content: "\\EBA7";
}

:host([icon=usb-export-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=usb-export-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=usb-export-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=usb-export-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=usb-import-error]) .first:before {
  content: "\\EBDD";
}

:host([icon=usb-import-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=usb-import-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=usb-import-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=usb-import-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=acquisition-warning]) .first:before,
:host([icon=tube-warning]) .first:before {
  content: "\\EB52";
}

:host([icon=acquisition-warning]) .first:after,
:host([icon=tube-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=acquisition-warning]) .first:after,
:host(:not([color])[icon=tube-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=acquisition-warning]) .second:before,
:host(:not([color])[icon=tube-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=acquisition-warning]) .second:before,
:host([color][icon=tube-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=acquisition-ready]) .first:before,
:host([icon=tube-ready]) .first:before {
  content: "\\EB52";
}

:host([icon=acquisition-ready]) .first:after,
:host([icon=tube-ready]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=acquisition-ready]) .first:after,
:host(:not([color])[icon=tube-ready]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=acquisitione-ready]) .second:before,
:host(:not([color])[icon=tube-ready]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=acquisition-ready]) .second:before,
:host([color][icon=tube-ready]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=read]) .first:before {
  content: "\\EB5A";
}

:host([icon=read]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=read]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=read]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=read]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=medications-completed]) .first:before {
  content: "\\EB92";
}

:host([icon=medications-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=medications-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=medications-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=medications-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=medications-warning]) .first:before {
  content: "\\EB92";
}

:host([icon=medications-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=medications-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=medications-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=medications-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=medications-error]) .first:before {
  content: "\\EB92";
}

:host([icon=medications-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=medications-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=medications-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=medications-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=medications-in-progress]) .first:before {
  content: "\\EB92";
}

:host([icon=medications-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=medications-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=medications-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=medications-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=tablet-horizontal-error]) .first:before {
  content: "\\EBC2";
}

:host([icon=tablet-horizontal-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=tablet-horizontal-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=tablet-horizontal-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=tablet-horizontal-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=door-open-warning]) .first:before {
  content: "\\EBEE";
}

:host([icon=door-open-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=door-open-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=door-open-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=door-open-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=range-radial-volume]) .first:before {
  content: "\\EC42";
}

:host([icon=range-radial-volume]) .first:after {
  content: "\\EC43";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=range-radial-volume]) .second:before {
  content: "\\EC44";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=range-radial-slice]) .first:before {
  content: "\\EC3F";
}

:host([icon=range-radial-slice]) .first:after {
  content: "\\EC40";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=range-radial-slice]) .second:before {
  content: "\\EC41";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=range-parallel]) .first:before {
  content: "\\EC3C";
}

:host([icon=range-parallel]) .first:after {
  content: "\\EC3D";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=range-parallel]) .second:before {
  content: "\\EC3E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=range-curved]) .first:before {
  content: "\\EC39";
}

:host([icon=range-curved]) .first:after {
  content: "\\EC3A";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=range-curved]) .second:before {
  content: "\\EC3B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=range-shifted-curve]) .first:before {
  content: "\\EC45";
}

:host([icon=range-shifted-curve]) .first:after {
  content: "\\EC46";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=range-shifted-curve]) .second:before {
  content: "\\EC47";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=radiation-lock]) .first:before {
  content: "\\EC5B";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=radiation-lock]) .first:after {
  content: "\\EC5C";
}

:host([size=xs][icon=analyzer]) .first:before {
  content: "\\EC58";
}

:host([size=s][icon=analyzer]) .first:before {
  content: "\\EC59";
}

:host([icon=analyzer]) .first:before {
  content: "\\EC5A";
}

:host([size=xs][icon=recommendation]) .first:before {
  content: "\\EC55";
}

:host([size=s][icon=recommendation]) .first:before {
  content: "\\EC56";
}

:host([icon=recommendation]) .first:before {
  content: "\\EC57";
}

:host([icon=no-findings]) .first:before {
  content: "\\EC62";
}

:host([icon=analyzer-error][size=s]) .first:before {
  content: "\\EC5F";
}

:host([icon=analyzer-error][size=s]) .first:after {
  content: "\\EA24";
}

:host(:not([color])[icon=analyzer-error][size=s]) .first:after {
  content: "\\EA24";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=analyzer-error][size=s]) .second:before {
  content: "\\EA25";
  color: #ffffff;
}

:host([icon=analyzer-error]) .first:before {
  content: "\\EC60";
}

:host([icon=analyzer-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=analyzer-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=analyzer-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([icon=group]) .first:before {
  content: "\\EC61";
}

:host([icon=ungroup]) .first:before {
  content: "\\EC64";
}

:host([icon=projector]) .first:before {
  content: "\\EC63";
}

:host([icon=dual-energy-information]) .first:before {
  content: "\\EC5D";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=dual-energy-information]) .first:after {
  content: "\\EC5E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host(:not([color])[icon=dual-energy-information]) .second:before {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=dual-energy-information]) .second:after {
  content: "\\EA09";
  color: #ffffff;
}

:host([icon=dual-energy-information]) .second:before {
  content: "\\EA0A";
}

:host([icon=dual-energy-information]) .second:after {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([icon=duplicate-step]) .first:before {
  content: "\\EC53";
}

:host([icon=detector-series]) .first:before {
  content: "\\EC67";
}

:host([icon=brush]) .first:before {
  content: "\\EC66";
}

:host([icon=body-registration-anterior-posterior-left]) .first:before {
  content: "\\EC65";
}

:host([icon=injection-information]) .first:before {
  content: "\\EC69";
}

:host([icon=injection-information]) .first:after {
  content: "\\EA0A";
}

:host(:not([color])[icon=injection-information]) .first:after {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=injection-information]) .second:before {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=injection-information]) .second:before {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([size=s][icon=injection-information]) .first:before {
  content: "\\EC68";
}

:host([size=s][icon=injection-information]) .first:after {
  content: "\\EC6A";
}

:host(:not([color])[size=s][icon=injection-information]) .first:after {
  content: "\\EC6A";
  color: #6e7b9f;
}

:host(:not([color])[size=s][icon=injection-information]) .second:before {
  content: "\\EC6B";
  color: #ffffff;
}

:host([color][size=s][icon=injection-information]) .second:before {
  content: "\\EC6B";
  color: rgb(var(--ui-7));
}

:host([icon=network-status-error]) .first:before {
  content: "\\EC6C";
}

:host([icon=network-status-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=network-status-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=network-status-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=network-status-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=network-status-level-1]) .first:before {
  content: "\\EC71";
}

:host([icon=network-status-level-1]) .first:after {
  content: "\\EC72";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=network-status-level-2]) .first:before {
  content: "\\EC6F";
}

:host([icon=network-status-level-2]) .first:after {
  content: "\\EC70";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=network-status-level-3]) .first:before {
  content: "\\EC6D";
}

:host([icon=network-status-level-3]) .first:after {
  content: "\\EC6E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=video-analog]) .first:before {
  content: "\\EC7B";
}

:host([size=s][icon=video-analog]) .first:before {
  content: "\\EC7A";
}

:host([size=xs][icon=video-analog]) .first:before {
  content: "\\EC79";
}

:host([icon=thumbnail-status-4d]) .first:before {
  content: "\\EC78";
}

:host([size=s][icon=thumbnail-status-4d]) .first:before {
  content: "\\EC77";
}

:host([size=xs][icon=thumbnail-status-4d]) .first:before {
  content: "\\EC76";
}

:host([icon=thumbnail-status-3d]) .first:before {
  content: "\\EC75";
}

:host([size=s][icon=thumbnail-status-3d]) .first:before {
  content: "\\EC74";
}

:host([size=xs][icon=thumbnail-status-3d]) .first:before {
  content: "\\EC73";
}

:host([icon=patient-emergency-add]) .first:before {
  content: "\\EC54";
}

:host([icon=exposure-correction]) .first:before {
  content: "\\EC95";
}

:host([icon=block-movement]) .first:before {
  content: "\\EC94";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=block-movement]) .first:after {
  content: "\\ECCA";
}

:host([icon=copy-results-to-clipboard]) .first:before {
  content: "\\EC93";
}

:host([icon=timer-cancel]) .first:before {
  content: "\\EC92";
}

:host([icon=grid]) .first:before {
  content: "\\EC91";
}

:host([icon=block-radiation]) .first:before {
  content: "\\ECAF";
}

:host([icon=block-radiation]) .first:after {
  content: "\\EC90";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chamber-all]) .first:before {
  content: "\\EC8F";
}

:host([icon=chamber-left-middle]) .first:before {
  content: "\\EC8D";
}

:host([icon=chamber-left-middle]) .first:after {
  content: "\\EC8E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chamber-left-right]) .first:before {
  content: "\\EC8B";
}

:host([icon=chamber-left-right]) .first:after {
  content: "\\EC8C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chamber-middle-right]) .first:before {
  content: "\\EC89";
}

:host([icon=chamber-middle-right]) .first:after {
  content: "\\EC8A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=collimation-rotated]) .first:before {
  content: "\\EC88";
}

:host([icon=detector-tray-empty]) .first:before {
  content: "\\EC87";
}

:host([icon=grid-off]) .first:before {
  content: "\\EC86";
}

:host([icon=patient-size-x-large]) .first:before {
  content: "\\EC85";
}

:host([icon=remote-pager]) .first:before {
  content: "\\EC84";
}

:host([icon=sid]) .first:before {
  content: "\\EC83";
}

:host([icon=size-collimation]) .first:before {
  content: "\\EC82";
}

:host([icon=sod-measure]) .first:before {
  content: "\\EC81";
}

:host([icon=table-ysio]) .first:before {
  content: "\\EC80";
}

:host([icon=top-alignment]) .first:before {
  content: "\\EC7F";
}

:host([icon=wallstand-angle]) .first:before {
  content: "\\EC97";
}

:host([icon=wallstand-angle]) .first:after {
  content: "\\EC7E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=magnification-factor]) .first:before {
  content: "\\EC99";
}

:host([icon=magnification-factor]) .first:after {
  content: "\\EC98";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=workstation-wall]) .first:before {
  content: "\\EC7C";
}

:host([icon=workstation-wall]) .first:after {
  content: "\\EC7D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=data-edit]) .first:before {
  content: "\\EC96";
}

:host([icon=tube-detector-angle-vertical]) .first:before {
  content: "\\ECAE";
}

:host([icon=tube-detector-angle-horizontal]) .first:before {
  content: "\\ECAD";
}

:host([icon=tube-angle-vertical]) .first:before {
  content: "\\ECAC";
}

:host([icon=tube-angle-horizontal]) .first:before {
  content: "\\ECAB";
}

:host([icon=table-height-measure]) .first:before {
  content: "\\ECAA";
}

:host([icon=radiographic-aid]) .first:before {
  content: "\\ECA9";
}

:host([icon=ortho-tube-rot-start]) .first:before {
  content: "\\ECA8";
}

:host([icon=ortho-tube-rot-start]) .first:after {
  content: "\\ECA7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=ortho-tube-rot-end]) .first:before {
  content: "\\ECA6";
}

:host([icon=ortho-tube-rot-end]) .first:after {
  content: "\\ECA5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=legal-information]) .first:before {
  content: "\\ECA4";
}

:host([icon=detector-tray-portrait]) .first:before {
  content: "\\ECA3";
}

:host([icon=detector-tray-landscape]) .first:before {
  content: "\\ECA2";
}

:host([icon=detector-square-angle-longitudinal]) .first:before {
  content: "\\ECA1";
}

:host([icon=detector-square-angle-lateral]) .first:before {
  content: "\\ECA0";
}

:host([icon=detector-small-angle-longitudinal]) .first:before {
  content: "\\EC9F";
}

:host([icon=detector-small-angle-lateral]) .first:before {
  content: "\\EC9E";
}

:host([icon=detector-handle-angle-longitudinal]) .first:before {
  content: "\\EC9D";
}

:host([icon=detector-handle-angle-lateral]) .first:before {
  content: "\\EC9C";
}

:host([icon=detector-angle-longitudinal]) .first:before {
  content: "\\EC9B";
}

:host([icon=detector-angle-lateral]) .first:before {
  content: "\\EC9A";
}

:host([icon=studies-reject]) .first:before {
  content: "\\ECBA";
}

:host([icon=photo-documentation]) .first:before {
  content: "\\ECB9";
}

:host([icon=lung-lobe]) .first:before {
  content: "\\ECB8";
}

:host([icon=lung-lobe]) .first:after {
  content: "\\ECB7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=document-xls]) .first:before {
  content: "\\ECB6";
}

:host([icon=document-txt]) .first:before {
  content: "\\ECB5";
}

:host([icon=document-reject]) .first:before {
  content: "\\ECB4";
}

:host([icon=document-ppt]) .first:before {
  content: "\\ECB3";
}

:host([icon=document-pdf]) .first:before {
  content: "\\ECB2";
}

:host([icon=document-docx]) .first:before {
  content: "\\ECB1";
}

:host([icon=contouring-series]) .first:before {
  content: "\\ECB0";
}

:host([icon=log-phase-forward]) .first:before {
  content: "\\ECBF";
}

:host([size=s][icon=log-phase-forward]) .first:before {
  content: "\\ECBE";
}

:host([icon=vessel-coronary-ffr-marker]) .first:before {
  content: "\\ECC0";
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon=vessel-coronary-ffr-marker]) .first:after {
  content: "\\ECC1";
}

:host([color][icon=warning-triangle]) .first:before {
  content: "\\ECC6";
}

:host([color][icon=warning-triangle]) .first:after {
  content: "\\ECC5";
  color: rgb(var(--ui-7));
}

:host([color="#E7001D"][icon=warning-triangle]) .first:after {
  content: "\\ECC5";
  color: #eaeaea;
}

:host([color="#FFD200"][icon=warning-triangle]) .first:after {
  content: "\\ECC5";
  color: #000000;
}

:host(:not([color])[icon=warning-triangle]) .first:before {
  content: "\\ECC6";
  color: rgba(var(--functional-yellow), var(--opacity-1));
}

:host(:not([color])[icon=warning-triangle]) .first:after {
  content: "\\ECC5";
  color: rgb(0, 0, 0);
}

:host([size=xs][color][icon=warning-triangle]) .first:before {
  content: "\\ECF6";
}

:host([size=xs][color][icon=warning-triangle]) .first:after {
  content: "\\ECF7";
  color: rgb(var(--ui-7));
}

:host([size=xs][color="#E7001D"][icon=warning-triangle]) .first:after {
  content: "\\ECF7";
  color: #eaeaea;
}

:host([size=xs][color="#FFD200"][icon=warning-triangle]) .first:after {
  content: "\\ECF7";
  color: rgb(0, 0, 0);
}

:host([size=xs]:not([color])[icon=warning-triangle]) .first:before {
  content: "\\ECF6";
  color: rgba(var(--functional-yellow), var(--opacity-1));
}

:host([size=xs]:not([color])[icon=warning-triangle]) .first:after {
  content: "\\ECF7";
  color: black;
}

:host([icon=patient-observation]) .first:before {
  content: "\\ECC4";
}

:host([icon=patient-observation]) .first:after {
  content: "\\ECC3";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=coil-warning]) .first:before {
  content: "\\ECC2";
}

:host([icon=coil-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=coil-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=coil-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=coil-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=rotation-stepwise-r-l-axis]) .first:before {
  content: "\\ECF0";
}

:host([icon=rotation-stepwise-r-l-axis]) .first:after {
  content: "\\ECF1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=rotation-stepwise-cran-caud-axis]) .first:before {
  content: "\\ECEE";
}

:host([icon=rotation-stepwise-cran-caud-axis]) .first:after {
  content: "\\ECEF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=rotation-stepwise-a-p-axis]) .first:before {
  content: "\\ECDF";
}

:host([icon=rotation-stepwise-a-p-axis]) .first:after {
  content: "\\ECE0";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=timelens]) .first:before {
  content: "\\ECDD";
}

:host([icon=target-pointer]) .first:before {
  content: "\\ECDB";
}

:host([icon=target-pointer]) .first:after {
  content: "\\ECDC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=stroke-cockpit]) .first:before {
  content: "\\ECD9";
}

:host([icon=stroke-cockpit]) .first:after {
  content: "\\ECDA";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=translation-r-l-axis]) .first:before {
  content: "\\ECD7";
}

:host([icon=translation-r-l-axis]) .first:after {
  content: "\\ECD8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=translation-cran-caud-axis]) .first:before {
  content: "\\ECD5";
}

:host([icon=translation-cran-caud-axis]) .first:after {
  content: "\\ECD6";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=translation-a-p-axis]) .first:before {
  content: "\\ECD3";
}

:host([icon=translation-a-p-axis]) .first:after {
  content: "\\ECD4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=registration-auto]) .first:before {
  content: "\\ECD1";
}

:host([icon=registration-auto]) .first:after {
  content: "\\ECD2";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=headscanner-drive-mode-icu]) .first:before {
  content: "\\ECD0";
}

:host([icon=ambulance]) .first:before {
  content: "\\ECC9";
}

:host([icon=align-patient-manual]) .first:before {
  content: "\\ECC7";
}

:host([icon=align-patient-manual]) .first:after {
  content: "\\ECC8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cursor]) .first:before {
  content: "\\ECCB";
}

:host([icon=vertical-long-axis]) .first:before {
  content: "\\ECE3";
}

:host([icon=vertical-long-axis]) .second:before {
  content: "\\ECE4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=short-axis]) .first:before {
  content: "\\ECE1";
}

:host([icon=short-axis]) .second:before {
  content: "\\ECE2";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=job-view-error]) .first:before {
  content: "\\ECE5";
}

:host([icon=job-view-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=job-view-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=job-view-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=job-view-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=job-view-error]) .first:before {
  content: "\\ECDE";
}

:host([size=xs][icon=job-view-error]) .first:after {
  content: "\\EA21";
}

:host([size=xs]:not([color])[icon=job-view-error]) .first:after {
  content: "\\EA21";
  color: rgb(var(--functional-red));
}

:host([size=xs]:not([color])[icon=job-view-error]) .second:before {
  content: "\\EA23";
  color: #ffffff;
}

:host([size=xs][color][icon=job-view-error]) .second:before {
  content: "\\EA23";
  color: rgb(var(--ui-7));
}

:host([icon=horizontal-long-axis]) .first:before {
  content: "\\ECCE";
}

:host([icon=horizontal-long-axis]) .first:after {
  content: "\\ECCF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=arrow-face-left-l]) .first:before {
  content: "\\ECCC";
}

:host([icon=arrow-face-right-l]) .first:before {
  content: "\\ECCD";
}

:host([icon=scanner-search]) .first:before {
  content: "\\ECE9";
}

:host([icon=scanner-history]) .first:before {
  content: "\\ECE8";
}

:host([size=s] [icon=high-priority]) .first:before,
:host([size=s] [icon=high-prority]) .first:before {
  content: "\\ECE6";
}

:host([icon=high-priority]) .first:before,
:host([icon=high-prority]) .first:before {
  content: "\\ECE7";
}

:host([icon=patient-information]) .first:before {
  content: "\\E0B1";
}

:host([icon=patient-information]) .first:after {
  content: "\\EA0A";
}

:host(:not([color])[icon=patient-information]) .first:after {
  content: "\\EA0A";
  color: #6e7b9f;
}

:host(:not([color])[icon=patient-information]) .second:before {
  content: "\\EA09";
  color: #ffffff;
}

:host([color][icon=patient-information]) .second:before {
  content: "\\EA09";
  color: rgb(var(--ui-7));
}

:host([size=xs][icon=privacy]) .first:before {
  content: "\\ECF2";
}

:host([size=s][icon=privacy]) .first:before {
  content: "\\ECF3";
}

:host([size=m][icon=privacy]) .first:before {
  content: "\\ECF4";
}

:host([size=l][icon=privacy]) .first:before {
  content: "\\ECF5";
}

:host([icon=in-plane-view]) .first:before {
  content: "\\ECED";
}

:host([icon=compare-image]) .first:before {
  content: "\\ECEB";
}

:host([icon=attribute-group-add]) .first:before {
  content: "\\ECEA";
}

:host([icon=leg-measure]) .first:before {
  content: "\\ECFE";
}

:host([icon=leg-measure]) .first:after {
  content: "\\ED00";
}

:host([icon=leg-measure]) .second:before {
  content: "\\ECFF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=needle-detection-view]) .first:before {
  content: "\\ECFC";
}

:host([icon=needle-detection-view]) .first:after {
  content: "\\ECFD";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=orientation-view]) .first:before {
  content: "\\ECFA";
}

:host([icon=orientation-view]) .first:after {
  content: "\\ECFB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=ortho-view]) .first:before {
  content: "\\ECF8";
}

:host([icon=ortho-view]) .first:after {
  content: "\\ECF9";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=plaque-options]) .first:before {
  content: "\\ED02";
}

:host([icon=plaque-options]) .first:after {
  content: "\\ED01";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=total-plaque-burden]) .first:before {
  content: "\\ED14";
}

:host([icon=total-plaque-burden]) .first:after {
  content: "\\ED15";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=structure-margin]) .first:before {
  content: "\\ED13";
}

:host([icon=structure-lesion-add]) .first:before {
  content: "\\ED11";
}

:host([icon=structure-lesion-add]) .first:after {
  content: "\\ED12";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=save-to-radiation-field-center]) .first:before {
  content: "\\ED10";
}

:host([icon=panel]) .first:before {
  content: "\\ED0F";
}

:host([icon=lesion-finding]) .first:before {
  content: "\\ED0D";
}

:host([icon=lesion-finding]) .first:after {
  content: "\\ED0E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=export-plaque-results]) .first:before {
  content: "\\ED0B";
}

:host([icon=export-plaque-results]) .first:after {
  content: "\\ED0C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=event-study-available]) .first:before {
  content: "\\ED09";
}

:host([icon=event-study-available]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=event-study-available]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=event-study-available]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=event-study-available]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=evaluation-results]) .first:before {
  content: "\\ED07";
}

:host([icon=evaluation-results]) .first:after {
  content: "\\ED08";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=beam]) .first:before {
  content: "\\ED05";
}

:host([icon=beam]) .first:after {
  content: "\\ED06";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=three-d-mesh-view]) .first:before {
  content: "\\ED03";
}

:host([icon=three-d-mesh-view]) .first:after {
  content: "\\ED04";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lesions-show]) .first:before,
:host([icon=show-lesions]) .first:before {
  content: "\\ED36";
}

:host([icon=lesions-show]) .first:after,
:host([icon=show-lesions]) .first:after {
  content: "\\ED37";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lumen-show]) .first:before,
:host([icon=show-lumen]) .first:before {
  content: "\\ED34";
}

:host([icon=lumen-show]) .first:after,
:host([icon=show-lumen]) .first:after {
  content: "\\ED35";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=plaque-show]) .first:before,
:host([icon=show-plaque]) .first:before {
  content: "\\ED32";
}

:host([icon=plaque-show]) .first:after,
:host([icon=show-plaque]) .first:after {
  content: "\\ED33";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=stent-show]) .first:before,
:host([icon=show-stent]) .first:before {
  content: "\\ED30";
}

:host([icon=stent-show]) .first:after,
:host([icon=show-stent]) .first:after {
  content: "\\ED31";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=default-login]) .first:before {
  content: "\\ED2F";
}

:host([icon=lesion-define]) .first:before,
:host([icon=define-lesion]) .first:before {
  content: "\\ED2D";
}

:host([icon=lesion-define]) .first:after,
:host([icon=define-lesion]) .first:after {
  content: "\\ED2E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=stent-finding]) .first:before {
  content: "\\ED2B";
}

:host([icon=stent-finding]) .first:after {
  content: "\\ED2C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=wall-show]) .first:before,
:host([icon=show-wall]) .first:before {
  content: "\\ED29";
}

:host([icon=wall-show]) .first:after,
:host([icon=show-wall]) .first:after {
  content: "\\ED2A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lumen-edit]) .first:before,
:host([icon=edit-lumen]) .first:before {
  content: "\\ED27";
}

:host([icon=lumen-edit]) .first:after,
:host([icon=edit-lumen]) .first:after {
  content: "\\ED28";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=dicom-tag-supported]) .first:before {
  content: "\\ED26";
}

:host([size=xs][icon=dicom-tag-supported]) .first:before {
  content: "\\ED25";
}

:host([icon=dicom-tag-optional]) .first:before {
  content: "\\ED24";
}

:host([size=xs][icon=dicom-tag-optional]) .first:before {
  content: "\\ED23";
}

:host([icon=stent-define]) .first:before,
:host([icon=define-stent]) .first:before {
  content: "\\ED21";
}

:host([icon=stent-define]) .first:after,
:host([icon=define-stent]) .first:after {
  content: "\\ED22";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=emergency-login]) .first:before {
  content: "\\ED20";
}

:host([icon=action-notification-app]) .first:before {
  content: "\\ED1F";
}

:host([size=xs][icon=action-notification-app]) .first:before {
  content: "\\ED1E";
}

:host([icon=wall-edit]) .first:before,
:host([icon=edit-wall]) .first:before {
  content: "\\ED1C";
}

:host([icon=wall-edit]) .first:after,
:host([icon=edit-wall]) .first:after {
  content: "\\ED1D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=vessel-edit]) .first:before,
:host([icon=edit-vessel]) .first:before {
  content: "\\ED1A";
}

:host([icon=vessel-edit]) .first:after,
:host([icon=edit-vessel]) .first:after {
  content: "\\ED1B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=plaque-analysis]) .first:before {
  content: "\\ED16";
}

:host([icon=plaque-analysis]) .first:after {
  content: "\\ED17";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=multi-selection]) .first:before {
  content: "\\ED41";
}

:host([icon=multi-selection]) .first:after {
  content: "\\ED42";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=picture]) .first:before {
  content: "\\ED18";
}

:host([icon=wellbeing-average]) .first:before,
:host([icon=average]) .first:before {
  content: "\\ED19";
}

:host([icon=document-zip]) .first:before {
  content: "\\ED38";
}

:host([icon=blocked-automatic-movements]) .first:before {
  content: "\\ED3C";
}

:host([icon=label]) .first:before {
  content: "\\ED3D";
}

:host([icon=select-all-images]) .first:before {
  content: "\\ED53";
}

:host([icon=liver-ablation-zone]) .first:before {
  content: "\\ED3E";
}

:host([icon=liver-ablation-zone]) .first:after {
  content: "\\ED3F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=liver-ablation-zone]) .second:before {
  content: "\\ED40";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=structure-ablation-zone]) .first:before {
  content: "\\ED54";
}

:host([icon=structure-ablation-zone]) .first:after {
  content: "\\ED55";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=structure-ablation-zone]) .second:before {
  content: "\\ED56";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=microphone]) .first:before {
  content: "\\ED43";
}

:host([icon=patient-export]) .first:before {
  content: "\\ED44";
}

:host([icon=fingerprint]) .first:before {
  content: "\\ED45";
}

:host([icon=send-to-report]) .first:before {
  content: "\\ED46";
}

:host([icon=send-to-report-completed]) .first:before {
  content: "\\ED47";
}

:host([icon=send-to-report-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=send-to-report-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=send-to-report-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=send-to-report-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=structure-lesion-contour-draw]) .first:before {
  content: "\\ED48";
}

:host([icon=structure-lesion-contour-draw]) .first:after {
  content: "\\ED49";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=face-id]) .first:before {
  content: "\\ED4B";
}

:host([icon=dicom-companion]) .first:before {
  content: "\\ED4C";
}

:host([icon=ablation-guide]) .first:before {
  content: "\\ED4E";
}

:host([icon=ablation-guide]) .first:after {
  content: "\\ED4D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=marked-region]) .first:before {
  content: "\\ED51";
  color: rgb(var(--functional-green));
}

:host([icon=marked-region]) .first:after {
  content: "\\ED4F";
  color: rgb(var(--functional-yellow));
}

:host([icon=marked-region]) .second:before {
  content: "\\ED50";
  color: rgb(var(--functional-red));
}

:host([icon=body-chessboard-view]) .first:before {
  content: "\\ED52";
}

:host([icon=body-chessboard-view]) .first:after {
  content: "\\ED57";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=body-registration-markers-set]) .first:before {
  content: "\\ED58";
}

:host([icon=body-registration-markers-set]) .first:after {
  content: "\\ED59";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=body-registration-markers-set]) .second:before {
  content: "\\ED5A";
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([icon=body-spyglass-view]) .first:before {
  content: "\\ED5B";
}

:host([icon=body-spyglass-view]) .first:after {
  content: "\\ED5C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=body-spyglass-view]) .second:before {
  content: "\\ED5D";
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([icon=calculate-registration-deformable]) .first:before {
  content: "\\ED5E";
}

:host([icon=calculate-registration-rigid]) .first:before {
  content: "\\ED5F";
}

:host([icon=centerline-hide]) .first:before {
  content: "\\ED60";
}

:host([icon=centerline-hide]) .first:after {
  content: "\\ED61";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=deselect-all-images]) .first:before {
  content: "\\ED62";
}

:host([icon=deselect-all-images]) .first:after {
  content: "\\ED63";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=lesion-hide]) .first:before {
  content: "\\ED64";
}

:host([icon=lesion-hide]) .first:after {
  content: "\\ED65";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=log-save]) .first:before {
  content: "\\ED66";
}

:host([icon=lumen-hide]) .first:before {
  content: "\\ED67";
}

:host([icon=lumen-hide]) .first:after {
  content: "\\ED68";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=plaque-hide]) .first:before {
  content: "\\ED69";
}

:host([icon=plaque-hide]) .first:after {
  content: "\\ED6A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=profile-curve]) .first:before {
  content: "\\ED6B";
}

:host([icon=registration-deformable]) .first:before {
  content: "\\ED6C";
}

:host([icon=registration-rigid]) .first:before {
  content: "\\ED6D";
}

:host([icon=scan-protocol-edit]) .first:before {
  content: "\\ED6E";
}

:host([icon=service-login]) .first:before {
  content: "\\ED6F";
}

:host([icon=stent-hide]) .first:before {
  content: "\\ED70";
}

:host([icon=stent-hide]) .first:after {
  content: "\\ED71";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=virtual-visit]) .first:before {
  content: "\\ED72";
}

:host([icon=wall-hide]) .first:before {
  content: "\\ED74";
}

:host([icon=wall-hide]) .first:after {
  content: "\\ED73";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=table-mode-loc]) .first:before {
  content: "\\ED75";
}

:host([icon=table-mode-mlt]) .first:before {
  content: "\\ED76";
}

:host([icon=table-mode-fix]) .first:after {
  content: "\\ED75";
  color: rgba(var(--ui-2));
}

:host([icon=table-mode-iso]) .first:before {
  content: "\\ED78";
}

:host([icon=standard-orientation]) .first:before {
  content: "\\ED79";
}

:host([icon=series-open]) .first:before {
  content: "\\ED7A";
}

:host([icon=rotate-90-degrees]) .first:before {
  content: "\\ED7B";
}

:host([icon=range-curved-asymmetical-mode]) .first:before {
  content: "\\ED7E";
}

:host([icon=range-curved-asymmetical-mode]) .first:after {
  content: "\\ED7C";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=range-curved-asymmetical-mode]) .second:before {
  content: "\\ED7D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=radial-ranges-set-vertical]) .first:before {
  content: "\\ED7F";
}

:host([icon=radial-range-axial]) .first:before {
  content: "\\ED80";
}

:host([icon=radial-range-axial]) .first:after {
  content: "\\ED81";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=radial-range-coronal]) .first:before {
  content: "\\ED82";
}

:host([icon=radial-range-sagittal]) .first:before {
  content: "\\ED83";
}

:host([icon=radial-ranges-set-horizontal]) .first:before {
  content: "\\ED84";
}

:host([icon=parallel-ranges-set-vertical]) .first:before {
  content: "\\ED85";
}

:host([icon=parallel-ranges-set-vertical]) .first:after {
  content: "\\ED86";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=ortho-ranges]) .first:before {
  content: "\\ED87";
}

:host([icon=nudge-2d]) .first:before {
  content: "\\ED89";
}

:host([icon=nudge-2d]) .first:after {
  content: "\\ED88";
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon=more-error]) .first:before {
  content: "\\ED8A";
}

:host([icon=more-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=more-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=more-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=more-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=corner-menu-bl-fmpr-coronal]) .first:before {
  content: "\\ED8B";
}

:host([icon=corner-menu-bl-fmpr-coronal]) .first:after {
  content: "\\ED8C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=corner-menu-bl-fmpr-sagittal]) .first:before {
  content: "\\ED8D";
}

:host([icon=corner-menu-bl-fmpr-sagittal]) .first:after {
  content: "\\ED8E";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=corner-menu-bl-fmpr-axial]) .first:before {
  content: "\\ED8F";
}

:host([icon=corner-menu-bl-fmpr-axial]) .first:after {
  content: "\\ED90";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=filtered-scroll]) .first:before {
  content: "\\ED77";
}

:host([icon=patient-table-down]) .first:before {
  content: "\\ED91";
}

:host([icon=patient-table-up]) .first:before {
  content: "\\ED92";
}

:host([icon=table-horizontal-position]) .first:before {
  content: "\\ED93";
}

:host([icon=table-tilting]) .first:before {
  content: "\\ED94";
}

:host([icon=table-top-view-mode]) .first:before {
  content: "\\ED95";
}

:host([icon=table-upright-position]) .first:before {
  content: "\\ED96";
}

:host([icon=timepoint-undo]) .first:before {
  content: "\\ED97";
}

:host([icon=timepoint-undo]) .first:after {
  content: "\\ED98";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=list-viewmode]) .first:before {
  content: "\\ED9D";
}

:host([icon=lesion-tool]) .first:before {
  content: "\\ED9B";
}

:host([icon=lesion-tool]) .first:after {
  content: "\\ED9C";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=assisted-perpendicular]) .first:before {
  content: "\\ED9A";
}

:host([icon=swap-segment]) .first:before {
  content: "\\ED99";
}

:host([icon=vascular-aorta]) .first:before {
  content: "\\EDA6";
}

:host([icon=vascular-aorta]) .first:after {
  content: "\\EDA7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=swap-view]) .first:before {
  content: "\\EDA4";
}

:host([icon=swap-view]) .first:after {
  content: "\\EDA5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=swap-order]) .first:before {
  content: "\\EDA3";
}

:host([icon=filter-search]) .first:before {
  content: "\\EDA2";
}

:host([size=s][icon=download-in-progress]) .first:before {
  content: "\\EDA0";
}

:host([size=s][icon=download-in-progress]) .first:after {
  content: "\\EA28";
}

:host(:not([color])[size=s][icon=download-in-progress]) .first:after {
  content: "\\EA28";
  color: #52c1ff;
}

:host(:not([color])[size=s][icon=download-in-progress]) .second:before {
  content: "\\EA29";
  color: #000000;
}

:host([color][size=s][icon=download-in-progress]) .second:before {
  content: "\\EA29";
  color: rgb(var(--ui-7));
}

:host([size=m][icon=download-in-progress]) .first:before {
  content: "\\EDA1";
}

:host([size=m][icon=download-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[size=m][icon=download-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[size=m][icon=download-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][size=m][icon=download-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=body-registration-edit]) .first:before {
  content: "\\ED9E";
}

:host([icon=body-registration-edit]) .first:after {
  content: "\\ED9F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=chamber-no-selection]) .first:before {
  content: "\\EDA8";
}

:host([icon=five-field-chamber-bottom-left]) .first:before {
  content: "\\EDA9";
}

:host([icon=five-field-chamber-bottom-left]) .first:after {
  content: "\\EDAA";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-bottom-left-and-middle]) .first:before {
  content: "\\EDAB";
}

:host([icon=five-field-chamber-bottom-left-and-middle]) .first:after {
  content: "\\EDAC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-bottom-three-selected]) .first:before {
  content: "\\EDAF";
}

:host([icon=five-field-chamber-bottom-three-selected]) .first:after {
  content: "\\EDB0";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-bottom-right-and-middle]) .first:before {
  content: "\\EDAD";
}

:host([icon=five-field-chamber-bottom-right-and-middle]) .first:after {
  content: "\\EDAE";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-bottom-two-selected]) .first:before {
  content: "\\EDB1";
}

:host([icon=five-field-chamber-bottom-two-selected]) .first:after {
  content: "\\EDB2";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-left-three-selected]) .first:before {
  content: "\\EDB3";
}

:host([icon=five-field-chamber-left-three-selected]) .first:after {
  content: "\\EDB4";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-left-two-selected]) .first:before {
  content: "\\EDB5";
}

:host([icon=five-field-chamber-left-two-selected]) .first:after {
  content: "\\EDB6";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-middle]) .first:before {
  content: "\\EDB7";
}

:host([icon=five-field-chamber-middle]) .first:after {
  content: "\\EDB8";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-no-selection]) .first:before {
  content: "\\EDB9";
}

:host([icon=five-field-chamber-right-three-selected]) .first:before {
  content: "\\EDBA";
}

:host([icon=five-field-chamber-right-three-selected]) .first:after {
  content: "\\EDBB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-right-two-selected]) .first:before {
  content: "\\EDBC";
}

:host([icon=five-field-chamber-right-two-selected]) .first:after {
  content: "\\EDBD";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-top-left]) .first:before {
  content: "\\EDBE";
}

:host([icon=five-field-chamber-top-left]) .first:after {
  content: "\\EDBF";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-top-left-and-middle]) .first:before {
  content: "\\EDC0";
}

:host([icon=five-field-chamber-top-left-and-middle]) .first:after {
  content: "\\EDC1";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-top-right]) .first:before {
  content: "\\EDC2";
}

:host([icon=five-field-chamber-top-right]) .first:after {
  content: "\\EDC3";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-top-right-and-middle]) .first:before {
  content: "\\EDC4";
}

:host([icon=five-field-chamber-top-right-and-middle]) .first:after {
  content: "\\EDC5";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-top-three-selected]) .first:before {
  content: "\\EDC6";
}

:host([icon=five-field-chamber-top-three-selected]) .first:after {
  content: "\\EDC7";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=five-field-chamber-top-two-selected]) .first:before {
  content: "\\EDC8";
}

:host([icon=five-field-chamber-top-two-selected]) .first:after {
  content: "\\EDC9";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pet-check]) .first:before {
  content: "\\EDCA";
}

:host([icon=pet-check]) .first:after {
  content: "\\EDCB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pet-check-error]) .first:before {
  content: "\\EDCE";
}

:host([icon=pet-check-error]) .first:after {
  content: "\\EDCC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pet-check-error]) .second:before {
  content: "\\EDCD";
}

:host([icon=pet-check-success]) .first:before {
  content: "\\EDCE";
}

:host([icon=pet-check-success]) .first:after {
  content: "\\EDCC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pet-check-success]) .second:before {
  content: "\\EDCF";
}

:host([icon=pet-check-warning]) .first:before {
  content: "\\EDCE";
}

:host([icon=pet-check-warning]) .first:after {
  content: "\\EDCC";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=pet-check-warning]) .second:before {
  content: "\\EDD0";
}

:host([icon=five-field-chamber-bottom-right]) .first:before {
  content: "\\EDD1";
}

:host([icon=five-field-chamber-bottom-right]) .first:after {
  content: "\\EDD2";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=image-recovery]) .second:before {
  content: "\\EDD3";
}

:host([icon=pixelsize]) .second:before {
  content: "\\EDD4";
}

:host([icon=radiographic-aid]) .second:before {
  content: "\\EDD5";
}

:host([icon=ref]) .second:before {
  content: "\\EDD6";
}

:host([icon=stitched-image]) .second:before {
  content: "\\EDD7";
}

:host([icon=temperature-detector-error]) .first:before {
  content: "\\EDD9";
}

:host([icon=temperature-detector-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=temperature-detector-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=temperature-detector-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=temperature-detector-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=temperature-detector-warning]) .first:before {
  content: "\\EDD9";
}

:host([icon=temperature-detector-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=temperature-detector-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=temperature-detector-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=temperature-detector-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=tube]) .first:before {
  content: "\\EDDA";
}

:host([icon=usb-import-completed]) .first:before {
  content: "\\EDDC";
}

:host([icon=usb-import-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=usb-import-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=usb-import-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=usb-import-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=usb-export-completed]) .first:before {
  content: "\\EDDB";
}

:host([icon=usb-export-completed]) .first:after {
  content: "\\E990";
}

:host(:not([color])[icon=usb-export-completed]) .first:after {
  content: "\\E990";
  color: rgb(var(--functional-green));
}

:host(:not([color])[icon=usb-export-completed]) .second:before {
  content: "\\E995";
  color: #ffffff;
}

:host([color][icon=usb-export-completed]) .second:before {
  content: "\\E995";
  color: rgb(var(--ui-7));
}

:host([icon=usb-export-in-progress]) .first:before {
  content: "\\EDDB";
}

:host([icon=usb-export-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=usb-export-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=usb-export-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=usb-export-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=usb-import-in-progress]) .first:before {
  content: "\\EDDC";
}

:host([icon=usb-import-in-progress]) .first:after {
  content: "\\E998";
}

:host(:not([color])[icon=usb-import-in-progress]) .first:after {
  content: "\\E998";
  color: #52c1ff;
}

:host(:not([color])[icon=usb-import-in-progress]) .second:before {
  content: "\\E999";
  color: #000000;
}

:host([color][icon=usb-import-in-progress]) .second:before {
  content: "\\E999";
  color: rgb(var(--ui-7));
}

:host([icon=import-error]) .first:before {
  content: "\\EA80";
}

:host([icon=import-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=import-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=import-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=import-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=ab-test]) .first:before {
  content: "\\EDEF";
}

:host([icon=automatic-mode]) .first:before {
  content: "\\EDF0";
}

:host([icon=calibrate]) .first:before {
  content: "\\EDF1";
}

:host([icon=collimator-rotate-move]) .first:before {
  content: "\\EDF2";
}

:host([icon=collimator-scale]) .first:before {
  content: "\\EDF3";
}

:host([icon=copper-filter]) .first:before {
  content: "\\EDF4";
}

:host([icon=dose-level-one]) .first:before {
  content: "\\EDF5";
}

:host([icon=dose-level-one]) .first:after {
  content: "\\EDF6";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=dose-level-three-warning]) .first:before {
  content: "\\EDF7";
}

:host([icon=dose-level-three-warning]) .first:after {
  content: "\\E9A0";
}

:host(:not([color])[icon=dose-level-three-warning]) .first:after {
  content: "\\E9A0";
  color: rgb(var(--functional-yellow));
}

:host(:not([color])[icon=dose-level-three-warning]) .second:before {
  content: "\\E9A1";
  color: #000000;
}

:host([color][icon=dose-level-three-warning]) .second:before {
  content: "\\E9A1";
  color: rgb(var(--ui-7));
}

:host([icon=dose-level-three]) .first:after {
  content: "\\EDF8";
}

:host([icon=dose-level-two]) .first:before {
  content: "\\EDF9";
}

:host([icon=dose-level-two]) .first:after {
  content: "\\EDFA";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=dose-level-zero]) .second:before {
  content: "\\EDFB";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=flip-indicator-horizontal]) .first:after {
  content: "\\EDFC";
}

:host([icon=flip-indicator-vertical]) .first:after {
  content: "\\EDFD";
}

:host([icon=main-power-connected]) .first:after {
  content: "\\EDFE";
}

:host([icon=panoramic-view]) .first:after {
  content: "\\EDFF";
}

:host([icon=pet-recon]) .first:after {
  content: "\\EE00";
}

:host([icon=pet-viewing]) .first:before {
  content: "\\EE01";
}

:host([icon=pet-viewing]) .first:after {
  content: "\\EE02";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=power-off]) .first:after {
  content: "\\EE03";
}

:host([icon=power-on-off]) .first:after {
  content: "\\EE04";
}

:host([icon=remote-control]) .first:after {
  content: "\\EE05";
}

:host([icon=rotate-counterclockwise]) .first:before {
  content: "\\EE06";
}

:host([icon=rotate-counterclockwise]) .first:after {
  content: "\\EE07";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=rotate-counterwise]) .first:before {
  content: "\\EE08";
}

:host([icon=rotate-counterwise]) .first:after {
  content: "\\EE09";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=sd-card-horizontal]) .first:after {
  content: "\\EE0A";
}

:host([icon=sd-card-vertical]) .first:after {
  content: "\\EE0B";
}

:host([icon=spot-adapt]) .first:after {
  content: "\\EE0C";
}

:host([icon=usb-c-horizontal]) .first:after {
  content: "\\EE0D";
}

:host([icon=usb-c-vertical]) .first:after {
  content: "\\EE0E";
}

:host([icon=zoom-one-x]) .first:after {
  content: "\\EE0F";
}

:host([icon=zoom-three-x]) .first:after {
  content: "\\EE10";
}

:host([icon=zoom-two-x]) .first:after {
  content: "\\EE11";
}

:host([icon=collapse]) .first:after {
  content: "\\EE16";
}

:host([icon=expand]) .first:after {
  content: "\\EE17";
}

:host([icon=expert-i-stopped]) .first:after {
  content: "\\EE18";
}

:host([icon=headscanner-parked-mode]) .first:after {
  content: "\\EE19";
}

:host([icon=privacy-not-configured]) .first:after {
  content: "\\EE1A";
}

:host([icon=trim]) .first:after {
  content: "\\EE1B";
}

:host([icon=listen-to]) .first:after {
  content: "\\EE21";
}

:host([icon=minip-thin]) .first:before {
  content: "\\EE22";
}

:host([icon=minip-thin]) .first:after {
  content: "\\EE23";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=mip-thin]) .first:before {
  content: "\\EE24";
}

:host([icon=mip-thin]) .first:after {
  content: "\\EE25";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=mpr]) .first:before {
  content: "\\EE26";
}

:host([icon=mpr]) .first:after {
  content: "\\EE27";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=mpr-mpr]) .first:before {
  content: "\\EE28";
}

:host([icon=mpr-mpr]) .first:after {
  content: "\\EE29";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=mpr-thick]) .first:before {
  content: "\\EE2A";
}

:host([icon=mpr-thick]) .first:after {
  content: "\\EE2B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=show-background-effect]) .first:before {
  content: "\\EE2C";
}

:host([icon=show-background-effect]) .first:after {
  content: "\\EE2D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=talk-to]) .first:after {
  content: "\\EE2E";
}

:host([icon=vrt-thin]) .first:before {
  content: "\\EE2F";
}

:host([icon=vrt-thin]) .first:after {
  content: "\\EE30";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=crop]) .first:before {
  content: "\\EE34";
}

:host([icon=windowing-thresholds]) .first:before {
  content: "\\EE3C";
}

:host([icon=start-point-trim]) .first:before {
  content: "\\EE3B";
}

:host([icon=end-point-trim]) .first:before {
  content: "\\EE39";
}

:host([icon=select-range]) .first:before {
  content: "\\EE3A";
}

:host([icon=ct-somatom-on]) .first:before {
  content: "\\EE38";
}

:host([icon=client-printer]) .first:before {
  content: "\\EE37";
}

:host([icon=export-to-pdf]) .first:before {
  content: "\\EE43";
}

:host([icon=patient-worklist-query]) .first:before {
  content: "\\EE45";
}

:host([icon=fit-to-window]) .first:before {
  content: "\\EE44";
}

:host([icon=exam-automapped]) .first:before {
  content: "\\EE46";
}

:host([icon=exam-confirmed]) .first:before {
  content: "\\EE47";
}

:host([icon=exam-error]) .first:before {
  content: "\\EE48";
}

:host([icon=exam-error]) .first:after {
  content: "\\E996";
}

:host(:not([color])[icon=exam-error]) .first:after {
  content: "\\E996";
  color: rgb(var(--functional-red));
}

:host(:not([color])[icon=exam-error]) .second:before {
  content: "\\E997";
  color: #ffffff;
}

:host([color][icon=exam-error]) .second:before {
  content: "\\E997";
  color: rgb(var(--ui-7));
}

:host([icon=exam-ignored]) .first:before {
  content: "\\EE49";
}

:host([icon=exam-manual-mapping]) .first:before {
  content: "\\EE4A";
}

:host([icon=exam-new]) .first:before {
  content: "\\EE4B";
}

:host([icon=exam]) .first:before {
  content: "\\EE4C";
}

:host([icon=fit-to-window-height]) .first:before {
  content: "\\EE4D";
}

:host([icon=fit-to-window-width]) .first:before {
  content: "\\EE4E";
}

:host([icon=general-chambers-all-active]) .first:before {
  content: "\\EE4F";
}

:host([icon=general-chambers-disabled]) .first:before {
  content: "\\EE51";
}

:host([icon=general-chambers-disabled]) .first:after {
  content: "\\EE50";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=general-chambers-left-active]) .first:before {
  content: "\\EE52";
}

:host([icon=general-chambers-left-active]) .first:after {
  content: "\\EE53";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=general-chambers-left-middle-active]) .first:before {
  content: "\\EE54";
}

:host([icon=general-chambers-left-middle-active]) .first:after {
  content: "\\EE55";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=general-chambers-left-right-active]) .first:before {
  content: "\\EE56";
}

:host([icon=general-chambers-left-right-active]) .first:after {
  content: "\\EE57";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=general-chambers-middle-active]) .first:before {
  content: "\\EE58";
}

:host([icon=general-chambers-middle-active]) .first:after {
  content: "\\EE59";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=general-chambers-middle-enhanced-active]) .first:before {
  content: "\\EE5A";
}

:host([icon=general-chambers-middle-enhanced-active]) .first:after {
  content: "\\EE5B";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=general-chambers-middle-right-active]) .first:before {
  content: "\\EE5C";
}

:host([icon=general-chambers-middle-right-active]) .first:after {
  content: "\\EE5D";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=general-chambers-right-active]) .first:before {
  content: "\\EE5E";
}

:host([icon=general-chambers-right-active]) .first:after {
  content: "\\EE5F";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=multi-region-automapped]) .first:before {
  content: "\\EE60";
}

:host([icon=multi-region]) .first:before {
  content: "\\EE61";
}

:host([icon=multi-sensor]) .first:before {
  content: "\\EE62";
}

:host([icon=receiver]) .first:before {
  content: "\\EE63";
}

:host([icon=single-region-automapped]) .first:before {
  content: "\\EE64";
}

:host([icon=single-region]) .first:before {
  content: "\\EE65";
}

:host([icon=wellbeing-bad]) .first:before,
:host([icon=bad]) .first:before {
  content: "\\EE66";
}

:host([icon=atrial-analysis]) .first:before {
  content: "\\EE67";
}

:host([icon=atrial-analysis]) .first:after {
  content: "\\EE68";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=auto-adjust-roi]) .first:before {
  content: "\\EE69";
}

:host([icon=auto-adjust-roi]) .first:after {
  content: "\\EE6A";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=cardiac-normal]) .first:before {
  content: "\\EE6C";
}

:host([icon=compression-cone]) .first:before {
  content: "\\EE6D";
}

:host([icon=flow-analysis]) .first:before {
  content: "\\EE6F";
}

:host([icon=flow-analysis]) .first:after {
  content: "\\EE70";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=left-atria-contours]) .first:before {
  content: "\\EE71";
}

:host([icon=left-atria-contours]) .first:after {
  content: "\\EE72";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=minus-light]) .first:before {
  content: "\\EE73";
}

:host([icon=plus-light]) .first:before {
  content: "\\EE76";
}

:host([icon=papillary]) .first:before {
  content: "\\EE74";
}

:host([icon=papillary]) .first:after {
  content: "\\EE75";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=right-atria-contours]) .first:before {
  content: "\\EE77";
}

:host([icon=right-atria-contours]) .first:after {
  content: "\\EE78";
  color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon=single-click-vessel-segmentation]) .first:before {
  content: "\\EE79";
}

:host([icon=single-click-vessel-segmentation]) .first:after {
  content: "\\EE7A";
  color: rgba(var(--ui-1), var(--opacity-4));
}`;

  // ../sh-icon/src/sh-icon.lit.scss.js
  var sh_icon_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-icon-size-xs=1rem] - size of icon
   */
  --sh-icon-size-xs: 1rem;
  /* 
   * @cssprop [--sh-icon-size-s=1.5rem] - size of icon
   */
  --sh-icon-size-s: 1.5rem;
  /* 
   * @cssprop [--sh-icon-size-m=2rem] - size of icon
   */
  --sh-icon-size-m: 2rem;
  /* 
   * @cssprop [--sh-icon-size-l=3rem] - size of icon
   */
  --sh-icon-size-l: 3rem;
  /* 
   * @cssprop [--sh-icon-font-size-xs=1rem] - size of icon image
   */
  --sh-icon-font-size-xs: 1rem;
  /* 
   * @cssprop [--sh-icon-font-size-s=1.5rem] - size of icon image
   */
  --sh-icon-font-size-s: 1.5rem;
  /* 
   * @cssprop [--sh-icon-font-size-m=2rem] - size of icon image
   */
  --sh-icon-font-size-m: 2rem;
  /* 
   * @cssprop [--sh-icon-font-size-l=3rem] - size of icon image
   */
  --sh-icon-font-size-l: 3rem;
  /* 
   * @cssprop [--sh-icon-badge-left=calc(100% - 0.25rem)] - left position the badg will be centered around
   */
  --sh-icon-badge-left: calc(100% - 0.25rem);
  /* 
   * @cssprop [--sh-icon-badge-bottom=calc(100% - 0.25rem)] - bottom position the badg will be centered around
   */
  --sh-icon-badge-bottom: calc(100% - 0.25rem);
  /* 
   * @cssprop [--sh-icon-active-padding-size-xs=0.125rem] - active icon padding for size xs
   */
  --sh-icon-active-padding-size-xs: 0.125rem;
  /* 
   * @cssprop [--sh-icon-active-padding-size-s=0.125rem] - active icon padding for size s
   */
  --sh-icon-active-padding-size-s: 0.125rem;
  /* 
   * @cssprop [--sh-icon-active-padding-size-m=0.125rem] - active icon padding for size m
   */
  --sh-icon-active-padding-size-m: 0.125rem;
  /* 
   * @cssprop [--sh-icon-active-padding-size-l=0rem] - active icon padding for size l
   */
  --sh-icon-active-padding-size-l: 0rem;
  /* 
   * @cssprop [--sh-icon-border-radius=0.125rem] - button active border radius
   */
  --sh-icon-border-radius: 0.125rem;
}

:host {
  display: flex;
  color: var(--text-primary);
  outline: 0rem;
  position: relative;
  align-items: center;
  font-weight: normal;
  text-transform: none;
  letter-spacing: normal;
  word-wrap: normal;
  white-space: nowrap;
  direction: ltr;
  vertical-align: middle;
  justify-content: center;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  font-feature-settings: "liga";
  font-family: "sh-icons";
}
:host > div {
  position: absolute;
  flex: 1;
}
:host > div:after {
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0rem;
  left: 0rem;
}
:host > .first {
  background-size: contain;
  background-position: center;
  background-repeat: no-repeat;
}

:host([size=xs][active]) .toggle-active {
  padding: var(--sh-icon-active-padding-size-xs);
}

:host([size=s][active]) .toggle-active {
  padding: var(--sh-icon-active-padding-size-s);
}

:host([size=m][active]) .toggle-active {
  padding: var(--sh-icon-active-padding-size-m);
}

:host([size=l][active]) .toggle-active {
  padding: var(--sh-icon-active-padding-size-l);
}

:host([button]) > div {
  transition: var(--hover-transition-time) opacity;
}

:host(.item-focused) {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
}

:host(:not([icon])) {
  display: none;
}

:host([disabled]) {
  pointer-events: none;
  cursor: default;
  opacity: var(--opacity-5);
}

.badge {
  position: absolute;
  z-index: 1;
  bottom: var(--sh-icon-badge-bottom);
  left: var(--sh-icon-badge-left);
  transform: translate(-50%, 50%);
}

.badge[label=""],
.badge[label=""]:not(.number) {
  top: 0rem;
  right: 0rem;
  left: unset;
  transform: none;
}

:host([disabled]) .badge {
  pointer-events: none;
  cursor: default;
}

:host([button]:not([disabled]):not(.accordion-expand)) {
  cursor: pointer;
}
:host([button]:not([disabled]):not(.accordion-expand)) > .first,
:host([button]:not([disabled]):not(.accordion-expand)) > .after {
  opacity: var(--opacity-3);
}

/* hover
 */
:host([button]:hover:not(.touch-device):not([disabled])) > .first,
:host([button]:hover:not(.touch-device):not([disabled])) > .second,
:host([button].touch-device):hover > .first,
:host([button].touch-device):hover > .second {
  opacity: var(--opacity-2);
}

/* press (active) */
:host([button].active:not(.touch-device)) > .first,
:host([button].active:not(.touch-device)) > .second,
:host([button].touch-device).active > .first,
:host([button].touch-device).active > .second {
  opacity: var(--opacity-3);
}

:host([button][active]) .toggle-active {
  background: rgba(var(--ui-1), var(--opacity-6));
  border-radius: var(--sh-icon-border-radius);
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([button][active]:not(.touch-device)) > .first,
:host([button][active]:not(.touch-device)) > .second,
:host([button][active].touch-device) > .first,
:host([button][active].touch-device) > .second {
  opacity: var(--opacity-2);
}

:host(.badge-width) .badge {
  width: 1.375rem;
}

:host([size=xs]),
:host([size=xs]) > div {
  min-width: var(--sh-icon-font-size-xs);
  min-height: var(--sh-icon-font-size-xs);
  height: var(--sh-icon-font-size-xs);
  width: var(--sh-icon-font-size-xs);
  font-size: var(--sh-icon-font-size-xs);
  line-height: var(--sh-icon-font-size-xs);
}

:host([size=xs][button]) {
  min-width: var(--sh-icon-size-xs);
  min-height: var(--sh-icon-size-xs);
  width: var(--sh-icon-size-xs);
  height: var(--sh-icon-size-xs);
}

:host([size=s]),
:host([size=s]) > div {
  min-width: var(--sh-icon-font-size-s);
  min-height: var(--sh-icon-font-size-s);
  height: var(--sh-icon-font-size-s);
  width: var(--sh-icon-font-size-s);
  font-size: var(--sh-icon-font-size-s);
  line-height: var(--sh-icon-font-size-s);
}

:host([size=s][button]) {
  min-width: var(--sh-icon-size-s);
  min-height: var(--sh-icon-size-s);
  width: var(--sh-icon-size-s);
  height: var(--sh-icon-size-s);
}

:host([size=m]),
:host([size=m]) > div {
  min-width: var(--sh-icon-font-size-m);
  min-height: var(--sh-icon-font-size-m);
  height: var(--sh-icon-font-size-m);
  width: var(--sh-icon-font-size-m);
  font-size: var(--sh-icon-font-size-m);
  line-height: var(--sh-icon-font-size-m);
}

:host([size=m][button]) {
  min-width: var(--sh-icon-size-m);
  min-height: var(--sh-icon-size-m);
  width: var(--sh-icon-size-m);
  height: var(--sh-icon-size-m);
}

:host([size=l]),
:host([size=l]) > div {
  min-width: var(--sh-icon-font-size-l);
  min-height: var(--sh-icon-font-size-l);
  height: var(--sh-icon-font-size-l);
  width: var(--sh-icon-font-size-l);
  font-size: var(--sh-icon-font-size-l);
  line-height: var(--sh-icon-font-size-l);
}

:host([size=l][button]) {
  min-width: var(--sh-icon-size-l);
  min-height: var(--sh-icon-size-l);
  width: var(--sh-icon-size-l);
  height: var(--sh-icon-size-l);
}

:host {
  outline: var(--sh-debug-icon-outline-1);
}
:host > div {
  outline: var(--sh-debug-icon-outline-2);
}`;

  // ../sh-icon/src/sh-icon.js
  var SHIcon = class SHIcon2 extends ControlStateMixin(FocusBlurMixin(s4)) {
    constructor() {
      super();
      this.button = false;
      this.active = false;
      this.toggle = false;
      this.size = "m";
      this.toggle = false;
    }
    static get styles() {
      return [sh_icon_font_lit_scss_default, sh_icon_lit_scss_default, extendInteractiveArea(":host([button])")];
    }
    render() {
      return x`<div class="first"></div>
      <div class="second"></div>
      <div class="icon">
        ${this.badge !== void 0 && this.badge !== null ? x` <sh-badge class="badge" label="${this.badge}"></sh-badge>` : A}
      </div>
      ${this.toggle && this.active ? x` <div class="toggle-active"></div>` : A} `;
    }
    connectedCallback() {
      if (!this.button && !this.hasAttribute("tabindex")) {
        this.setAttribute("tabindex", "-1");
      }
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("icon")) {
        this.updateIcon();
      }
      if (changedProperties.has("color")) {
        this.updateColor();
      }
      const listOfProperties = ["icon", "button", "color", "size", "href", "badge", "toggle"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    firstUpdated() {
      super.firstUpdated();
      this.addEventListener("click", this.clickEventListener);
      this.addEventListener("mousedown", function() {
        this.classList.add("active");
      });
      this.addEventListener("mouseup", function() {
        this.classList.remove("active");
      });
    }
    handleKeyup(e8) {
      super.handleKeyup(e8);
      if (keyboardInteraction2(e8, KEYCODE2.ENTER)) {
        this.click();
      }
    }
    _spaceKeyAction() {
      this.click();
    }
    clickEventListener(e8) {
      if (this.href !== void 0) {
        windowLocation.setWindowLocationHRef(this.href);
      }
      if (this.disabled) {
        e8.stopImmediatePropagation();
      }
      if (e8.type == "click" && this.button) {
        this._toggleActive();
      }
    }
    updateIcon() {
      var _a4;
      const firstDiv = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".first");
      if (firstDiv == null)
        return;
      if (this.icon && this.icon.indexOf("url") >= 0) {
        firstDiv.style.backgroundImage = this.icon;
      } else {
        firstDiv.style.backgroundImage = "";
      }
      switch (this.icon) {
        case "patient-position-prone":
          console.warn(`You are using a legacy icon ${this.icon}. Please use 'position-supine' instead.`);
          break;
        case "patient-position-supine":
          console.warn(`You are using a legacy icon ${this.icon}. Please use "position-prone" instead.`);
          break;
        case "patient-position-lateral-right":
          console.warn(`You are using a legacy icon ${this.icon}. Please use "position-lateral-left" instead.`);
          break;
        case "patient-position-lateral-left":
          console.warn(`You are using a legacy icon ${this.icon}. Please use "position-lateral-right" instead.`);
          break;
        default:
          return;
      }
    }
    updateColor() {
      if (this.color !== void 0) {
        this.style.color = this.color;
      }
    }
    _toggleActive() {
      if (this.toggle) {
        this.active = !this.active;
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHIcon.prototype, "icon", void 0);
  __decorate([n5({ type: String, reflect: true })], SHIcon.prototype, "size", void 0);
  __decorate([n5({ type: String, reflect: true })], SHIcon.prototype, "color", void 0);
  __decorate([n5({ type: String, reflect: true })], SHIcon.prototype, "badge", void 0);
  __decorate([n5({ type: String, reflect: true })], SHIcon.prototype, "href", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHIcon.prototype, "button", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHIcon.prototype, "active", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHIcon.prototype, "toggle", void 0);
  SHIcon = __decorate([e4("sh-icon")], SHIcon);

  // ../styles/shared-styles.js
  var $_documentContainer = document.createElement("template");
  var sharedStyles = i`
  ::-webkit-scrollbar {
    width: var(--scrollbar-size);
    height: var(--scrollbar-size);
    visibility: hidden;
  }

  ::-webkit-scrollbar-corner {
    background-color: transparent;
  }

  ::-webkit-scrollbar-thumb {
    background-color: rgba(var(--ui-1), var(--opacity-6));
    border-radius: var(--scrollbar-corner-radius);
  }

  ::-webkit-scrollbar-thumb:active,
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgba(var(--ui-1), var(--opacity-4))
  }

  ::-webkit-scrollbar-track {
    background-color: rgba(var(--ui-1), var(--opacity-7));
    border-radius: var(--scrollbar-corner-radius);
  }

  *:active::-webkit-scrollbar-track:active {
    width: 1rem;
  }

  sh-nav-bar::-webkit-scrollbar {
    width: 0 !important;
    height: 0 !important;
    background-color: transparent !important;
    box-shadow: 0rem !important;
  }

  *[hidden] {
    display: none !important;
  }

  /* Firefox scrollbar */

  * {
    scrollbar-color:  rgba(var(--ui-1), var(--opacity-6)) rgba(var(--ui-1), var(--opacity-7));
    scrollbar-width: thin;
  }
  *:hover, *:active {
    scrollbar-color:  rgba(var(--ui-1), var(--opacity-4)) rgba(var(--ui-1), var(--opacity-7));
    scrollbar-width: thin
  }

  /* hr spacer */

  hr {
    border: none;
    -webkit-margin-before: 0.5rem;
    -webkit-margin-after: 0.5rem;
  }
`;
  $_documentContainer.innerHTML = `<dom-module id="shared-styles">
  <template>
    <style>
      ${sharedStyles}
    </style>
  </template>
</dom-module>`;
  document.head.appendChild($_documentContainer.content);

  // ../styles/styles.scss.js
  function styleInject(css2, ref) {
    if (ref === void 0)
      ref = {};
    var insertAt = ref.insertAt;
    if (!css2 || typeof document === "undefined") {
      return;
    }
    var head = document.head || document.getElementsByTagName("head")[0];
    var style = document.createElement("style");
    style.type = "text/css";
    if (insertAt === "top") {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }
    if (style.styleSheet) {
      style.styleSheet.cssText = css2;
    } else {
      style.appendChild(document.createTextNode(css2));
    }
  }
  var css_248z = '@charset "UTF-8";\n::-webkit-scrollbar {\n  width: var(--scrollbar-size);\n  height: var(--scrollbar-size);\n  visibility: hidden;\n}\n\n::-webkit-scrollbar-corner {\n  background-color: transparent;\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: rgba(var(--ui-1), var(--opacity-6));\n  border-radius: var(--scrollbar-corner-radius);\n}\n\n::-webkit-scrollbar-thumb:active,\n::-webkit-scrollbar-thumb:hover {\n  background-color: rgba(var(--ui-1), var(--opacity-4));\n}\n\n::-webkit-scrollbar-track {\n  background-color: rgba(var(--ui-1), var(--opacity-7));\n  border-radius: var(--scrollbar-corner-radius);\n}\n\n*:active::-webkit-scrollbar-track:active {\n  width: 1rem;\n}\n\nsh-nav-bar::-webkit-scrollbar {\n  width: 0 !important;\n  height: 0 !important;\n  background-color: transparent !important;\n  box-shadow: 0rem !important;\n}\n\n*[hidden] {\n  display: none !important;\n}\n\n/* Firefox scrollbar */\n* {\n  scrollbar-color: rgba(var(--ui-1), var(--opacity-6)) rgba(var(--ui-1), var(--opacity-7));\n  scrollbar-width: thin;\n}\n\n*:hover,\n*:active {\n  scrollbar-color: rgba(var(--ui-1), var(--opacity-4)) rgba(var(--ui-1), var(--opacity-7));\n  scrollbar-width: thin;\n}\n\n/* hr spacer */\nhr {\n  border: none;\n  -webkit-margin-before: 0.5rem;\n  -webkit-margin-after: 0.5rem;\n}\n\n/* THEMES */\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-button-button-height=2rem] - height of the button\n   */\n  --sh-button-button-height: 2rem;\n  /* \n   * @cssprop [--sh-button-width-size-s=6rem] - width of the button s\n   */\n  --sh-button-width-size-s: 6rem;\n  /* \n   * @cssprop [--sh-button-width-size-m=9.5rem] - width of the button m\n   */\n  --sh-button-width-size-m: 9.5rem;\n  /* \n   * @cssprop [--sh-button-width-size-l=11.5rem] - width of the button l\n   */\n  --sh-button-width-size-l: 11.5rem;\n  /* \n   * @cssprop [--sh-button-label-line-height=1.5rem] - line height of the label\n   */\n  --sh-button-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-button-button-border-radius=1rem] - border radius of the button\n   */\n  --sh-button-button-border-radius: 1rem;\n  /* \n   * @cssprop [--sh-button-button-padding=0.25rem 1rem] - padding of the button\n   */\n  --sh-button-button-padding: 0.25rem 1rem;\n  /* \n   * @cssprop [--sh-button-icon-width=3rem] - width of the icon button\n   */\n  --sh-button-icon-width: 3rem;\n  /* \n   * @cssprop [--sh-button-icon-height=3rem] - height of the icon button\n   */\n  --sh-button-icon-height: 3rem;\n  /* \n   * @cssprop [--sh-button-icon-size=2rem] - size of the icon\n   */\n  --sh-button-icon-size: 2rem;\n  /* \n   * @cssprop [--sh-button-icon-padding=0.5rem] - padding of the icon\n   */\n  --sh-button-icon-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-button-padding-right-left=2rem] - left right padding of the button\n   */\n  --sh-button-padding-right-left: 2rem;\n  /* \n   * @cssprop [--sh-button-tooltip-height=1.5rem] - line height and height of the tooltip\n   */\n  --sh-button-tooltip-height: 1.5rem;\n  /* \n   * @cssprop [--sh-button-tooltip-max-width=15rem] - max width of the tooltip\n   */\n  --sh-button-tooltip-max-width: 15rem;\n  /* \n   * @cssprop [--sh-button-tooltip-top-margin=0rem] - margin-top for the tooltip\n   */\n  --sh-button-tooltip-top-margin: 0rem;\n  /* \n   * @cssprop [--sh-button-tooltip-margin=0.25rem] - margin for the tooltip\n   */\n  --sh-button-tooltip-margin: 0.25rem;\n  /* \n   * @cssprop [--sh-button-tooltip-margin-top=-1.5rem] - margin for tooltip top placement\n   */\n  --sh-button-tooltip-margin-top: -1.5rem;\n  /* \n   * @cssprop [--sh-button-tooltip-hover-margin-top=-1.75rem] - margin for tooltip top placement on hover\n   */\n  --sh-button-tooltip-hover-margin-top: -1.75rem;\n  /* \n   * @cssprop [--sh-button-tertiary-border-thickness=0.0625rem] - border thickness of a tertiary button\n   */\n  --sh-button-tertiary-border-thickness: 0.0625rem;\n  /* \n   * @cssprop [--sh-button-flex-shrink-icon=unset] - flex-shrink of an icon button\n   */\n  --sh-button-flex-shrink-icon: unset;\n  /* \n   * @cssprop [--sh-button-icon-label-margin-right=0.25rem] - padding right of icon when both icon and label present\n   */\n  --sh-button-icon-label-margin-right: 0.25rem;\n  /* \n   * @cssprop [--sh-button-button-padding-icon-position=0.25rem 1.25rem 0.25rem 1rem] - padding of the button when icon is set\n   */\n  --sh-button-button-padding-icon-position: 0.25rem 1.25rem 0.25rem 1rem;\n  /* \n   * @cssprop [--sh-button-icon-size-s=1.5rem] - button icon size when both icon and label present\n   */\n  --sh-button-icon-size-s: 1.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-dropdown-overlay-height=2.5rem] - height of the dropdown to position the overlay\n   */\n  --sh-dropdown-overlay-height: 2.5rem;\n  /* \n   * @cssprop [--sh-dropdown-overlay-condensed-height=2rem] - height of the dropdown when condensed to position the overlay\n   */\n  --sh-dropdown-overlay-condensed-height: 2rem;\n  /* \n   * @cssprop [--sh-dropdown-overlay-padding=0 0.5rem] - overlay padding\n   */\n  --sh-dropdown-overlay-padding: 0 0.5rem;\n  /* \n   * @cssprop [--sh-dropdown-overlay-max-height=13.75rem] - max height of the overlay\n   */\n  --sh-dropdown-overlay-max-height: 13.75rem;\n  /* \n   * @cssprop [--sh-dropdown-icon-input-padding=1.25rem 0 0.1875rem 3rem] - padding of the dropdown input with icon set\n   */\n  --sh-dropdown-icon-input-padding: 1.25rem 0 0.1875rem 3rem;\n  /* \n   * @cssprop [--sh-dropdown-icon-label-padding-left=3rem] - padding of the label with icon set\n   */\n  --sh-dropdown-icon-label-padding-left: 3rem;\n  /* \n   * @cssprop [--sh-dropdown-icon-top=0.25rem] - position top of the icon\n   */\n  --sh-dropdown-icon-top: 0.25rem;\n  /* \n   * @cssprop [--sh-dropdown-icon-left=0.5rem] - position left of the icon\n   */\n  --sh-dropdown-icon-left: 0.5rem;\n  /* \n   * @cssprop [--sh-dropdown-label-pointer-event=all] - Pointer event of the label\n   */\n  --sh-dropdown-label-pointer-event: all;\n  /* \n   * @cssprop [--sh-dropdown-label-disabled-pointer-event=none] - pointer events of the input text label when disabled\n   */\n  --sh-dropdown-label-disabled-pointer-event: none;\n  /* \n   * @cssprop [--sh-dropdown-icon-wrapper-left-margin=0.25rem] - left margin of the arrow icon inside the icon wrapper\n   */\n  --sh-dropdown-icon-wrapper-left-margin: 0.25rem;\n  /* \n   * @cssprop [--sh-dropdown-error-success-icon-left-margin=0.5rem] - left margin of the error/success icons inside the icon wrapper\n   */\n  --sh-dropdown-error-success-icon-left-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-dropdown-condensed-input-padding=0.25rem 0 0.1875rem 2.5rem] - Padding for the input when dropdown is condensed\n   */\n  --sh-dropdown-condensed-input-padding: 0.25rem 0 0.1875rem 2.5rem;\n  /* \n   * @cssprop [--sh-dropdown-arrow-icon-size=1.9375rem] - Dropdown arrow icon size when dropdown is condensed\n   */\n  --sh-dropdown-arrow-icon-size: 1.9375rem;\n  /* \n   * @cssprop [--sh-dropdown-input-cursor=pointer] - cursor for the dropdown input\n   */\n  --sh-dropdown-input-cursor: pointer;\n  /* \n   * @cssprop [--sh-dropdown-transition-time=0s] - transition for label and input\n   */\n  --sh-dropdown-transition-time: 0s;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-empty-state-icon-size=4rem] - Size of the empty state icon\n   */\n  --sh-empty-state-icon-size: 4rem;\n  /* \n   * @cssprop [--sh-empty-state-text-width=24rem] - Width of the empty state text\n   */\n  --sh-empty-state-text-width: 24rem;\n  /* \n   * @cssprop [--sh-empty-state-text-max-width=calc(100% - 4rem)] - Maximum width of the empty state text \n   */\n  --sh-empty-state-text-max-width: calc(100% - 4rem);\n  /* \n   * @cssprop [--sh-empty-state-margin=1rem] - Top margin for the footer slot & Bottom margin of the icon \n   */\n  --sh-empty-state-margin: 1rem;\n  /* \n   * @cssprop [--sh-empty-state-thickness=0.125rem] - Border thickness of the dotted line when drag and drop is set\n   */\n  --sh-empty-state-thickness: 0.125rem;\n  /* \n   * @cssprop [--sh-empty-state-left-margin=0.5rem] - left margin of the non first footer slot elements\n   */\n  --sh-empty-state-left-margin: 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-menu-item-item-height=2.5rem] - Height of the menu-item\n   */\n  --sh-menu-item-item-height: 2.5rem;\n  /* \n   * @cssprop [--sh-menu-item-label-line-height=1.5rem] - Line height of the menu item label\n   */\n  --sh-menu-item-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-menu-item-item-padding=0.25rem 0] - padding of the menu item\n   */\n  --sh-menu-item-item-padding: 0.25rem 0;\n  /* \n   * @cssprop [--sh-menu-item-item-padding-hover=0.25rem 0.5rem] - padding of the menu item on hover\n   */\n  --sh-menu-item-item-padding-hover: 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-item-margin-hover=0 -0.5rem] - margin of the menu item on hover\n   */\n  --sh-menu-item-item-margin-hover: 0 -0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-item-width=calc(100% + 1rem)] - width of the item on hover or active\n   */\n  --sh-menu-item-item-width: calc(100% + 1rem);\n  /* \n   * @cssprop [--sh-menu-item-icon-right-margin=0.5rem] - right margin of the icon\n   */\n  --sh-menu-item-icon-right-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-vertical-item-padding=0.5rem] - padding of the vertical menu item\n   */\n  --sh-menu-item-vertical-item-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-vertical-icon-margin=0rem auto 0.5rem] - margin of the vertical menu item icon\n   */\n  --sh-menu-item-vertical-icon-margin: 0rem auto 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-chapter-wrapper-margin-left=3.5rem] - left margin of the chapter wrapper\n   */\n  --sh-menu-item-chapter-wrapper-margin-left: 3.5rem;\n  /* \n   * @cssprop [--sh-menu-item-chapter-arrow-margin-right=0.5rem] - right margin of the chapter arrow icon\n   */\n  --sh-menu-item-chapter-arrow-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-chapter-sibling-margin-left=2rem] - left margin of the chapter sibling\n   */\n  --sh-menu-item-chapter-sibling-margin-left: 2rem;\n  /* \n   * @cssprop [--sh-menu-item-chapter-sibling-margin-left-hover=1.5rem] - left margin of the chapter sibling on hover\n   */\n  --sh-menu-item-chapter-sibling-margin-left-hover: 1.5rem;\n  /* \n   * @cssprop [--sh-menu-item-functions-slot-margin=0.25rem 0rem 0rem -1.75rem] - margin of the elements inside functions slot\n   */\n  --sh-menu-item-functions-slot-margin: 0.25rem 0rem 0rem -1.75rem;\n  /* \n   * @cssprop [--sh-menu-item-icon-size=1.5rem] - size of the icon\n   */\n  --sh-menu-item-icon-size: 1.5rem;\n  /* \n   * @cssprop [--sh-menu-item-button-icon-right-xs=0rem] - right position of icon button in function slot in xs size\n   */\n  --sh-menu-item-button-icon-right-xs: 0rem;\n  /* \n   * @cssprop [--sh-menu-item-button-icon-right-s=0rem] - right position of icon button in function slot in s size\n   */\n  --sh-menu-item-button-icon-right-s: 0rem;\n  /* \n   * @cssprop [--sh-menu-item-button-icon-right-m=0rem] - right position of icon button in function slot in m size\n   */\n  --sh-menu-item-button-icon-right-m: 0rem;\n  /* \n   * @cssprop [--sh-menu-item-button-icon-margin-left-xs=0.5rem] - margin-left of button icon in xs size of icon\n   */\n  --sh-menu-item-button-icon-margin-left-xs: 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-button-icon-margin-left-s=0.5rem] - margin-left of button icon in s size of icon\n   */\n  --sh-menu-item-button-icon-margin-left-s: 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-button-icon-margin-left-m=0.5rem] - margin-left of button icon in m size of icon\n   */\n  --sh-menu-item-button-icon-margin-left-m: 0.5rem;\n  /* \n   * @cssprop [--sh-menu-item-button-icon-margin-left-l=0.5rem] - margin-left of button icon in l size of icon\n   */\n  --sh-menu-item-button-icon-margin-left-l: 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-icon-size-xs=1rem] - size of icon\n   */\n  --sh-icon-size-xs: 1rem;\n  /* \n   * @cssprop [--sh-icon-size-s=1.5rem] - size of icon\n   */\n  --sh-icon-size-s: 1.5rem;\n  /* \n   * @cssprop [--sh-icon-size-m=2rem] - size of icon\n   */\n  --sh-icon-size-m: 2rem;\n  /* \n   * @cssprop [--sh-icon-size-l=3rem] - size of icon\n   */\n  --sh-icon-size-l: 3rem;\n  /* \n   * @cssprop [--sh-icon-font-size-xs=1rem] - size of icon image\n   */\n  --sh-icon-font-size-xs: 1rem;\n  /* \n   * @cssprop [--sh-icon-font-size-s=1.5rem] - size of icon image\n   */\n  --sh-icon-font-size-s: 1.5rem;\n  /* \n   * @cssprop [--sh-icon-font-size-m=2rem] - size of icon image\n   */\n  --sh-icon-font-size-m: 2rem;\n  /* \n   * @cssprop [--sh-icon-font-size-l=3rem] - size of icon image\n   */\n  --sh-icon-font-size-l: 3rem;\n  /* \n   * @cssprop [--sh-icon-badge-left=calc(100% - 0.25rem)] - left position the badg will be centered around\n   */\n  --sh-icon-badge-left: calc(100% - 0.25rem);\n  /* \n   * @cssprop [--sh-icon-badge-bottom=calc(100% - 0.25rem)] - bottom position the badg will be centered around\n   */\n  --sh-icon-badge-bottom: calc(100% - 0.25rem);\n  /* \n   * @cssprop [--sh-icon-active-padding-size-xs=0.125rem] - active icon padding for size xs\n   */\n  --sh-icon-active-padding-size-xs: 0.125rem;\n  /* \n   * @cssprop [--sh-icon-active-padding-size-s=0.125rem] - active icon padding for size s\n   */\n  --sh-icon-active-padding-size-s: 0.125rem;\n  /* \n   * @cssprop [--sh-icon-active-padding-size-m=0.125rem] - active icon padding for size m\n   */\n  --sh-icon-active-padding-size-m: 0.125rem;\n  /* \n   * @cssprop [--sh-icon-active-padding-size-l=0rem] - active icon padding for size l\n   */\n  --sh-icon-active-padding-size-l: 0rem;\n  /* \n   * @cssprop [--sh-icon-border-radius=0.125rem] - button active border radius\n   */\n  --sh-icon-border-radius: 0.125rem;\n}\n\n/* icon scale by default === font size */\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-badge-font-size=0.625rem] - font size for badge\n   */\n  --sh-badge-font-size: 0.625rem;\n  /* \n   * @cssprop [--sh-badge-min-width=1rem] - min width of badge\n   */\n  --sh-badge-min-width: 1rem;\n  /* \n   * @cssprop [--sh-badge-max-width=4rem] - max width of badge\n   */\n  --sh-badge-max-width: 4rem;\n  /* \n   * @cssprop [--sh-badge-height=1rem] - height of badge\n   */\n  --sh-badge-height: 1rem;\n  /* \n   * @cssprop [--sh-badge-line-height=0.5rem] - line height of badge\n   */\n  --sh-badge-line-height: 0.5rem;\n  /* \n   * @cssprop [--sh-badge-no-label-size=0.5rem] - size of empty badge in case no label is set\n   */\n  --sh-badge-no-label-size: 0.5rem;\n  /* \n   * @cssprop [--sh-badge-padding=0.25rem 0.25rem] - padding for text labels\n   */\n  --sh-badge-padding: 0.25rem 0.25rem;\n  /* \n   * @cssprop [--sh-badge-icon-font-size=1.5rem] - applied to interllay used icon as --sh-icon-font-size-xs\n   */\n  --sh-badge-icon-font-size: 1.5rem;\n  /* \n   * @cssprop [--sh-badge-label-type-padding=0rem 0.25rem 0rem 0.125rem] - padding is applied if both type and label are defined \n   */\n  --sh-badge-label-type-padding: 0rem 0.25rem 0rem 0.125rem;\n  /* \n   * @cssprop [--sh-badge-label-line-height=1rem] - line-height is applied if both type and label are defined \n   */\n  --sh-badge-label-line-height: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-tag-container-height=2rem] - height of container\n   */\n  --sh-tag-container-height: 2rem;\n  /* \n   * @cssprop [--sh-tag-wrapper-border=0.0625rem] - border of tag wrapper\n   */\n  --sh-tag-wrapper-border: 0.0625rem;\n  /* \n   * @cssprop [--sh-tag-padding=0 0.5rem] - left and right padding of tag\n   */\n  --sh-tag-padding: 0 0.5rem;\n  /* \n   * @cssprop [--sh-tag-label-line-height=2rem] - line height of tag label\n   */\n  --sh-tag-label-line-height: 2rem;\n  /* \n   * @cssprop [--sh-tag-icon-padding=0.5rem] - padding of the icon\n   */\n  --sh-tag-icon-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-tag-border-radius=0.125rem] - border radius\n   */\n  --sh-tag-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-tag-condensed-container-height=1.5rem] - height of the container in condensed view\n   */\n  --sh-tag-condensed-container-height: 1.5rem;\n  /* \n   * @cssprop [--sh-tag-condensed-icon-padding=0.5rem] - padding of the icon in condensed view\n   */\n  --sh-tag-condensed-icon-padding: 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-text-super-header-line-height=2rem] - line height of super header text\n   */\n  --sh-text-super-header-line-height: 2rem;\n  /* \n   * @cssprop [--sh-text-header-line-height=1.5rem] - line height of header text\n   */\n  --sh-text-header-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-text-title1-line-height=1.25rem] - line height of title1 text\n   */\n  --sh-text-title1-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-text-title2-line-height=1rem] - line height of title2 text\n   */\n  --sh-text-title2-line-height: 1rem;\n  /* \n   * @cssprop [--sh-text-body1-line-height=1.25rem] - line height of body1 text\n   */\n  --sh-text-body1-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-text-body2-line-height=1rem] - line height of body2 text\n   */\n  --sh-text-body2-line-height: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-toggle-height=1.25rem] - toggle height\n   */\n  --sh-toggle-height: 1.25rem;\n  /* \n   * @cssprop [--sh-toggle-border-radius=0.625rem] - border radius\n   */\n  --sh-toggle-border-radius: 0.625rem;\n  /* \n   * @cssprop [--sh-toggle-border-width=0.125rem] - border width\n   */\n  --sh-toggle-border-width: 0.125rem;\n  /* \n   * @cssprop [--sh-toggle-circle-dimension=0.875rem] - toggle circle width and height\n   */\n  --sh-toggle-circle-dimension: 0.875rem;\n  /* \n   * @cssprop [--sh-toggle-width=2.5rem] - toggle width\n   */\n  --sh-toggle-width: 2.5rem;\n  /* \n   * @cssprop [--sh-toggle-margin=0.125rem 0.625rem 0.125rem 0.125rem] - toggle margin\n   */\n  --sh-toggle-margin: 0.125rem 0.625rem 0.125rem 0.125rem;\n  /* \n   * @cssprop [--sh-toggle-circle-top=0.0625rem] - toggle circle top\n   */\n  --sh-toggle-circle-top: 0.0625rem;\n  /* \n   * @cssprop [--sh-toggle-circle-left=0.0625rem] - toggle circle left\n   */\n  --sh-toggle-circle-left: 0.0625rem;\n  /* \n   * @cssprop [--sh-toggle-active-left=1.25rem] - toggle circle left\n   */\n  --sh-toggle-active-left: 1.25rem;\n  /* \n   * @cssprop [--sh-toggle-line-height=1.5rem] - toggle line height\n   */\n  --sh-toggle-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-toggle-label-line-height=1.5rem] - label line height\n   */\n  --sh-toggle-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-toggle-label-padding=0rem] - label padding\n   */\n  --sh-toggle-label-padding: 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-checkbox-inner-width=1rem] - checkbox width\n   */\n  --sh-checkbox-inner-width: 1rem;\n  /* \n   * @cssprop [--sh-checkbox-inner-height=1rem] - checkbox height\n   */\n  --sh-checkbox-inner-height: 1rem;\n  /* \n   * @cssprop [--sh-checkbox-outer-width=1.5rem] - checkbox outer width\n   */\n  --sh-checkbox-outer-width: 1.5rem;\n  /* \n   * @cssprop [--sh-checkbox-outer-height=1.5rem] - checkbox outer height\n   */\n  --sh-checkbox-outer-height: 1.5rem;\n  /* \n   * @cssprop [--sh-checkbox-tick-line-height=0.875rem] - checkbox tick line height\n   */\n  --sh-checkbox-tick-line-height: 0.875rem;\n  /* \n   * @cssprop [--sh-checkbox-tick-font-size=0.875rem] - tick font size\n   */\n  --sh-checkbox-tick-font-size: 0.875rem;\n  /* \n   * @cssprop [--sh-checkbox-border-width=0.125rem] - checkbox border width\n   */\n  --sh-checkbox-border-width: 0.125rem;\n  /* \n   * @cssprop [--sh-checkbox-border-radius=0.125rem] - checkbox border radius\n   */\n  --sh-checkbox-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-checkbox-label-line-height=1.25rem] - checkbox label line height\n   */\n  --sh-checkbox-label-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-checkbox-margin-right=0.5rem] - checkbox margin right\n   */\n  --sh-checkbox-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-checkbox-margin-around-checkbox=0.25rem] - margin around checkbox\n   */\n  --sh-checkbox-margin-around-checkbox: 0.25rem;\n  /* \n   * @cssprop [--sh-checkbox-text-indent=-0.0625rem] - tick text indent\n   */\n  --sh-checkbox-text-indent: -0.0625rem;\n  /* \n   * @cssprop [--sh-checkbox-outline-offset=-0.125rem] - outline ofset\n   */\n  --sh-checkbox-outline-offset: -0.125rem;\n  /* \n   * @cssprop [--sh-checkbox-label-width=2rem] - label width\n   */\n  --sh-checkbox-label-width: 2rem;\n  /* \n   * @cssprop [--sh-checkbox-padding=0rem] - checkbox top and bottom padding\n   */\n  --sh-checkbox-padding: 0rem;\n  /* \n   * @cssprop [--sh-checkbox-label-padding=0rem] - label padding\n   */\n  --sh-checkbox-label-padding: 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-radio-button-container-margin=0] - margin of the container(XL)\n   */\n  --sh-radio-button-container-margin: 0;\n  /* \n   * @cssprop [--sh-radio-button-label-line-height=1.25rem] - line height of the label\n   */\n  --sh-radio-button-label-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-radio-button-label-padding=0.25rem] - left padding of the label\n   */\n  --sh-radio-button-label-padding: 0.25rem;\n  /* \n   * @cssprop [--sh-radio-button-label-margin=0.125rem 0] - top and bottom margins of the label\n   */\n  --sh-radio-button-label-margin: 0.125rem 0;\n  /* \n   * @cssprop [--sh-radio-button-width=1.5rem] - width of the radio-button\n   */\n  --sh-radio-button-width: 1.5rem;\n  /* \n   * @cssprop [--sh-radio-button-height=1.5rem] - height of radio-button\n   */\n  --sh-radio-button-height: 1.5rem;\n  /* \n   * @cssprop [--sh-radio-button-pseudo-width=1rem] - width of the pseudo radio-button\n   */\n  --sh-radio-button-pseudo-width: 1rem;\n  /* \n   * @cssprop [--sh-radio-button-pseudo-height=1rem] - height of the pseudo radio-button\n   */\n  --sh-radio-button-pseudo-height: 1rem;\n  /* \n   * @cssprop [--sh-radio-button-pseudo-margin=0.25rem] - margin of the pseudo radio-button\n   */\n  --sh-radio-button-pseudo-margin: 0.25rem;\n  /* \n   * @cssprop [--sh-radio-button-pseudo-border-width=0.125rem] - border-width of the pseudo radio-button\n   */\n  --sh-radio-button-pseudo-border-width: 0.125rem;\n  /* \n   * @cssprop [--sh-radio-button-pseudo-border-width-active=0.3125rem] - border-width of the pseudo radio-button when active\n   */\n  --sh-radio-button-pseudo-border-width-active: 0.3125rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-radio-group-margin=0.5rem] - margin for the radio-button\n   */\n  --sh-radio-group-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-radio-group-horizontal-gap=0.5rem 1.5rem] - horizontal gap in-between radio-buttons\n   */\n  --sh-radio-group-horizontal-gap: 0.5rem 1.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-breadcrumb-item-item-height=1.5rem] - height of breadcrumb item\n   */\n  --sh-breadcrumb-item-item-height: 1.5rem;\n  /* \n   * @cssprop [--sh-breadcrumb-item-item-max-width=10rem] - max width of breadcrumb item\n   */\n  --sh-breadcrumb-item-item-max-width: 10rem;\n  /* \n   * @cssprop [--sh-breadcrumb-item-item-line-height=1.25rem] - line height of breadcrumb item\n   */\n  --sh-breadcrumb-item-item-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-breadcrumb-item-item-icon-margin=-0.25rem 0] - icon margin of breadcrumb\n   */\n  --sh-breadcrumb-item-item-icon-margin: -0.25rem 0;\n  /* \n   * @cssprop [--sh-breadcrumb-item-item-icon-width=2rem] - icon max width\n   */\n  --sh-breadcrumb-item-item-icon-width: 2rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-input-text-label-left=0.5rem] - left of the input label\n   */\n  --sh-input-text-label-left: 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-empty-label-top=0.5rem] - top of the input label when no value\n   */\n  --sh-input-text-empty-label-top: 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-empty-label-line-height=1.5rem] - line-height of the input label when no value\n   */\n  --sh-input-text-empty-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-input-text-empty-padding=0.5rem 0 0.4375rem 0.5rem] - padding of the input-text when no value\n   */\n  --sh-input-text-empty-padding: 0.5rem 0 0.4375rem 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-height=2.4375rem] - height of the input-text\n   */\n  --sh-input-text-height: 2.4375rem;\n  /* \n   * @cssprop [--sh-input-text-padding=1.25rem 0 0.1875rem 0.5rem] - padding of the input-text with value\n   */\n  --sh-input-text-padding: 1.25rem 0 0.1875rem 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-label-top=0.25rem] - top of the input label with value\n   */\n  --sh-input-text-label-top: 0.25rem;\n  /* \n   * @cssprop [--sh-input-text-label-line-height=1rem] - line-height of the input label with value\n   */\n  --sh-input-text-label-line-height: 1rem;\n  /* \n   * @cssprop [--sh-input-text-empty-no-border-padding-bottom=0.5rem] - padding-bottom of the input when no border\n   */\n  --sh-input-text-empty-no-border-padding-bottom: 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-no-border-padding-bottom=0.25rem] - padding-bottom of the input with value when no border\n   */\n  --sh-input-text-no-border-padding-bottom: 0.25rem;\n  /* \n   * @cssprop [--sh-input-text-no-border-condensed-padding-bottom=0.25rem] - padding-bottom of the condensed input when no border\n   */\n  --sh-input-text-no-border-condensed-padding-bottom: 0.25rem;\n  /* \n   * @cssprop [--sh-input-text-icon-left-margin=0.5rem] - margin-left of the icon\n   */\n  --sh-input-text-icon-left-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-slot-icon-left-margin=0.5rem] - margin-left of the icon placed in the slot\n   */\n  --sh-input-text-slot-icon-left-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-icon-wrapper-right-padding=0.5rem] - right-padding of the icon-wrapper\n   */\n  --sh-input-text-icon-wrapper-right-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-icon-size=1.5rem] - size of the icon\n   */\n  --sh-input-text-icon-size: 1.5rem;\n  /* \n   * @cssprop [--sh-input-text-icon-wrapper-margin=0rem] - margin-bottom of the icon\n   */\n  --sh-input-text-icon-wrapper-margin: 0rem;\n  /* \n   * @cssprop [--sh-input-text-helper-text-padding=0.25rem 0.5rem 0] - padding of the helper-text\n   */\n  --sh-input-text-helper-text-padding: 0.25rem 0.5rem 0;\n  /* \n   * @cssprop [--sh-input-text-condensed-label-top=0.25rem] - top of the condensed label\n   */\n  --sh-input-text-condensed-label-top: 0.25rem;\n  /* \n   * @cssprop [--sh-input-text-condensed-padding=0.25rem 0 0.1875rem 0.5rem] - padding of the condensed input\n   */\n  --sh-input-text-condensed-padding: 0.25rem 0 0.1875rem 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-condensed-height=1.9375rem] - height of the condensed input\n   */\n  --sh-input-text-condensed-height: 1.9375rem;\n  /* \n   * @cssprop [--sh-input-text-textarea-label-height=1.5rem] - height of the textarea label\n   */\n  --sh-input-text-textarea-label-height: 1.5rem;\n  /* \n   * @cssprop [--sh-input-text-textarea-label-padding=0.25rem 0 0.25rem 0.5rem] - padding of the textarea label\n   */\n  --sh-input-text-textarea-label-padding: 0.25rem 0 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-textarea-padding=0 0.5rem 0.3125rem] - padding of the textarea\n   */\n  --sh-input-text-textarea-padding: 0 0.5rem 0.3125rem;\n  /* \n   * @cssprop [--sh-input-text-textarea-line-height=1.0625rem] - line-height of the textarea\n   */\n  --sh-input-text-textarea-line-height: 1.0625rem;\n  /* \n   * @cssprop [--sh-input-text-textarea-empty-label-line-height=1.25rem] - line-height of the empty textarea (without value)\n   */\n  --sh-input-text-textarea-empty-label-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-input-text-condensed-textarea-top=0.25rem] - top of the icon-wrapper and label of condensed textarea\n   */\n  --sh-input-text-condensed-textarea-top: 0.25rem;\n  /* \n   * @cssprop [--sh-input-text-condensed-textarea-padding=0.25rem 0 0.3125rem 0.5rem] - padding of the div of condensed textarea\n   */\n  --sh-input-text-condensed-textarea-padding: 0.25rem 0 0.3125rem 0.5rem;\n  /* \n   * @cssprop [--sh-input-text-textarea-label-line-height=1rem] - line-height of the label of textarea with value\n   */\n  --sh-input-text-textarea-label-line-height: 1rem;\n  /* \n   * @cssprop [--sh-input-text-condensed-textarea-icon-top=0.25rem] - top of the icon of condensed textarea with value\n   */\n  --sh-input-text-condensed-textarea-icon-top: 0.25rem;\n  /* \n   * @cssprop [--sh-input-text-pointer-events=none] - pointer events of the input text label\n   */\n  --sh-input-text-pointer-events: none;\n  /* \n   * @cssprop [--sh-input-text-label-condensed-display=none] - condensed label display\n   */\n  --sh-input-text-label-condensed-display: none;\n  /* \n   * @cssprop [--sh-input-text-input-cursor=text] - cursor for the input\n   */\n  --sh-input-text-input-cursor: text;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-spinner-width-s=2rem] - spinner width of s size\n   */\n  --sh-spinner-width-s: 2rem;\n  /* \n   * @cssprop [--sh-spinner-height-s=2rem] - spinner height of s size\n   */\n  --sh-spinner-height-s: 2rem;\n  /* \n   * @cssprop [--sh-spinner-width-m=3rem] - spinner width of m size\n   */\n  --sh-spinner-width-m: 3rem;\n  /* \n   * @cssprop [--sh-spinner-height-m=3rem] - spinner height of m size\n   */\n  --sh-spinner-height-m: 3rem;\n  /* \n   * @cssprop [--sh-spinner-border-width=0.25rem] - border width of s size\n   */\n  --sh-spinner-border-width: 0.25rem;\n  /* \n   * @cssprop [--sh-spinner-label-height=1rem] - label height\n   */\n  --sh-spinner-label-height: 1rem;\n  /* \n   * @cssprop [--sh-spinner-label-line-height=1.125rem] - label line height\n   */\n  --sh-spinner-label-line-height: 1.125rem;\n  /* \n   * @cssprop [--sh-spinner-margin-top=0.5rem] - label margin top\n   */\n  --sh-spinner-margin-top: 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-divider-thickness=0.0625rem] - width / height of the  vertical & horizontal divider\n   */\n  --sh-divider-thickness: 0.0625rem;\n  /* \n   * @cssprop [--sh-divider-horizontal-s=0.5rem 0] - spacing s for the horizontal divider\n   */\n  --sh-divider-horizontal-s: 0.5rem 0;\n  /* \n   * @cssprop [--sh-divider-horizontal-m=1rem 0] - spacing m for the horizontal divider\n   */\n  --sh-divider-horizontal-m: 1rem 0;\n  /* \n   * @cssprop [--sh-divider-horizontal-l=1.5rem 0] - spacing l for the horizontal divider\n   */\n  --sh-divider-horizontal-l: 1.5rem 0;\n  /* \n   * @cssprop [--sh-divider-horizontal-xl=3rem 0] - spacing xl for the horizontal divider\n   */\n  --sh-divider-horizontal-xl: 3rem 0;\n  /* \n   * @cssprop [--sh-divider-vertical-s=0 0.5rem] - spacing s for the vertical divider\n   */\n  --sh-divider-vertical-s: 0 0.5rem;\n  /* \n   * @cssprop [--sh-divider-vertical-m=0 1rem] - spacing m for the vertical divider\n   */\n  --sh-divider-vertical-m: 0 1rem;\n  /* \n   * @cssprop [--sh-divider-vertical-l=0 1.5rem] - spacing l for the vertical divider\n   */\n  --sh-divider-vertical-l: 0 1.5rem;\n  /* \n   * @cssprop [--sh-divider-vertical-xl=0 3rem] - spacing xl for the vertical divider\n   */\n  --sh-divider-vertical-xl: 0 3rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-tooltip-max-content-width=25rem] - maximum width of the tooltip\n   */\n  --sh-tooltip-max-content-width: 25rem;\n  /* \n   * @cssprop [--sh-tooltip-content-padding=0.25rem 0.5rem] - padding for the tooltip\n   */\n  --sh-tooltip-content-padding: 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-tooltip-label-line-height=1rem] - line height of the tooltip label\n   */\n  --sh-tooltip-label-line-height: 1rem;\n  /* \n   * @cssprop [--sh-tooltip-padding-title=0.5rem] - padding for the tooltip with title\n   */\n  --sh-tooltip-padding-title: 0.5rem;\n  /* \n   * @cssprop [--sh-tooltip-title-line-height=1rem] - line height of the tooltip title\n   */\n  --sh-tooltip-title-line-height: 1rem;\n  /* \n   * @cssprop [--sh-tooltip-margin-value=0.5rem] - margin value of the tooltip title and error icon\n   */\n  --sh-tooltip-margin-value: 0.5rem;\n  /* \n   * @cssprop [--sh-tooltip-content-border-radius=0.125rem] - border-radius of the tooltip\n   */\n  --sh-tooltip-content-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-tooltip-margin-top-value=0rem] - margin top for the tooltip\n   */\n  --sh-tooltip-margin-top-value: 0rem;\n}\n\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-switch-item-width=5.5rem] - switch item width\n   */\n  --sh-switch-item-width: 5.5rem;\n  /* \n   * @cssprop [--sh-switch-item-height=2.5rem] - switch height\n   */\n  --sh-switch-item-height: 2.5rem;\n  /* \n   * @cssprop [--sh-switch-item-padding=0.75rem] - switch item padding\n   */\n  --sh-switch-item-padding: 0.75rem;\n  /* \n   * @cssprop [--sh-switch-item-label-alignment=center] - label alignment\n   */\n  --sh-switch-item-label-alignment: center;\n  /* \n   * @cssprop [--sh-switch-item-border-radius=1.25rem] - switch  border radius\n   */\n  --sh-switch-item-border-radius: 1.25rem;\n  /* \n   * @cssprop [--sh-switch-item-condensed-height=2rem] - switch  item condensed height\n   */\n  --sh-switch-item-condensed-height: 2rem;\n  /* \n   * @cssprop [--sh-switch-item-condensed-border-radius=1rem] - switch  item condensed height\n   */\n  --sh-switch-item-condensed-border-radius: 1rem;\n  /* \n   * @cssprop [--sh-switch-item-condensed-padding=0.5rem 0.75rem] - switch  item condensed height\n   */\n  --sh-switch-item-condensed-padding: 0.5rem 0.75rem;\n  /* \n   * @cssprop [--sh-switch-item-icon-height=2rem] - switch  item icon height\n   */\n  --sh-switch-item-icon-height: 2rem;\n  /* \n   * @cssprop [--sh-switch-item-icon-width=2rem] - switch  item icon width\n   */\n  --sh-switch-item-icon-width: 2rem;\n  /* \n   * @cssprop [--sh-switch-item-icon-margin=0.25rem 1.75rem] - switch  item icon margin\n   */\n  --sh-switch-item-icon-margin: 0.25rem 1.75rem;\n  /* \n   * @cssprop [--sh-switch-item-label-height=1rem] - switch  item icon margin\n   */\n  --sh-switch-item-label-height: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-switch-border-radius=1.25rem] - switch  border radius\n   */\n  --sh-switch-border-radius: 1.25rem;\n  /* \n   * @cssprop [--sh-switch-condensed-border-radius=1rem] - switch condensed border radius\n   */\n  --sh-switch-condensed-border-radius: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-search-icon-top=0.5rem] - top margin of search icon\n   */\n  --sh-search-icon-top: 0.5rem;\n  /* \n   * @cssprop [--sh-search-icon-left=0.5rem] - left margin of search icon\n   */\n  --sh-search-icon-left: 0.5rem;\n  /* \n   * @cssprop [--sh-search-input-height=2.5rem] - height of search input\n   */\n  --sh-search-input-height: 2.5rem;\n  /* \n   * @cssprop [--sh-search-value-line-height=0.5rem] - line-height of value\n   */\n  --sh-search-value-line-height: 0.5rem;\n  /* \n   * @cssprop [--sh-search-input-padding=0.5rem 0.5rem 0.5rem 2.5rem] - padding of input\n   */\n  --sh-search-input-padding: 0.5rem 0.5rem 0.5rem 2.5rem;\n  /* \n   * @cssprop [--sh-search-input-padding-right=2.5rem] - right padding of input\n   */\n  --sh-search-input-padding-right: 2.5rem;\n  /* \n   * @cssprop [--sh-search-border-radius=0.125rem 0.125rem 0rem 0rem] - border-radius of input\n   */\n  --sh-search-border-radius: 0.125rem 0.125rem 0rem 0rem;\n  /* \n   * @cssprop [--sh-search-border-bottom-thickness=0.0625rem] - border-bottom of input\n   */\n  --sh-search-border-bottom-thickness: 0.0625rem;\n  /* \n   * @cssprop [--sh-search-list-item-height=2.5rem] - list-item-height\n   */\n  --sh-search-list-item-height: 2.5rem;\n  /* \n   * @cssprop [--sh-search-single-line-list-item-padding=0.5rem] - list-item-padding\n   */\n  --sh-search-single-line-list-item-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-search-list-item-line-height=1.5rem] - line-height of list item\n   */\n  --sh-search-list-item-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-search-close-icon-right=0.5rem] - distance between right of close icon and right of search input\n   */\n  --sh-search-close-icon-right: 0.5rem;\n  /* \n   * @cssprop [--sh-search-multi-line-list-item-padding=0.25rem 0.5rem] - multi-line list-item padding\n   */\n  --sh-search-multi-line-list-item-padding: 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-search-multi-line-list-item-height=2.5rem] - multi-line list-item height\n   */\n  --sh-search-multi-line-list-item-height: 2.5rem;\n  /* \n   * @cssprop [--sh-search-multi-line-single-item-height=1rem] - multi-line single-item height\n   */\n  --sh-search-multi-line-single-item-height: 1rem;\n  /* \n   * @cssprop [--sh-search-empty-wrapper-padding=1rem 0.5rem] - padding of empty wrapper\n   */\n  --sh-search-empty-wrapper-padding: 1rem 0.5rem;\n  /* \n   * @cssprop [--sh-search-list-view-max-height=13.75rem] - max-height of list-view\n   */\n  --sh-search-list-view-max-height: 13.75rem;\n  /* \n   * @cssprop [--sh-search-empty-slot-item-gap=1rem] - the gap between the items in empty slot\n   */\n  --sh-search-empty-slot-item-gap: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-accordion-header-wrapper-min-height=2.5rem] - minimum height of header wrapper\n   */\n  --sh-accordion-header-wrapper-min-height: 2.5rem;\n  /* \n   * @cssprop [--sh-accordion-container-padding-left-right=0 1rem] - Left and right side padding of container\n   */\n  --sh-accordion-container-padding-left-right: 0 1rem;\n  /* \n   * @cssprop [--sh-accordion-header-label-info-padding=0.5rem 0.5rem 0.5rem 0] - padding of accordion label and info\n   */\n  --sh-accordion-header-label-info-padding: 0.5rem 0.5rem 0.5rem 0;\n  /* \n   * @cssprop [--sh-accordion-content-wrapper-width=1rem] - width of content wrapper\n   */\n  --sh-accordion-content-wrapper-width: 1rem;\n  /* \n   * @cssprop [--sh-accordion-content-wrapper-line-height=1.25rem] - line-height of content wrapper\n   */\n  --sh-accordion-content-wrapper-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-accordion-wrapper-padding-bottom=1rem] - bottom padding of accordion wrapper\n   */\n  --sh-accordion-wrapper-padding-bottom: 1rem;\n  /* \n   * @cssprop [--sh-accordion-label-line-height=1.5rem] - line height of accordion label\n   */\n  --sh-accordion-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-accordion-expand-icon-margin=0.25rem 0 0.25rem 0] - margin of expand icon\n   */\n  --sh-accordion-expand-icon-margin: 0.25rem 0 0.25rem 0;\n  /* \n   * @cssprop [--sh-accordion-arrow-invert-margin=0.25rem 0.5rem 0.25rem 0] - margin of expand icon\n   */\n  --sh-accordion-arrow-invert-margin: 0.25rem 0.5rem 0.25rem 0;\n  /* \n   * @cssprop [--sh-accordion-icon-padding=0.5rem 0.5rem 0.5rem 0] - padding of header icon\n   */\n  --sh-accordion-icon-padding: 0.5rem 0.5rem 0.5rem 0;\n  /* \n   * @cssprop [--sh-accordion-content-items-margin-top=0.5rem] - vertical gap between items in content\n   */\n  --sh-accordion-content-items-margin-top: 0.5rem;\n  /* \n   * @cssprop [--sh-accordion-content-items-margin-top-touch=1rem] - vertical gap between items in content for touch device\n   */\n  --sh-accordion-content-items-margin-top-touch: 1rem;\n  /* \n   * @cssprop [--sh-accordion-content-first-item-margin-top=0rem] - top margin of first item in the content\n   */\n  --sh-accordion-content-first-item-margin-top: 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-user-identifier-margin-left=0.5rem] - info margin left\n   */\n  --sh-user-identifier-margin-left: 0.5rem;\n  /* \n   * @cssprop [--sh-user-identifier-max-width=10rem] - max width of name and info\n   */\n  --sh-user-identifier-max-width: 10rem;\n  /* \n   * @cssprop [--sh-user-identifier-height=1rem] - height of name and info\n   */\n  --sh-user-identifier-height: 1rem;\n  /* \n   * @cssprop [--sh-user-identifier-circle-dimension=2rem] - height of name and info\n   */\n  --sh-user-identifier-circle-dimension: 2rem;\n  /* \n   * @cssprop [--sh-user-identifier-image-circle=2rem] - width and height of image circle\n   */\n  --sh-user-identifier-image-circle: 2rem;\n  /* \n   * @cssprop [--sh-user-identifier-margin=0rem] - width and height of image circle\n   */\n  --sh-user-identifier-margin: 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-stepper-circle-dimension=2rem] - stepper circle width\n   */\n  --sh-stepper-circle-dimension: 2rem;\n  /* \n   * @cssprop [--sh-stepper-circle-line-height=2rem] - stepper circle line height\n   */\n  --sh-stepper-circle-line-height: 2rem;\n  /* \n   * @cssprop [--sh-stepper-margin-bottom=0.5rem] - stepper circle height\n   */\n  --sh-stepper-margin-bottom: 0.5rem;\n  /* \n   * @cssprop [--sh-stepper-border-width=0.125rem] - circle border width\n   */\n  --sh-stepper-border-width: 0.125rem;\n  /* \n   * @cssprop [--sh-stepper-line-top=0.9375rem] - stepper line top\n   */\n  --sh-stepper-line-top: 0.9375rem;\n  /* \n   * @cssprop [--sh-stepper-label-padding=0 0.5rem] - label text padding\n   */\n  --sh-stepper-label-padding: 0 0.5rem;\n  /* \n   * @cssprop [--sh-stepper-label-line-height=1.25rem] - label line height\n   */\n  --sh-stepper-label-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-stepper-info-line-height=1rem] - info line height\n   */\n  --sh-stepper-info-line-height: 1rem;\n  /* \n   * @cssprop [--sh-stepper-info-margin-top=0.125rem] - info margin top\n   */\n  --sh-stepper-info-margin-top: 0.125rem;\n  /* \n   * @cssprop [--sh-stepper-badge-top=-0.3125rem] - badge top\n   */\n  --sh-stepper-badge-top: -0.3125rem;\n  /* \n   * @cssprop [--sh-stepper-badge-right=-0.4375rem] - badge top\n   */\n  --sh-stepper-badge-right: -0.4375rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-circle-dimension=0.875rem] - condensed circle width\n   */\n  --sh-stepper-condensed-circle-dimension: 0.875rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-border-width=0.125rem] - condensed border width\n   */\n  --sh-stepper-condensed-border-width: 0.125rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-badge-top=-0.1875rem] - condensed badge top\n   */\n  --sh-stepper-condensed-badge-top: -0.1875rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-badge-right=-0.1875rem] - condensed badge top\n   */\n  --sh-stepper-condensed-badge-right: -0.1875rem;\n  /* \n   * @cssprop [--sh-stepper-line-border-width=0.125rem] - line border width\n   */\n  --sh-stepper-line-border-width: 0.125rem;\n  /* \n   * @cssprop [--sh-stepper-line-width=1.5rem] - line  width\n   */\n  --sh-stepper-line-width: 1.5rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-line-top=0.4375rem] - condensed stepper line top\n   */\n  --sh-stepper-condensed-line-top: 0.4375rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-line-width=0.625rem] - line border width\n   */\n  --sh-stepper-condensed-line-width: 0.625rem;\n  /* \n   * @cssprop [--sh-stepper-icon-size=1rem] - Size of the  icon\n   */\n  --sh-stepper-icon-size: 1rem;\n  /* \n   * @cssprop [--sh-stepper-font-size=1rem] - font Size of the icon\n   */\n  --sh-stepper-font-size: 1rem;\n  /* \n   * @cssprop [--sh-stepper-vertical-stepper-wrapper-min-height=3.875rem] - min height of the vertical stepper wrapper\n   */\n  --sh-stepper-vertical-stepper-wrapper-min-height: 3.875rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-vertical-stepper-wrapper-min-height=1.625rem] - min height of the condensed vertical stepper wrapper\n   */\n  --sh-stepper-condensed-vertical-stepper-wrapper-min-height: 1.625rem;\n  /* \n   * @cssprop [--sh-stepper-label-info-padding=0.75rem 0rem] - padding of the label-info\n   */\n  --sh-stepper-label-info-padding: 0.75rem 0rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-label-info-padding=0.5rem 0rem] - padding of the condensed label-info\n   */\n  --sh-stepper-condensed-label-info-padding: 0.5rem 0rem;\n  /* \n   * @cssprop [--sh-stepper-label-info-margin-left=0.25rem] - margin left of the label-info\n   */\n  --sh-stepper-label-info-margin-left: 0.25rem;\n  /* \n   * @cssprop [--sh-stepper-condensed-label-info-margin-left=0rem] - margin left of the condensed label-info\n   */\n  --sh-stepper-condensed-label-info-margin-left: 0rem;\n  /* \n   * @cssprop [--sh-stepper-vertical-stepper-circle-margin=0.5rem 0rem] - margin of the circle in vertical stepper\n   */\n  --sh-stepper-vertical-stepper-circle-margin: 0.5rem 0rem;\n  /* \n   * @cssprop [--sh-stepper-vertical-line-left=0.9375rem] - vertical stepper line left\n   */\n  --sh-stepper-vertical-line-left: 0.9375rem;\n  /* \n   * @cssprop [--sh-stepper-vertical-condensed-circle-margin=0.125rem 0rem] - vertical condensed circle margin\n   */\n  --sh-stepper-vertical-condensed-circle-margin: 0.125rem 0rem;\n  /* \n   * @cssprop [--sh-stepper-vertical-condensed-line-left=0.375rem] - left line of vertical condensed stepper\n   */\n  --sh-stepper-vertical-condensed-line-left: 0.375rem;\n  /* \n   * @cssprop [--sh-stepper-vertical-line-height=1.5rem] - vertical line border height\n   */\n  --sh-stepper-vertical-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-stepper-vertical-condensed-line-height=0.5625rem] - vertical condensed line border height\n   */\n  --sh-stepper-vertical-condensed-line-height: 0.5625rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-value-indicator-l-value-line-height=4rem] - line height of value for l size\n   */\n  --sh-value-indicator-l-value-line-height: 4rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-label-line-height=1.5rem] - line height of label for l size\n   */\n  --sh-value-indicator-l-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-label-line-height=1rem] - line height of label for s size\n   */\n  --sh-value-indicator-s-label-line-height: 1rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-icon-size-m=4rem] - icon size for l size\n   */\n  --sh-value-indicator-l-icon-size-m: 4rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-icon-size-m=2rem] - icon size for s size\n   */\n  --sh-value-indicator-s-icon-size-m: 2rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-value-line-height=2rem] - line height of value for s size\n   */\n  --sh-value-indicator-s-value-line-height: 2rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-unit-line-height=2.5rem] - line height of unit for l size\n   */\n  --sh-value-indicator-l-unit-line-height: 2.5rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-unit-line-height=1.25rem] - line height of unit for s size\n   */\n  --sh-value-indicator-s-unit-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-unit-font-size=1.75rem] - line height of unit for s size\n   */\n  --sh-value-indicator-l-unit-font-size: 1.75rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-unit-font-size=0.875rem] - line height of unit for s size\n   */\n  --sh-value-indicator-s-unit-font-size: 0.875rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-icon-font-size-m=4rem] - font size of icon for l size\n   */\n  --sh-value-indicator-l-icon-font-size-m: 4rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-icon-font-size-m=2rem] - font size of icon for s size\n   */\n  --sh-value-indicator-s-icon-font-size-m: 2rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-value-font-size=3.5rem] - font size of value for l size\n   */\n  --sh-value-indicator-l-value-font-size: 3.5rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-value-font-size=1.75rem] - font size of value for s size\n   */\n  --sh-value-indicator-s-value-font-size: 1.75rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-label-font-size=1rem] - font size of label for l size\n   */\n  --sh-value-indicator-l-label-font-size: 1rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-label-font-size=0.875rem] - font size of label for s size\n   */\n  --sh-value-indicator-s-label-font-size: 0.875rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-status-size-m=1.5rem] - size of status for s size\n   */\n  --sh-value-indicator-s-status-size-m: 1.5rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-status-font-size-m=1.5rem] - font size of status for s size\n   */\n  --sh-value-indicator-s-status-font-size-m: 1.5rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-icon-margin-right=0.25rem] - margin right of icon for s size\n   */\n  --sh-value-indicator-s-icon-margin-right: 0.25rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-icon-margin-right=0.5rem] - margin right of icon for l size\n   */\n  --sh-value-indicator-l-icon-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-value-indicator-s-unit-padding-top=0.625rem] - padding top of unit for s size\n   */\n  --sh-value-indicator-s-unit-padding-top: 0.625rem;\n  /* \n   * @cssprop [--sh-value-indicator-l-unit-padding-top=1.23rem] - padding top of unit for l size\n   */\n  --sh-value-indicator-l-unit-padding-top: 1.23rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-notification-item-header-margin=1rem 1rem 0 1rem] - margin of header area\n   */\n  --sh-notification-item-header-margin: 1rem 1rem 0 1rem;\n  /* \n   * @cssprop [--sh-notification-item-header-icon-margin=0 0.5rem 0 0] - margin of header icon\n   */\n  --sh-notification-item-header-icon-margin: 0 0.5rem 0 0;\n  /* \n   * @cssprop [--sh-notification-item-header-line-height=1.5rem] - header line height\n   */\n  --sh-notification-item-header-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-notification-item-header-max-height=3rem] - header max height\n   */\n  --sh-notification-item-header-max-height: 3rem;\n  /* \n   * @cssprop [--sh-notification-item-header-text-margin=0 0.5rem 0 0] - margin of header text\n   */\n  --sh-notification-item-header-text-margin: 0 0.5rem 0 0;\n  /* \n   * @cssprop [--sh-notification-item-header-close-button-margin=0] - margin of header close button\n   */\n  --sh-notification-item-header-close-button-margin: 0;\n  /* \n   * @cssprop [--sh-notification-item-description-container-margin=1rem] - margin of description container\n   */\n  --sh-notification-item-description-container-margin: 1rem;\n  /* \n   * @cssprop [--sh-notification-item-no-label-description-container-margin=1rem] - margin of description container when there is no label\n   */\n  --sh-notification-item-no-label-description-container-margin: 1rem;\n  /* \n   * @cssprop [--sh-notification-item-description-icon-margin=0 0.5rem 0 0] - margin of description icon\n   */\n  --sh-notification-item-description-icon-margin: 0 0.5rem 0 0;\n  /* \n   * @cssprop [--sh-notification-item-description-line-height=1.5rem] - description line height\n   */\n  --sh-notification-item-description-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-notification-item-description-text-margin=0 0.5rem 0 0] - description text margin\n   */\n  --sh-notification-item-description-text-margin: 0 0.5rem 0 0;\n  /* \n   * @cssprop [--sh-notification-item-description-close-button-margin=0rem] - margin of description close button\n   */\n  --sh-notification-item-description-close-button-margin: 0rem;\n  /* \n   * @cssprop [--sh-notification-item-footer-margin=0 1rem 1rem 1rem] - margin of footer area\n   */\n  --sh-notification-item-footer-margin: 0 1rem 1rem 1rem;\n  /* \n   * @cssprop [--sh-notification-item-footer-margin-with-no-description=1rem] - footer margin when no description is preset\n   */\n  --sh-notification-item-footer-margin-with-no-description: 1rem;\n  /* \n   * @cssprop [--sh-notification-item-description-slot-elements-margin-top=0rem] - margin between elements added in description slot\n   */\n  --sh-notification-item-description-slot-elements-margin-top: 0rem;\n  /* \n   * @cssprop [--sh-notification-item-badge-margin=0.5rem 1rem 0.5rem 1rem] - margin for the notification badge\n   */\n  --sh-notification-item-badge-margin: 0.5rem 1rem 0.5rem 1rem;\n  /* \n   * @cssprop [--sh-notification-item-footer-slot-child-margin-left=0.5rem] - margin-left for the components in the footer slot\n   */\n  --sh-notification-item-footer-slot-child-margin-left: 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-notification-width=20rem] - width of notification\n   */\n  --sh-notification-width: 20rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-input-number-status-text-padding=0.25rem 0.5rem 0 0.5rem] - padding of status text (warning, hint, ..)\n   */\n  --sh-input-number-status-text-padding: 0.25rem 0.5rem 0 0.5rem;\n  /* \n   * @cssprop [--sh-input-number-left-icon-padding=0 0 0 0.25rem] - padding of left icon\n   */\n  --sh-input-number-left-icon-padding: 0 0 0 0.25rem;\n  /* \n   * @cssprop [--sh-input-number-right-icon-padding=0] - padding of right icon\n   */\n  --sh-input-number-right-icon-padding: 0;\n  /* \n   * @cssprop [--sh-input-number-icon-size=1.9375rem] - size of the icon left and right\n   */\n  --sh-input-number-icon-size: 1.9375rem;\n  /* \n   * @cssprop [--sh-input-number-input-right-padding=0.25rem] - right padding of the input\n   */\n  --sh-input-number-input-right-padding: 0.25rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-numeric-keypad-width=11rem] - width of the keypad container\n   */\n  --sh-numeric-keypad-width: 11rem;\n  /* \n   * @cssprop [--sh-numeric-keypad-height=15rem] - height of the keypad container\n   */\n  --sh-numeric-keypad-height: 15rem;\n  /* \n   * @cssprop [--sh-numeric-keypad-circle-button-width=3rem] - width of the circle buttons\n   */\n  --sh-numeric-keypad-circle-button-width: 3rem;\n  /* \n   * @cssprop [--sh-numeric-keypad-circle-button-height=3rem] - height of the circle buttons\n   */\n  --sh-numeric-keypad-circle-button-height: 3rem;\n  /* \n   * @cssprop [--sh-numeric-keypad-container-padding=1rem] - padding of the keypad container\n   */\n  --sh-numeric-keypad-container-padding: 1rem;\n  /* \n   * @cssprop [--sh-numeric-keypad-button-margins=0.5rem] - margin for the circle buttons\n   */\n  --sh-numeric-keypad-button-margins: 0.5rem;\n  /* \n   * @cssprop [--sh-numeric-keypad-button-center-margin=0 0.5rem] - margin for the circle buttons in the center column\n   */\n  --sh-numeric-keypad-button-center-margin: 0 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-nav-bar-nav-bar-wrapper-height=3.5rem] - height of nav bar wrapper\n   */\n  --sh-nav-bar-nav-bar-wrapper-height: 3.5rem;\n  /* \n   * @cssprop [--sh-nav-bar-condensed-nav-bar-wrapper-height=2.5rem] - height of condensed nav bar wrapper height\n   */\n  --sh-nav-bar-condensed-nav-bar-wrapper-height: 2.5rem;\n  /* \n   * @cssprop [--sh-nav-bar-functions-wrapper-gap=0.5rem] - gap of functions wrapper\n   */\n  --sh-nav-bar-functions-wrapper-gap: 0.5rem;\n  /* \n   * @cssprop [--sh-nav-bar-functions-wrapper-padding=0 0 0 0.5rem] - padding of functions wrapper\n   */\n  --sh-nav-bar-functions-wrapper-padding: 0 0 0 0.5rem;\n  /* \n   * @cssprop [--sh-nav-bar-nav-bar-wrapper-padding=0 1rem] - padding of nav-bar-wrapper\n   */\n  --sh-nav-bar-nav-bar-wrapper-padding: 0 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-pane-wrapper-width=22rem] - width of the pane\n   */\n  --sh-pane-wrapper-width: 22rem;\n  /* \n   * @cssprop [--sh-pane-wrapper-padding=1rem] - padding of the head and body wrapper\n   */\n  --sh-pane-wrapper-padding: 1rem;\n  /* \n   * @cssprop [--sh-pane-arrow-placement-padding=0.75rem] - padding of the arrow when it is placed on top or bottom\n   */\n  --sh-pane-arrow-placement-padding: 0.75rem;\n  /* \n   * @cssprop [--sh-pane-arrow-position=-2rem] - position of the arrow from the left or right\n   */\n  --sh-pane-arrow-position: -2rem;\n  /* \n   * @cssprop [--sh-pane-condensed-width=6.25rem] - max-width of the condensed wrapper\n   */\n  --sh-pane-condensed-width: 6.25rem;\n  /* \n   * @cssprop [--sh-pane-body-wrapper-margin=0.5rem] - margin of the elements inside the body slot\n   */\n  --sh-pane-body-wrapper-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-pane-arrow-wrapper-padding=0.25rem 0] - padding of the arrow wrapper to center align the arrow icon\n   */\n  --sh-pane-arrow-wrapper-padding: 0.25rem 0;\n  /* \n   * @cssprop [--sh-pane-border-radius-left=0rem 0.125rem 0.125rem 0rem] - border-radius of the left pane\n   */\n  --sh-pane-border-radius-left: 0rem 0.125rem 0.125rem 0rem;\n  /* \n   * @cssprop [--sh-pane-border-radius-right=0.125rem 0rem 0rem 0.125rem] - border-radius of the right pane\n   */\n  --sh-pane-border-radius-right: 0.125rem 0rem 0rem 0.125rem;\n  /* \n   * @cssprop [--sh-pane-box-shadow-left=0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1)] - box-shadow of the left pane\n   */\n  --sh-pane-box-shadow-left: 0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1);\n  /* \n   * @cssprop [--sh-pane-box-shadow-right=-0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1)] - box-shadow of the right pane\n   */\n  --sh-pane-box-shadow-right: -0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1);\n  /* \n   * @cssprop [--sh-pane-slot-child-margin-left=0.5rem] - Left margin of the items placed inside functions, footer slot\n   */\n  --sh-pane-slot-child-margin-left: 0.5rem;\n  /* \n   * @cssprop [--sh-pane-functions-slot-last-child-margin=0rem 0rem 0 var(--sh-pane-slot-child-margin-left)] - Margin of the last item placed inside functions slot\n   */\n  --sh-pane-functions-slot-last-child-margin: 0rem 0rem 0 var(--sh-pane-slot-child-margin-left);\n  /* \n   * @cssprop [--sh-pane-functions-slot-not-last-child-margin=0rem 0rem 0 var(--sh-pane-slot-child-margin-left)] - Margin of the all items except last placed inside functions slot\n   */\n  --sh-pane-functions-slot-not-last-child-margin: 0rem 0rem 0 var(--sh-pane-slot-child-margin-left);\n  /* \n   * @cssprop [--sh-pane-arrow-icon-size=2rem] - size of the arrow icon\n   */\n  --sh-pane-arrow-icon-size: 2rem;\n  /* \n   * @cssprop [--sh-pane-body-wrapper-line-height=1.25rem] - line-height of body-wrapper\n   */\n  --sh-pane-body-wrapper-line-height: 1.25rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-progress-header-line-height=1.25rem] - line-height of header\n   */\n  --sh-progress-header-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-progress-progress-bar-height=0.5rem] - height of the progress bar\n   */\n  --sh-progress-progress-bar-height: 0.5rem;\n  /* \n   * @cssprop [--sh-progress-indeterminate-bar-length=7.5rem] - the length of the inner bar of the indeterminate progress bar\n   */\n  --sh-progress-indeterminate-bar-length: 7.5rem;\n  /* \n   * @cssprop [--sh-progress-info-line-height=1rem] - line height of info text\n   */\n  --sh-progress-info-line-height: 1rem;\n  /* \n   * @cssprop [--sh-progress-header-margin-bottom=0.5rem] - margin bottom of header\n   */\n  --sh-progress-header-margin-bottom: 0.5rem;\n  /* \n   * @cssprop [--sh-progress-footer-margin-top=0.5rem] - margin-top of footer of linear-progress (the radial-progress footer has same margin-top as radial-progress header margin-bottom)\n   */\n  --sh-progress-footer-margin-top: 0.5rem;\n  /* \n   * @cssprop [--sh-progress-footer-height=1rem] - the height of the footer of linear-progress\n   */\n  --sh-progress-footer-height: 1rem;\n  /* \n   * @cssprop [--sh-progress-radial-header-margin-bottom=var(--sh-progress-header-margin-bottom)] - margin-bottom of header for radial progress\n   */\n  --sh-progress-radial-header-margin-bottom: var(--sh-progress-header-margin-bottom);\n  /* \n   * @cssprop [--sh-progress-radial-progress-height-xs=1rem] - height of radial progress of size xs\n   */\n  --sh-progress-radial-progress-height-xs: 1rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-ring-width-xs=0.25rem] - ring width of radial progress of size xs\n   */\n  --sh-progress-radial-progress-ring-width-xs: 0.25rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-height-s=2rem] - height of radial progress of size s\n   */\n  --sh-progress-radial-progress-height-s: 2rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-ring-width-s=0.375rem] - ring width of radial progress of size s\n   */\n  --sh-progress-radial-progress-ring-width-s: 0.375rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-height-m=4rem] - height of radial progress of size m\n   */\n  --sh-progress-radial-progress-height-m: 4rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-ring-width-m=0.5rem] - ring width of radial progress of size m\n   */\n  --sh-progress-radial-progress-ring-width-m: 0.5rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-height-l=8rem] - height of radial progress of size l\n   */\n  --sh-progress-radial-progress-height-l: 8rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-ring-width-l=0.625rem] - ring width of radial progress of size l\n   */\n  --sh-progress-radial-progress-ring-width-l: 0.625rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-height-xl=16rem] - height of radial progress of size xl\n   */\n  --sh-progress-radial-progress-height-xl: 16rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-ring-width-xl=0.75rem] - ring width of radial progress of size xl\n   */\n  --sh-progress-radial-progress-ring-width-xl: 0.75rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-label-width-m=2.5rem] - width of the radial progress label when progress size is m\n   */\n  --sh-progress-radial-progress-label-width-m: 2.5rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-label-width-l=5.5rem] - width of the radial progress label when progress size is l\n   */\n  --sh-progress-radial-progress-label-width-l: 5.5rem;\n  /* \n   * @cssprop [--sh-progress-radial-progress-label-width-xl=10.25rem] - width of the radial progress label when progress size is xl\n   */\n  --sh-progress-radial-progress-label-width-xl: 10.25rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-pagination-wrapper-height=2rem] - height of the pagination wrapper\n   */\n  --sh-pagination-wrapper-height: 2rem;\n  /* \n   * @cssprop [--sh-pagination-height=1.5rem] - height of the page number box\n   */\n  --sh-pagination-height: 1.5rem;\n  /* \n   * @cssprop [--sh-pagination-width=1.25rem] - width of the page number box\n   */\n  --sh-pagination-width: 1.25rem;\n  /* \n   * @cssprop [--sh-pagination-line-height=1.5rem] - line-height of the page number box\n   */\n  --sh-pagination-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-pagination-li-right-margin=0.5rem] - right margin of the li\n   */\n  --sh-pagination-li-right-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-pagination-border-radius=0.75rem] - border-radius of the li\n   */\n  --sh-pagination-border-radius: 0.75rem;\n  /* \n   * @cssprop [--sh-pagination-prev-page-icon-right-margin=1rem] - right margin of the page icon\n   */\n  --sh-pagination-prev-page-icon-right-margin: 1rem;\n  /* \n   * @cssprop [--sh-pagination-next-page-icon-left-margin=0.5rem] - left margin of the next page icon\n   */\n  --sh-pagination-next-page-icon-left-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-pagination-page-number-padding=0rem 0.125rem] - padding of the li containing page number\n   */\n  --sh-pagination-page-number-padding: 0rem 0.125rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-popover-min-width=12.5rem] - min-width of the popover\n   */\n  --sh-popover-min-width: 12.5rem;\n  /* \n   * @cssprop [--sh-popover-width=15.5rem] - width of the popover\n   */\n  --sh-popover-width: 15.5rem;\n  /* \n   * @cssprop [--sh-popover-current-scale=s] - the current scale of popover used to set the arrow-position initial values\n   */\n  --sh-popover-current-scale: s;\n  /* \n   * @cssprop [--sh-popover-header-padding=1rem 1rem 0] - margin-bottom of the header-wrapper\n   */\n  --sh-popover-header-padding: 1rem 1rem 0;\n  /* \n   * @cssprop [--sh-popover-body-padding=1rem] - padding of the popover\n   */\n  --sh-popover-body-padding: 1rem;\n  /* \n   * @cssprop [--sh-popover-body-wrapper-margin-bottom=0.5rem] - margin-bottom for container components\n   */\n  --sh-popover-body-wrapper-margin-bottom: 0.5rem;\n  /* \n   * @cssprop [--sh-popover-footer-padding=0 1rem 1rem] - margin-top of the footer-wrapper\n   */\n  --sh-popover-footer-padding: 0 1rem 1rem;\n  /* \n   * @cssprop [--sh-popover-header-padding-with-empty-function-slot=1rem] - padding-right of header when function slot is empty\n   */\n  --sh-popover-header-padding-with-empty-function-slot: 1rem;\n  /* \n   * @cssprop [--sh-popover-label-padding=0] - padding of the label\n   */\n  --sh-popover-label-padding: 0;\n  /* \n   * @cssprop [--sh-popover-headerless-body-top-padding=1rem] - padding-top of body-wrapper when header is empty\n   */\n  --sh-popover-headerless-body-top-padding: 1rem;\n  /* \n   * @cssprop [--sh-popover-gap-between-footer-slot-elements=0.5rem] - gap between the footer slot elements\n   */\n  --sh-popover-gap-between-footer-slot-elements: 0.5rem;\n  /* \n   * @cssprop [--sh-popover-gap-between-function-slot-elements=var(--sh-popover-gap-between-footer-slot-elements)] - gap between the functions slot element\n   */\n  --sh-popover-gap-between-function-slot-elements: var(--sh-popover-gap-between-footer-slot-elements);\n  /* \n   * @cssprop [--sh-popover-label-margin-right=0.5rem] - margin-right of the label when function slot is not empty\n   */\n  --sh-popover-label-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-popover-label-line-height=1.5rem] - line-height of the popover label\n   */\n  --sh-popover-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-popover-header-icon-margin-right=0.5rem] - margin-right of the icon in header\n   */\n  --sh-popover-header-icon-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-popover-content-line-height=1.25rem] - line-height of the content\n   */\n  --sh-popover-content-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-popover-arrow-border-width=0rem 0.375rem 0.5rem 0.375rem] - border-width of arrow\n   */\n  --sh-popover-arrow-border-width: 0rem 0.375rem 0.5rem 0.375rem;\n  /* \n   * @cssprop [--sh-popover-arrow-transform-origin=0.375rem 0.5rem] - transform origin for the arrow in passive popover\n   */\n  --sh-popover-arrow-transform-origin: 0.375rem 0.5rem;\n  /* \n   * @cssprop [--sh-popover-submenu-translateY=-0.5rem] - the top space fod the submenu from the target\n   */\n  --sh-popover-submenu-translateY: -0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-split-button-icon-wrapper-width=2rem] - width of icon wrapper\n   */\n  --sh-split-button-icon-wrapper-width: 2rem;\n  /* \n   * @cssprop [--sh-split-button-current-scale=s] - the current scale of split-button used to set overlayTargetDistance for popover\n   */\n  --sh-split-button-current-scale: s;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-drawer-width=22rem] - drawer width\n   */\n  --sh-drawer-width: 22rem;\n  /* \n   * @cssprop [--sh-drawer-header-wrapper-padding=1rem] - padding of the header-wrapper\n   */\n  --sh-drawer-header-wrapper-padding: 1rem;\n  /* \n   * @cssprop [--sh-drawer-label-wrapper-padding=1rem] - padding of the label-wrapper\n   */\n  --sh-drawer-label-wrapper-padding: 1rem;\n  /* \n   * @cssprop [--sh-drawer-gap-between-function-footer-slot-elements=0.5rem] - gap between function and footer slot elements\n   */\n  --sh-drawer-gap-between-function-footer-slot-elements: 0.5rem;\n  /* \n   * @cssprop [--sh-drawer-body-wrapper-padding=0 1rem] - padding of the body-wrapper\n   */\n  --sh-drawer-body-wrapper-padding: 0 1rem;\n  /* \n   * @cssprop [--sh-drawer-menu-item-margin-top=0.5rem] - margin-top of menu-item\n   */\n  --sh-drawer-menu-item-margin-top: 0.5rem;\n  /* \n   * @cssprop [--sh-drawer-headerless-body-wrapper-padding-top=1rem] - padding-top of body-wrapper when no header\n   */\n  --sh-drawer-headerless-body-wrapper-padding-top: 1rem;\n  /* \n   * @cssprop [--sh-drawer-footerless-body-wrapper-padding-bottom=var(--sh-drawer-headerless-body-wrapper-padding-top)] - padding bottom of body-wrapper when no footer\n   */\n  --sh-drawer-footerless-body-wrapper-padding-bottom: var(--sh-drawer-headerless-body-wrapper-padding-top);\n  /* \n   * @cssprop [--sh-drawer-body-wrapper-margin-bottom=0.5rem] - margin-bottom of elements in body-wrapper\n   */\n  --sh-drawer-body-wrapper-margin-bottom: 0.5rem;\n  /* \n   * @cssprop [--sh-drawer-footer-wrapper-padding=var(--sh-drawer-footerless-body-wrapper-padding-bottom)] - padding of the footer-wrapper\n   */\n  --sh-drawer-footer-wrapper-padding: var(--sh-drawer-footerless-body-wrapper-padding-bottom);\n  /* \n   * @cssprop [--sh-drawer-top-bottom-min-height=10rem] - min-height of top and bottom drawers\n   */\n  --sh-drawer-top-bottom-min-height: 10rem;\n  /* \n   * @cssprop [--sh-drawer-label-line-height=1.5rem] - line-height of the label\n   */\n  --sh-drawer-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-drawer-label-padding=0rem] - padding of the label\n   */\n  --sh-drawer-label-padding: 0rem;\n  /* \n   * @cssprop [--sh-drawer-label-margin-right=0.5rem] - margin-right of label\n   */\n  --sh-drawer-label-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-drawer-touch-gap-between-function-footer-slot-elements=1rem] - gap of the elements in function and footer slot for touch\n   */\n  --sh-drawer-touch-gap-between-function-footer-slot-elements: 1rem;\n  /* \n   * @cssprop [--sh-drawer-body-wrapper-line-height=1.25rem] - line-height of elements in body-wrapper\n   */\n  --sh-drawer-body-wrapper-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-drawer-scrollpicker-padding=0.5rem 1rem] - padding of the scrollpicker used in datepicker and timepicker\n   */\n  --sh-drawer-scrollpicker-padding: 0.5rem 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-risk-score-sizeS=4rem] - s size\n   */\n  --sh-risk-score-sizeS: 4rem;\n  /* \n   * @cssprop [--sh-risk-score-sizeL=8rem] - l size\n   */\n  --sh-risk-score-sizeL: 8rem;\n  /* \n   * @cssprop [--sh-risk-score-radial-s-width=2.5rem] - s size radical width\n   */\n  --sh-risk-score-radial-s-width: 2.5rem;\n  /* \n   * @cssprop [--sh-risk-score-radial-l-width=5.625rem] - l size radical width\n   */\n  --sh-risk-score-radial-l-width: 5.625rem;\n  /* \n   * @cssprop [--sh-risk-score-radial-s-lh=1.25rem] - s size radical line-height\n   */\n  --sh-risk-score-radial-s-lh: 1.25rem;\n  /* \n   * @cssprop [--sh-risk-score-radial-l-lh=2.25rem] - l size radical line-height\n   */\n  --sh-risk-score-radial-l-lh: 2.25rem;\n  /* \n   * @cssprop [--sh-risk-score-lw-height=0.25rem] - height of linear-wrapper\n   */\n  --sh-risk-score-lw-height: 0.25rem;\n  /* \n   * @cssprop [--sh-risk-score-lw-mrg-btm=0.5rem] - margin-bottom of linear-wrapper\n   */\n  --sh-risk-score-lw-mrg-btm: 0.5rem;\n  /* \n   * @cssprop [--sh-risk-score-riskbar-mrg-left=0.25rem] - margin-left of riskbar\n   */\n  --sh-risk-score-riskbar-mrg-left: 0.25rem;\n  /* \n   * @cssprop [--sh-risk-score-hw-mrg-btm=0.75rem] - margin-right of header-wrapper\n   */\n  --sh-risk-score-hw-mrg-btm: 0.75rem;\n  /* \n   * @cssprop [--sh-risk-score-hw-line-height=1.25rem] - line-height of header-wrapper\n   */\n  --sh-risk-score-hw-line-height: 1.25rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-tool-padding=0.1875rem] - padding of tool\n   */\n  --sh-tool-padding: 0.1875rem;\n  /* \n   * @cssprop [--sh-tool-bottom-padding-with-icon=0.125rem] - padding-bottom of the tool when icon is present\n   */\n  --sh-tool-bottom-padding-with-icon: 0.125rem;\n  /* \n   * @cssprop [--sh-tool-height=4.25rem] - height of tool\n   */\n  --sh-tool-height: 4.25rem;\n  /* \n   * @cssprop [--sh-tool-width=var(--sh-tool-height)] - width of tool\n   */\n  --sh-tool-width: var(--sh-tool-height);\n  /* \n   * @cssprop [--sh-tool-condensed-padding=0.0625rem] - padding of the condensed tool\n   */\n  --sh-tool-condensed-padding: 0.0625rem;\n  /* \n   * @cssprop [--sh-tool-condensed-height=2.5rem] - height of the condensed tool\n   */\n  --sh-tool-condensed-height: 2.5rem;\n  /* \n   * @cssprop [--sh-tool-condensed-width=var(--sh-tool-condensed-height)] - width of the condesed tool\n   */\n  --sh-tool-condensed-width: var(--sh-tool-condensed-height);\n  /* \n   * @cssprop [--sh-tool-icon-value-label-font-size=0.75rem] - label font-size for select value and palette value of tool\n   */\n  --sh-tool-icon-value-label-font-size: 0.75rem;\n  /* \n   * @cssprop [--sh-tool-icon-value-label-line-height=var(--sh-tool-icon-value-label-font-size)] - label line-height for select value and palette value of tool\n   */\n  --sh-tool-icon-value-label-line-height: var(--sh-tool-icon-value-label-font-size);\n  /* \n   * @cssprop [--sh-tool-value-label-line-height=0.75rem] - label line-height for select and palette with value and without icon\n   */\n  --sh-tool-value-label-line-height: 0.75rem;\n  /* \n   * @cssprop [--sh-tool-label-line-height=1rem] - line-height of label\n   */\n  --sh-tool-label-line-height: 1rem;\n  /* \n   * @cssprop [--sh-tool-label-with-icon-height=1.5625rem] - height of label with icon property\n   */\n  --sh-tool-label-with-icon-height: 1.5625rem;\n  /* \n   * @cssprop [--sh-tool-icon-label-margin-top=0.25rem] - margin-top of label with icon property\n   */\n  --sh-tool-icon-label-margin-top: 0.25rem;\n  /* \n   * @cssprop [--sh-tool-palette-height=1.25rem] - height of the palette\n   */\n  --sh-tool-palette-height: 1.25rem;\n  /* \n   * @cssprop [--sh-tool-palette-width=var(--sh-tool-palette-height)] - width of the palette\n   */\n  --sh-tool-palette-width: var(--sh-tool-palette-height);\n  /* \n   * @cssprop [--sh-tool-arrow-height=0.375rem] - height of the arrow in palette\n   */\n  --sh-tool-arrow-height: 0.375rem;\n  /* \n   * @cssprop [--sh-tool-arrow-width=var(--sh-tool-arrow-height)] - width of the arrow in palette\n   */\n  --sh-tool-arrow-width: var(--sh-tool-arrow-height);\n  /* \n   * @cssprop [--sh-tool-arrow-border=0.188rem] - border of the arrow in palette\n   */\n  --sh-tool-arrow-border: 0.188rem;\n  /* \n   * @cssprop [--sh-tool-popover-max-height=12.25rem] - max-height of the popover\n   */\n  --sh-tool-popover-max-height: 12.25rem;\n  /* \n   * @cssprop [--sh-tool-condensed-palette-height=0.75rem] - height of condensed palette\n   */\n  --sh-tool-condensed-palette-height: 0.75rem;\n  /* \n   * @cssprop [--sh-tool-condensed-palette-width=var(--sh-tool-condensed-palette-height)] - width of condensed palette\n   */\n  --sh-tool-condensed-palette-width: var(--sh-tool-condensed-palette-height);\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-page-body-wrapper-padding=1rem] - padding of body wrapper\n   */\n  --sh-page-body-wrapper-padding: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-tab-item-text-line-height=1.5rem] - text line height\n   */\n  --sh-tab-item-text-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-height=3.5rem] - icon height\n   */\n  --sh-tab-item-icon-height: 3.5rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-line-height=2rem] - icon line-height\n   */\n  --sh-tab-item-icon-line-height: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-padding=0.75rem 1rem 0.625rem] - icon padding\n   */\n  --sh-tab-item-icon-padding: 0.75rem 1rem 0.625rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-label-padding=0.25rem 1rem 0.125rem] - icon label padding\n   */\n  --sh-tab-item-icon-label-padding: 0.25rem 1rem 0.125rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-label-padding-access-bar=0.75rem 1rem] - icon label padding in access bar\n   */\n  --sh-tab-item-icon-label-padding-access-bar: 0.75rem 1rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-label-line-height=2rem] - icon label line-height\n   */\n  --sh-tab-item-icon-label-line-height: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-label-line-height=1rem] - label line-height\n   */\n  --sh-tab-item-label-line-height: 1rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-label-height=3.5rem] - icon label height\n   */\n  --sh-tab-item-icon-label-height: 3.5rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-icon-height=4.5rem] - access-bar icon height\n   */\n  --sh-tab-item-access-bar-icon-height: 4.5rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-icon-padding=1.25rem 1rem 1.125rem] - access-bar icon padding\n   */\n  --sh-tab-item-access-bar-icon-padding: 1.25rem 1rem 1.125rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-icon-line-height=2rem] - access-bar icon line height\n   */\n  --sh-tab-item-access-bar-icon-line-height: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-icon-padding=0.25rem 1rem 0.125rem] - condensed icon padding\n   */\n  --sh-tab-item-condensed-icon-padding: 0.25rem 1rem 0.125rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-icon-line-height=2rem] - condensed icon line height\n   */\n  --sh-tab-item-condensed-icon-line-height: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-icon-height=2.5rem] - condensed icon height\n   */\n  --sh-tab-item-condensed-icon-height: 2.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-height=4.5rem] - height of patient tab\n   */\n  --sh-tab-item-patient-height: 4.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-height=2.5rem] - height of condensed tab\n   */\n  --sh-tab-item-condensed-height: 2.5rem;\n  /* \n   * @cssprop [--sh-tab-item-normal-height=3.5rem] - height of tab\n   */\n  --sh-tab-item-normal-height: 3.5rem;\n  /* \n   * @cssprop [--sh-tab-item-arrow-icons-padding=0 0.5rem] - padding in-between arrow icons\n   */\n  --sh-tab-item-arrow-icons-padding: 0 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-arrow-icons-line-height=2rem] - line-height of arrow icons\n   */\n  --sh-tab-item-arrow-icons-line-height: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-tab-item-padding=1rem 1rem 0.875rem] - padding of tab-item\n   */\n  --sh-tab-item-tab-item-padding: 1rem 1rem 0.875rem;\n  /* \n   * @cssprop [--sh-tab-item-tab-item-line-height=1.5rem] - line-height of tab-item\n   */\n  --sh-tab-item-tab-item-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-padding=1.5rem 1rem 1.375rem] - padding of tab-item access bar\n   */\n  --sh-tab-item-access-bar-padding: 1.5rem 1rem 1.375rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-height=4.5rem] - height of tab-item access bar\n   */\n  --sh-tab-item-access-bar-height: 4.5rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-line-height=1.5rem] - line-height of tab-item access bar\n   */\n  --sh-tab-item-access-bar-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-padding=0.5rem 1rem 0.375rem] - padding of condensed tab-item\n   */\n  --sh-tab-item-condensed-padding: 0.5rem 1rem 0.375rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-line-height=1.5rem] - line-height of condensed tab-item\n   */\n  --sh-tab-item-condensed-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-tab-item-badge-margin=-1.8125rem -0.625rem 0rem 0.375rem] - badge margin of tab-item\n   */\n  --sh-tab-item-badge-margin: -1.8125rem -0.625rem 0rem 0.375rem;\n  /* \n   * @cssprop [--sh-tab-item-empty-badge-margin=-2rem -0.5rem 0rem 0.5rem] - empty badge margin of tab-item\n   */\n  --sh-tab-item-empty-badge-margin: -2rem -0.5rem 0rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-slottedfn-mg-right=2rem] - margin right of patient slotted function in tab-item\n   */\n  --sh-tab-item-slottedfn-mg-right: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-slottedfn-mg-left=-0.5rem] - margin left of patient slotted function in tab-item\n   */\n  --sh-tab-item-slottedfn-mg-left: -0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-close-icon-right=0.5rem] - position of close icon right in tab-item\n   */\n  --sh-tab-item-close-icon-right: 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-close-icon-top=0.5rem] - position of close icon top in tab-item\n   */\n  --sh-tab-item-close-icon-top: 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-mg-right=0.5rem] - margin right of patient icon in tab-item\n   */\n  --sh-tab-item-patient-mg-right: 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-mg-left=0rem] - margin left of patient icon in tab-item\n   */\n  --sh-tab-item-patient-mg-left: 0rem;\n  /* \n   * @cssprop [--sh-tab-item-pt-label-lh=1rem] - line-height of patient label in tab-item\n   */\n  --sh-tab-item-pt-label-lh: 1rem;\n  /* \n   * @cssprop [--sh-tab-item-pt-info-lh=1rem] - line-height of patient info in tab-item\n   */\n  --sh-tab-item-pt-info-lh: 1rem;\n  /* \n   * @cssprop [--sh-tab-item-close-icon-accessbar-top=0.5rem] - close icon position top in accessbar\n   */\n  --sh-tab-item-close-icon-accessbar-top: 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-close-icon-accessbar-right=0.5rem] - close icon position right in accessbar\n   */\n  --sh-tab-item-close-icon-accessbar-right: 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-empty-badge-margin=-0.65rem -0.65rem 0.5rem 0.5rem] - empty badge margin for condensed tab\n   */\n  --sh-tab-item-condensed-empty-badge-margin: -0.65rem -0.65rem 0.5rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-badge-margin=-0.4rem -0.7rem 0.5rem 0.5rem] - badge margin for condensed tab\n   */\n  --sh-tab-item-condensed-badge-margin: -0.4rem -0.7rem 0.5rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-tab-close-margin=0.8rem] - badge margin along with close icon\n   */\n  --sh-tab-item-tab-close-margin: 0.8rem;\n  /* \n   * @cssprop [--sh-tab-item-tab-max-width=11.5rem] - max-width for a tab\n   */\n  --sh-tab-item-tab-max-width: 11.5rem;\n  /* \n   * @cssprop [--sh-tab-item-tab-min-width=3.5rem] - min-width for a tab\n   */\n  --sh-tab-item-tab-min-width: 3.5rem;\n  /* \n   * @cssprop [--sh-tab-item-tab-l-max-width=23.5rem] - max-width of l size for a tab\n   */\n  --sh-tab-item-tab-l-max-width: 23.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-active-max-width=17.5rem] - max-width for patient tab\n   */\n  --sh-tab-item-patient-active-max-width: 17.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-min-width=11.5rem] - min-width for patient tab\n   */\n  --sh-tab-item-patient-min-width: 11.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-text-margin-right=1.5rem] - margin-right of text for patient tab\n   */\n  --sh-tab-item-patient-text-margin-right: 1.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-patient-collapsed-input-height=2.5rem] - collapsed patient input-height of condensed view\n   */\n  --sh-tab-item-condensed-patient-collapsed-input-height: 2.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-patient-collapsed-input-padding=0rem 0.5rem] - collapsed patient padding of condensed view\n   */\n  --sh-tab-item-condensed-patient-collapsed-input-padding: 0rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-popover-max-height=12.25rem] - collapsed patient popover max-height of condensed view\n   */\n  --sh-tab-item-patient-popover-max-height: 12.25rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-collapsed-height=3.5rem] - collapsed patient popover item height\n   */\n  --sh-tab-item-patient-collapsed-height: 3.5rem;\n  /* \n   * @cssprop [--sh-tab-item-popover-max-height=11.25rem] - collapsed popover max-height\n   */\n  --sh-tab-item-popover-max-height: 11.25rem;\n  /* \n   * @cssprop [--sh-tab-item-collapsed-input-height=4.5rem] - collapsed input height\n   */\n  --sh-tab-item-collapsed-input-height: 4.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-collapsed-input-height=2.5rem] - condensed collapsed input height\n   */\n  --sh-tab-item-condensed-collapsed-input-height: 2.5rem;\n  /* \n   * @cssprop [--sh-tab-item-text-lh=1rem] - text line-height\n   */\n  --sh-tab-item-text-lh: 1rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-close-icon-right=0.5rem] - position of close icon right in tab-item\n   */\n  --sh-tab-item-patient-close-icon-right: 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-access-context-closable-padding-right=2rem] - padding-right of close icon of closable tab inside access-context\n   */\n  --sh-tab-item-access-context-closable-padding-right: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-expand-icon-font-size=2rem] - font size of expand-icon\n   */\n  --sh-tab-item-expand-icon-font-size: 2rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-padding=1.25rem 0.5rem 1.125rem 0.5rem] - padding of pattient tab\n   */\n  --sh-tab-item-patient-padding: 1.25rem 0.5rem 1.125rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-collapsed-label-line-height=2.5rem] - line-height of collapsed tab\n   */\n  --sh-tab-item-collapsed-label-line-height: 2.5rem;\n  /* \n   * @cssprop [--sh-tab-item-patient-href-wrapper-margin=1.25rem 0.5rem] - margin of patient href wrapper\n   */\n  --sh-tab-item-patient-href-wrapper-margin: 1.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-collapsed-patient-href-wrapper-margin=0.75rem 0.5rem] - margin of patient in collapsed href wrapper\n   */\n  --sh-tab-item-collapsed-patient-href-wrapper-margin: 0.75rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-icon-href-wrapper-margin=1.25rem 1rem] - margin of patient href wrapper in access bar\n   */\n  --sh-tab-item-access-bar-icon-href-wrapper-margin: 1.25rem 1rem;\n  /* \n   * @cssprop [--sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin=0.75rem 0rem] - margin of patient href wrapper in collapsed tab in access bar\n   */\n  --sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin: 0.75rem 0rem;\n  /* \n   * @cssprop [--sh-tab-item-href-wrapper-margin=1.5rem 1rem] - margin of href wrapper\n   */\n  --sh-tab-item-href-wrapper-margin: 1.5rem 1rem;\n  /* \n   * @cssprop [--sh-tab-item-href-badge-margin-top=-0.6875rem] - margin top of href badge\n   */\n  --sh-tab-item-href-badge-margin-top: -0.6875rem;\n  /* \n   * @cssprop [--sh-tab-item-href-empty-badge-margin-top=-0.5rem] - margin top of href empty badge\n   */\n  --sh-tab-item-href-empty-badge-margin-top: -0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-href-padding=0rem 1rem] - padding of icon href\n   */\n  --sh-tab-item-icon-href-padding: 0rem 1rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-href-badge-margin-top=-0.3125rem] - margin top of href badge in access bar\n   */\n  --sh-tab-item-access-bar-href-badge-margin-top: -0.3125rem;\n  /* \n   * @cssprop [--sh-tab-item-access-bar-href-default-badge-margin-top=0rem] - margin top of href default badge in access bar\n   */\n  --sh-tab-item-access-bar-href-default-badge-margin-top: 0rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-access-bar-href-default-badge-margin-top=-0.0625rem] - margin top of href default badge in condensed access bar\n   */\n  --sh-tab-item-condensed-access-bar-href-default-badge-margin-top: -0.0625rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-pt-href-wrapper-margin=0.25rem 0.5rem] - margin of condensed patient href wrapper \n   */\n  --sh-tab-item-condensed-pt-href-wrapper-margin: 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-collapsed-condensed-pt-href-wrapper-margin=0.25rem 0.5rem] - margin of collapsed condensed patient href wrapper \n   */\n  --sh-tab-item-collapsed-condensed-pt-href-wrapper-margin: 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-icon-href-wrapper-margin=0.25rem 0rem 0.125rem] - margin of condensed icon href wrapper \n   */\n  --sh-tab-item-condensed-icon-href-wrapper-margin: 0.25rem 0rem 0.125rem;\n  /* \n   * @cssprop [--sh-tab-item-href-condensed-height=2.5rem] - height of condensed href anchor tag\n   */\n  --sh-tab-item-href-condensed-height: 2.5rem;\n  /* \n   * @cssprop [--sh-tab-item-icon-href-wrapper-margin=0.75rem 0.5rem] - margin of patient href wrapper\n   */\n  --sh-tab-item-icon-href-wrapper-margin: 0.75rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-href-badge-margin-top=-0.1875rem] - margin top of condensed badge\n   */\n  --sh-tab-item-condensed-href-badge-margin-top: -0.1875rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-href-empty-badge-margin-top=-0.0625rem] - margin top of condensed empty badge\n   */\n  --sh-tab-item-condensed-href-empty-badge-margin-top: -0.0625rem;\n  /* \n   * @cssprop [--sh-tab-item-closable-condensed-href-badge-margin-top=-0.3125rem] - margin top of condensed closable badge\n   */\n  --sh-tab-item-closable-condensed-href-badge-margin-top: -0.3125rem;\n  /* \n   * @cssprop [--sh-tab-item-closable-condensed-empty-href-badge-margin-top=-0.625rem] - margin top of closable condensed empty badge\n   */\n  --sh-tab-item-closable-condensed-empty-href-badge-margin-top: -0.625rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-collapsed-icon-href-wrapper-margin=0.25rem 0rem 0.125rem] - margin of condensed collapsed icon href wrapper \n   */\n  --sh-tab-item-condensed-collapsed-icon-href-wrapper-margin: 0.25rem 0rem 0.125rem;\n  /* \n   * @cssprop [--sh-tab-item-collapsed-href-accessbar-height=3.5rem] - collapsed href access bar height\n   */\n  --sh-tab-item-collapsed-href-accessbar-height: 3.5rem;\n  /* \n   * @cssprop [--sh-tab-item-tab-item-icon-margin=0 0.5rem 0 0] - margin of tab item icon in collapsed view\n   */\n  --sh-tab-item-tab-item-icon-margin: 0 0.5rem 0 0;\n  /* \n   * @cssprop [--sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left=0.5rem] - margin of condensed collapsed patient icon href wrapper\n   */\n  --sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left: 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-collapsed-icon-height=3.5rem] - collapsed icon height\n   */\n  --sh-tab-item-collapsed-icon-height: 3.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-icon-pt-href-wrapper-margin=0.25rem 0.5rem 0.25rem 0.5rem] - margin of condensed icon href wrapper in patient tab\n   */\n  --sh-tab-item-condensed-icon-pt-href-wrapper-margin: 0.25rem 0.5rem 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-tab-item-condensed-icon-only-href-wrapper-margin=0.25rem 1rem 0.125rem] - margin of condensed only icon href wrapper \n   */\n  --sh-tab-item-condensed-icon-only-href-wrapper-margin: 0.25rem 1rem 0.125rem;\n  /* \n   * @cssprop [--sh-tab-item-min-width-tab=4rem] - min width of the tab item\n   */\n  --sh-tab-item-min-width-tab: 4rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-modal-label-wrapper-padding=0rem 1rem] - padding of label wrapper\n   */\n  --sh-modal-label-wrapper-padding: 0rem 1rem;\n  /* \n   * @cssprop [--sh-modal-footer-wrapper-padding=1rem] - padding of footer wrapper\n   */\n  --sh-modal-footer-wrapper-padding: 1rem;\n  /* \n   * @cssprop [--sh-modal-body-wrapper-padding=1rem] - padding of body wrapper\n   */\n  --sh-modal-body-wrapper-padding: 1rem;\n  /* \n   * @cssprop [--sh-modal-footer-wrapper-margin-left=0.5rem] - left margin between buttons in footer wrapper\n   */\n  --sh-modal-footer-wrapper-margin-left: 0.5rem;\n  /* \n   * @cssprop [--sh-modal-close-button-2-margin=1rem 1rem 0rem 0.5rem] - margin of close buttons in header\n   */\n  --sh-modal-close-button-2-margin: 1rem 1rem 0rem 0.5rem;\n  /* \n   * @cssprop [--sh-modal-modal-label-line-height=1.5rem] - line height of modal label\n   */\n  --sh-modal-modal-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-modal-close-button-margin-left=0.5rem] - left margin of close buttons in functions\n   */\n  --sh-modal-close-button-margin-left: 0.5rem;\n  /* \n   * @cssprop [--sh-modal-icon-margin-right=0.5rem] - right margin of modal icons in header\n   */\n  --sh-modal-icon-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-modal-label-wrapper-height=3.5rem] - height of the label wrapper\n   */\n  --sh-modal-label-wrapper-height: 3.5rem;\n  /* \n   * @cssprop [--sh-modal-wrapper-content-margin-bottom=0.5rem] - margin bottom of the content wrapper\n   */\n  --sh-modal-wrapper-content-margin-bottom: 0.5rem;\n  /* \n   * @cssprop [--sh-modal-functions-wrapper-gap=0.5rem] - gap in the functions wrapper\n   */\n  --sh-modal-functions-wrapper-gap: 0.5rem;\n  /* \n   * @cssprop [--sh-modal-functions-wrapper-margin-left=0.5rem] - margin left of the functions wrapper\n   */\n  --sh-modal-functions-wrapper-margin-left: 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-slider-input-height=1.5rem] - height of show-value slider input\n   */\n  --sh-slider-input-height: 1.5rem;\n  /* \n   * @cssprop [--sh-slider-input-width=2.5rem] - width of show-value slider input\n   */\n  --sh-slider-input-width: 2.5rem;\n  /* \n   * @cssprop [--sh-slider-slider-area-height=2rem] - height of actual slider-area\n   */\n  --sh-slider-slider-area-height: 2rem;\n  /* \n   * @cssprop [--sh-slider-slider-area-margin-top=0rem] - margin top of actual slider-area\n   */\n  --sh-slider-slider-area-margin-top: 0rem;\n  /* \n   * @cssprop [--sh-slider-thumb-diameter=0.875rem] - diameter of the thumb\n   */\n  --sh-slider-thumb-diameter: 0.875rem;\n  /* \n   * @cssprop [--sh-slider-track-height=0.125rem] - height of track\n   */\n  --sh-slider-track-height: 0.125rem;\n  /* \n   * @cssprop [--sh-slider-input-padding=0.125rem 0.25rem] - padding of the input\n   */\n  --sh-slider-input-padding: 0.125rem 0.25rem;\n  /* \n   * @cssprop [--sh-slider-horizontal-tooltip-thumb-distance=0.5625rem] - distance between thumb and tooltip in horizontal slider\n   */\n  --sh-slider-horizontal-tooltip-thumb-distance: 0.5625rem;\n  /* \n   * @cssprop [--sh-slider-tooltip-width=2.5rem] - width of tooltip\n   */\n  --sh-slider-tooltip-width: 2.5rem;\n  /* \n   * @cssprop [--sh-slider-tooltip-height=1.5rem] - height of tooltip\n   */\n  --sh-slider-tooltip-height: 1.5rem;\n  /* \n   * @cssprop [--sh-slider-tick-diameter=0.375rem] - diameter of round ticks without hover\n   */\n  --sh-slider-tick-diameter: 0.375rem;\n  /* \n   * @cssprop [--sh-slider-tick-diameter-on-hover=0.5rem] - diameter of round ticks with hover\n   */\n  --sh-slider-tick-diameter-on-hover: 0.5rem;\n  /* \n   * @cssprop [--sh-slider-vertical-slider-tooltip-thumb-distance=var(--sh-slider-horizontal-tooltip-thumb-distance)] - the distance between the thumb and the tooltip for the vertical slider\n   */\n  --sh-slider-vertical-slider-tooltip-thumb-distance: var(--sh-slider-horizontal-tooltip-thumb-distance);\n  /* \n   * @cssprop [--sh-slider-vertical-slider-input-slider-distance=1rem] - the distance between the input and the slider for the vertical slider\n   */\n  --sh-slider-vertical-slider-input-slider-distance: 1rem;\n  /* \n   * @cssprop [--sh-slider-vertical-slider-input-container-width=4.5rem] - the width of the container of input of vertical slider\n   */\n  --sh-slider-vertical-slider-input-container-width: 4.5rem;\n  /* \n   * @cssprop [--sh-slider-vertical-slider-input-label-input-width=1.9375rem] - the width of the input of vertical slider\n   */\n  --sh-slider-vertical-slider-input-label-input-width: 1.9375rem;\n  /* \n   * @cssprop [--sh-slider-step-tick-width=0.0625rem] - width of the step tick\n   */\n  --sh-slider-step-tick-width: 0.0625rem;\n  /* \n   * @cssprop [--sh-slider-step-tick-height=0.5rem] - height of the step tick\n   */\n  --sh-slider-step-tick-height: 0.5rem;\n  /* \n   * @cssprop [--sh-slider-range-input-separator-width=0.25rem] - width of range input separator\n   */\n  --sh-slider-range-input-separator-width: 0.25rem;\n  /* \n   * @cssprop [--sh-slider-range-input-separator-side-margin=0.25rem] - margin left and margin right of range input separator\n   */\n  --sh-slider-range-input-separator-side-margin: 0.25rem;\n  /* \n   * @cssprop [--sh-slider-step-tick-min-width=2rem] - min-width between step-ticks\n   */\n  --sh-slider-step-tick-min-width: 2rem;\n  /* \n   * @cssprop [--sh-slider-arrow-controls-inter-icon-gap=0rem] - gap between the icons in arrow-controls\n   */\n  --sh-slider-arrow-controls-inter-icon-gap: 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-access-bar-height=4.5rem] - access bar height\n   */\n  --sh-access-bar-height: 4.5rem;\n  /* \n   * @cssprop [--sh-access-bar-padding=1.25rem 1rem] - access bar item padding\n   */\n  --sh-access-bar-padding: 1.25rem 1rem;\n  /* \n   * @cssprop [--sh-access-bar-logo-height=2rem] - access bar logo height\n   */\n  --sh-access-bar-logo-height: 2rem;\n  /* \n   * @cssprop [--sh-access-bar-logo-margin-left=0.5rem] - access bar logo margin left\n   */\n  --sh-access-bar-logo-margin-left: 0.5rem;\n  /* \n   * @cssprop [--sh-access-bar-logo-margin-right=2.5rem] - access bar logo margin right\n   */\n  --sh-access-bar-logo-margin-right: 2.5rem;\n  /* \n   * @cssprop [--sh-access-bar-label-line-height=1.5rem] - label line height\n   */\n  --sh-access-bar-label-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-access-bar-label-margin-right=2.5rem] - access bar label margin right\n   */\n  --sh-access-bar-label-margin-right: 2.5rem;\n  /* \n   * @cssprop [--sh-access-bar-condensed-height=2.5rem] - height of condensed access bar\n   */\n  --sh-access-bar-condensed-height: 2.5rem;\n  /* \n   * @cssprop [--sh-access-bar-functions-slot-margin-left=1rem] - margin left of functions slot functions wrapper\n   */\n  --sh-access-bar-functions-slot-margin-left: 1rem;\n  /* \n   * @cssprop [--sh-access-bar-condensed-padding=0.5rem 1rem] - access bar condensed height\n   */\n  --sh-access-bar-condensed-padding: 0.5rem 1rem;\n  /* \n   * @cssprop [--sh-access-bar-condensed-logo-height=1.5rem] - height of the svg logo in condensed access bar\n   */\n  --sh-access-bar-condensed-logo-height: 1.5rem;\n  /* \n   * @cssprop [--sh-access-bar-user-identifier-margin-left=1.5rem] - margin left of the user identifier in access bar\n   */\n  --sh-access-bar-user-identifier-margin-left: 1.5rem;\n  /* \n   * @cssprop [--sh-access-bar-window-controls-margins=0.5rem -0.5rem 2.5rem 1rem] - Window control margins when native is set\n   */\n  --sh-access-bar-window-controls-margins: 0.5rem -0.5rem 2.5rem 1rem;\n  /* \n   * @cssprop [--sh-access-bar-window-controls-height=1.5rem] - height of the window controls\n   */\n  --sh-access-bar-window-controls-height: 1.5rem;\n  /* \n   * @cssprop [--sh-access-bar-mobile-wrapper-padding=0.75rem 1rem] - padding of the access-bar when mobile property is set\n   */\n  --sh-access-bar-mobile-wrapper-padding: 0.75rem 1rem;\n  /* \n   * @cssprop [--sh-access-bar-mobile-height=3.5rem] - height of the access bar in mobile\n   */\n  --sh-access-bar-mobile-height: 3.5rem;\n  /* \n   * @cssprop [--sh-access-bar-mobile-tabs-wrapper-margin=0rem] - margin of the tabs-wrapper in mobile access bar\n   */\n  --sh-access-bar-mobile-tabs-wrapper-margin: 0rem;\n  /* \n   * @cssprop [--sh-access-bar-mobile-left-slot-margin-left=0.5rem] - margin-left of slot left mobile access bar\n   */\n  --sh-access-bar-mobile-left-slot-margin-left: 0.5rem;\n  /* \n   * @cssprop [--sh-access-bar-mobile-right-slot-margin-right=0.5rem] - margin right of slot right mobile access bar\n   */\n  --sh-access-bar-mobile-right-slot-margin-right: 0.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-home-screen-card-height=20rem] - height of the card in cards-wrapper\n   */\n  --sh-home-screen-card-height: 20rem;\n  /* \n   * @cssprop [--sh-home-screen-card-width=20rem] - width of the card in cards-wrapper\n   */\n  --sh-home-screen-card-width: 20rem;\n  /* \n   * @cssprop [--sh-home-screen-card-margin-right=1rem] - margin right of the card\n   */\n  --sh-home-screen-card-margin-right: 1rem;\n  /* \n   * @cssprop [--sh-home-screen-functions-button-bottom=1rem] - vertical position of the function button\n   */\n  --sh-home-screen-functions-button-bottom: 1rem;\n  /* \n   * @cssprop [--sh-home-screen-functions-button-right=1rem] - horizintal position of the function button\n   */\n  --sh-home-screen-functions-button-right: 1rem;\n  /* \n   * @cssprop [--sh-home-screen-functions-card-bottom=3.5rem] - vertical position of the function card\n   */\n  --sh-home-screen-functions-card-bottom: 3.5rem;\n  /* \n   * @cssprop [--sh-home-screen-functions-card-right=1rem] - horizontal position of the function card\n   */\n  --sh-home-screen-functions-card-right: 1rem;\n  /* \n   * @cssprop [--sh-home-screen-functions-card-width=15rem] - width of the function card\n   */\n  --sh-home-screen-functions-card-width: 15rem;\n}\n\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-card-border-radius=0.125rem] - card border radius\n   */\n  --sh-card-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-card-label-height=1.5rem] - card label height\n   */\n  --sh-card-label-height: 1.5rem;\n  /* \n   * @cssprop [--sh-card-padding=1rem] - card padding\n   */\n  --sh-card-padding: 1rem;\n  /* \n   * @cssprop [--sh-card-icon-margin-right=0.5rem] -  card icon margin right\n   */\n  --sh-card-icon-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-card-icon-line-height=1.5rem] - card icon line height\n   */\n  --sh-card-icon-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-card-icon-width=2rem] - card icon width\n   */\n  --sh-card-icon-width: 2rem;\n  /* \n   * @cssprop [--sh-card-header-wrapper-padding=1rem] - card header wrapperpadding\n   */\n  --sh-card-header-wrapper-padding: 1rem;\n  /* \n   * @cssprop [--sh-card-slot-not-name-line-height=1.25rem] - line height of the slot in card whivh is not name\n   */\n  --sh-card-slot-not-name-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-card-header-tab-margin-top=-1rem] - margin top for header slot slotted tab\n   */\n  --sh-card-header-tab-margin-top: -1rem;\n  /* \n   * @cssprop [--sh-card-empty-header-not-empty-content-padding=1rem] - padding top for slot which is not name and is empty header and has content\n   */\n  --sh-card-empty-header-not-empty-content-padding: 1rem;\n  /* \n   * @cssprop [--sh-card-empty-footer-not-empty-content-padding=1rem] - padding bottom for slot which is not name and is empty footer and has content\n   */\n  --sh-card-empty-footer-not-empty-content-padding: 1rem;\n  /* \n   * @cssprop [--sh-card-image-icon-label-wrapper-padding=0.5rem] - padding bottom between image icon and label wrapper\n   */\n  --sh-card-image-icon-label-wrapper-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-card-footer-margin=0.5rem] - margin  bottom for slotted footer not first child\n   */\n  --sh-card-footer-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-card-footer-margin-left-not-first-child=0.5rem] - margin -left for slotted footer not first child\n   */\n  --sh-card-footer-margin-left-not-first-child: 0.5rem;\n  /* \n   * @cssprop [--sh-card-footer-not-empty-margin=0.5rem] - margin for slotted footer not empty and not image\n   */\n  --sh-card-footer-not-empty-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-card-footer-not-empty-padding=0.5rem] - padding for slotted footer not empty and not image\n   */\n  --sh-card-footer-not-empty-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-card-label-icon-badge-margin=0rem] - margin for label\n   */\n  --sh-card-label-icon-badge-margin: 0rem;\n  /* \n   * @cssprop [--sh-card-label-padding=1rem] - card label padding\n   */\n  --sh-card-label-padding: 1rem;\n  /* \n   * @cssprop [--sh-card-icon-font-size-l=2.5rem] - applied to interllay used icon as --sh-icon-font-size-l\n   */\n  --sh-card-icon-font-size-l: 2.5rem;\n  /* \n   * @cssprop [--sh-card-href-not-image-not-empty-footer-slot-margin=0 1rem] - card with link empty footer margin\n   */\n  --sh-card-href-not-image-not-empty-footer-slot-margin: 0 1rem;\n  /* \n   * @cssprop [--sh-card-href-not-image-not-empty-footer-slot-padding=1rem 0] - card with link empty footer padding\n   */\n  --sh-card-href-not-image-not-empty-footer-slot-padding: 1rem 0;\n  /* \n   * @cssprop [--sh-card-href-label-padding=0] - card with link  padding\n   */\n  --sh-card-href-label-padding: 0;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-timepicker-height=2.5rem] - timepicker height\n   */\n  --sh-timepicker-height: 2.5rem;\n  /* \n   * @cssprop [--sh-timepicker-panel-height=8.5rem] - height of the timepicker panel\n   */\n  --sh-timepicker-panel-height: 8.5rem;\n  /* \n   * @cssprop [--sh-timepicker-control-value-margin=1rem 0] - margin of the control-value\n   */\n  --sh-timepicker-control-value-margin: 1rem 0;\n  /* \n   * @cssprop [--sh-timepicker-control-value-height=1.5rem] - height of the control value\n   */\n  --sh-timepicker-control-value-height: 1.5rem;\n  /* \n   * @cssprop [--sh-timepicker-icon-wrapper-padding-right=0.5rem] - padding-right of the icon-wrapper\n   */\n  --sh-timepicker-icon-wrapper-padding-right: 0.5rem;\n  /* \n   * @cssprop [--sh-timepicker-icon-wrapper-gap=0.5rem] - gap between icon in icon-wrapper\n   */\n  --sh-timepicker-icon-wrapper-gap: 0.5rem;\n  /* \n   * @cssprop [--sh-timepicker-label-without-value-line-height=1.5rem] - line-height of the label without value\n   */\n  --sh-timepicker-label-without-value-line-height: 1.5rem;\n  /* \n   * @cssprop [--sh-timepicker-label-left=0.5rem] - left of the label\n   */\n  --sh-timepicker-label-left: 0.5rem;\n  /* \n   * @cssprop [--sh-timepicker-label-top=0.5rem] - top pf the label\n   */\n  --sh-timepicker-label-top: 0.5rem;\n  /* \n   * @cssprop [--sh-timepicker-label-with-value-top=0.25rem] - top of the label when value is present\n   */\n  --sh-timepicker-label-with-value-top: 0.25rem;\n  /* \n   * @cssprop [--sh-timepicker-label-with-value-line-height=1rem] - line-height of the label with value\n   */\n  --sh-timepicker-label-with-value-line-height: 1rem;\n  /* \n   * @cssprop [--sh-timepicker-input-field-height=1rem] - height of the input-field\n   */\n  --sh-timepicker-input-field-height: 1rem;\n  /* \n   * @cssprop [--sh-timepicker-input-field-padding=1.25rem 0 0.25rem 0.5rem] - padding of the input-field\n   */\n  --sh-timepicker-input-field-padding: 1.25rem 0 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-timepicker-placeholder-height=var(--sh-timepicker-input-field-height)] - height of the placeholder\n   */\n  --sh-timepicker-placeholder-height: var(--sh-timepicker-input-field-height);\n  /* \n   * @cssprop [--sh-timepicker-amPm-overlay-width=1.5rem] - width of the am and pm present in the overlay\n   */\n  --sh-timepicker-amPm-overlay-width: 1.5rem;\n  /* \n   * @cssprop [--sh-timepicker-amPm-height=var(--sh-timepicker-input-field-height)] - height of the am and pm in the placeholder\n   */\n  --sh-timepicker-amPm-height: var(--sh-timepicker-input-field-height);\n  /* \n   * @cssprop [--sh-timepicker-amPm-label-width=1.25rem] - width of the am and pm in the label\n   */\n  --sh-timepicker-amPm-label-width: 1.25rem;\n  /* \n   * @cssprop [--sh-timepicker-seperator-width=0.25rem] - width of the seperator\n   */\n  --sh-timepicker-seperator-width: 0.25rem;\n  /* \n   * @cssprop [--sh-timepicker-seperator-height=var(--sh-timepicker-input-field-height)] - height of the seperator\n   */\n  --sh-timepicker-seperator-height: var(--sh-timepicker-input-field-height);\n  /* \n   * @cssprop [--sh-timepicker-condensed-height=2rem] - height of the condensed timepicker\n   */\n  --sh-timepicker-condensed-height: 2rem;\n  /* \n   * @cssprop [--sh-timepicker-condensed-label-top=0.25rem] - top of the condensed label\n   */\n  --sh-timepicker-condensed-label-top: 0.25rem;\n  /* \n   * @cssprop [--sh-timepicker-condensed-input-field-height=1.5rem] - height of the condensed input-field\n   */\n  --sh-timepicker-condensed-input-field-height: 1.5rem;\n  /* \n   * @cssprop [--sh-timepicker-condensed-input-field-padding=0.25rem 0 0.25rem 0.5rem] - padding of the condensed input-field\n   */\n  --sh-timepicker-condensed-input-field-padding: 0.25rem 0 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-timepicker-helper-text-padding=0.25rem 0.5rem 0rem] - padding of the helper-text\n   */\n  --sh-timepicker-helper-text-padding: 0.25rem 0.5rem 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-scrollpicker-main-container-height=12.5rem] - height of the main-container\n   */\n  --sh-scrollpicker-main-container-height: 12.5rem;\n  /* \n   * @cssprop [--sh-scrollpicker-data-cell-height=2.5rem] - height of the data cell\n   */\n  --sh-scrollpicker-data-cell-height: 2.5rem;\n  /* \n   * @cssprop [--sh-scrollpicker-data-cell-width=3.25rem] - width of the data cell\n   */\n  --sh-scrollpicker-data-cell-width: 3.25rem;\n  /* \n   * @cssprop [--sh-scrollpicker-selector-top=5rem] - top of the selector\n   */\n  --sh-scrollpicker-selector-top: 5rem;\n  /* \n   * @cssprop [--sh-scrollpicker-selector-height=var(--sh-scrollpicker-data-cell-height)] - height placement of the second selector\n   */\n  --sh-scrollpicker-selector-height: var(--sh-scrollpicker-data-cell-height);\n  /* \n   * @cssprop [--sh-scrollpicker-current-scale=s] - the current scale of scrollpicker used to highlight the time/date selected\n   */\n  --sh-scrollpicker-current-scale: s;\n}\n\n:root,\n[sh-scale=s] { /* \n * @cssprop [--sh-workline-item-wrapper-height=5rem] - height of the items wrapper\n */\n  --sh-workline-item-wrapper-height: 5rem;\n  /* \n   * @cssprop [--sh-workline-wrapper-height=7.375rem] - height of the workline wrapper\n   */\n  --sh-workline-wrapper-height: 7.375rem;\n  /* \n   * @cssprop [--sh-workline-wrapper-top-padding=0.5rem] - Top padding of the workline wrapper\n   */\n  --sh-workline-wrapper-top-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-workline-item-margin=1rem] - margin between the workline items\n   */\n  --sh-workline-item-margin: 1rem;\n  /* \n   * @cssprop [--sh-workline-label-height=2rem] - height/line-height of the workline label \n   */\n  --sh-workline-label-height: 2rem;\n  /* \n   * @cssprop [--sh-workline-right-wrapper-margin=1rem] - right margin of the right wrapper\n   */\n  --sh-workline-right-wrapper-margin: 1rem;\n  /* \n   * @cssprop [--sh-workline-right-wrapper-left-padding=1.5rem] - left padding of the right wrapper\n   */\n  --sh-workline-right-wrapper-left-padding: 1.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-workline-item-svg-height-width=3.5rem] - height of the progress ring svg\n   */\n  --sh-workline-item-svg-height-width: 3.5rem;\n  /* \n   * @cssprop [--sh-workline-item-type-info-height-width=3rem] - height of the workline item wrapper when it is of information type\n   */\n  --sh-workline-item-type-info-height-width: 3rem;\n  /* \n   * @cssprop [--sh-workline-item-progress-circle=3.25rem] - height or width of the progress circle\n   */\n  --sh-workline-item-progress-circle: 3.25rem;\n  /* \n   * @cssprop [--sh-workline-item-circle-stroke-width=0.1875rem] - stroke width of the circle\n   */\n  --sh-workline-item-circle-stroke-width: 0.1875rem;\n  /* \n   * @cssprop [--sh-workline-item-circle-stroke-dasharray=0,5.83] - stroke width of the circle\n   */\n  --sh-workline-item-circle-stroke-dasharray: 0,5.83;\n  /* \n   * @cssprop [--sh-workline-item-label-height=2rem] - height of the workline item label\n   */\n  --sh-workline-item-label-height: 2rem;\n  /* \n   * @cssprop [--sh-workline-item-wrapper-margin=0.75rem] - margin of the item wrapper\n   */\n  --sh-workline-item-wrapper-margin: 0.75rem;\n  /* \n   * @cssprop [--sh-workline-item-badge-wrapper-position=0.5rem] - badge wrapper position top and right \n   */\n  --sh-workline-item-badge-wrapper-position: 0.5rem;\n  /* \n   * @cssprop [--sh-workline-item-icon-size-m=0.5rem] - size of the icon badge\n   */\n  --sh-workline-item-icon-size-m: 0.5rem;\n  /* \n   * @cssprop [--sh-workline-item-triangle-height=4rem] - height of the two triangles for current item\n   */\n  --sh-workline-item-triangle-height: 4rem;\n  /* \n   * @cssprop [--sh-workline-item-triangle-border-left-right=0.375rem] - border left right of the two triangles in the current item\n   */\n  --sh-workline-item-triangle-border-left-right: 0.375rem;\n  /* \n   * @cssprop [--sh-workline-item-triangle-border-top-bottom=0.5rem] - border top bottom of the two triangles in the current item\n   */\n  --sh-workline-item-triangle-border-top-bottom: 0.5rem;\n  /* \n   * @cssprop [--sh-workline-item-badge-slotted-position-top=-0.3rem] - position top value for the badge when info slots have been used\n   */\n  --sh-workline-item-badge-slotted-position-top: -0.3rem;\n  /* \n   * @cssprop [--sh-workline-item-badge-slotted-position-right=-0.5rem] - position right value for the badge when info slots have been used\n   */\n  --sh-workline-item-badge-slotted-position-right: -0.5rem;\n  /* \n   * @cssprop [--sh-workline-item-thumbnail-width-height=3rem] - height and width of the thumbnail wrapper\n   */\n  --sh-workline-item-thumbnail-width-height: 3rem;\n  /* \n   * @cssprop [--sh-workline-item-active-icon-size-m=2rem] - size of the badge icon when active\n   */\n  --sh-workline-item-active-icon-size-m: 2rem;\n  /* \n   * @cssprop [--sh-workline-item-info-line-height=1.5rem] - line height of the workline item info\n   */\n  --sh-workline-item-info-line-height: 1.5rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-image-segment-slot-left=0.75rem] - slot left\n   */\n  --sh-image-segment-slot-left: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-slot-right=0.75rem] - slot right\n   */\n  --sh-image-segment-slot-right: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-slot-top=0.75rem] - slot top\n   */\n  --sh-image-segment-slot-top: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-slot-bottom=0.75rem] - slot bottom\n   */\n  --sh-image-segment-slot-bottom: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-left-right-margin=0.25rem 0] - margin for left and right side partions of slot\n   */\n  --sh-image-segment-left-right-margin: 0.25rem 0;\n  /* \n   * @cssprop [--sh-image-segment-top-bottom-margin=0 0.25rem] - margin for top and bottom side partions of slot\n   */\n  --sh-image-segment-top-bottom-margin: 0 0.25rem;\n  /* \n   * @cssprop [--sh-image-segment-text-line-height=1.25rem] - line-height of text\n   */\n  --sh-image-segment-text-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-image-segment-corner-right-ml=0.5rem] - margin-left of corner-right\n   */\n  --sh-image-segment-corner-right-ml: 0.5rem;\n}\n\n:host {\n  position: relative;\n  border-radius: 0.125rem;\n  background: black;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n}\n\n/* slotted image */\n:host > ::slotted(*:not([slot])) {\n  height: 100%;\n  width: 100%;\n  flex: 1;\n}\n\n/* outlines */\n.segment-outline {\n  position: absolute;\n  top: 0.125rem;\n  left: 0.125rem;\n  height: calc(100% - 0.25rem);\n  width: calc(100% - 0.25rem);\n  box-sizing: border-box;\n  border: 0.0625rem solid transparent;\n  border-radius: 0.125rem;\n  transition: var(--transition-time) all ease-in-out;\n  opacity: var(--opacity-3);\n}\n\n:host(:not([outline])[focus]) .segment-outline {\n  border-color: rgb(var(--ui-0));\n}\n\n:host([focus]) .segment-outline {\n  border-width: 0.125rem;\n  opacity: var(--opacity-2);\n}\n\n/* slots */\n:host ::slotted(*[slot]) {\n  pointer-events: all;\n}\n\n.corner,\n.side {\n  pointer-events: none;\n  position: absolute;\n  height: auto;\n  width: auto;\n  transition: var(--transition-time) all ease-in-out;\n}\n\n:host([hide-overlay]) .corner,\n:host([hide-overlay]) .side {\n  opacity: 0;\n  pointer-events: none;\n}\n\n/* corner slots */\n.corner {\n  max-width: calc(50% - 0.75rem);\n  display: flex;\n  flex-direction: column;\n}\n\n.corner > ::slotted(*) {\n  display: flex;\n  flex-direction: column;\n}\n\n.corner.right ::slotted(*) {\n  text-align: right;\n  margin-left: var(--sh-image-segment-corner-right-ml);\n}\n\n/* side slots */\n.side {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.side.left > ::slotted(*),\n.side.right > ::slotted(*) {\n  margin: var(--sh-image-segment-left-right-margin);\n}\n\n.side.left,\n.side.right {\n  height: calc(100% - 1.5rem);\n  flex-direction: column;\n}\n\n.side.top > ::slotted(*),\n.side.bottom > ::slotted(*) {\n  margin: var(--sh-image-segment-top-bottom-margin);\n}\n\n.side.top,\n.side.bottom {\n  width: calc(100% - 1.5rem);\n  flex-direction: row;\n}\n\n.left {\n  left: var(--sh-image-segment-slot-left);\n}\n\n.right {\n  right: var(--sh-image-segment-slot-right);\n}\n\n.top {\n  top: var(--sh-image-segment-slot-top);\n}\n\n.bottom {\n  bottom: var(--sh-image-segment-slot-bottom);\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-image-segment-slot-left=0.75rem] - slot left\n   */\n  --sh-image-segment-slot-left: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-slot-right=0.75rem] - slot right\n   */\n  --sh-image-segment-slot-right: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-slot-top=0.75rem] - slot top\n   */\n  --sh-image-segment-slot-top: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-slot-bottom=0.75rem] - slot bottom\n   */\n  --sh-image-segment-slot-bottom: 0.75rem;\n  /* \n   * @cssprop [--sh-image-segment-left-right-margin=0.25rem 0] - margin for left and right side partions of slot\n   */\n  --sh-image-segment-left-right-margin: 0.25rem 0;\n  /* \n   * @cssprop [--sh-image-segment-top-bottom-margin=0 0.25rem] - margin for top and bottom side partions of slot\n   */\n  --sh-image-segment-top-bottom-margin: 0 0.25rem;\n  /* \n   * @cssprop [--sh-image-segment-text-line-height=1.25rem] - line-height of text\n   */\n  --sh-image-segment-text-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-image-segment-corner-right-ml=0.5rem] - margin-left of corner-right\n   */\n  --sh-image-segment-corner-right-ml: 0.5rem;\n}\n\n:host {\n  transition: var(--transition-time) all ease-in-out;\n  width: 100%;\n  font: var(--body-1);\n  line-height: var(--sh-image-segment-text-line-height);\n  color: var(--text-white);\n  text-shadow: 0.0625rem 0.0625rem 0.25rem black, -0.0625rem -0.0625rem 0.25rem black, 0rem 0rem 0.25rem black, 0rem 0rem 0.125rem black;\n  word-wrap: break-word;\n}\n\n:host([alignment=left]) {\n  text-align: left;\n}\n\n:host([alignment=right]) {\n  text-align: right;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-carousel-counter-line-height=1rem] - line height of counter\n   */\n  --sh-carousel-counter-line-height: 1rem;\n  /* \n   * @cssprop [--sh-carousel-counter-bottom=0.25rem] - placement of counter from bottom\n   */\n  --sh-carousel-counter-bottom: 0.25rem;\n  /* \n   * @cssprop [--sh-carousel-counter-left-right=0.25rem] - placement of counter left and right\n   */\n  --sh-carousel-counter-left-right: 0.25rem;\n  /* \n   * @cssprop [--sh-carousel-counter-border-radius=0.125rem] - placement of counter bottom\n   */\n  --sh-carousel-counter-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-carousel-counter-padding=0.25rem] - the padding for counter\n   */\n  --sh-carousel-counter-padding: 0.25rem;\n  /* \n   * @cssprop [--sh-carousel-arrow-left=0.5rem] - the position of arrow from left\n   */\n  --sh-carousel-arrow-left: 0.5rem;\n  /* \n   * @cssprop [--sh-carousel-arrow-right=0.5rem] - the position of arrow from right\n   */\n  --sh-carousel-arrow-right: 0.5rem;\n  /* \n   * @cssprop [--sh-carousel-arrow-padding=0.25rem] - the padding for arrow\n   */\n  --sh-carousel-arrow-padding: 0.25rem;\n  /* \n   * @cssprop [--sh-carousel-icon-width=2rem] - the width of arrow icon\n   */\n  --sh-carousel-icon-width: 2rem;\n  /* \n   * @cssprop [--sh-carousel-icon-height=2rem] - the height of arrow icon\n   */\n  --sh-carousel-icon-height: 2rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-thumbnail-image-wrapper-padding=0.5rem] - padding of image wrapper\n   */\n  --sh-thumbnail-image-wrapper-padding: 0.5rem;\n  /* \n   * @cssprop [--sh-thumbnail-label-wrapper-margin=-0.25rem 0.5rem 0.25rem 0.5rem] - margin of label wrapper\n   */\n  --sh-thumbnail-label-wrapper-margin: -0.25rem 0.5rem 0.25rem 0.5rem;\n  /* \n   * @cssprop [--sh-thumbnail-label-height=2rem] - height of label\n   */\n  --sh-thumbnail-label-height: 2rem;\n  /* \n   * @cssprop [--sh-thumbnail-image-border-radius=0.125rem] - border radius of the image\n   */\n  --sh-thumbnail-image-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-thumbnail-thumbnail-border-radius=0.125rem] - border radius of the thumbnail\n   */\n  --sh-thumbnail-thumbnail-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-thumbnail-image-wrapper-padding-condensed=0.25rem] - padding of image wrapper in condensed mode\n   */\n  --sh-thumbnail-image-wrapper-padding-condensed: 0.25rem;\n  /* \n   * @cssprop [--sh-thumbnail-label-wrapper-margin-condensed=0rem 0.25rem 0.25rem 0.25rem] - padding of image wrapper in condensed mode\n   */\n  --sh-thumbnail-label-wrapper-margin-condensed: 0rem 0.25rem 0.25rem 0.25rem;\n  /* \n   * @cssprop [--sh-thumbnail-label-line-height=1rem] - line height of the label\n   */\n  --sh-thumbnail-label-line-height: 1rem;\n  /* \n   * @cssprop [--sh-thumbnail-icons-wrapper-margin=0rem 0rem 0.25rem 0.25rem] - margin of the icons in icons wrapper\n   */\n  --sh-thumbnail-icons-wrapper-margin: 0rem 0rem 0.25rem 0.25rem;\n  /* \n   * @cssprop [--sh-thumbnail-thumbnail-border=0.0625rem] - border of the thumbnail\n   */\n  --sh-thumbnail-thumbnail-border: 0.0625rem;\n  /* \n   * @cssprop [--sh-thumbnail-checkbox-border-radius=0.125rem] - border radius of the thumbnail checkbox\n   */\n  --sh-thumbnail-checkbox-border-radius: 0.125rem;\n  /* \n   * @cssprop [--sh-thumbnail-new-icon-width=0.5rem] - width of the new icon\n   */\n  --sh-thumbnail-new-icon-width: 0.5rem;\n  /* \n   * @cssprop [--sh-thumbnail-new-icon-height=0.5rem] - height of the new icon\n   */\n  --sh-thumbnail-new-icon-height: 0.5rem;\n  /* \n   * @cssprop [--sh-thumbnail-new-icon-margin=0.5rem] - margin of the new icon\n   */\n  --sh-thumbnail-new-icon-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-thumbnail-badge-width=1rem] - width of the badge\n   */\n  --sh-thumbnail-badge-width: 1rem;\n  /* \n   * @cssprop [--sh-thumbnail-badge-margin=0.5rem] - margin of the badge\n   */\n  --sh-thumbnail-badge-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-thumbnail-indications-wrapper-margin=0.125rem 0.125rem 0 0] - margin of the indications wrapper\n   */\n  --sh-thumbnail-indications-wrapper-margin: 0.125rem 0.125rem 0 0;\n  /* \n   * @cssprop [--sh-thumbnail-indications-wrapper-margin-left=0.25rem] - margin of the indications wrapper\n   */\n  --sh-thumbnail-indications-wrapper-margin-left: 0.25rem;\n  /* \n   * @cssprop [--sh-thumbnail-info-slot-wrapper-bottom=0.625rem] - vertical position of the info slot wrapper\n   */\n  --sh-thumbnail-info-slot-wrapper-bottom: 0.625rem;\n  /* \n   * @cssprop [--sh-thumbnail-info-slot-wrapper-left=0.625rem] - horizontal position of the info slot wrapper\n   */\n  --sh-thumbnail-info-slot-wrapper-left: 0.625rem;\n  /* \n   * @cssprop [--sh-thumbnail-info-slot-wrapper-padding=0.25rem] - padding of the info slot wrapper\n   */\n  --sh-thumbnail-info-slot-wrapper-padding: 0.25rem;\n  /* \n   * @cssprop [--sh-thumbnail-checkbox-height=2rem] - height of the checkbox\n   */\n  --sh-thumbnail-checkbox-height: 2rem;\n  /* \n   * @cssprop [--sh-thumbnail-checkbox-width=2rem] - height of the checkbox\n   */\n  --sh-thumbnail-checkbox-width: 2rem;\n  /* \n   * @cssprop [--sh-thumbnail-thumbnail-icon-bottom=0.625rem] - vertical position of the thumbnail icon\n   */\n  --sh-thumbnail-thumbnail-icon-bottom: 0.625rem;\n  /* \n   * @cssprop [--sh-thumbnail-thumbnail-icon-right=0.625rem] - horizontal position of the thumbnail icon\n   */\n  --sh-thumbnail-thumbnail-icon-right: 0.625rem;\n  /* \n   * @cssprop [--sh-thumbnail-thumbnail-checkbox-top=0.625rem] - vertical position of the thumbnail checkbox\n   */\n  --sh-thumbnail-thumbnail-checkbox-top: 0.625rem;\n  /* \n   * @cssprop [--sh-thumbnail-thumbnail-checkbox-left=0.625rem] - horizontal position of the thumbnail checkbox\n   */\n  --sh-thumbnail-thumbnail-checkbox-left: 0.625rem;\n  /* \n   * @cssprop [--sh-thumbnail-label-margin-bottom=0rem] - margin bottom for label\n   */\n  --sh-thumbnail-label-margin-bottom: 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-datepicker-overlay-container-height=2.5rem] - height of the overlay container\n   */\n  --sh-datepicker-overlay-container-height: 2.5rem;\n  /* \n   * @cssprop [--sh-datepicker-overlay-container-height-condensed=2rem] - height of the overlay container in condensed view\n   */\n  --sh-datepicker-overlay-container-height-condensed: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-months-grid-gap=0.5rem] - gap of months grid\n   */\n  --sh-datepicker-months-grid-gap: 0.5rem;\n  /* \n   * @cssprop [--sh-datepicker-date-panel-width=18rem] - gap of months grid\n   */\n  --sh-datepicker-date-panel-width: 18rem;\n  /* \n   * @cssprop [--sh-datepicker-date-panel-padding=1rem 0.5rem 0.5rem 0.5rem] - gap of months grid\n   */\n  --sh-datepicker-date-panel-padding: 1rem 0.5rem 0.5rem 0.5rem;\n  /* \n   * @cssprop [--sh-datepicker-date-panel-height=21rem] - gap of months grid\n   */\n  --sh-datepicker-date-panel-height: 21rem;\n  /* \n   * @cssprop [--sh-datepicker-header-area-height=2rem] - height of the header area\n   */\n  --sh-datepicker-header-area-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-month-and-year-display-width=9.375rem] - width of the month and year display\n   */\n  --sh-datepicker-month-and-year-display-width: 9.375rem;\n  /* \n   * @cssprop [--sh-datepicker-month-and-year-display-line-height=2rem] - line-height of the month and year display\n   */\n  --sh-datepicker-month-and-year-display-line-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-month-and-year-display-border-radius=1rem] - border-radius of the month and year display\n   */\n  --sh-datepicker-month-and-year-display-border-radius: 1rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-template-rows=2rem] - grid template rows of the date grid\n   */\n  --sh-datepicker-date-grid-template-rows: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-template-columns=2rem] - grid template columns of the date grid\n   */\n  --sh-datepicker-date-grid-template-columns: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-gap=0.5rem] - grid gap of the date grid\n   */\n  --sh-datepicker-date-grid-gap: 0.5rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-margin-top=0.5rem] - margin top of  date grid\n   */\n  --sh-datepicker-date-grid-margin-top: 0.5rem;\n  /* \n   * @cssprop [--sh-datepicker-week-day-name-line-height=2rem] - line height of week day name\n   */\n  --sh-datepicker-week-day-name-line-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-date-line-height=2rem] - line height of date\n   */\n  --sh-datepicker-date-line-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-date-border-radius=1rem] - border-radius of date\n   */\n  --sh-datepicker-date-border-radius: 1rem;\n  /* \n   * @cssprop [--sh-datepicker-date-height=2rem] - border-radius of date\n   */\n  --sh-datepicker-date-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-date-width=2rem] - border-radius of date\n   */\n  --sh-datepicker-date-width: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-icon-dummy-width=2rem] - width of dummy icon\n   */\n  --sh-datepicker-icon-dummy-width: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-icon-dummy-height=2rem] - height of dummy icon\n   */\n  --sh-datepicker-icon-dummy-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-date-panel-padding-year-and-month-selector=1rem 0.5rem 1.75rem] - date panel padding of year and month selector\n   */\n  --sh-datepicker-date-panel-padding-year-and-month-selector: 1rem 0.5rem 1.75rem;\n  /* \n   * @cssprop [--sh-datepicker-header-area-height-year-and-month-selector=1.5rem] - height of the header area of year and month selector\n   */\n  --sh-datepicker-header-area-height-year-and-month-selector: 1.5rem;\n  /* \n   * @cssprop [--sh-datepicker-line-height-year-selector=1.5rem] - line height of the year selector\n   */\n  --sh-datepicker-line-height-year-selector: 1.5rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-template-rows-year-and-month-selector=3rem] - grid template rows of year selector\n   */\n  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-template-columns-year-and-month-selector=4rem] - grid template rows of year selector\n   */\n  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 4rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-column-gap-year-and-month-selector=1rem] - grid gap of year selector\n   */\n  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-row-gap-year-and-month-selector=1rem] - grid row gap of year selector\n   */\n  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 1rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-margin-year-and-month-selector=1.75rem 1.5rem 0rem 1.5rem] - date grid margin of year selector\n   */\n  --sh-datepicker-date-grid-margin-year-and-month-selector: 1.75rem 1.5rem 0rem 1.5rem;\n  /* \n   * @cssprop [--sh-datepicker-date-grid-width-year-and-month-selector=14rem] - width of date grid of year selector\n   */\n  --sh-datepicker-date-grid-width-year-and-month-selector: 14rem;\n  /* \n   * @cssprop [--sh-datepicker-year-height-year-selector=2rem] - height of year field in year selector\n   */\n  --sh-datepicker-year-height-year-selector: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-year-line-height-year-selector=2rem] - line height of year field in year selector\n   */\n  --sh-datepicker-year-line-height-year-selector: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-year-border-radius-year-selector=1rem] - border radius of year field in year selector\n   */\n  --sh-datepicker-year-border-radius-year-selector: 1rem;\n  /* \n   * @cssprop [--sh-datepicker-month-and-year-width=4.5rem] - width of the year display  in month selector\n   */\n  --sh-datepicker-month-and-year-width: 4.5rem;\n  /* \n   * @cssprop [--sh-datepicker-month-and-year-height=2rem] - hieght of the year display  in month selector\n   */\n  --sh-datepicker-month-and-year-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-month-height=2rem] - hieght of the year month  in month selector\n   */\n  --sh-datepicker-month-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-month-line-height=2rem] - line hieght of the year month  in month selector\n   */\n  --sh-datepicker-month-line-height: 2rem;\n  /* \n   * @cssprop [--sh-datepicker-month-border-radius=1rem] - border radius of  month  in month selector\n   */\n  --sh-datepicker-month-border-radius: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-splash-screen-logo-height=2.5rem] - height of the logo\n   */\n  --sh-splash-screen-logo-height: 2.5rem;\n  /* \n   * @cssprop [--sh-splash-screen-logo-padding=0.25rem 0rem 0rem 0.25rem] - padding of the logo\n   */\n  --sh-splash-screen-logo-padding: 0.25rem 0rem 0rem 0.25rem;\n  /* \n   * @cssprop [--sh-splash-screen-data-wrapper-width=30rem] - width of the data wrapper\n   */\n  --sh-splash-screen-data-wrapper-width: 30rem;\n  /* \n   * @cssprop [--sh-splash-screen-data-wrapper-min-height=26.25rem] - min height of the data wrapper\n   */\n  --sh-splash-screen-data-wrapper-min-height: 26.25rem;\n  /* \n   * @cssprop [--sh-splash-screen-data-wrapper-margin=1rem auto 0rem] - margin of the data wrapper\n   */\n  --sh-splash-screen-data-wrapper-margin: 1rem auto 0rem;\n  /* \n   * @cssprop [--sh-splash-screen-label-font-size=1.875rem] - font size of the label\n   */\n  --sh-splash-screen-label-font-size: 1.875rem;\n  /* \n   * @cssprop [--sh-splash-screen-label-line-height=2rem] - line height of the label\n   */\n  --sh-splash-screen-label-line-height: 2rem;\n  /* \n   * @cssprop [--sh-splash-screen-label-margin-top=1rem] - margin top of the label\n   */\n  --sh-splash-screen-label-margin-top: 1rem;\n  /* \n   * @cssprop [--sh-splash-screen-label-margin-bottom=2rem] - margin bottom of the label when version is not defined\n   */\n  --sh-splash-screen-label-margin-bottom: 2rem;\n  /* \n   * @cssprop [--sh-splash-screen-header-2-margin-top=0.5rem] - margin top of the header 2\n   */\n  --sh-splash-screen-header-2-margin-top: 0.5rem;\n  /* \n   * @cssprop [--sh-splash-screen-header-2-margin-bottom=2rem] - margin top of the header 2\n   */\n  --sh-splash-screen-header-2-margin-bottom: 2rem;\n  /* \n   * @cssprop [--sh-splash-screen-header-2-line-height=1.75rem] - line height of the header 2\n   */\n  --sh-splash-screen-header-2-line-height: 1.75rem;\n  /* \n   * @cssprop [--sh-splash-screen-data-wrapper-margin-bottom-slotted=0.5rem] - margin bottom of data wrapper\n   */\n  --sh-splash-screen-data-wrapper-margin-bottom-slotted: 0.5rem;\n  /* \n   * @cssprop [--sh-splash-screen-footer-wrapper-margin-top=1.5rem] - margin top of footer wrapper\n   */\n  --sh-splash-screen-footer-wrapper-margin-top: 1.5rem;\n  /* \n   * @cssprop [--sh-splash-screen-footer-wrapper-margin-bottom=1rem] - margin bottom of footer wrapper\n   */\n  --sh-splash-screen-footer-wrapper-margin-bottom: 1rem;\n  /* \n   * @cssprop [--sh-splash-screen-footer-wrapper-margin-left-slotted-items=0.5rem] - margin left of footer wrapper slotted items\n   */\n  --sh-splash-screen-footer-wrapper-margin-left-slotted-items: 0.5rem;\n  /* \n   * @cssprop [--sh-splash-screen-footer-text-margin-top=1rem] - margin top of footer text\n   */\n  --sh-splash-screen-footer-text-margin-top: 1rem;\n  /* \n   * @cssprop [--sh-splash-screen-footer-text-min-height=2rem] - min height of footer text\n   */\n  --sh-splash-screen-footer-text-min-height: 2rem;\n  /* \n   * @cssprop [--sh-splash-screen-footer-text-slotted-margin-bottom=0.25rem] - margin bottom of slotted item in footer text\n   */\n  --sh-splash-screen-footer-text-slotted-margin-bottom: 0.25rem;\n  /* \n   * @cssprop [--sh-splash-screen-modal-min-height=35rem] - min height of the modal\n   */\n  --sh-splash-screen-modal-min-height: 35rem;\n  /* \n   * @cssprop [--sh-splash-screen-modal-width=50rem] - width of the modal\n   */\n  --sh-splash-screen-modal-width: 50rem;\n  /* \n   * @cssprop [--sh-splash-screen-image-margin=-1rem -1rem -1rem 1rem] - margin of the image\n   */\n  --sh-splash-screen-image-margin: -1rem -1rem -1rem 1rem;\n  /* \n   * @cssprop [--sh-splash-screen-image-border-radius=0rem 0.125rem 0.125rem 0rem] - border radius of the image\n   */\n  --sh-splash-screen-image-border-radius: 0rem 0.125rem 0.125rem 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-list-item-padding=0.25rem 1rem] - padding of the list item\n   */\n  --sh-list-item-padding: 0.25rem 1rem;\n  /* \n   * @cssprop [--sh-list-item-min-height=2rem] - min height of the list item\n   */\n  --sh-list-item-min-height: 2rem;\n  /* \n   * @cssprop [--sh-list-item-icon-margin=0.5rem] - margin of the icon and the arrow icon\n   */\n  --sh-list-item-icon-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-line-height=1.25rem] - line height of the label\n   */\n  --sh-list-item-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-list-item-info-line-height=1rem] - line height of the info\n   */\n  --sh-list-item-info-line-height: 1rem;\n  /* \n   * @cssprop [--sh-list-item-text-padding=0.25rem 0] - top and bottom padding of the text content\n   */\n  --sh-list-item-text-padding: 0.25rem 0;\n  /* \n   * @cssprop [--sh-list-item-arrow-right-margin=0.5rem] - margin of the arrow icon\n   */\n  --sh-list-item-arrow-right-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-text-wrapper-left-margin=0.5rem] - left margin of the text wrapper\n   */\n  --sh-list-item-text-wrapper-left-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-right-slotted-margin=0.5rem] - right margin of the text wrapper\n   */\n  --sh-list-item-right-slotted-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-select-margin-right=0.5rem] - margin right of the checkbox/radio button\n   */\n  --sh-list-item-select-margin-right: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-icon-size-s=2rem] - size of the icon\n   */\n  --sh-list-item-icon-size-s: 2rem;\n  /* \n   * @cssprop [--sh-list-item-bottom-first-margin=0.5rem] - first child margin in bottom slot\n   */\n  --sh-list-item-bottom-first-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-bottom-slot-margin=0.5rem] - bottom slotted child margins\n   */\n  --sh-list-item-bottom-slot-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-content-line-height=1.25rem] - line height for the direct content added\n   */\n  --sh-list-item-content-line-height: 1.25rem;\n  /* \n   * @cssprop [--sh-list-item-checkbox-right=0rem] - checkbox right margin\n   */\n  --sh-list-item-checkbox-right: 0rem;\n  /* \n   * @cssprop [--sh-list-item-select-wrapper-size=2rem] - select wrapper height and width\n   */\n  --sh-list-item-select-wrapper-size: 2rem;\n  /* \n   * @cssprop [--sh-list-item-info-margin=0.125rem 0] - top and bottom margin of the info\n   */\n  --sh-list-item-info-margin: 0.125rem 0;\n  /* \n   * @cssprop [--sh-list-item-left-slotted-margin=0.25rem] - right margin of the left slotted items\n   */\n  --sh-list-item-left-slotted-margin: 0.25rem;\n  /* \n   * @cssprop [--sh-list-item-right-slotted-first-margin=0.5rem] - left margin of the first right slotted item\n   */\n  --sh-list-item-right-slotted-first-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-list-item-divider-inset-margin=1rem] - divider inset margin to the left or right\n   */\n  --sh-list-item-divider-inset-margin: 1rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-list-integrated-margin=0 -1rem] - negative margins of the integrated list\n   */\n  --sh-list-integrated-margin: 0 -1rem;\n  /* \n   * @cssprop [--sh-list-integrated-arrow-margin=0rem] - arrow negative margin when inside integrated list\n   */\n  --sh-list-integrated-arrow-margin: 0rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-table-cell-wrapper-margin=0.5rem 0.75rem] - margin of cell wrapper\n   */\n  --sh-table-cell-wrapper-margin: 0.5rem 0.75rem;\n  /* \n   * @cssprop [--sh-table-cell-line-height=2rem] - line-height of cell wrapper\n   */\n  --sh-table-cell-line-height: 2rem;\n  /* \n   * @cssprop [--sh-table-cell-mobile-wrapper-margin=0.5rem] - margin of mobile cell wrapper\n   */\n  --sh-table-cell-mobile-wrapper-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-table-cell-condensed-wrapper-margin=0.25rem 0.75rem] - margin of cell wrapper\n   */\n  --sh-table-cell-condensed-wrapper-margin: 0.25rem 0.75rem;\n  /* \n   * @cssprop [--sh-table-cell-first-nested-padding=3.5rem] - first-nested-padding\n   */\n  --sh-table-cell-first-nested-padding: 3.5rem;\n  /* \n   * @cssprop [--sh-table-cell-first-nested-padding-checkbox=4.5rem] - first-nested-padding\n   */\n  --sh-table-cell-first-nested-padding-checkbox: 4.5rem;\n  /* \n   * @cssprop [--sh-table-cell-nested-padding=2.75rem] - nested-padding\n   */\n  --sh-table-cell-nested-padding: 2.75rem;\n  /* \n   * @cssprop [--sh-table-cell-nested-padding-checkbox=2.5rem] - nested-padding\n   */\n  --sh-table-cell-nested-padding-checkbox: 2.5rem;\n  /* \n   * @cssprop [--sh-table-cell-icon-min-width=3rem] - icon icon-min-width\n   */\n  --sh-table-cell-icon-min-width: 3rem;\n  /* \n   * @cssprop [--sh-table-cell-icon-checkbox-cell-min-width=3.5rem] - icon checkbox -min-width\n   */\n  --sh-table-cell-icon-checkbox-cell-min-width: 3.5rem;\n  /* \n   * @cssprop [--sh-table-cell-padding-left=2.5rem] - padding left checkbox\n   */\n  --sh-table-cell-padding-left: 2.5rem;\n  /* \n   * @cssprop [--sh-table-cell-inset=2.5rem] - inset left of checkbox\n   */\n  --sh-table-cell-inset: 2.5rem;\n  /* \n   * @cssprop [--sh-table-cell-checkbox-margin-top=0.2rem] - checkbox margin top\n   */\n  --sh-table-cell-checkbox-margin-top: 0.2rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-table-head-line-height=2rem] - line-height of head wrapper\n   */\n  --sh-table-head-line-height: 2rem;\n  /* \n   * @cssprop [--sh-table-head-wrapper-margin=0.5rem 0.75rem] - margin of head wrapper\n   */\n  --sh-table-head-wrapper-margin: 0.5rem 0.75rem;\n  /* \n   * @cssprop [--sh-table-head-condensed-wrapper-margin=0.25rem 0.75rem] - margin of head wrapper\n   */\n  --sh-table-head-condensed-wrapper-margin: 0.25rem 0.75rem;\n  /* \n   * @cssprop [--sh-table-head-mobile-wrapper-margin=0.5rem] - margin of mobile head wrapper\n   */\n  --sh-table-head-mobile-wrapper-margin: 0.5rem;\n  /* \n   * @cssprop [--sh-table-head-sort-icon-margin=0] - margin of sort icon\n   */\n  --sh-table-head-sort-icon-margin: 0;\n  /* \n   * @cssprop [--sh-table-head-condensed-wrapper-height=2rem] - height of the condensed header wrapper\n   */\n  --sh-table-head-condensed-wrapper-height: 2rem;\n  /* \n   * @cssprop [--sh-table-head-icon-min-width=3.5rem] - min-width of the icon header wrapper\n   */\n  --sh-table-head-icon-min-width: 3.5rem;\n  /* \n   * @cssprop [--sh-table-head-icon-cell-min-width=3.5rem] - min-width of the icon cell wrapper\n   */\n  --sh-table-head-icon-cell-min-width: 3.5rem;\n  /* \n   * @cssprop [--sh-table-head-header-wrapper-height=2rem] - height of the  header wrapper\n   */\n  --sh-table-head-header-wrapper-height: 2rem;\n  /* \n   * @cssprop [--sh-table-head-padding-left=2.5rem] - padding-left of the table header\n   */\n  --sh-table-head-padding-left: 2.5rem;\n  /* \n   * @cssprop [--sh-table-head-checkbox-margin-top=0.2rem] - checkbox margin top\n   */\n  --sh-table-head-checkbox-margin-top: 0.2rem;\n}\n\n:root,\n[sh-scale=s] {\n  /* \n   * @cssprop [--sh-table-row-div-border-bottom=0.0625rem solid rgba(var(--ui-1), var(--opacity-6))] - border bottom of a div inside table row\n   */\n  --sh-table-row-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));\n  /* \n   * @cssprop [--sh-table-row-header-slot-div-border-bottom=0.0625rem solid rgba(var(--ui-1), var(--opacity-4))] - border bottom of a header slot div inside table row\n   */\n  --sh-table-row-header-slot-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-4));\n  /* \n   * @cssprop [--sh-table-row-multiselect-checkbox-left=2.5rem] - left value for checkbox with nested multiselect \n   */\n  --sh-table-row-multiselect-checkbox-left: 2.5rem;\n  /* \n   * @cssprop [--sh-table-row-initial-icon-left=3rem] - left value for checkbox with nested multiselect \n   */\n  --sh-table-row-initial-icon-left: 3rem;\n  /* \n   * @cssprop [--sh-table-row-nested-expand-collapse-left=0.75rem] - left value for nested expand collapse icon \n   */\n  --sh-table-row-nested-expand-collapse-left: 0.75rem;\n  /* \n   * @cssprop [--sh-table-row-arrow-inset=2.75rem] - expand clollapse arrow inset -nested  \n   */\n  --sh-table-row-arrow-inset: 2.75rem;\n}\n\nsh-page[sh-debug-outlines], sh-page[sh-vrt-mode] {\n  --sh-interactive-area-outline: 1px solid #afe8d8;\n  --sh-debug-icon-outline-1: 1px solid #901aff4f;\n  --sh-debug-icon-outline-2: 1px solid #f652ff5b;\n}\n\nsh-page[sh-vrt-mode][sh-scale=s], [sh-scale=s] {\n  --sh-interactive-area-outline: none;\n  --sh-debug-icon-outline-1: none;\n  --sh-debug-icon-outline-2: none;\n}\n\n/*\n * main definitions for scales\n * will be pulled in later at top level (<html>)\n * or for containers (<sh-page> <sh-card>)\n */\n/*\n * Global default rules\n */\n:root {\n  font-size: var(--font-size);\n  line-height: var(--line-height);\n  --sh-debug-icon-outline-1: none;\n  --sh-debug-icon-outline-2: none;\n}\n\n/*\n * Definitions of where to apply the scales\n * any tag (including html) with sh-scale=s|m|l|xl|..\n * will set the scale for all descendents\n */\n:root, [sh-scale=s] {\n  --font-size: 1rem;\n  --font-size-super-header: 1.25rem;\n  --font-size-header-1: 1rem;\n  --font-size-header-2: 1rem;\n  --font-size-title-1: 0.875rem;\n  --font-size-title-2: 0.75rem;\n  --font-size-body-1: 0.875rem;\n  --font-size-body-2: 0.75rem;\n  --line-height: 1.5rem;\n  --super-header: normal 400 var(--font-size-super-header, calc(var(--font-size) * 1.25)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-1: normal 400 var(--font-size-header-1, var(--font-size)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-2: normal 700 var(--font-size-header-2, var(--font-size)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-1: normal 700 var(--font-size-title-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-2: normal 700 var(--font-size-title-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-1: normal 400 var(--font-size-body-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-2: normal 400 var(--font-size-body-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --sh-badge-icon-font-size: 1rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0;\n  --sh-switch-item-height: 2.5rem;\n  --sh-switch-item-width: 4rem;\n  --sh-switch-item-border-radius: 1.25rem;\n  --sh-switch-item-padding: 0.75rem 0.75rem;\n  --sh-switch-item-label-alignment: center;\n  --sh-switch-border-radius: 1.25rem;\n  --sh-switch-condensed-border-radius: 1rem;\n  --sh-switch-item-condensed-border-radius: 1rem;\n  --sh-switch-item-condensed-height: 1rem;\n  --sh-switch-item-condensed-padding: 0.5rem 0.75rem;\n  --sh-switch-item-icon-margin: 0.25rem 1.75rem;\n  --sh-switch-item-label-height: 1rem;\n  --sh-switch-item-icon-height: 2rem;\n  --sh-switch-item-icon-width: 2rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-input-number-icon-size: 1.9375rem;\n  --sh-min-touch-size: 0;\n  --sh-min-touch-size: 0rem;\n  --sh-card-padding: 1rem;\n  --sh-card-label-height: 1.5rem;\n  --sh-card-icon-margin-right: 0.5rem;\n  --sh-card-icon-line-height: 1.5rem;\n  --sh-card-icon-width: 2rem;\n  --sh-card-header-wrapper-padding: 1rem;\n  --sh-card-slot-not-name-padding: 0rem 1rem;\n  --sh-card-border-radius: 0.125rem;\n  --sh-card-slot-not-name-line-height: 1.25rem;\n  --sh-card-header-tab-margin-top: -1rem;\n  --sh-card-empty-header-not-empty-content-padding: 1rem;\n  --sh-card-empty-footer-not-empty-content-padding: 1rem;\n  --sh-card-image-icon-label-wrapper-padding: 0.5rem;\n  --sh-card-footer-margin: 0.5rem;\n  --sh-card-functions-slot-margin-left-first-child: 0.5rem;\n  --sh-card-footer-slot-margin-left-first-child: 0.5rem;\n  --sh-card-footer-margin-left-not-first-child: 0.5rem;\n  --sh-card-href-card-icon-empty-content: 0.5rem;\n  --sh-card-href-label-wrapper-empty-content-not-image-padding: 1rem;\n  --sh-card-label-icon-badge-margin: 0rem;\n  --sh-card-label-padding: 0rem;\n  --sh-card-icon-font-size-l: 3rem;\n  --sh-card-href-not-image-not-empty-footer-slot-margin: 0 1rem;\n  --sh-card-href-not-image-not-empty-footer-slot-padding: 1rem 0;\n  --sh-card-href-label-padding: 0;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 2.5rem;\n  --sh-min-touch-size: 0rem;\n  --sh-workline-item-wrapper-height: 5rem;\n  --sh-workline-item-svg-height-width: 3.5rem;\n  --sh-workline-item-type-info-height-width: 3rem;\n  --sh-workline-item-progress-circle: 3.25rem;\n  --sh-workline-item-circle-stroke-width: 0.1875rem;\n  --sh-workline-item-circle-stroke-dasharray: 5.83;\n  --sh-workline-wrapper-height: 7.375rem;\n  --sh-workline-item-label-height: 2rem;\n  --sh-workline-wrapper-top-padding: 0.5rem;\n  --sh-workline-item-wrapper-margin: 0.75rem;\n  --sh-workline-item-badge-wrapper-position: 0.5rem;\n  --sh-workline-item-icon-size-m: 1.5rem;\n  --sh-workline-item-triangle-height: 4rem;\n  --sh-workline-item-triangle-border-left-right: 0.375rem;\n  --sh-workline-item-triangle-border-top-bottom: 0.5rem;\n  --sh-workline-item-badge-slotted-position-top: -0.3rem;\n  --sh-workline-item-badge-slotted-position-right: -0.5rem;\n  --sh-workline-item-margin: 1rem;\n  --sh-workline-item-thumbnail-width-height: 3rem;\n  --sh-workline-label-height: 2rem;\n  --sh-workline-right-wrapper-margin: 1rem;\n  --sh-workline-item-active-icon-size-m: 2rem;\n  --sh-workline-right-wrapper-left-padding: 1.5rem;\n  --sh-workline-item-info-line-height: 1.5rem;\n  --sh-workline-item-popover-clear-icon-padding: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-min-touch-size: 0rem;\n  --sh-table-cell-line-height: 2rem;\n  --sh-interactive-area-display: none;\n  --scrollbar-size: 0.5rem;\n  --scrollbar-corner-radius: 0.25rem ;\n}\n@media (max-width: 48rem) {\n  :root sh-splash-screen::part(splash-image), [sh-scale=s] sh-splash-screen::part(splash-image) {\n    display: none;\n  }\n  :root sh-splash-screen::part(splash-content-wrapper), [sh-scale=s] sh-splash-screen::part(splash-content-wrapper) {\n    width: 100% !important;\n  }\n  :root sh-splash-screen::part(splash-info), [sh-scale=s] sh-splash-screen::part(splash-info) {\n    text-align: center;\n  }\n  :root sh-splash-screen::part(splash-card), [sh-scale=s] sh-splash-screen::part(splash-card) {\n    height: 100% !important;\n    width: 100% !important;\n    max-height: unset !important;\n    max-width: unset !important;\n    min-height: fit-content;\n  }\n}\n\n[sh-scale=m] {\n  --font-size: 1rem;\n  --font-size-super-header: 1.375rem;\n  --font-size-header-1: 1.125rem;\n  --font-size-header-2: 1.125rem;\n  --font-size-title-1: 1rem;\n  --font-size-title-2: 0.875rem;\n  --font-size-body-1: 1rem;\n  --font-size-body-2: 0.875rem;\n  --line-height: 1.5rem;\n  --super-header: normal 400 var(--font-size-super-header, calc(var(--font-size) * 1.25)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-1: normal 400 var(--font-size-header-1, var(--font-size)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-2: normal 700 var(--font-size-header-2, var(--font-size)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-1: normal 700 var(--font-size-title-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-2: normal 700 var(--font-size-title-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-1: normal 400 var(--font-size-body-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-2: normal 400 var(--font-size-body-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --sh-empty-state-text-width: 27.5rem;\n  --sh-empty-state-icon-size: 4rem;\n  --sh-empty-state-margin: 1rem;\n  --sh-menu-item-item-height: 3rem;\n  --sh-menu-item-label-line-height: 1.5rem;\n  --sh-menu-item-item-padding: 0.5rem 0;\n  --sh-menu-item-item-padding-hover: 0.5rem 0.5rem;\n  --sh-menu-item-item-margin-hover: 0 -0.5rem;\n  --sh-menu-item-item-width: calc(100% + 1rem);\n  --sh-menu-item-icon-right-margin: 0.5rem;\n  --sh-menu-item-vertical-item-padding: 0.5rem;\n  --sh-menu-item-vertical-icon-margin: 0rem auto 0.5rem;\n  --sh-menu-item-chapter-wrapper-margin-left: 4.5rem;\n  --sh-menu-item-chapter-arrow-margin-right: 0.5rem;\n  --sh-menu-item-chapter-sibling-margin-left: 3rem;\n  --sh-menu-item-chapter-sibling-margin-left-hover: 2.5rem;\n  --sh-menu-item-functions-slot-margin: 0rem 0rem 0rem -2.5rem;\n  --sh-menu-item-icon-size: 2rem;\n  --sh-menu-item-button-icon-right-xs: -0.75rem;\n  --sh-menu-item-button-icon-right-s: -0.5rem;\n  --sh-menu-item-button-icon-right-m: -0.25rem;\n  --sh-menu-item-button-icon-margin-left-xs: -1rem;\n  --sh-menu-item-button-icon-margin-left-s: -0.5rem;\n  --sh-menu-item-button-icon-margin-left-m: 0rem;\n  --sh-menu-item-button-icon-margin-left-l: 0.5rem;\n  --sh-dropdown-overlay-padding: 0 0.5rem;\n  --sh-dropdown-icon-label-padding-left: 3rem;\n  --sh-dropdown-icon-input-padding: 1.5rem 0 0.1875rem 3rem;\n  --sh-dropdown-icon-top: 0.5rem;\n  --sh-dropdown-icon-left: 0.5rem;\n  --sh-dropdown-label-pointer-event: all;\n  --sh-dropdown-error-success-icon-left-margin: 0.5rem;\n  --sh-dropdown-icon-wrapper-left-margin: 0.25rem;\n  --sh-dropdown-label-disabled-pointer-event: none;\n  --sh-dropdown-condensed-input-padding: 0.25rem 0 0.1875rem 2.5rem;\n  --sh-dropdown-arrow-icon-size: 2.4375rem;\n  --sh-dropdown-overlay-height: 3rem;\n  --sh-dropdown-overlay-condensed-height: 2.5rem;\n  --sh-dropdown-overlay-max-height: 16.5rem;\n  --sh-dropdown-input-cursor: pointer;\n  --sh-dropdown-transition-time: 0s;\n  --sh-icon-size-xs: 2.5rem;\n  --sh-icon-size-s: 2.5rem;\n  --sh-icon-size-m: 2.5rem;\n  --sh-icon-size-l: 3rem;\n  --sh-icon-font-size-xs: 1rem;\n  --sh-icon-font-size-s: 1.5rem;\n  --sh-icon-font-size-m: 2rem;\n  --sh-icon-font-size-l: 3rem;\n  --sh-icon-active-padding-size-xs: 0.75rem;\n  --sh-icon-active-padding-size-s: 0.5rem;\n  --sh-icon-active-padding-size-m: 0.25rem;\n  --sh-icon-active-padding-size-l: 0rem;\n  --sh-icon-border-radius: 0.125rem;\n  --sh-badge-icon-font-size: 1rem;\n  --sh-button-width-size-s: 7rem;\n  --sh-button-width-size-m: 10.5rem;\n  --sh-button-width-size-l: 13rem;\n  --sh-button-label-line-height: 1.75rem;\n  --sh-button-button-height: 2.5rem;\n  --sh-button-button-border-radius: 1.5rem;\n  --sh-button-button-padding: 0.375rem 1.125rem;\n  --sh-button-icon-width: 3rem;\n  --sh-button-icon-height: 3rem;\n  --sh-button-icon-size: 2rem;\n  --sh-min-touch-size: 3rem;\n  --sh-button-padding-right-left: 2.25rem;\n  --sh-button-icon-label-margin-right: 0.25rem;\n  --sh-button-icon-size-s: 1.5rem;\n  --sh-button-button-padding-icon-position: 0.375rem 1.375rem 0.375rem 1.125rem;\n  --sh-text-super-header-line-height: 2rem;\n  --sh-text-header-line-height: 1.75rem;\n  --sh-text-title1-line-height: 1.75rem;\n  --sh-text-title2-line-height: 1.25rem;\n  --sh-text-body1-line-height: 1.5rem;\n  --sh-text-body2-line-height: 1.25rem;\n  --sh-toggle-height: 1.75rem;\n  --sh-toggle-border-radius: 1.25rem;\n  --sh-toggle-circle-dimension: 1.25rem;\n  --sh-toggle-width: 3rem;\n  --sh-toggle-margin: 0.125rem 0.75rem 0.125rem 0.125rem;\n  --sh-toggle-circle-top: 0.125rem;\n  --sh-toggle-circle-left: 0.125rem;\n  --sh-toggle-active-left: 1.375rem;\n  --sh-toggle-line-height: 1.75rem;\n  --sh-toggle-label-line-height: 1.5rem;\n  --sh-toggle-label-padding: 0.25rem 0rem;\n  --sh-min-touch-size: 3rem;\n  --sh-checkbox-inner-width: 1.25rem;\n  --sh-checkbox-inner-height: 1.25rem;\n  --sh-checkbox-outer-width: 2rem;\n  --sh-checkbox-outer-height: 2rem;\n  --sh-checkbox-label-line-height: 1.5rem;\n  --sh-checkbox-margin-right: 0.375rem;\n  --sh-checkbox-tick-line-height: 1.125rem;\n  --sh-checkbox-margin-around-checkbox: 0.375rem;\n  --sh-checkbox-text-indent: 0rem;\n  --sh-checkbox-label-width: 2.375rem;\n  --sh-checkbox-tick-font-size: 1rem;\n  --sh-checkbox-padding: 0rem;\n  --sh-min-touch-size: 3rem;\n  --sh-checkbox-label-padding: 0.25rem 0rem;\n  --sh-checkbox-border-width: 0.125rem;\n  --sh-breadcrumb-item-item-height: 2.5rem;\n  --sh-breadcrumb-item-item-max-width: 12rem;\n  --sh-breadcrumb-item-item-line-height: 1.5rem;\n  --sh-breadcrumb-item-item-icon-margin: 3rem;\n  --sh-breadcrumb-item-item-icon-width: 2rem;\n  --sh-radio-button-container-margin: 0;\n  --sh-radio-button-label-line-height: 1.5rem;\n  --sh-radio-button-label-padding: 0.375rem;\n  --sh-radio-button-label-margin: 0.25rem 0;\n  --sh-radio-button-width: 2rem;\n  --sh-radio-button-height: 2rem;\n  --sh-radio-button-pseudo-width: 1.25rem;\n  --sh-radio-button-pseudo-height: 1.25rem;\n  --sh-radio-button-pseudo-margin: 0.375rem;\n  --sh-radio-button-pseudo-border-width: 0.125rem;\n  --sh-radio-button-pseudo-border-width-active: 0.375rem;\n  --sh-min-touch-size: 3rem;\n  --sh-radio-group-margin: 1rem;\n  --sh-radio-group-horizontal-gap: 1rem 1.5rem;\n  --sh-tag-container-height: 2.5rem;\n  --sh-tag-wrapper-border: 0.0625rem;\n  --sh-tag-padding: 0 0.625rem;\n  --sh-tag-label-line-height: 2.5rem;\n  --sh-tag-icon-padding: 0 0 0 0.5rem;\n  --sh-tag-border-radius: 0.125rem;\n  --sh-tag-condensed-container-height: 2rem;\n  --sh-tag-condensed-icon-padding: 0 0 0 0.25rem;\n  --sh-spinner-width-s: 2rem;\n  --sh-spinner-height-s: 2rem;\n  --sh-spinner-width-m: 3rem;\n  --sh-spinner-height-m: 3rem;\n  --sh-spinner-label-height: 1.5rem;\n  --sh-spinner-label-line-height: 1.5rem;\n  --sh-spinner-margin-top: 0.375rem;\n  --sh-tooltip-max-content-width: 29rem;\n  --sh-tooltip-content-padding: 0.25rem 0.5rem;\n  --sh-tooltip-label-line-height: 1.25rem;\n  --sh-tooltip-padding-title: 0.5rem 0.5rem;\n  --sh-tooltip-title-line-height: 1.25rem;\n  --sh-switch-item-height: 3rem;\n  --sh-switch-item-width: 5.25rem;\n  --sh-switch-item-border-radius: 1.5rem;\n  --sh-switch-item-padding: 0.875rem 0.875rem;\n  --sh-switch-item-label-alignment: center;\n  --sh-switch-border-radius: 1.5rem;\n  --sh-switch-condensed-border-radius: 1.25rem;\n  --sh-switch-item-condensed-border-radius: 1.25rem;\n  --sh-switch-item-condensed-height: 1.5rem;\n  --sh-switch-item-condensed-padding: 0.5rem 0.875rem;\n  --sh-switch-item-icon-margin: 0.5rem 2.5rem;\n  --sh-switch-item-label-height: 1.25rem;\n  --sh-switch-item-icon-height: 2rem;\n  --sh-switch-item-icon-width: 2rem;\n  --sh-min-touch-size: 3rem;\n  --sh-search-icon-top: 0.25rem;\n  --sh-search-icon-left: 0rem;\n  --sh-search-input-height: 3rem;\n  --sh-search-value-line-height: 1.5rem;\n  --sh-search-input-padding: 0.75rem 1rem 0.75rem 2.5rem;\n  --sh-search-input-padding-right: 2.5rem;\n  --sh-search-border-radius: 0.125rem 0.125rem 0rem 0rem;\n  --sh-search-border-bottom-thickness: 0.0625rem;\n  --sh-search-list-item-height: 3rem;\n  --sh-search-single-line-list-item-padding: 0.75rem 0.5rem;\n  --sh-search-list-item-line-height: 1.5rem;\n  --sh-search-close-icon-right: 0rem;\n  --sh-search-multi-line-list-item-padding: 0.25rem 0.5rem;\n  --sh-search-multi-line-list-item-height: 3rem;\n  --sh-search-multi-line-single-item-height: 1.25rem;\n  --sh-search-empty-slot-item-gap: 1rem;\n  --sh-search-empty-wrapper-padding: var(--sh-search-empty-slot-item-gap) 0.5rem;\n  --sh-search-list-view-max-height: 16.5rem;\n  --sh-input-text-label-left: 0.5rem;\n  --sh-input-text-empty-label-top: 0.75rem;\n  --sh-input-text-empty-label-line-height: 1.5rem;\n  --sh-input-text-empty-padding: 0.75rem 0 0.6875rem 0.5rem;\n  --sh-input-text-height: 2.9375rem;\n  --sh-input-text-padding: 1.5rem 0 0.1875rem 0.5rem;\n  --sh-input-text-label-top: 0.25rem;\n  --sh-input-text-label-line-height: 1.25rem;\n  --sh-input-text-empty-no-border-padding-bottom: 0.75rem;\n  --sh-input-text-no-border-padding-bottom: 0.25rem;\n  --sh-input-text-no-border-condensed-padding-bottom: 0.5rem;\n  --sh-input-text-icon-left-margin: 0.5rem;\n  --sh-input-text-slot-icon-left-margin: 0.5rem;\n  --sh-input-text-icon-wrapper-right-padding: 0.5rem;\n  --sh-input-text-icon-size: 2.4375rem;\n  --sh-input-text-icon-wrapper-margin: 0.125rem;\n  --sh-input-text-helper-text-padding: 0.25rem 0.5rem 0;\n  --sh-input-text-condensed-label-top: 0.5rem;\n  --sh-input-text-condensed-padding: 0.5rem 0 0.4375rem 0.5rem;\n  --sh-input-text-condensed-height: 2.4375rem;\n  --sh-input-text-textarea-label-height: 1.5rem;\n  --sh-input-text-textarea-label-padding: 0.5rem 0 0.625rem 0.5rem;\n  --sh-input-text-textarea-padding: 0 0.5rem 0.4375rem;\n  --sh-input-text-textarea-line-height: 1.5rem;\n  --sh-input-text-textarea-empty-label-line-height: 1.5rem;\n  --sh-input-text-condensed-textarea-top: 0.5rem;\n  --sh-input-text-condensed-textarea-padding: 0.5rem 0 0.4375rem 0.5rem;\n  --sh-input-text-textarea-label-line-height: 1.25rem;\n  --sh-input-text-condensed-textarea-icon-top: 0rem;\n  --sh-input-text-pointer-events: none;\n  --sh-input-text-label-condensed-display: none;\n  --sh-input-text-input-cursor: text;\n  --sh-accordion-header-wrapper-min-height: 3rem;\n  --sh-accordion-container-padding-left-right: 0rem 1rem;\n  --sh-accordion-wrapper-padding-bottom: 1rem;\n  --sh-accordion-content-wrapper-width: 1rem;\n  --sh-accordion-label-line-height: 1.75rem;\n  --sh-accordion-expand-icon-margin: 0.25rem -0.5rem 0.25rem 0;\n  --sh-accordion-icon-padding: 0.75rem 0.5rem 0.75rem 0;\n  --sh-accordion-content-items-margin-top: 1rem;\n  --sh-accordion-content-items-margin-top-touch: 1rem;\n  --sh-accordion-content-first-item-margin-top: 0.5rem;\n  --sh-accordion-header-label-info-padding: 0.625rem 0.5rem 0.625rem 0;\n  --sh-accordion-arrow-invert-margin-right: 0.25rem 0.5rem 0.25rem 0;\n  --sh-accordion-content-wrapper-line-height: 1.5rem;\n  --sh-user-identifier-margin-left: 0.5rem;\n  --sh-user-identifier-height: 1.25rem;\n  --sh-user-identifier-circle-dimension: 2rem;\n  --sh-user-identifier-image-circle: 2.5rem;\n  --sh-user-identifier-margin: 0.25rem;\n  --sh-user-identifier-max-width: 11.5rem;\n  --sh-stepper-circle-dimension: 2rem;\n  --sh-stepper-circle-line-height: 2rem;\n  --sh-stepper-label-line-height: 1.5rem;\n  --sh-stepper-info-line-height: 1.25rem;\n  --sh-stepper-info-margin-top: 0.125rem;\n  --sh-stepper-line-top: 0.9375rem;\n  --sh-stepper-line-width: 1.5rem;\n  --sh-stepper-line-border-width: 0.125rem;\n  --sh-stepper-badge-top: -0.3125rem;\n  --sh-stepper-badge-right: -0.4375rem;\n  --sh-stepper-icon-size: 1rem;\n  --sh-stepper-font-size: 1rem;\n  --sh-stepper-border-width: 0.125rem;\n  --sh-stepper-condensed-circle-dimension: 0.875rem;\n  --sh-stepper-condensed-border-width: 0.125rem;\n  --sh-stepper-condensed-badge-top: -0.1875rem;\n  --sh-stepper-condensed-badge-right: -0.1875rem;\n  --sh-stepper-condensed-line-top: 0.4375rem;\n  --sh-stepper-condensed-line-width: 0.625rem;\n  --sh-stepper-vertical-stepper-wrapper-min-height: 4.375rem;\n  --sh-stepper-condensed-vertical-stepper-wrapper-min-height: 1.625rem;\n  --sh-stepper-label-info-padding: 0.75rem 0rem;\n  --sh-stepper-condensed-label-info-padding: 0.5rem 0rem;\n  --sh-stepper-label-info-margin-left: 0.25rem;\n  --sh-stepper-condensed-label-info-margin-left: 0.0625rem;\n  --sh-stepper-vertical-stepper-circle-margin: 0.5rem 0rem;\n  --sh-stepper-vertical-line-left: 0.9375rem;\n  --sh-stepper-vertical-condensed-circle-margin: 0.125rem 0rem;\n  --sh-stepper-vertical-condensed-line-left: 0.375rem;\n  --sh-stepper-vertical-line-height: 1.5rem;\n  --sh-stepper-vertical-condensed-line-height: 0.5625rem;\n  --sh-nav-bar-nav-bar-wrapper-height: 3.75rem;\n  --sh-nav-bar-condensed-nav-bar-wrapper-height: 3rem;\n  --sh-nav-bar-functions-wrapper-gap: 0.75rem;\n  --sh-nav-bar-functions-wrapper-padding: 0 0 0 0.75rem;\n  --sh-nav-bar-nav-bar-wrapper-padding: 0 1rem;\n  --sh-value-indicator-s-label-line-height: 1.25rem;\n  --sh-value-indicator-l-label-line-height: 1.75rem;\n  --sh-value-indicator-s-value-line-height: 2.25rem;\n  --sh-value-indicator-l-value-line-height: 4rem;\n  --sh-value-indicator-l-unit-line-height: 2.625rem;\n  --sh-value-indicator-s-unit-line-height: 1.5rem;\n  --sh-value-indicator-s-unit-padding-top: 0.625rem;\n  --sh-value-indicator-l-unit-padding-top: 1.6rem;\n  --sh-value-indicator-l-unit-font-size: 2rem;\n  --sh-value-indicator-s-unit-font-size: 1rem;\n  --sh-value-indicator-l-icon-size-m: 4rem;\n  --sh-value-indicator-s-icon-size-m: 2rem;\n  --sh-value-indicator-s-icon-font-size-m: 2rem;\n  --sh-value-indicator-l-icon-font-size-m: 4rem;\n  --sh-value-indicator-l-label-font-size: 1.125rem;\n  --sh-value-indicator-s-label-font-size: 1rem;\n  --sh-value-indicator-l-value-font-size: 4rem;\n  --sh-value-indicator-s-value-font-size: 2rem;\n  --sh-value-indicator-s-status-size-m: 1.5rem;\n  --sh-value-indicator-s-status-font-size-m: 1.5rem;\n  --sh-value-indicator-s-icon-margin-right: 0.25rem;\n  --sh-value-indicator-l-icon-margin-right: 0.5rem;\n  --sh-notification-width: 20rem;\n  --sh-notification-item-header-margin: 0.5rem 0.5rem 0 1rem;\n  --sh-notification-item-header-icon-margin: 0.5rem 0.5rem 0.5rem 0;\n  --sh-notification-item-header-line-height: 1.75rem;\n  --sh-notification-item-header-max-height: 3.5rem;\n  --sh-notification-item-header-text-margin: 0.375rem 0.5rem 0.375rem 0;\n  --sh-notification-item-header-close-button-margin: 0rem 0.5rem 0 0;\n  --sh-notification-item-description-container-margin: 0.5rem 1rem 1rem 1rem;\n  --sh-notification-item-no-label-description-container-margin: 0.5rem 0.5rem 1rem 1rem;\n  --sh-notification-item-description-icon-margin: 0.5rem 0.5rem 0 0;\n  --sh-notification-item-description-line-height: 1.5rem;\n  --sh-notification-item-description-text-margin: 0.5rem 0.5rem 0rem 0;\n  --sh-notification-item-description-close-button-margin: -1rem;\n  --sh-notification-item-footer-margin: 0 1rem 1rem 1rem;\n  --sh-notification-item-description-slot-elements-margin-top: 1rem;\n  --sh-notification-item-badge-margin: 1rem 1rem 0.5rem 1rem;\n  --sh-notification-item-footer-slot-child-margin-left: 0.75rem;\n  --sh-input-number-icon-size: 2.4375rem;\n  --sh-input-number-input-right-padding: 0.25rem;\n  --sh-input-number-left-icon-padding: 0 0 0 0.5rem;\n  --sh-input-number-right-icon-padding: 0 0 0 0.5rem;\n  --sh-numeric-keypad-width: 11rem;\n  --sh-numeric-keypad-height: 15rem;\n  --sh-numeric-keypad-circle-button-height: 3rem;\n  --sh-numeric-keypad-circle-button-width: 3rem;\n  --sh-numeric-keypad-container-padding: 1rem;\n  --sh-numeric-keypad-button-margins: 0.5rem;\n  --sh-numeric-keypad-button-center-margin: 0 0.5rem;\n  --sh-pane-wrapper-width: 22rem;\n  --sh-pane-wrapper-padding: 1rem;\n  --sh-pane-arrow-placement-padding: 0.75rem;\n  --sh-pane-arrow-position: -2rem;\n  --sh-pane-condensed-width: 6.875rem;\n  --sh-pane-body-wrapper-margin: 1rem;\n  --sh-pane-arrow-wrapper-padding: 0.25rem 0;\n  --sh-pane-slot-child-margin-left: 0.75rem;\n  --sh-pane-functions-slot-last-child-margin: 0rem 0rem 0 var(--sh-pane-slot-child-margin-left);\n  --sh-pane-functions-slot-not-last-child-margin: 0rem 0rem 0 var(--sh-pane-slot-child-margin-left);\n  --sh-pane-arrow-icon-size: 2rem;\n  --sh-pane-body-wrapper-line-height: 1.5rem;\n  --sh-progress-header-line-height: 1.75rem;\n  --sh-progress-progress-bar-height: 0.5rem;\n  --sh-progress-info-line-height: 1.5rem;\n  --sh-progress-header-margin-bottom: 0.5rem;\n  --sh-progress-footer-margin-top: 0rem;\n  --sh-progress-radial-header-margin-bottom: var(--sh-progress-header-margin-bottom);\n  --sh-progress-radial-progress-height-xs: 1rem;\n  --sh-progress-radial-progress-ring-width-xs: 0.25rem;\n  --sh-progress-radial-progress-height-s: 2rem;\n  --sh-progress-radial-progress-ring-width-s: 0.375rem;\n  --sh-progress-radial-progress-height-m: 4.5rem;\n  --sh-progress-radial-progress-ring-width-m: 0.5rem;\n  --sh-progress-radial-progress-height-l: 8.5rem;\n  --sh-progress-radial-progress-ring-width-l: 0.625rem;\n  --sh-progress-radial-progress-height-xl: 17rem;\n  --sh-progress-radial-progress-ring-width-xl: 0.75rem;\n  --sh-progress-indeterminate-bar-length: 7.5rem;\n  --sh-progress-radial-progress-label-width-m: 3rem;\n  --sh-progress-radial-progress-label-width-l: 6rem;\n  --sh-progress-radial-progress-label-width-xl: 12rem;\n  --sh-pagination-wrapper-height: 2.5rem;\n  --sh-pagination-height: 2rem;\n  --sh-pagination-width: 1.5rem;\n  --sh-pagination-line-height: 2rem;\n  --sh-pagination-li-right-margin: 1rem;\n  --sh-pagination-border-radius: 1rem;\n  --sh-pagination-prev-page-icon-right-margin: 1rem;\n  --sh-pagination-next-page-icon-left-margin: 0;\n  --sh-pagination-page-number-padding: 0rem 0.25rem;\n  --sh-min-touch-size: 3rem;\n  --sh-popover-min-width: 14rem;\n  --sh-popover-width: 17.5rem;\n  --sh-popover-current-scale: m;\n  --sh-popover-header-padding: 0.5rem 0.5rem 0rem 1rem;\n  --sh-popover-body-padding: 0.5rem 1rem 1rem;\n  --sh-popover-body-wrapper-margin-bottom: 1rem;\n  --sh-popover-footer-padding: 0 1rem 1rem;\n  --sh-popover-header-padding-with-empty-function-slot: 1rem;\n  --sh-popover-label-padding: 0.375rem 0;\n  --sh-popover-headerless-body-top-padding: 1rem;\n  --sh-popover-gap-between-footer-slot-elements: 0.75rem;\n  --sh-popover-gap-between-function-slot-elements: var(--sh-popover-gap-between-footer-slot-elements);\n  --sh-popover-label-margin-right: 0.5rem;\n  --sh-popover-label-line-height: 1.75rem;\n  --sh-popover-header-icon-margin-right: 0.5rem;\n  --sh-popover-content-line-height: 1.5rem;\n  --sh-popover-arrow-border-width: 0rem 0.375rem 0.5rem 0.375rem;\n  --sh-popover-arrow-transform-origin: 0.375rem 0.5rem;\n  --sh-popover-submenu-translateY: -0.5rem;\n  --sh-split-button-icon-wrapper-width: 3rem;\n  --sh-split-button-current-scale: m;\n  --sh-min-touch-size: 3rem;\n  --sh-card-padding: 0.5rem 1rem;\n  --sh-card-label-height: 1.75rem;\n  --sh-card-icon-margin-right: 0.5rem;\n  --sh-card-icon-line-height: 1.5rem;\n  --sh-card-icon-width: 2.5rem;\n  --sh-card-header-wrapper-padding: 1rem;\n  --sh-card-slot-not-name-padding: 0rem 1rem;\n  --sh-card-border-radius: 0.125rem;\n  --sh-card-slot-not-name-line-height: 1.5rem;\n  --sh-card-header-tab-margin-top: -1rem;\n  --sh-card-empty-header-not-empty-content-padding: 1rem;\n  --sh-card-empty-footer-not-empty-content-padding: 1rem;\n  --sh-card-image-icon-label-wrapper-padding: 0.5rem;\n  --sh-card-footer-margin: 1rem;\n  --sh-card-functions-slot-margin-left-first-child: 0.5rem;\n  --sh-card-footer-slot-margin-left-first-child: 0.5rem;\n  --sh-card-footer-margin-left-not-first-child: 0.75rem;\n  --sh-card-href-card-icon-empty-content: 0.5rem;\n  --sh-card-href-label-wrapper-empty-content-not-image-padding: 1rem;\n  --sh-card-label-icon-badge-margin: 0.375rem 0;\n  --sh-card-icon-font-size-l: 3rem;\n  --sh-card-label-padding: 0rem;\n  --sh-card-href-not-image-not-empty-footer-slot-margin: 0 1rem;\n  --sh-card-href-not-image-not-empty-footer-slot-padding: 1rem 0;\n  --sh-card-href-label-padding: 0.25rem 0 0 0;\n  --sh-drawer-width: 23rem;\n  --sh-drawer-header-wrapper-padding: 1rem;\n  --sh-drawer-label-wrapper-padding: 0.5rem 1rem;\n  --sh-drawer-gap-between-function-footer-slot-elements: 0.75rem;\n  --sh-drawer-body-wrapper-padding: 0 1rem;\n  --sh-drawer-menu-item-margin-top: 0rem;\n  --sh-drawer-headerless-body-wrapper-padding-top: 1rem;\n  --sh-drawer-footerless-body-wrapper-padding-bottom: var(--sh-drawer-headerless-body-wrapper-padding-top);\n  --sh-drawer-body-wrapper-margin-bottom: 1rem;\n  --sh-drawer-footer-wrapper-padding: var(--sh-drawer-footerless-body-wrapper-padding-bottom);\n  --sh-drawer-top-bottom-min-height: 11rem;\n  --sh-drawer-label-line-height: 1.75rem;\n  --sh-drawer-label-padding: 0.375rem 0;\n  --sh-drawer-label-margin-right: 0.5rem;\n  --sh-drawer-touch-gap-between-function-footer-slot-elements: 0.75rem;\n  --sh-drawer-body-wrapper-line-height: 1.5rem;\n  --sh-drawer-scrollpicker-padding: 1rem;\n  --sh-risk-score-sizeS: 4.5rem;\n  --sh-risk-score-sizeL: 8.25rem;\n  --sh-risk-score-radial-s-width: 3rem;\n  --sh-risk-score-radial-s-lh: 1.5rem;\n  --sh-risk-score-radial-l-width: 6rem;\n  --sh-risk-score-radial-l-lh: 2.5rem;\n  --sh-risk-score-lw-height: 0.25rem;\n  --sh-risk-score-lw-mrg-btm: 0.5rem;\n  --sh-risk-score-riskbar-mrg-left: 0.25rem;\n  --sh-risk-score-hw-mrg-btm: 0.5rem;\n  --sh-risk-score-hw-line-height: 1.75rem;\n  --sh-page-body-wrapper-padding: 1rem;\n  --sh-tab-item-text-line-height: 1.75rem;\n  --sh-tab-item-icon-height: 3.75rem;\n  --sh-tab-item-icon-line-height: 2rem;\n  --sh-tab-item-icon-padding: 0.875rem 1rem 0.75rem;\n  --sh-tab-item-icon-label-padding: 0.25rem 1rem 0.125rem;\n  --sh-tab-item-icon-label-padding-access-bar: 0.875rem 1rem;\n  --sh-tab-item-icon-label-line-height: 2rem;\n  --sh-tab-item-icon-label-height: 3.75rem;\n  --sh-tab-item-condensed-icon-padding: 0.5rem 1rem 0.375rem;\n  --sh-tab-item-condensed-icon-line-height: 2rem;\n  --sh-tab-item-condensed-icon-height: 3rem;\n  --sh-tab-item-access-bar-icon-height: 5rem;\n  --sh-tab-item-access-bar-icon-padding: 1.5rem 1rem 1.375rem;\n  --sh-tab-item-access-bar-icon-line-height: 2rem;\n  --sh-tab-item-patient-height: 5rem;\n  --sh-tab-item-condensed-height: 3rem;\n  --sh-tab-item-normal-height: 3.75rem;\n  --sh-tab-item-arrow-icons-padding: 0 0.25rem;\n  --sh-tab-item-arrow-icons-line-height: 2.5rem;\n  --sh-tab-item-tab-item-padding: 1rem 1rem 0.875rem;\n  --sh-tab-item-tab-item-line-height: 1.75rem;\n  --sh-tab-item-access-bar-padding: 1.625rem 1rem 1.5rem;\n  --sh-tab-item-access-bar-height: 5rem;\n  --sh-tab-item-access-bar-line-height: 1.75rem;\n  --sh-tab-item-condensed-padding: 0.625rem 1rem 0.5rem;\n  --sh-tab-item-condensed-line-height: 1.75rem;\n  --sh-tab-item-badge-margin: -1.875rem -0.625rem 0rem 0.375rem;\n  --sh-tab-item-empty-badge-margin: -2.125rem -0.5rem 0rem 0.5rem;\n  --sh-tab-item-slottedfn-mg-right: 2.75rem;\n  --sh-tab-item-slottedfn-mg-left: -0.5rem;\n  --sh-tab-item-close-icon-right: 0.25rem;\n  --sh-tab-item-patient-mg-left: 0;\n  --sh-tab-item-patient-mg-right: 0.5rem;\n  --sh-tab-item-pt-label-lh: 1.25rem;\n  --sh-tab-item-pt-info-lh: 1.25rem;\n  --sh-tab-item-close-icon-top: 0.25rem;\n  --sh-tab-item-close-icon-accessbar-top: 0.25rem;\n  --sh-tab-item-close-icon-accessbar-right: 0.25rem;\n  --sh-tab-item-condensed-empty-badge-margin: -1.2rem -0.6rem 0.5rem 0.5rem;\n  --sh-tab-item-condensed-badge-margin: -0.9rem -0.7rem 0.5rem 0.5rem;\n  --sh-tab-item-tab-close-margin: 0.75rem;\n  --sh-tab-item-tab-min-width: 4rem;\n  --sh-tab-item-tab-max-width: 12.5rem;\n  --sh-tab-item-tab-l-max-width: 26.5rem;\n  --sh-tab-item-patient-active-max-width: 19.5rem;\n  --sh-tab-item-patient-min-width: 12.5rem;\n  --sh-tab-item-patient-text-margin-right: 1.75rem;\n  --sh-tab-item-condensed-patient-collapsed-input-height: 3rem;\n  --sh-tab-item-condensed-patient-collapsed-input-padding: 0rem 0.5rem;\n  --sh-tab-item-patient-popover-max-height: 13.125rem;\n  --sh-tab-item-patient-collapsed-height: 3.75rem;\n  --sh-tab-item-popover-max-height: 13.5rem;\n  --sh-tab-item-collapsed-input-height: 5rem;\n  --sh-tab-item-condensed-collapsed-input-height: 3rem;\n  --sh-tab-item-text-lh: 1.25rem;\n  --sh-tab-item-patient-close-icon-right: 0.25rem;\n  --sh-tab-item-access-context-closable-padding-right: 2.75rem;\n  --sh-tab-item-expand-icon-font-size: 2.5rem;\n  --sh-tab-item-label-line-height: 1.25rem;\n  --sh-tab-item-patient-padding: 1.25rem 0.5rem 1.125rem 0.5rem;\n  --sh-tab-item-collapsed-label-line-height: 3rem;\n  --sh-tab-item-patient-href-wrapper-margin: 1rem 0.5rem;\n  --sh-tab-item-collapsed-patient-href-wrapper-margin: 0.625rem 0.5rem;\n  --sh-tab-item-access-bar-icon-href-wrapper-margin: 1.5rem 1rem;\n  --sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin: 0.875rem 0rem;\n  --sh-tab-item-href-wrapper-margin: 1.625rem 1rem 1.5rem;\n  --sh-tab-item-href-badge-margin-top: -0.5625rem;\n  --sh-tab-item-href-empty-badge-margin-top: -0.4375rem;\n  --sh-tab-item-access-bar-href-badge-margin-top: -0.1875rem;\n  --sh-tab-item-access-bar-href-default-badge-margin-top: 0.125rem;\n  --sh-tab-item-condensed-access-bar-href-default-badge-margin-top: -0.25rem;\n  --sh-tab-item-condensed-pt-href-wrapper-margin: 0.125rem 0.5rem;\n  --sh-tab-item-collapsed-condensed-pt-href-wrapper-margin: 0.125rem 0.5rem;\n  --sh-tab-item-condensed-icon-href-wrapper-margin: 0.5rem 0rem 0.125rem;\n  --sh-tab-item-condensed-icon-pt-href-wrapper-margin: 0.125rem 0.5rem 0.125rem 0.5rem;\n  --sh-tab-item-href-condensed-height: 2.75rem;\n  --sh-tab-item-icon-href-wrapper-margin: 0.875rem 0.5rem;\n  --sh-tab-item-condensed-href-badge-margin-top: -0.3125rem;\n  --sh-tab-item-condensed-href-empty-badge-margin-top: -0.1875rem;\n  --sh-tab-item-closable-condensed-href-badge-margin-top: -0.9375rem;\n  --sh-tab-item-closable-condensed-empty-href-badge-margin-top: -1.1875rem;\n  --sh-tab-item-collapsed-href-accessbar-height: 3.75rem;\n  --sh-tab-item-tab-item-icon-margin: 0rem 0.5rem 0rem 0rem;\n  --sh-tab-item-condensed-collapsed-icon-href-wrapper-margin: 0.125rem 0rem 0.125rem;\n  --sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left: 0.5rem;\n  --sh-tab-item-collapsed-icon-height: 3.75rem;\n  --sh-tab-item-condensed-icon-only-href-wrapper-margin: 0.5rem 1rem 0.125rem;\n  --sh-tab-item-min-width-tab: 4rem;\n  --sh-tab-item-icon-href-padding: 0rem 1rem;\n  --sh-modal-label-wrapper-padding: 0rem 0.5rem 0rem 1rem;\n  --sh-modal-body-wrapper-padding: 1rem;\n  --sh-modal-footer-wrapper-padding: 1rem;\n  --sh-modal-footer-wrapper-margin-left: 0.75rem;\n  --sh-modal-close-button-2-margin: 0.625rem 0.625rem 0.625rem 0.75rem;\n  --sh-modal-modal-label-line-height: 1.75rem;\n  --sh-modal-close-button-margin-left: 0.5rem;\n  --sh-modal-icon-margin-right: 0.5rem;\n  --sh-modal-label-wrapper-height: 3.5rem;\n  --sh-modal-wrapper-content-margin-bottom: 1rem;\n  --sh-modal-functions-wrapper-gap: 0.75rem;\n  --sh-modal-functions-wrapper-margin-left: 0.5rem;\n  --sh-timepicker-height: 3rem;\n  --sh-timepicker-panel-height: 10.5rem;\n  --sh-timepicker-control-value-margin: 1rem 0;\n  --sh-timepicker-control-value-height: 1.5rem;\n  --sh-timepicker-icon-wrapper-padding-right: 0.5rem;\n  --sh-timepicker-icon-wrapper-gap: 0.5rem;\n  --sh-timepicker-label-without-value-line-height: 1.5rem;\n  --sh-timepicker-label-left: 0.5rem;\n  --sh-timepicker-label-top: 0.75rem;\n  --sh-timepicker-label-with-value-top: 0.25rem;\n  --sh-timepicker-label-with-value-line-height: 1.25rem;\n  --sh-timepicker-input-field-height: 1.25rem;\n  --sh-timepicker-input-field-padding: 1.5rem 0 0.25rem 0.5rem;\n  --sh-timepicker-placeholder-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-amPm-overlay-width: 2.5rem;\n  --sh-timepicker-amPm-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-amPm-label-width: 1.5rem;\n  --sh-timepicker-seperator-width: 0.375rem;\n  --sh-timepicker-seperator-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-condensed-height: 2.5rem;\n  --sh-timepicker-condensed-label-top: 0.5rem;\n  --sh-timepicker-condensed-input-field-height: 1.5rem;\n  --sh-timepicker-condensed-input-field-padding: 0.5rem 0 0.5rem 0.5rem;\n  --sh-timepicker-helper-text-padding: 0.25rem 0.5rem 0rem;\n  --sh-scrollpicker-main-container-height: 15rem;\n  --sh-scrollpicker-data-cell-height: 3rem;\n  --sh-scrollpicker-data-cell-width: 4rem;\n  --sh-scrollpicker-selector-top: 6rem;\n  --sh-scrollpicker-selector-height: var(--sh-scrollpicker-data-cell-height);\n  --sh-scrollpicker-current-scale: m;\n  --sh-tool-padding: 0.3125rem;\n  --sh-tool-bottom-padding-with-icon: 0.1875rem;\n  --sh-tool-height: 4.875rem;\n  --sh-tool-width: var(--sh-tool-height);\n  --sh-tool-condensed-padding: 0.1875rem;\n  --sh-tool-condensed-height: 3rem;\n  --sh-tool-condensed-width: var(--sh-tool-condensed-height);\n  --sh-tool-icon-value-label-font-size: 0.875rem;\n  --sh-tool-icon-value-label-line-height: var(--sh-tool-icon-value-label-font-size);\n  --sh-tool-value-label-line-height: 1rem;\n  --sh-tool-label-line-height: 1.125rem;\n  --sh-tool-label-with-icon-height: 1.875rem;\n  --sh-tool-icon-label-margin-top: 0.375rem;\n  --sh-tool-palette-height: 1.25rem;\n  --sh-tool-palette-width: var(--sh-tool-palette-height);\n  --sh-tool-arrow-height: 0.375rem;\n  --sh-tool-arrow-width: var(--sh-tool-arrow-height);\n  --sh-tool-arrow-border: 0.188rem;\n  --sh-tool-popover-max-height: 14.5rem;\n  --sh-tool-condensed-palette-height: 0.75rem;\n  --sh-tool-condensed-palette-width: var(--sh-tool-condensed-palette-height);\n  --sh-min-touch-size: 2.5rem;\n  --sh-slider-input-height: 1.75rem;\n  --sh-slider-input-width: 2.75rem;\n  --sh-slider-slider-area-height: 2.5rem;\n  --sh-slider-slider-area-margin-top: 0.25rem;\n  --sh-slider-thumb-diameter: 0.875rem;\n  --sh-slider-track-height: 0.125rem;\n  --sh-slider-input-padding: 0.125rem 0.4375rem;\n  --sh-slider-horizontal-tooltip-thumb-distance: 1.0625rem;\n  --sh-slider-tooltip-width: 2.75rem;\n  --sh-slider-tooltip-height: 1.75rem;\n  --sh-slider-tick-diameter: 0.375rem;\n  --sh-slider-vertical-slider-tooltip-thumb-distance: var(--sh-slider-horizontal-tooltip-thumb-distance);\n  --sh-slider-vertical-slider-input-slider-distance: 1rem;\n  --sh-slider-vertical-slider-input-container-width: 4.75rem;\n  --sh-slider-vertical-slider-input-label-input-width: 1.9375rem;\n  --sh-slider-step-tick-width: 0.0625rem;\n  --sh-slider-step-tick-height: 0.5rem;\n  --sh-slider-range-input-separator-width: 0.25rem;\n  --sh-slider-range-input-separator-side-margin: 0.25rem;\n  --sh-slider-step-tick-min-width: 2rem;\n  --sh-slider-arrow-controls-inter-icon-gap: 0.5rem;\n  --sh-access-bar-height: 5rem;\n  --sh-access-bar-condensed-height: 3rem;\n  --sh-access-bar-mobile-height: 3.5rem;\n  --sh-access-bar-logo-height: 2.5rem;\n  --sh-access-bar-logo-margin-left: 0.5rem;\n  --sh-access-bar-logo-margin-right: 2.5rem;\n  --sh-access-bar-label-line-height: 1.75rem;\n  --sh-access-bar-condensed-logo-height: 2rem;\n  --sh-access-bar-label-margin-right: 2.5rem;\n  --sh-access-bar-padding: 1.25rem 1rem;\n  --sh-access-bar-functions-slot-margin-left: 1rem;\n  --sh-access-bar-user-identifier-margin-left: 1.5rem;\n  --sh-access-bar-window-controls-margins: 0.5rem -0.5rem 2rem 1rem;\n  --sh-access-bar-mobile-tabs-wrapper-margin: 0rem;\n  --sh-access-bar-window-controls-height: 2.5rem;\n  --sh-access-bar-condensed-padding: 0.5rem 1rem;\n  --sh-access-bar-mobile-wrapper-padding: 0.5rem 1rem;\n  --sh-access-bar-mobile-left-slot-margin-left: 0.75rem;\n  --sh-access-bar-mobile-right-slot-margin-right: 0.75rem;\n  --sh-home-screen-card-height: 20rem;\n  --sh-home-screen-card-width: 20rem;\n  --sh-home-screen-card-margin-right: 1rem;\n  --sh-home-screen-functions-button-bottom: 1rem;\n  --sh-home-screen-functions-button-right: 1rem;\n  --sh-home-screen-functions-card-bottom: 4rem;\n  --sh-home-screen-functions-card-right: 1rem;\n  --sh-home-screen-functions-card-width: 14rem;\n  --sh-workline-item-wrapper-height: 5.5rem;\n  --sh-workline-item-svg-height-width: 4rem;\n  --sh-workline-item-type-info-height-width: 3.5rem;\n  --sh-workline-item-progress-circle: 3.75rem;\n  --sh-workline-item-circle-stroke-width: 0.1875rem;\n  --sh-workline-item-circle-stroke-dasharray: 6.5;\n  --sh-workline-wrapper-height: 8.375rem;\n  --sh-workline-item-label-height: 2.5rem;\n  --sh-workline-wrapper-top-padding: 0.5rem;\n  --sh-workline-item-wrapper-margin: 0.75rem;\n  --sh-workline-item-badge-wrapper-position: 0.625rem;\n  --sh-workline-item-icon-size-m: 1.5rem;\n  --sh-workline-item-triangle-height: 4.5rem;\n  --sh-workline-item-triangle-border-left-right: 0.375rem;\n  --sh-workline-item-triangle-border-top-bottom: 0.5rem;\n  --sh-workline-item-badge-slotted-position-top: -0.3125rem;\n  --sh-workline-item-badge-slotted-position-right: -0.25rem;\n  --sh-workline-item-margin: 1rem;\n  --sh-workline-item-thumbnail-width-height: 3.5rem;\n  --sh-workline-label-height: 2rem;\n  --sh-workline-right-wrapper-margin: 1rem;\n  --sh-workline-item-active-icon-size-m: 2rem;\n  --sh-workline-right-wrapper-left-padding: 1.5rem;\n  --sh-workline-item-info-line-height: 1.5rem;\n  --sh-workline-item-popover-clear-icon-padding: -0.5rem;\n  --sh-image-segment-slot-left: 0.75rem;\n  --sh-image-segment-slot-right: 0.75rem;\n  --sh-image-segment-slot-top: 0.75rem;\n  --sh-image-segment-bottom: 0.75rem;\n  --sh-image-segment-left-right-margin: 0.375rem 0;\n  --sh-image-segment-top-bottom-margin: 0 0.375rem;\n  --sh-image-segment-text-line-height: 1.5rem;\n  --sh-image-segment-corner-right-ml: 0.5rem;\n  --sh-carousel-height: 2.5rem;\n  --sh-carousel-max-width: 12rem;\n  --sh-carousel-counter-line-height: 1.5rem;\n  --sh-carousel-counter-bottom: 0.25rem;\n  --sh-carousel-counter-padding: 0.125rem 0.375rem 0.125rem 0.375rem;\n  --sh-carousel-counter-left-right: 0.375rem;\n  --sh-carousel-counter-border-radius: 0.125rem;\n  --sh-carousel-arrow-left: 0.5rem;\n  --sh-carousel-arrow-right: 0.5rem;\n  --sh-carousel-icon-width: 2.5rem;\n  --sh-carousel-icon-height: 2.5rem;\n  --sh-carousel-arrow-padding: 0.25rem;\n  --sh-thumbnail-image-wrapper-padding: 0.5rem;\n  --sh-thumbnail-label-wrapper-margin: -0.25rem 0.5rem 0.25rem 0.5rem;\n  --sh-thumbnail-label-height: 2.5rem;\n  --sh-thumbnail-image-border-radius: 0.125rem;\n  --sh-thumbnail-thumbnail-border-radius: 0.125rem;\n  --sh-thumbnail-image-wrapper-padding-condensed: 0.25rem;\n  --sh-thumbnail-label-wrapper-margin-condensed: 0rem 0.25rem 0.25rem 0.25rem;\n  --sh-thumbnail-label-line-height: 1.25rem;\n  --sh-thumbnail-icons-wrapper-margin: 0rem 0rem 0.25rem 0.25rem;\n  --sh-thumbnail-thumbnail-border: 0.0625rem;\n  --sh-thumbnail-checkbox-border-radius: 0.125rem;\n  --sh-thumbnail-new-icon-width: 0.5rem;\n  --sh-thumbnail-new-icon-height: 0.5rem;\n  --sh-thumbnail-new-icon-margin: 0.5rem;\n  --sh-thumbnail-badge-width: 1rem;\n  --sh-thumbnail-badge-margin: 0.5rem;\n  --sh-thumbnail-indications-wrapper-margin: 0.125rem 0.125rem 0 0;\n  --sh-thumbnail-indications-wrapper-margin-left: 0.25rem;\n  --sh-thumbnail-info-slot-wrapper-bottom: 0.625rem;\n  --sh-thumbnail-info-slot-wrapper-left: 0.625rem;\n  --sh-thumbnail-info-slot-wrapper-padding: 0.25rem;\n  --sh-thumbnail-checkbox-height: 2.5rem;\n  --sh-thumbnail-checkbox-width: 2.5rem;\n  --sh-thumbnail-thumbnail-icon-bottom: 0.625rem;\n  --sh-thumbnail-thumbnail-icon-right: 0.625rem;\n  --sh-thumbnail-thumbnail-checkbox-top: 0.625rem;\n  --sh-thumbnail-thumbnail-checkbox-left: 0.625rem;\n  --sh-thumbnail-label-margin-bottom: 0rem;\n  --sh-datepicker-overlay-container-height: 3rem;\n  --sh-datepicker-overlay-container-height-condensed: 2.5rem;\n  --sh-datepicker-months-grid-gap: 0.5rem;\n  --sh-datepicker-date-panel-width: 21.5rem;\n  --sh-datepicker-date-panel-padding: 1rem 0.5rem 0.5rem 0.5rem;\n  --sh-datepicker-date-panel-height: 25rem;\n  --sh-datepicker-header-area-height: 2.5rem;\n  --sh-datepicker-month-and-year-display-width: 11rem;\n  --sh-datepicker-month-and-year-display-line-height: 2.5rem;\n  --sh-datepicker-month-and-year-display-border-radius: 1.25rem;\n  --sh-datepicker-date-grid-template-rows: 2.5rem;\n  --sh-datepicker-date-grid-template-columns: 2.5rem;\n  --sh-datepicker-date-grid-gap: 0.5rem;\n  --sh-datepicker-date-grid-margin-top: 0.5rem;\n  --sh-datepicker-week-day-name-line-height: 2.5rem;\n  --sh-datepicker-date-line-height: 2.5rem;\n  --sh-datepicker-date-border-radius: 1.25rem;\n  --sh-datepicker-date-height: 2.5rem;\n  --sh-datepicker-date-width: 2.5rem;\n  --sh-datepicker-icon-dummy-width: 2.5rem;\n  --sh-datepicker-icon-dummy-height: 2.5rem;\n  --sh-datepicker-date-panel-padding-year-and-month-selector: 1rem 0.5rem 2.75rem;\n  --sh-datepicker-header-area-height-year-and-month-selector: 2.5rem;\n  --sh-datepicker-line-height-year-selector: 2.5rem;\n  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;\n  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 4.5rem;\n  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;\n  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 2rem;\n  --sh-datepicker-date-grid-margin-year-and-month-selector: 2.75rem 2.5rem 0rem 2.5rem;\n  --sh-datepicker-date-grid-width-year-and-month-selector: 15.5rem;\n  --sh-datepicker-year-height-year-selector: 2.5rem;\n  --sh-datepicker-year-line-height-year-selector: 2.5rem;\n  --sh-datepicker-year-border-radius-year-selector: 1.25rem;\n  --sh-datepicker-month-and-year-width: 6rem;\n  --sh-datepicker-month-and-year-height: 2.5rem;\n  --sh-datepicker-month-height: 2.5rem;\n  --sh-datepicker-month-line-height: 2.5rem;\n  --sh-datepicker-month-border-radius: 1.25rem;\n  --sh-splash-screen-logo-height: 3rem;\n  --sh-splash-screen-logo-padding: 0.25rem 0rem 0rem 0.25rem;\n  --sh-splash-screen-data-wrapper-width: 34.5rem;\n  --sh-splash-screen-data-wrapper-min-height: 33rem;\n  --sh-splash-screen-data-wrapper-margin: 1rem auto 0rem;\n  --sh-splash-screen-label-font-size: 2.25rem;\n  --sh-splash-screen-label-line-height: 2.5rem;\n  --sh-splash-screen-label-margin-top: 1rem;\n  --sh-splash-screen-label-margin-bottom: 2rem;\n  --sh-splash-screen-header-2-margin-top: 0.5rem;\n  --sh-splash-screen-header-2-margin-bottom: 2rem;\n  --sh-splash-screen-header-2-line-height: 1.75rem;\n  --sh-splash-screen-data-wrapper-margin-bottom-slotted: 0.5rem;\n  --sh-splash-screen-footer-wrapper-margin-top: 1.5rem;\n  --sh-splash-screen-footer-wrapper-margin-bottom: 1rem;\n  --sh-splash-screen-footer-wrapper-margin-left-slotted-items: 0.75rem;\n  --sh-splash-screen-footer-text-margin-top: 1rem;\n  --sh-splash-screen-footer-text-min-height: 2.75rem;\n  --sh-splash-screen-footer-text-slotted-margin-bottom: 0.25rem;\n  --sh-splash-screen-modal-min-height: 42rem;\n  --sh-splash-screen-modal-width: 60rem;\n  --sh-splash-screen-image-margin: -1rem -1rem -1rem 1rem;\n  --sh-splash-screen-image-border-radius: 0rem 0.125rem 0.125rem 0rem;\n  --sh-list-item-padding: 0.25rem 1rem;\n  --sh-list-item-min-height: 2.5rem;\n  --sh-list-item-icon-margin: 0.5rem;\n  --sh-list-item-line-height: 1.5rem;\n  --sh-list-item-info-line-height: 1.25rem;\n  --sh-list-item-text-padding: 0.5rem 0;\n  --sh-list-item-arrow-right-margin: 0.5rem;\n  --sh-list-item-text-wrapper-left-margin: 0.5rem;\n  --sh-list-item-select-margin-right: 0.5rem;\n  --sh-list-item-right-slotted-margin: 0.75rem;\n  --sh-list-item-icon-size-s: 2.5rem;\n  --sh-list-item-bottom-first-margin: 1rem;\n  --sh-list-item-bottom-slot-margin: 0.75rem;\n  --sh-list-item-content-line-height: 1.5rem;\n  --sh-list-item-checkbox-right: 0rem;\n  --sh-list-item-select-wrapper-size: 2.5rem;\n  --sh-list-item-info-margin: 0.125rem 0;\n  --sh-list-item-left-slotted-margin: 0.25rem;\n  --sh-list-item-right-slotted-first-margin: 0.5rem;\n  --sh-list-item-divider-inset-margin: 1rem;\n  --sh-list-integrated-margin: 0 -1rem;\n  --sh-list-integrated-arrow-margin: 0.5rem;\n  --sh-table-cell-icon-min-width: 4rem;\n  --sh-table-cell-wrapper-margin: 0.5rem 0.75rem;\n  --sh-table-cell-line-height: 2.5rem;\n  --sh-table-cell-mobile-wrapper-margin: 0.5rem;\n  --sh-table-cell-condensed-wrapper-margin: 0.25rem 0.75rem;\n  --sh-table-cell-first-nested-padding: 3.5rem;\n  --sh-table-cell-nested-padding: 2.75rem;\n  --sh-table-cell-first-nested-padding-checkbox: 5rem;\n  --sh-table-cell-nested-padding-checkbox: 2.5rem;\n  --sh-table-cell-icon-cell-min-width: 4rem;\n  --sh-table-cell-icon-checkbox-cell-min-width: 4rem;\n  --sh-table-cell-inset: 2.5rem;\n  --sh-table-cell-checkbox-margin-top: 0.2rem;\n  --sh-table-head-icon-min-width: 4rem;\n  --sh-table-head-line-height: 2.5rem;\n  --sh-table-head-wrapper-margin: 0.5rem 0.75rem;\n  --sh-table-head-condensed-wrapper-margin: 0.25rem 0.75rem;\n  --sh-table-head-mobile-wrapper-margin: 0.5rem;\n  --sh-table-head-sort-icon-margin: 0.3rem 0;\n  --sh-table-head-condensed-wrapper-height: 2.5rem;\n  --sh-table-head-header-wrapper-height: 2.5rem;\n  --sh-table-head-padding-left: 3rem;\n  --sh-table-head-checkbox-margin-top: 0.1875rem;\n  --sh-table-cell-padding-left: 3rem;\n  --sh-table-row-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));\n  --sh-table-row-header-slot-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-4));\n  --sh-table-row-initial-icon-left: 3rem;\n  --sh-table-row-multiselect-checkbox-left: 2.5rem;\n  --sh-table-row-nested-expand-collapse-left: 0.5rem;\n  --sh-table-row-arrow-inset: 2.75rem;\n  --sh-interactive-area-display: block;\n  --sh-interactive-area-min-touch-size: 3rem;\n  --scrollbar-size: 0.5rem;\n  --scrollbar-corner-radius: 0.25rem ;\n}\n@media (max-width: 62rem) {\n  [sh-scale=m] sh-splash-screen::part(splash-image) {\n    display: none;\n  }\n  [sh-scale=m] sh-splash-screen::part(splash-content-wrapper) {\n    width: 100% !important;\n  }\n  [sh-scale=m] sh-splash-screen::part(splash-info) {\n    text-align: center;\n  }\n  [sh-scale=m] sh-splash-screen::part(splash-card) {\n    height: 100% !important;\n    width: 100% !important;\n    max-height: unset !important;\n    max-width: unset !important;\n    min-height: fit-content;\n  }\n}\n\n[sh-scale=l] {\n  --font-size: 1rem;\n  --font-size-super-header: 1.5rem;\n  --font-size-header-1: 1.25rem;\n  --font-size-header-2: 1.25rem;\n  --font-size-title-1: 1.125rem;\n  --font-size-title-2: 1rem;\n  --font-size-body-1: 1.125rem;\n  --font-size-body-2: 1rem;\n  --line-height: 1.5rem;\n  --super-header: normal 400 var(--font-size-super-header, calc(var(--font-size) * 1.25)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-1: normal 400 var(--font-size-header-1, var(--font-size)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-2: normal 700 var(--font-size-header-2, var(--font-size)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-1: normal 700 var(--font-size-title-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-2: normal 700 var(--font-size-title-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-1: normal 400 var(--font-size-body-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-2: normal 400 var(--font-size-body-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --sh-empty-state-icon-size: 5rem;\n  --sh-empty-state-text-width: 31rem;\n  --sh-empty-state-margin: 1.25rem;\n  --sh-menu-item-item-height: 3.5rem;\n  --sh-menu-item-label-line-height: 1.75rem;\n  --sh-menu-item-item-padding: 0.5rem 0rem;\n  --sh-menu-item-item-padding-hover: 0.5rem 0.75rem;\n  --sh-menu-item-item-margin-hover: 0 -0.75rem;\n  --sh-menu-item-item-width: calc(100% + 1.5rem);\n  --sh-menu-item-icon-right-margin: 0.75rem;\n  --sh-menu-item-vertical-item-padding: 0.75rem;\n  --sh-menu-item-vertical-icon-margin: 0rem auto 0.75rem;\n  --sh-menu-item-chapter-wrapper-margin-left: 5.25rem;\n  --sh-menu-item-chapter-arrow-margin-right: 0.75rem;\n  --sh-menu-item-chapter-sibling-margin-left: 3.75rem;\n  --sh-menu-item-chapter-sibling-margin-left-hover: 3rem;\n  --sh-menu-item-functions-slot-margin: 0rem 0rem 0rem -3rem;\n  --sh-menu-item-icon-size: 2.5rem;\n  --sh-menu-item-button-icon-right-xs: -0.75rem;\n  --sh-menu-item-button-icon-right-s: -0.5rem;\n  --sh-menu-item-button-icon-right-m: -0.25rem;\n  --sh-menu-item-button-icon-margin-left-xs: -1rem;\n  --sh-menu-item-button-icon-margin-left-s: -0.5rem;\n  --sh-menu-item-button-icon-margin-left-m: 0rem;\n  --sh-menu-item-button-icon-margin-left-l: 0.5rem;\n  --sh-dropdown-overlay-padding: 0 0.75rem;\n  --sh-dropdown-icon-label-padding-left: 4rem;\n  --sh-dropdown-icon-input-padding: 1.75rem 0 0.1875rem 4rem;\n  --sh-dropdown-icon-top: 0.5rem;\n  --sh-dropdown-icon-left: 0.75rem;\n  --sh-dropdown-label-pointer-event: all;\n  --sh-dropdown-error-success-icon-left-margin: 0.5rem;\n  --sh-dropdown-icon-wrapper-left-margin: 0.5rem;\n  --sh-dropdown-label-disabled-pointer-event: none;\n  --sh-dropdown-condensed-input-padding: 0.25rem 0 0.1875rem 3.5rem;\n  --sh-dropdown-arrow-icon-size: 2.9375rem;\n  --sh-dropdown-overlay-height: 3.5rem;\n  --sh-dropdown-overlay-condensed-height: 3rem;\n  --sh-dropdown-overlay-max-height: 19.25rem;\n  --sh-dropdown-input-cursor: pointer;\n  --sh-dropdown-transition-time: 0s;\n  --sh-icon-size-xs: 3rem;\n  --sh-icon-size-s: 3rem;\n  --sh-icon-size-m: 3rem;\n  --sh-icon-size-l: 3.5rem;\n  --sh-icon-font-size-xs: 1.5rem;\n  --sh-icon-font-size-s: 2rem;\n  --sh-icon-font-size-m: 2.5rem;\n  --sh-icon-font-size-l: 3.5rem;\n  --sh-icon-badge-bottom: calc(100% - 0.375rem);\n  --sh-icon-badge-left: calc(100% - 0.375rem);\n  --sh-icon-active-padding-size-xs: 0.75rem;\n  --sh-icon-active-padding-size-s: 0.5rem;\n  --sh-icon-active-padding-size-m: 0.25rem;\n  --sh-icon-active-padding-size-l: 0rem;\n  --sh-icon-border-radius: 0.125rem;\n  --sh-badge-min-width: 1.25rem;\n  --sh-badge-max-width: 5rem;\n  --sh-badge-height: 1.25rem;\n  --sh-badge-line-height: 1.25rem;\n  --sh-badge-font-size: 0.6875rem;\n  --sh-badge-no-label-size: 0.75rem;\n  --sh-badge-padding: 0rem 0.375rem;\n  --sh-badge-icon-font-size: 1.25rem;\n  --sh-badge-label-type-padding: 0rem 0.375rem 0rem 0.125rem;\n  --sh-badgeline-height: 1.25rem;\n  --sh-button-width-size-s: 7.5rem;\n  --sh-button-width-size-m: 12rem;\n  --sh-button-width-size-l: 14.5rem;\n  --sh-button-label-line-height: 1.75rem;\n  --sh-button-button-height: 3rem;\n  --sh-button-button-border-radius: 1.5rem;\n  --sh-button-button-padding: 0.625rem 1.25rem;\n  --sh-button-icon-width: 3.5rem;\n  --sh-button-icon-height: 3.5rem;\n  --sh-button-icon-size: 2.5rem;\n  --sh-min-touch-size: 3.5rem;\n  --sh-button-padding-right-left: 2.5rem;\n  --sh-button-icon-label-margin-right: 0.5rem;\n  --sh-button-icon-size-s: 2rem;\n  --sh-button-button-padding-icon-position: 0.625rem 1.5rem 0.625rem 1.25rem;\n  --sh-text-super-header-line-height: 2rem;\n  --sh-text-header-line-height: 1.75rem;\n  --sh-text-title1-line-height: 1.75rem;\n  --sh-text-title2-line-height: 1.5rem;\n  --sh-text-body1-line-height: 1.75rem;\n  --sh-text-body2-line-height: 1.5rem;\n  --sh-toggle-height: 2rem;\n  --sh-toggle-border-radius: 1.5rem;\n  --sh-toggle-circle-dimension: 1.5rem;\n  --sh-toggle-width: 3.5rem;\n  --sh-toggle-margin: 0.25rem 1rem 0.25rem 0.25rem;\n  --sh-toggle-circle-top: 0.125rem;\n  --sh-toggle-circle-left: 0.125rem;\n  --sh-toggle-active-left: 1.625rem;\n  --sh-toggle-line-height: 2rem;\n  --sh-toggle-label-line-height: 1.75rem;\n  --sh-toggle-label-padding: 0.375rem 0rem;\n  --sh-min-touch-size: 3.5rem;\n  --sh-checkbox-inner-width: 1.5rem;\n  --sh-checkbox-inner-height: 1.5rem;\n  --sh-checkbox-outer-width: 2.5rem;\n  --sh-checkbox-outer-height: 2.5rem;\n  --sh-checkbox-label-line-height: 1.75rem;\n  --sh-checkbox-margin-right: 0.5rem;\n  --sh-checkbox-tick-line-height: 1.365rem;\n  --sh-checkbox-margin-around-checkbox: 0.5rem;\n  --sh-checkbox-text-indent: 0rem;\n  --sh-checkbox-label-width: 3rem;\n  --sh-checkbox-tick-font-size: 1.25rem;\n  --sh-checkbox-padding: 0rem;\n  --sh-min-touch-size: 3.5rem;\n  --sh-checkbox-label-padding: 0.375rem 0rem;\n  --sh-checkbox-border-width: 0.125rem;\n  --sh-breadcrumb-item-item-height: 3rem;\n  --sh-breadcrumb-item-item-max-width: 14rem;\n  --sh-breadcrumb-item-item-line-height: 1.75rem;\n  --sh-breadcrumb-item-item-icon-margin: 3rem;\n  --sh-breadcrumb-item-item-icon-width: 2.5rem;\n  --sh-radio-button-container-margin: 0;\n  --sh-radio-button-label-line-height: 1.75rem;\n  --sh-radio-button-label-padding: 0.5rem;\n  --sh-radio-button-label-margin: 0.375rem 0;\n  --sh-radio-button-width: 2.5rem;\n  --sh-radio-button-height: 2.5rem;\n  --sh-radio-button-pseudo-width: 1.5rem;\n  --sh-radio-button-pseudo-height: 1.5rem;\n  --sh-radio-button-pseudo-margin: 0.5rem;\n  --sh-radio-button-pseudo-border-width: 0.125rem;\n  --sh-radio-button-pseudo-border-width-active: 0.4375rem;\n  --sh-min-touch-size: 3.5rem;\n  --sh-radio-group-margin: 1.5rem;\n  --sh-radio-group-horizontal-gap: 1.5rem 2rem;\n  --sh-tag-container-height: 3rem;\n  --sh-tag-wrapper-border: 0.0625rem;\n  --sh-tag-padding: 0 0.75rem;\n  --sh-tag-label-line-height: 3rem;\n  --sh-tag-icon-padding: 0 0 0 0.5rem;\n  --sh-tag-border-radius: 0.125rem;\n  --sh-tag-condensed-container-height: 2.5rem;\n  --sh-tag-condensed-icon-padding: 0 0 0 0.25rem;\n  --sh-spinner-width-s: 2.5rem;\n  --sh-spinner-height-s: 2.5rem;\n  --sh-spinner-width-m: 3.5rem;\n  --sh-spinner-height-m: 3.5rem;\n  --sh-spinner-label-height: 1.75rem;\n  --sh-spinner-label-line-height: 1.75rem;\n  --sh-spinner-margin-top: 0.5rem;\n  --sh-tooltip-max-content-width: 33.5rem;\n  --sh-tooltip-content-padding: 0.5rem 0.75rem;\n  --sh-tooltip-label-line-height: 1.5rem;\n  --sh-tooltip-padding-title: 0.75rem 0.75rem;\n  --sh-tooltip-title-line-height: 1.25rem;\n  --sh-switch-item-height: 3rem;\n  --sh-switch-item-width: 6rem;\n  --sh-switch-item-padding: 1rem 1.25rem;\n  --sh-switch-item-border-radius: 1.75rem;\n  --sh-switch-item-label-alignment: center;\n  --sh-switch-border-radius: 1.75rem;\n  --sh-switch-condensed-border-radius: 1.5rem;\n  --sh-switch-item-condensed-border-radius: 1.5rem;\n  --sh-switch-item-condensed-height: 2rem;\n  --sh-switch-item-condensed-padding: 0.5rem 1.25rem;\n  --sh-switch-item-icon-margin: 0.5rem 3rem;\n  --sh-switch-item-label-height: 1.5rem;\n  --sh-switch-item-icon-height: 2.5rem;\n  --sh-switch-item-icon-width: 2.5rem;\n  --sh-min-touch-size: 3.5rem;\n  --sh-search-icon-top: 0.25rem;\n  --sh-search-icon-left: 0.25rem;\n  --sh-search-input-height: 3.5rem;\n  --sh-search-value-line-height: 1.75rem;\n  --sh-search-input-padding: 0.875rem 1rem 0.875rem 3.5rem;\n  --sh-search-input-padding-right: 3.5rem;\n  --sh-search-border-radius: 0.125rem 0.125rem 0rem 0rem;\n  --sh-search-border-bottom-thickness: 0.0625rem;\n  --sh-search-list-item-height: 3.5rem;\n  --sh-search-single-line-list-item-padding: 0.875rem 0.75rem;\n  --sh-search-list-item-line-height: 1.75rem;\n  --sh-search-close-icon-right: 0.25rem;\n  --sh-search-multi-line-list-item-padding: 0.25rem 0.75rem;\n  --sh-search-multi-line-list-item-height: 3.5rem;\n  --sh-search-multi-line-single-item-height: 1.5rem;\n  --sh-search-empty-slot-item-gap: 1.25rem;\n  --sh-search-empty-wrapper-padding: var(--sh-search-empty-slot-item-gap) 0.75rem;\n  --sh-search-list-view-max-height: 19.25rem;\n  --sh-input-text-label-left: 0.75rem;\n  --sh-input-text-empty-label-top: 0.875rem;\n  --sh-input-text-empty-label-line-height: 1.75rem;\n  --sh-input-text-empty-padding: 0.875rem 0 0.8125rem 0.75rem;\n  --sh-input-text-height: 3.4375rem;\n  --sh-input-text-padding: 1.75rem 0 0.1875rem 0.75rem;\n  --sh-input-text-label-top: 0.25rem;\n  --sh-input-text-label-line-height: 1.5rem;\n  --sh-input-text-empty-no-border-padding-bottom: 0.875rem;\n  --sh-input-text-no-border-padding-bottom: 0.25rem;\n  --sh-input-text-no-border-condensed-padding-bottom: 0.625rem;\n  --sh-input-text-icon-left-margin: 0.5rem;\n  --sh-input-text-slot-icon-left-margin: 0.5rem;\n  --sh-input-text-icon-wrapper-right-padding: 0.75rem;\n  --sh-input-text-icon-size: 2.9375rem;\n  --sh-input-text-icon-wrapper-margin: 0.25rem;\n  --sh-input-text-helper-text-padding: 0.25rem 0.75rem 0;\n  --sh-input-text-condensed-label-top: 0.625rem;\n  --sh-input-text-condensed-padding: 0.625rem 0 0.5625rem 0.75rem;\n  --sh-input-text-condensed-height: 2.9375rem;\n  --sh-input-text-textarea-label-height: 2rem;\n  --sh-input-text-textarea-label-padding: 0.5rem 0 0.75rem 0.75rem;\n  --sh-input-text-textarea-padding: 0 0.75rem 0.4375rem;\n  --sh-input-text-textarea-line-height: 1.75rem;\n  --sh-input-text-textarea-empty-label-line-height: 1.75rem;\n  --sh-input-text-condensed-textarea-top: 0.5rem;\n  --sh-input-text-condensed-textarea-padding: 0.5rem 0 0.4375rem 0.75rem;\n  --sh-input-text-textarea-label-line-height: 1.5rem;\n  --sh-input-text-condensed-textarea-icon-top: 0rem;\n  --sh-input-text-pointer-events: none;\n  --sh-input-text-label-condensed-display: none;\n  --sh-input-text-input-cursor: text;\n  --sh-accordion-header-wrapper-min-height: 3.5rem;\n  --sh-accordion-container-padding-left-right: 0rem 1.25rem;\n  --sh-accordion-wrapper-padding-bottom: 1.25rem;\n  --sh-accordion-content-wrapper-width: 1.25rem;\n  --sh-accordion-label-line-height: 1.75rem;\n  --sh-accordion-expand-icon-margin: 0.25rem -0.5rem 0.25rem 0;\n  --sh-accordion-icon-padding: 0.715rem 0.75rem 0.715rem 0;\n  --sh-accordion-content-items-margin-top: 1.25rem;\n  --sh-accordion-content-items-margin-top-touch: 1.25rem;\n  --sh-accordion-content-first-item-margin-top: 0.625rem;\n  --sh-accordion-header-label-info-padding: 0.875rem 0.75rem 0.875rem 0;\n  --sh-accordion-arrow-invert-margin-right: 0.25rem 0.5rem 0.25rem 0;\n  --sh-accordion-content-wrapper-line-height: 1.75rem;\n  --sh-user-identifier-margin-left: 0.75rem;\n  --sh-user-identifier-height: 1.5rem;\n  --sh-user-identifier-circle-dimension: 2.5rem;\n  --sh-user-identifier-image-circle: 3rem;\n  --sh-user-identifier-margin: 0.25rem;\n  --sh-user-identifier-max-width: 13rem;\n  --sh-stepper-circle-dimension: 2.5rem;\n  --sh-stepper-circle-line-height: 2.5rem;\n  --sh-stepper-label-line-height: 1.75rem;\n  --sh-stepper-info-line-height: 1.5rem;\n  --sh-stepper-info-margin-top: 0.125rem;\n  --sh-stepper-line-top: 1.25rem;\n  --sh-stepper-line-width: 2rem;\n  --sh-stepper-line-border-width: 0.1875rem;\n  --sh-stepper-badge-top: -0.5rem;\n  --sh-stepper-badge-right: -0.5rem;\n  --sh-stepper-icon-size: 1.5rem;\n  --sh-stepper-font-size: 1.25rem;\n  --sh-stepper-border-width: 0.1875rem;\n  --sh-stepper-condensed-circle-dimension: 1.125rem;\n  --sh-stepper-condensed-border-width: 0.1875rem;\n  --sh-stepper-condensed-badge-top: -0.1875rem;\n  --sh-stepper-condensed-badge-right: -0.25rem;\n  --sh-stepper-condensed-line-top: 0.5625rem;\n  --sh-stepper-condensed-line-width: 0.875rem;\n  --sh-stepper-vertical-stepper-wrapper-min-height: 5.375rem;\n  --sh-stepper-condensed-vertical-stepper-wrapper-min-height: 2.125rem;\n  --sh-stepper-label-info-padding: 1rem 0rem;\n  --sh-stepper-condensed-label-info-padding: 0.5rem 0rem;\n  --sh-stepper-label-info-margin-left: 0.5rem;\n  --sh-stepper-condensed-label-info-margin-left: 0.0625rem;\n  --sh-stepper-vertical-stepper-circle-margin: 0.5rem 0rem;\n  --sh-stepper-vertical-line-left: 1.1875rem;\n  --sh-stepper-vertical-condensed-circle-margin: 0.25rem 0rem;\n  --sh-stepper-vertical-condensed-line-left: 0.5rem;\n  --sh-stepper-vertical-line-height: 1.75rem;\n  --sh-stepper-vertical-condensed-line-height: 0.8125rem;\n  --sh-nav-bar-nav-bar-wrapper-height: 4rem;\n  --sh-nav-bar-condensed-nav-bar-wrapper-height: 3.5rem;\n  --sh-nav-bar-functions-wrapper-gap: 0.75rem;\n  --sh-nav-bar-functions-wrapper-padding: 0 0 0 1.25rem;\n  --sh-nav-bar-nav-bar-wrapper-padding: 0 1.25rem;\n  --sh-value-indicator-s-label-line-height: 1.5rem;\n  --sh-value-indicator-l-label-line-height: 1.75rem;\n  --sh-value-indicator-s-value-line-height: 2.625rem;\n  --sh-value-indicator-l-value-line-height: 5rem;\n  --sh-value-indicator-l-unit-line-height: 3.375rem;\n  --sh-value-indicator-s-unit-line-height: 1.75rem;\n  --sh-value-indicator-l-unit-font-size: 2.25rem;\n  --sh-value-indicator-s-unit-font-size: 1.125rem;\n  --sh-value-indicator-s-unit-padding-top: 0.75rem;\n  --sh-value-indicator-l-unit-padding-top: 2rem;\n  --sh-value-indicator-l-icon-size-m: 5rem;\n  --sh-value-indicator-s-icon-size-m: 2.5rem;\n  --sh-value-indicator-s-icon-font-size-m: 2.5rem;\n  --sh-value-indicator-l-icon-font-size-m: 5rem;\n  --sh-value-indicator-l-label-font-size: 1.25rem;\n  --sh-value-indicator-s-label-font-size: 1.125rem;\n  --sh-value-indicator-l-value-font-size: 4.5rem;\n  --sh-value-indicator-s-value-font-size: 2.25rem;\n  --sh-value-indicator-s-status-size-m: 2rem;\n  --sh-value-indicator-s-status-font-size-m: 2rem;\n  --sh-value-indicator-s-icon-margin-right: 0.5rem;\n  --sh-value-indicator-l-icon-margin-right: 0.75rem;\n  --sh-notification-width: 22rem;\n  --sh-notification-item-header-margin: 0.75rem 0.75rem 0 1.25rem;\n  --sh-notification-item-header-icon-margin: 0.5rem 0.75rem 0.5rem 0;\n  --sh-notification-item-header-line-height: 1.75rem;\n  --sh-notification-item-header-max-height: 3.5rem;\n  --sh-notification-item-header-text-margin: 0.625rem 0.75rem 0.625rem 0;\n  --sh-notification-item-header-close-button-margin: 0rem 0.75rem 0 0;\n  --sh-notification-item-description-container-margin: 0.75rem 1.25rem 1.25rem 1.25rem;\n  --sh-notification-item-no-label-description-container-margin: 0.75rem 0.75rem 1.25rem 1.25rem;\n  --sh-notification-item-description-icon-margin: 0.5rem 0.75rem 0 0;\n  --sh-notification-item-description-line-height: 1.75rem;\n  --sh-notification-item-description-text-margin: 0.625rem 0.75rem 0rem 0;\n  --sh-notification-item-description-close-button-margin: -1rem;\n  --sh-notification-item-footer-margin: 0 1.25rem 1.25rem 1.25rem;\n  --sh-notification-item-description-slot-elements-margin-top: 1.25rem;\n  --sh-notification-item-badge-margin: 1.125rem 1rem 0.5rem 1rem;\n  --sh-notification-item-footer-slot-child-margin-left: 0.75rem;\n  --sh-input-number-icon-size: 2.9375rem;\n  --sh-input-number-input-right-padding: 0.5rem;\n  --sh-input-number-left-icon-padding: 0 0 0 0.5rem;\n  --sh-input-number-right-icon-padding: 0 0 0 0.5rem;\n  --sh-input-number-status-text-padding: 0.25rem 0.75rem 0 0.75rem;\n  --sh-numeric-keypad-width: 13rem;\n  --sh-numeric-keypad-height: 17.75rem;\n  --sh-numeric-keypad-circle-button-height: 3.5rem;\n  --sh-numeric-keypad-circle-button-width: 3.5rem;\n  --sh-numeric-keypad-container-padding: 1.25rem;\n  --sh-numeric-keypad-button-margins: 0.625rem;\n  --sh-numeric-keypad-button-center-margin: 0 0.625rem;\n  --sh-pane-wrapper-width: 22.5rem;\n  --sh-pane-wrapper-padding: 1.25rem;\n  --sh-pane-arrow-placement-padding: 1rem;\n  --sh-pane-arrow-position: -2.5rem;\n  --sh-pane-condensed-width: 8rem;\n  --sh-pane-body-wrapper-margin: 1.25rem;\n  --sh-pane-arrow-wrapper-padding: 0.25rem 0;\n  --sh-pane-slot-child-margin-left: 0.75rem;\n  --sh-pane-functions-slot-last-child-margin: -0.25rem -0.25rem 0 var(--sh-pane-slot-child-margin-left);\n  --sh-pane-functions-slot-not-last-child-margin: -0.25rem 0rem 0 var(--sh-pane-slot-child-margin-left);\n  --sh-pane-arrow-icon-size: 2.5rem;\n  --sh-pane-body-wrapper-line-height: 1.75rem;\n  --sh-progress-header-line-height: 1.75rem;\n  --sh-progress-progress-bar-height: 0.625rem;\n  --sh-progress-info-line-height: 1.75rem;\n  --sh-progress-header-margin-bottom: 0.625rem;\n  --sh-progress-footer-margin-top: 0rem;\n  --sh-progress-radial-header-margin-bottom: 0.5rem;\n  --sh-progress-radial-progress-height-xs: 1.5rem;\n  --sh-progress-radial-progress-ring-width-xs: 0.25rem;\n  --sh-progress-radial-progress-height-s: 2.5rem;\n  --sh-progress-radial-progress-ring-width-s: 0.375rem;\n  --sh-progress-radial-progress-height-m: 5rem;\n  --sh-progress-radial-progress-ring-width-m: 0.5rem;\n  --sh-progress-radial-progress-height-l: 9rem;\n  --sh-progress-radial-progress-ring-width-l: 0.625rem;\n  --sh-progress-radial-progress-height-xl: 18rem;\n  --sh-progress-radial-progress-ring-width-xl: 0.75rem;\n  --sh-progress-indeterminate-bar-length: 7.5rem;\n  --sh-progress-radial-progress-label-width-m: 3.5rem;\n  --sh-progress-radial-progress-label-width-l: 6.5rem;\n  --sh-progress-radial-progress-label-width-xl: 13rem;\n  --sh-pagination-wrapper-height: 3rem;\n  --sh-pagination-height: 2.5rem;\n  --sh-pagination-width: 2rem;\n  --sh-pagination-line-height: 2.5rem;\n  --sh-pagination-li-right-margin: 1rem;\n  --sh-pagination-border-radius: 1.25rem;\n  --sh-pagination-prev-page-icon-right-margin: 1rem;\n  --sh-pagination-next-page-icon-left-margin: 0;\n  --sh-pagination-page-number-padding: 0rem 0.25rem;\n  --sh-min-touch-size: 3.5rem;\n  --sh-popover-min-width: 16rem;\n  --sh-popover-width: 20rem;\n  --sh-popover-current-scale: l;\n  --sh-popover-header-padding: 0.75rem 0.75rem 0rem 1.25rem;\n  --sh-popover-body-padding: 0.75rem 1.25rem 1.25rem;\n  --sh-popover-body-wrapper-margin-bottom: 1.25rem;\n  --sh-popover-footer-padding: 0 1.25rem 1.25rem;\n  --sh-popover-header-padding-with-empty-function-slot: 1.25rem;\n  --sh-popover-label-padding: 0.625rem 0;\n  --sh-popover-headerless-body-top-padding: 1.25rem;\n  --sh-popover-gap-between-footer-slot-elements: 0.75rem;\n  --sh-popover-gap-between-function-slot-elements: var(--sh-popover-gap-between-footer-slot-elements);\n  --sh-popover-label-margin-right: 0.75rem;\n  --sh-popover-label-line-height: 1.75rem;\n  --sh-popover-header-icon-margin-right: 0.75rem;\n  --sh-popover-content-line-height: 1.75rem;\n  --sh-popover-arrow-border-width: 0rem 0.5625rem 0.75rem 0.5625rem;\n  --sh-popover-arrow-transform-origin: 0.5625rem 0.75rem;\n  --sh-popover-submenu-translateY: -0.75rem;\n  --sh-split-button-icon-wrapper-width: 3.5rem;\n  --sh-split-button-current-scale: l;\n  --sh-min-touch-size: 3.5rem;\n  --sh-card-padding: 0.75rem 1.25rem;\n  --sh-card-label-height: 1.75rem;\n  --sh-card-icon-margin-right: 0.75rem;\n  --sh-card-icon-line-height: 2rem;\n  --sh-card-icon-width: 2rem;\n  --sh-card-header-wrapper-padding: 1.25rem;\n  --sh-card-slot-not-name-padding: 0rem 1.25rem;\n  --sh-card-border-radius: 0.125rem;\n  --sh-card-slot-not-name-line-height: 1.75rem;\n  --sh-card-header-tab-margin-top: -1rem;\n  --sh-card-empty-header-not-empty-content-padding: 1.25rem;\n  --sh-card-empty-footer-not-empty-content-padding: 1.25rem;\n  --sh-card-image-icon-label-wrapper-padding: 0.75rem;\n  --sh-card-footer-margin: 1.25rem;\n  --sh-card-functions-slot-margin-left-first-child: 0.75rem;\n  --sh-card-footer-slot-margin-left-first-child: 1.25rem;\n  --sh-card-footer-margin-left-not-first-child: 0.75rem;\n  --sh-card-href-card-icon-empty-content: 0.5rem;\n  --sh-card-href-label-wrapper-empty-content-not-image-padding: 1.25rem;\n  --sh-card-label-icon-badge-margin: 0.5rem 0;\n  --sh-card-label-padding: 0.125rem 0rem;\n  --sh-card-icon-font-size-l: 3.5rem;\n  --sh-card-href-not-image-not-empty-footer-slot-margin: 0 1.25rem;\n  --sh-card-href-not-image-not-empty-footer-slot-padding: 1.25rem 0;\n  --sh-card-href-label-padding: 0.25rem 0 0 0;\n  --sh-drawer-width: 24rem;\n  --sh-drawer-header-wrapper-padding: 1.25rem;\n  --sh-drawer-label-wrapper-padding: 0.75rem 1.25rem;\n  --sh-drawer-gap-between-function-footer-slot-elements: 0.75rem;\n  --sh-drawer-body-wrapper-padding: 0 1.25rem;\n  --sh-drawer-menu-item-margin-top: 0rem;\n  --sh-drawer-headerless-body-wrapper-padding-top: 1.25rem;\n  --sh-drawer-footerless-body-wrapper-padding-bottom: var(--sh-drawer-headerless-body-wrapper-padding-top);\n  --sh-drawer-body-wrapper-margin-bottom: 1.25rem;\n  --sh-drawer-footer-wrapper-padding: var(--sh-drawer-footerless-body-wrapper-padding-bottom);\n  --sh-drawer-top-bottom-min-height: 12rem;\n  --sh-drawer-label-line-height: 1.75rem;\n  --sh-drawer-label-padding: 0.625rem 0;\n  --sh-drawer-label-margin-right: 0.75rem;\n  --sh-drawer-touch-gap-between-function-footer-slot-elements: 0.75rem;\n  --sh-drawer-body-wrapper-line-height: 1.75rem;\n  --sh-drawer-scrollpicker-padding: 1.25rem;\n  --sh-risk-score-sizeS: 5rem;\n  --sh-risk-score-sizeL: 8.75rem;\n  --sh-risk-score-radial-s-width: 3.5rem;\n  --sh-risk-score-radial-s-lh: 1.75rem;\n  --sh-risk-score-radial-l-width: 6.5rem;\n  --sh-risk-score-radial-l-lh: 2.75rem;\n  --sh-risk-score-lw-height: 0.375rem;\n  --sh-risk-score-lw-mrg-btm: 0.625rem;\n  --sh-risk-score-riskbar-mrg-left: 0.375rem;\n  --sh-risk-score-hw-mrg-btm: 0.625rem;\n  --sh-risk-score-hw-line-height: 1.75rem;\n  --sh-page-body-wrapper-padding: 1.25rem;\n  --sh-tab-item-text-line-height: 1.75rem;\n  --sh-tab-item-icon-height: 4rem;\n  --sh-tab-item-icon-line-height: 2.5rem;\n  --sh-tab-item-icon-padding: 0.75rem 1.25rem 0.625rem;\n  --sh-tab-item-icon-label-height: 4rem;\n  --sh-tab-item-icon-label-padding: 0.125rem 1.25rem 0rem;\n  --sh-tab-item-icon-label-padding-access-bar: 0.75rem 1rem;\n  --sh-tab-item-icon-label-line-height: 2.5rem;\n  --sh-tab-item-condensed-icon-padding: 0.5rem 1.25rem 0.375rem;\n  --sh-tab-item-condensed-icon-line-height: 2.5rem;\n  --sh-tab-item-condensed-icon-height: 3.5rem;\n  --sh-tab-item-access-bar-icon-height: 5.5rem;\n  --sh-tab-item-access-bar-icon-padding: 1.5rem 1.25rem 1.375rem;\n  --sh-tab-item-access-bar-icon-line-height: 2.5rem;\n  --sh-tab-item-patient-height: 5.5rem;\n  --sh-tab-item-condensed-height: 3.5rem;\n  --sh-tab-item-normal-height: 4rem;\n  --sh-tab-item-arrow-icons-padding: 0 0.25rem;\n  --sh-tab-item-arrow-icons-line-height: 3rem;\n  --sh-tab-item-tab-item-padding: 1.125rem 1.25rem 1rem;\n  --sh-tab-item-tab-item-line-height: 1.75rem;\n  --sh-tab-item-access-bar-padding: 1.875rem 1.25rem 1.75rem;\n  --sh-tab-item-access-bar-height: 5.5rem;\n  --sh-tab-item-access-bar-line-height: 1.75rem;\n  --sh-tab-item-condensed-padding: 0.875rem 1.25rem 0.75rem;\n  --sh-tab-item-condensed-line-height: 1.75rem;\n  --sh-tab-item-badge-margin: -1.4375rem -0.5rem 0rem 0.5rem;\n  --sh-tab-item-empty-badge-margin: -1.825rem -0.375rem 0rem 0.625rem;\n  --sh-tab-item-slottedfn-mg-right: 3.25rem;\n  --sh-tab-item-slottedfn-mg-left: -0.5rem;\n  --sh-tab-item-close-icon-right: 0.25rem;\n  --sh-tab-item-patient-mg-left: 0.25rem;\n  --sh-tab-item-patient-mg-right: 0.5rem;\n  --sh-tab-item-pt-label-lh: 1.375rem;\n  --sh-tab-item-pt-info-lh: 1.375rem;\n  --sh-tab-item-close-icon-top: 0.25rem;\n  --sh-tab-item-close-icon-accessbar-top: 0.25rem;\n  --sh-tab-item-close-icon-accessbar-right: 0.25rem;\n  --sh-tab-item-condensed-empty-badge-margin: -1.4rem -0.6rem 0.5rem 0.5rem;\n  --sh-tab-item-condensed-badge-margin: -0.9rem -0.7rem 0.5rem 0.5rem;\n  --sh-tab-item-tab-close-margin: 0.65rem;\n  --sh-tab-item-tab-min-width: 4.5rem;\n  --sh-tab-item-tab-max-width: 14.5rem;\n  --sh-tab-item-tab-l-max-width: 30.5rem;\n  --sh-tab-item-patient-active-max-width: 22.5rem;\n  --sh-tab-item-patient-min-width: 14.5rem;\n  --sh-tab-item-patient-text-margin-right: 2.25rem;\n  --sh-tab-item-condensed-patient-collapsed-input-height: 3.5rem;\n  --sh-tab-item-condensed-patient-collapsed-input-padding: 0rem 0.5rem 0rem 0.25rem;\n  --sh-tab-item-patient-popover-max-height: 14rem;\n  --sh-tab-item-patient-collapsed-height: 4rem;\n  --sh-tab-item-popover-max-height: 15.75rem;\n  --sh-tab-item-collapsed-input-height: 5.5rem;\n  --sh-tab-item-condensed-collapsed-input-height: 3.5rem;\n  --sh-tab-item-text-lh: 1.375rem;\n  --sh-tab-item-patient-close-icon-right: 0.25rem;\n  --sh-tab-item-access-context-closable-padding-right: 3.25rem;\n  --sh-tab-item-expand-icon-font-size: 3rem;\n  --sh-tab-item-label-line-height: 1.25rem;\n  --sh-tab-item-patient-padding: 1.25rem 0.5rem 1.125rem 0.5rem;\n  --sh-tab-item-collapsed-label-line-height: 3.5rem;\n  --sh-tab-item-patient-href-wrapper-margin: 0.875rem 0.5rem;\n  --sh-tab-item-collapsed-patient-href-wrapper-margin: 0.625rem 0.5rem;\n  --sh-tab-item-access-bar-icon-href-wrapper-margin: 1.5rem 1.25rem;\n  --sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin: 0.75rem 0rem;\n  --sh-tab-item-href-wrapper-margin: 1.875rem 1rem 1.75rem;\n  --sh-tab-item-href-badge-margin-top: -0.4375rem;\n  --sh-tab-item-href-empty-badge-margin-top: -0.4375rem;\n  --sh-tab-item-access-bar-href-badge-margin-top: -0.3125rem;\n  --sh-tab-item-access-bar-href-default-badge-margin-top: 0rem;\n  --sh-tab-item-condensed-access-bar-href-default-badge-margin-top: -0.4625rem;\n  --sh-tab-item-condensed-pt-href-wrapper-margin: 0rem 0.5rem;\n  --sh-tab-item-collapsed-condensed-pt-href-wrapper-margin: 0.125rem 0.5rem;\n  --sh-tab-item-condensed-icon-href-wrapper-margin: 0.5rem 0rem 0.125rem;\n  --sh-tab-item-condensed-icon-pt-href-wrapper-margin: 0rem 0.5rem 0rem 0.5rem;\n  --sh-tab-item-href-condensed-height: 2.75rem;\n  --sh-tab-item-icon-href-wrapper-margin: 0.75rem 0.5rem;\n  --sh-tab-item-condensed-href-badge-margin-top: -0.4375rem;\n  --sh-tab-item-condensed-href-empty-badge-margin-top: -0.5rem;\n  --sh-tab-item-closable-condensed-href-badge-margin-top: -0.875rem;\n  --sh-tab-item-closable-condensed-empty-href-badge-margin-top: -1.4375rem;\n  --sh-tab-item-collapsed-href-accessbar-height: 4rem;\n  --sh-tab-item-tab-item-icon-margin: 0rem 0.5rem 0rem 0.25rem;\n  --sh-tab-item-condensed-collapsed-icon-href-wrapper-margin: 0rem 0rem 0.125rem;\n  --sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left: 0.5rem;\n  --sh-tab-item-collapsed-icon-height: 4rem;\n  --sh-tab-item-condensed-icon-only-href-wrapper-margin: 0.5rem 1.25rem 0.125rem;\n  --sh-tab-item-min-width-tab: 5rem;\n  --sh-tab-item-icon-href-padding: 0rem 1.25rem;\n  --sh-modal-label-wrapper-padding: 0rem 0.75rem 0rem 1.25rem;\n  --sh-modal-body-wrapper-padding: 1.25rem;\n  --sh-modal-footer-wrapper-padding: 1.25rem;\n  --sh-modal-footer-wrapper-margin-left: 0.75rem;\n  --sh-modal-close-button-2-margin: 0.5rem 0.5rem 0.5rem 0.5rem;\n  --sh-modal-modal-label-line-height: 1.75rem;\n  --sh-modal-close-button-margin-left: 0.75rem;\n  --sh-modal-icon-margin-right: 0.75rem;\n  --sh-modal-label-wrapper-height: 4.5rem;\n  --sh-modal-wrapper-content-margin-bottom: 1.25rem;\n  --sh-modal-functions-wrapper-gap: 0.75rem;\n  --sh-modal-functions-wrapper-margin-left: 0.75rem;\n  --sh-timepicker-height: 3.5rem;\n  --sh-timepicker-panel-height: 11.5rem;\n  --sh-timepicker-control-value-margin: 0.875rem 0;\n  --sh-timepicker-control-value-height: 1.75rem;\n  --sh-timepicker-icon-wrapper-padding-right: 0.75rem;\n  --sh-timepicker-icon-wrapper-gap: 0.5rem;\n  --sh-timepicker-label-without-value-line-height: 1.75rem;\n  --sh-timepicker-label-left: 0.75rem;\n  --sh-timepicker-label-top: 0.875rem;\n  --sh-timepicker-label-with-value-top: 0.25rem;\n  --sh-timepicker-label-with-value-line-height: 1.5rem;\n  --sh-timepicker-input-field-height: 1.5rem;\n  --sh-timepicker-input-field-padding: 1.75rem 0 0.25rem 0.75rem;\n  --sh-timepicker-placeholder-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-amPm-overlay-width: 3rem;\n  --sh-timepicker-amPm-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-amPm-label-width: 1.75rem;\n  --sh-timepicker-seperator-width: 0.5rem;\n  --sh-timepicker-seperator-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-condensed-height: 3rem;\n  --sh-timepicker-condensed-label-top: 0.625rem;\n  --sh-timepicker-condensed-input-field-height: 1.75rem;\n  --sh-timepicker-condensed-input-field-padding: 0.625rem 0 0.625rem 0.75rem;\n  --sh-timepicker-helper-text-padding: 0.25rem 0.75rem 0rem;\n  --sh-scrollpicker-main-container-height: 17.5rem;\n  --sh-scrollpicker-data-cell-height: 3.5rem;\n  --sh-scrollpicker-data-cell-width: 4.5rem;\n  --sh-scrollpicker-selector-top: 7rem;\n  --sh-scrollpicker-selector-height: var(--sh-scrollpicker-data-cell-height);\n  --sh-scrollpicker-current-scale: l;\n  --sh-tool-padding: 0.3125rem;\n  --sh-tool-bottom-padding-with-icon: 0.1875rem;\n  --sh-tool-height: 5.5rem;\n  --sh-tool-width: var(--sh-tool-height);\n  --sh-tool-condensed-padding: 0.1875rem;\n  --sh-tool-condensed-height: 3.5rem;\n  --sh-tool-condensed-width: var(--sh-tool-condensed-height);\n  --sh-tool-icon-value-label-font-size: 1rem;\n  --sh-tool-icon-value-label-line-height: var(--sh-tool-icon-value-label-font-size);\n  --sh-tool-value-label-line-height: 1.125rem;\n  --sh-tool-label-line-height: 1.25rem;\n  --sh-tool-label-with-icon-height: 2.125rem;\n  --sh-tool-icon-label-margin-top: 0.25rem;\n  --sh-tool-palette-height: 1.25rem;\n  --sh-tool-palette-width: var(--sh-tool-palette-height);\n  --sh-tool-arrow-height: 0.5rem;\n  --sh-tool-arrow-width: var(--sh-tool-arrow-height);\n  --sh-tool-arrow-border: 0.25rem;\n  --sh-tool-popover-max-height: 17rem;\n  --sh-tool-condensed-palette-height: 1rem;\n  --sh-tool-condensed-palette-width: var(--sh-tool-condensed-palette-height);\n  --sh-min-touch-size: 2.5rem;\n  --sh-slider-input-height: 2.25rem;\n  --sh-slider-input-width: 3.375rem;\n  --sh-slider-slider-area-height: 3rem;\n  --sh-slider-slider-area-margin-top: 0.25rem;\n  --sh-slider-thumb-diameter: 1.125rem;\n  --sh-slider-track-height: 0.1875rem;\n  --sh-slider-input-padding: 0.25rem 0.625rem;\n  --sh-slider-horizontal-tooltip-thumb-distance: 1.1875rem;\n  --sh-slider-tooltip-width: 3.375rem;\n  --sh-slider-tooltip-height: 2.25rem;\n  --sh-slider-tick-diameter: 0.5rem;\n  --sh-slider-tick-diameter-on-hover: 0.625rem;\n  --sh-slider-vertical-slider-tooltip-thumb-distance: var(--sh-slider-horizontal-tooltip-thumb-distance);\n  --sh-slider-vertical-slider-input-slider-distance: 1rem;\n  --sh-slider-vertical-slider-input-container-width: 5.625rem;\n  --sh-slider-vertical-slider-input-label-input-width: 2.125rem;\n  --sh-slider-step-tick-width: 0.125rem;\n  --sh-slider-step-tick-height: 0.75rem;\n  --sh-slider-range-input-separator-width: 0.375rem;\n  --sh-slider-range-input-separator-side-margin: 0.25rem;\n  --sh-slider-step-tick-min-width: 2.5rem;\n  --sh-slider-arrow-controls-inter-icon-gap: 0.5rem;\n  --sh-access-bar-height: 5.5rem;\n  --sh-access-bar-condensed-height: 3.5rem;\n  --sh-access-bar-mobile-height: 4rem;\n  --sh-access-bar-logo-height: 3rem;\n  --sh-access-bar-logo-margin-left: 0.5rem;\n  --sh-access-bar-logo-margin-right: 2.5rem;\n  --sh-access-bar-label-line-height: 1.75rem;\n  --sh-access-bar-condensed-logo-height: 2.5rem;\n  --sh-access-bar-label-margin-right: 2.5rem;\n  --sh-access-bar-padding: 1.25rem 1.25rem;\n  --sh-access-bar-functions-slot-margin-left: 1.25rem;\n  --sh-access-bar-user-identifier-margin-left: 2rem;\n  --sh-access-bar-window-controls-margins: 0.5rem -0.5rem 2rem 1.5rem;\n  --sh-access-bar-mobile-tabs-wrapper-margin: 0rem;\n  --sh-access-bar-window-controls-height: 3rem;\n  --sh-access-bar-condensed-padding: 0.5rem 1.25rem;\n  --sh-access-bar-mobile-wrapper-padding: 0.5rem 1.25rem;\n  --sh-access-bar-mobile-left-slot-margin-left: 0.75rem;\n  --sh-access-bar-mobile-right-slot-margin-right: 0.75rem;\n  --sh-home-screen-card-height: 20rem;\n  --sh-home-screen-card-width: 20rem;\n  --sh-home-screen-card-margin-right: 1.25rem;\n  --sh-home-screen-functions-button-bottom: 1.25rem;\n  --sh-home-screen-functions-button-right: 1.25rem;\n  --sh-home-screen-functions-card-bottom: 4.75rem;\n  --sh-home-screen-functions-card-right: 1.25rem;\n  --sh-home-screen-functions-card-width: 16rem;\n  --sh-workline-item-wrapper-height: 6.5rem;\n  --sh-workline-item-svg-height-width: 4.5rem;\n  --sh-workline-item-type-info-height-width: 4rem;\n  --sh-workline-item-progress-circle: 4.125rem;\n  --sh-workline-item-circle-stroke-width: 0.25rem;\n  --sh-workline-item-circle-stroke-dasharray: 7.96;\n  --sh-workline-wrapper-height: 10rem;\n  --sh-workline-item-label-height: 3rem;\n  --sh-workline-wrapper-top-padding: 0.75rem;\n  --sh-workline-item-wrapper-margin: 1rem;\n  --sh-workline-item-badge-wrapper-position: 0.6875rem;\n  --sh-workline-item-icon-size-m: 2rem;\n  --sh-workline-item-triangle-height: 5.25rem;\n  --sh-workline-item-triangle-border-left-right: 0.5rem;\n  --sh-workline-item-triangle-border-top-bottom: 0.625rem;\n  --sh-workline-item-badge-slotted-position-top: -0.3125rem;\n  --sh-workline-item-badge-slotted-position-right: -0.25rem;\n  --sh-workline-item-margin: 1.25rem;\n  --sh-workline-item-thumbnail-width-height: 3.75rem;\n  --sh-workline-label-height: 2rem;\n  --sh-workline-right-wrapper-margin: 1.5rem;\n  --sh-workline-item-active-icon-size-m: 2.5rem;\n  --sh-workline-right-wrapper-left-padding: 1.5rem;\n  --sh-workline-item-info-line-height: 1.75rem;\n  --sh-workline-item-popover-clear-icon-padding: -0.75rem;\n  --sh-image-segment-slot-left: 1rem;\n  --sh-image-segment-slot-right: 1rem;\n  --sh-image-segment-slot-top: 1rem;\n  --sh-image-segment-slot-bottom: 1rem;\n  --sh-image-segment-left-right-margin: 0.375rem 0;\n  --sh-image-segment-top-bottom-margin: 0 0.375rem;\n  --sh-image-segment-text-line-height: 1.75rem;\n  --sh-image-segment-corner-right-ml: 1rem;\n  --sh-carousel-height: 3rem;\n  --sh-carousel-max-width: 14rem;\n  --sh-carousel-counter-line-height: 1.75rem;\n  --sh-carousel-counter-bottom: 0.5rem;\n  --sh-carousel-counter-padding: 0.125rem 0.375rem 0.125rem 0.375rem;\n  --sh-carousel-counter-left-right: 0.375rem;\n  --sh-carousel-counter-border-radius: 0.125rem;\n  --sh-carousel-arrow-left: 0.75rem;\n  --sh-carousel-arrow-right: 0.75rem;\n  --sh-carousel-icon-width: 3rem;\n  --sh-carousel-icon-height: 3rem;\n  --sh-carousel-arrow-padding: 0.25rem;\n  --sh-thumbnail-image-wrapper-padding: 0.5rem;\n  --sh-thumbnail-label-wrapper-margin: -0.25rem 0.5rem 0.25rem 0.5rem;\n  --sh-thumbnail-label-height: 3rem;\n  --sh-thumbnail-image-border-radius: 0.125rem;\n  --sh-thumbnail-thumbnail-border-radius: 0.125rem;\n  --sh-thumbnail-image-wrapper-padding-condensed: 0.25rem;\n  --sh-thumbnail-label-wrapper-margin-condensed: 0rem 0.25rem 0.25rem 0.25rem;\n  --sh-thumbnail-label-line-height: 1.5rem;\n  --sh-thumbnail-icons-wrapper-margin: 0rem 0rem 0.25rem 0.25rem;\n  --sh-thumbnail-thumbnail-border: 0.0625rem;\n  --sh-thumbnail-checkbox-border-radius: 0.125rem;\n  --sh-thumbnail-new-icon-width: 0.75rem;\n  --sh-thumbnail-new-icon-height: 0.75rem;\n  --sh-thumbnail-new-icon-margin: 0.625rem;\n  --sh-thumbnail-badge-width: 1.5rem;\n  --sh-thumbnail-badge-margin: 0.625rem;\n  --sh-thumbnail-indications-wrapper-margin: 0.1875rem 0.1875rem 0 0;\n  --sh-thumbnail-indications-wrapper-margin-left: 0.25rem;\n  --sh-thumbnail-info-slot-wrapper-bottom: 0.6875rem;\n  --sh-thumbnail-info-slot-wrapper-left: 0.6875rem;\n  --sh-thumbnail-info-slot-wrapper-padding: 0.25rem;\n  --sh-thumbnail-checkbox-height: 3rem;\n  --sh-thumbnail-checkbox-width: 3rem;\n  --sh-thumbnail-thumbnail-icon-bottom: 0.6875rem;\n  --sh-thumbnail-thumbnail-icon-right: 0.6875rem;\n  --sh-thumbnail-thumbnail-checkbox-top: 0.6875rem;\n  --sh-thumbnail-thumbnail-checkbox-left: 0.6875rem;\n  --sh-thumbnail-label-margin-bottom: 0rem;\n  --sh-datepicker-overlay-container-height: 3.5rem;\n  --sh-datepicker-overlay-container-height-condensed: 3rem;\n  --sh-datepicker-months-grid-gap: 0.5rem;\n  --sh-datepicker-date-panel-width: 25.5rem;\n  --sh-datepicker-date-panel-padding: 1.25rem 0.75rem 0.75rem 0.75rem;\n  --sh-datepicker-date-panel-height: 29.5rem;\n  --sh-datepicker-header-area-height: 3rem;\n  --sh-datepicker-month-and-year-display-width: 12rem;\n  --sh-datepicker-month-and-year-display-line-height: 3rem;\n  --sh-datepicker-month-and-year-display-border-radius: 1.5rem;\n  --sh-datepicker-date-grid-template-rows: 3rem;\n  --sh-datepicker-date-grid-template-columns: 3rem;\n  --sh-datepicker-date-grid-gap: 0.5rem;\n  --sh-datepicker-date-grid-margin-top: 0.5rem;\n  --sh-datepicker-week-day-name-line-height: 3rem;\n  --sh-datepicker-date-line-height: 3rem;\n  --sh-datepicker-date-border-radius: 1.5rem;\n  --sh-datepicker-date-height: 3rem;\n  --sh-datepicker-date-width: 3rem;\n  --sh-datepicker-icon-dummy-width: 3rem;\n  --sh-datepicker-icon-dummy-height: 3rem;\n  --sh-datepicker-date-panel-padding-year-and-month-selector: 1.25rem 0.75rem 3.625rem;\n  --sh-datepicker-header-area-height-year-and-month-selector: 3rem;\n  --sh-datepicker-line-height-year-selector: 3rem;\n  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;\n  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 5rem;\n  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;\n  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 2rem;\n  --sh-datepicker-date-grid-margin-year-and-month-selector: 3.625rem 3.5rem 0rem 3.5rem;\n  --sh-datepicker-date-grid-width-year-and-month-selector: 17rem;\n  --sh-datepicker-year-height-year-selector: 3rem;\n  --sh-datepicker-year-line-height-year-selector: 3rem;\n  --sh-datepicker-year-border-radius-year-selector: 1.5rem;\n  --sh-datepicker-month-and-year-width: 7rem;\n  --sh-datepicker-month-and-year-height: 3rem;\n  --sh-datepicker-month-height: 3rem;\n  --sh-datepicker-month-line-height: 3rem;\n  --sh-datepicker-month-border-radius: 1.5rem;\n  --sh-splash-screen-logo-height: 3.5rem;\n  --sh-splash-screen-logo-padding: 0.25rem 0rem 0rem 0.25rem;\n  --sh-splash-screen-data-wrapper-width: 39rem;\n  --sh-splash-screen-data-wrapper-min-height: 38.25rem;\n  --sh-splash-screen-data-wrapper-margin: 1.25rem auto 0rem;\n  --sh-splash-screen-label-font-size: 2.5rem;\n  --sh-splash-screen-label-line-height: 2.75rem;\n  --sh-splash-screen-label-margin-top: 1.25rem;\n  --sh-splash-screen-label-margin-bottom: 2.5rem;\n  --sh-splash-screen-header-2-margin-top: 0.75rem;\n  --sh-splash-screen-header-2-margin-bottom: 2.5rem;\n  --sh-splash-screen-header-2-line-height: 1.75rem;\n  --sh-splash-screen-data-wrapper-margin-bottom-slotted: 0.75rem;\n  --sh-splash-screen-footer-wrapper-margin-top: 2rem;\n  --sh-splash-screen-footer-wrapper-margin-bottom: 1.25rem;\n  --sh-splash-screen-footer-wrapper-margin-left-slotted-items: 0.75rem;\n  --sh-splash-screen-footer-text-margin-top: 1.25rem;\n  --sh-splash-screen-footer-text-min-height: 3.25rem;\n  --sh-splash-screen-footer-text-slotted-margin-bottom: 0.25rem;\n  --sh-splash-screen-modal-min-height: 49rem;\n  --sh-splash-screen-modal-width: 70rem;\n  --sh-splash-screen-image-margin: -1.25rem -1.25rem -1.25rem 1.25rem;\n  --sh-splash-screen-image-border-radius: 0rem 0.125rem 0.125rem 0rem;\n  --sh-list-item-padding: 0.25rem 1.25rem;\n  --sh-list-item-min-height: 3rem;\n  --sh-list-item-icon-margin: 0.75rem;\n  --sh-list-item-line-height: 1.75rem;\n  --sh-list-item-info-line-height: 1.5rem;\n  --sh-list-item-text-padding: 0.5rem 0;\n  --sh-list-item-arrow-right-margin: 0.5rem;\n  --sh-list-item-text-wrapper-left-margin: 0.75rem;\n  --sh-list-item-select-margin-right: 0.75rem;\n  --sh-list-item-right-slotted-margin: 0.75rem;\n  --sh-list-item-icon-size-s: 3rem;\n  --sh-list-item-bottom-first-margin: 1.25rem;\n  --sh-list-item-bottom-slot-margin: 0.75rem;\n  --sh-list-item-content-line-height: 1.75rem;\n  --sh-list-item-checkbox-right: 0rem;\n  --sh-list-item-select-wrapper-size: 3rem;\n  --sh-list-item-info-margin: 0.125rem 0;\n  --sh-list-item-left-slotted-margin: 0.25rem;\n  --sh-list-item-right-slotted-first-margin: 0.75rem;\n  --sh-list-item-divider-inset-margin: 1.25rem;\n  --sh-list-integrated-margin: 0 -1.25rem;\n  --sh-list-integrated-arrow-margin: 0.5rem;\n  --sh-table-cell-icon-min-width: 5rem;\n  --sh-table-cell-wrapper-margin: 0.5rem 1rem;\n  --sh-table-cell-line-height: 3rem;\n  --sh-table-cell-mobile-wrapper-margin: 0.5rem 0.75rem;\n  --sh-table-cell-condensed-wrapper-margin: 0.25rem 1rem;\n  --sh-table-cell-first-nested-padding: 4rem;\n  --sh-table-cell-nested-padding: 3.25rem;\n  --sh-table-cell-first-nested-padding-checkbox: 6.25rem;\n  --sh-table-cell-nested-padding-checkbox: 3rem;\n  --sh-table-head-icon-min-width: 5rem;\n  --sh-table-cell-icon-cell-min-width: 5rem;\n  --sh-table-cell-icon-checkbox-cell-min-width: 5rem;\n  --sh-table-cell-inset: 3rem;\n  --sh-table-cell-checkbox-margin-top: 0.2rem;\n  --sh-table-head-line-height: 3rem;\n  --sh-table-head-wrapper-margin: 0.5rem 1rem;\n  --sh-table-head-condensed-wrapper-margin: 0.25rem 1rem;\n  --sh-table-head-mobile-wrapper-margin: 0.5rem 0.75rem;\n  --sh-table-head-sort-icon-margin: 0.25rem 0;\n  --sh-table-head-condensed-wrapper-height: 3rem;\n  --sh-table-head-header-wrapper-height: 3rem;\n  --sh-table-head-padding-left: 3.5rem;\n  --sh-table-cell-padding-left: 3.5rem;\n  --sh-table-head-checkbox-margin-top: 0.2rem;\n  --sh-table-row-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));\n  --sh-table-row-header-slot-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-4));\n  --sh-table-row-initial-icon-left: 3.75rem;\n  --sh-table-row-multiselect-checkbox-left: 3rem;\n  --sh-table-row-nested-expand-collapse-left: 0.5rem;\n  --sh-table-row-arrow-inset: 3.25rem;\n  --sh-interactive-area-display: block;\n  --sh-interactive-area-min-touch-size: 3.5rem;\n  --scrollbar-size: 0.5rem;\n  --scrollbar-corner-radius: 0.25rem ;\n}\n@media (max-width: 72rem), (max-height: 51rem) {\n  [sh-scale=l] sh-splash-screen::part(splash-image) {\n    display: none;\n  }\n  [sh-scale=l] sh-splash-screen::part(splash-content-wrapper) {\n    width: 100% !important;\n  }\n  [sh-scale=l] sh-splash-screen::part(splash-info) {\n    text-align: center;\n  }\n  [sh-scale=l] sh-splash-screen::part(splash-card) {\n    height: 100% !important;\n    width: 100% !important;\n    max-height: unset !important;\n    max-width: unset !important;\n    min-height: fit-content;\n  }\n}\n\n[sh-scale=xl] {\n  --font-size: 1rem;\n  --font-size-super-header: 1.875rem;\n  --font-size-header-1: 1.5rem;\n  --font-size-header-2: 1.5rem;\n  --font-size-title-1: 1.375rem;\n  --font-size-title-2: 1.25rem;\n  --font-size-body-1: 1.375rem;\n  --font-size-body-2: 1.25rem;\n  --line-height: 1.5rem;\n  --super-header: normal 400 var(--font-size-super-header, calc(var(--font-size) * 1.25)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-1: normal 400 var(--font-size-header-1, var(--font-size)) bree-headline, "Arial Black", Calibri, sans-serif;\n  --header-2: normal 700 var(--font-size-header-2, var(--font-size)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-1: normal 700 var(--font-size-title-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --title-2: normal 700 var(--font-size-title-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-1: normal 400 var(--font-size-body-1, calc(var(--font-size) * 0.875)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --body-2: normal 400 var(--font-size-body-2, calc(var(--font-size) * 0.75)) siemens sans, "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  --sh-empty-state-icon-size: 6rem;\n  --sh-empty-state-text-width: 37.5rem;\n  --sh-empty-state-margin: 1.5rem;\n  --sh-menu-item-item-height: 4.5rem;\n  --sh-menu-item-label-line-height: 2rem;\n  --sh-menu-item-item-padding: 0.75rem 0rem;\n  --sh-menu-item-item-padding-hover: 0.75rem 0.75rem;\n  --sh-menu-item-item-margin-hover: 0 -0.75rem;\n  --sh-menu-item-item-width: calc(100% + 1.5rem);\n  --sh-menu-item-icon-right-margin: 0.75rem;\n  --sh-menu-item-vertical-item-padding: 0.75rem;\n  --sh-menu-item-vertical-icon-margin: 0rem auto 0.75rem;\n  --sh-menu-item-chapter-wrapper-margin-left: 6.25rem;\n  --sh-menu-item-chapter-arrow-margin-right: 0.75rem;\n  --sh-menu-item-chapter-sibling-margin-left: 4.75rem;\n  --sh-menu-item-chapter-sibling-margin-left-hover: 4rem;\n  --sh-menu-item-functions-slot-margin: 0rem 0rem 0rem -4rem;\n  --sh-menu-item-icon-size: 3rem;\n  --sh-menu-item-button-icon-right-xs: -1rem;\n  --sh-menu-item-button-icon-right-s: -0.75rem;\n  --sh-menu-item-button-icon-right-m: -0.5rem;\n  --sh-menu-item-button-icon-margin-left-xs: -1.5rem;\n  --sh-menu-item-button-icon-margin-left-s: -1rem;\n  --sh-menu-item-button-icon-margin-left-m: -0.5rem;\n  --sh-menu-item-button-icon-margin-left-l: 0.5rem;\n  --sh-dropdown-overlay-padding: 0 0.75rem;\n  --sh-dropdown-icon-label-padding-left: 4.5rem;\n  --sh-dropdown-icon-input-padding: 2.25rem 0 0.4375rem 4.5rem;\n  --sh-dropdown-icon-top: 0.75rem;\n  --sh-dropdown-icon-left: 0.75rem;\n  --sh-dropdown-label-pointer-event: all;\n  --sh-dropdown-error-success-icon-left-margin: 0.5rem;\n  --sh-dropdown-icon-wrapper-left-margin: 0.5rem;\n  --sh-dropdown-label-disabled-pointer-event: none;\n  --sh-dropdown-condensed-input-padding: 0.25rem 0 0.1875rem 4rem;\n  --sh-dropdown-arrow-icon-size: 3.9375rem;\n  --sh-dropdown-overlay-height: 4.5rem;\n  --sh-dropdown-overlay-condensed-height: 4rem;\n  --sh-dropdown-overlay-max-height: 24.75rem;\n  --sh-dropdown-input-cursor: pointer;\n  --sh-dropdown-transition-time: 0s;\n  --sh-icon-size-xs: 4rem;\n  --sh-icon-size-s: 4rem;\n  --sh-icon-size-m: 4rem;\n  --sh-icon-size-l: 4rem;\n  --sh-icon-font-size-xs: 2rem;\n  --sh-icon-font-size-s: 2.5rem;\n  --sh-icon-font-size-m: 3rem;\n  --sh-icon-font-size-l: 4rem;\n  --sh-icon-badge-bottom: calc(100% - 0.375rem);\n  --sh-icon-badge-left: calc(100% - 0.375rem);\n  --sh-icon-active-padding-size-xs: 1rem;\n  --sh-icon-active-padding-size-s: 0.75rem;\n  --sh-icon-active-padding-size-m: 0.5rem;\n  --sh-icon-active-padding-size-l: 0rem;\n  --sh-icon-border-radius: 0.125rem;\n  --sh-badge-min-width: 1.5rem;\n  --sh-badge-max-width: 5rem;\n  --sh-badge-height: 1.5rem;\n  --sh-badge-line-height: 1.5rem;\n  --sh-badge-font-size: 0.75rem;\n  --sh-badge-no-label-size: 0.75rem;\n  --sh-badge-padding: 0rem 0.375rem;\n  --sh-badge-icon-font-size: 1.5rem;\n  --sh-badge-label-type-padding: 0rem 0.5rem 0rem 0.125rem;\n  --sh-badgeline-height: 1.5rem;\n  --sh-button-width-size-s: 9rem;\n  --sh-button-width-size-m: 14.5rem;\n  --sh-button-width-size-l: 17.5rem;\n  --sh-button-label-line-height: 2.25rem;\n  --sh-button-button-height: 4rem;\n  --sh-button-button-border-radius: 2rem;\n  --sh-button-button-padding: 0.875rem 1.375rem;\n  --sh-button-icon-width: 4rem;\n  --sh-button-icon-height: 4rem;\n  --sh-button-icon-size: 2.5rem;\n  --sh-min-touch-size: 4.5rem;\n  --sh-button-padding-right-left: 2.75rem;\n  --sh-button-flex-shrink-icon: 0;\n  --sh-button-icon-label-margin-right: 0.5rem;\n  --sh-button-icon-size-s: 2rem;\n  --sh-button-button-padding-icon-position: 0.875rem 1.625rem 0.875rem 1.375rem;\n  --sh-text-super-header-line-height: 2.5rem;\n  --sh-text-header-line-height: 2.25rem;\n  --sh-text-title1-line-height: 2.25rem;\n  --sh-text-title2-line-height: 2.25rem;\n  --sh-text-body1-line-height: 2rem;\n  --sh-text-body2-line-height: 1.75rem;\n  --sh-toggle-height: 2.25rem;\n  --sh-toggle-border-radius: 1.75rem;\n  --sh-toggle-circle-dimension: 1.625rem;\n  --sh-toggle-width: 4rem;\n  --sh-toggle-margin: 0.375rem 1rem 0.375rem 0.375rem;\n  --sh-toggle-circle-top: 0.125rem;\n  --sh-toggle-circle-left: 0.125rem;\n  --sh-toggle-active-left: 1.875rem;\n  --sh-toggle-line-height: 2.25rem;\n  --sh-toggle-label-line-height: 2rem;\n  --sh-toggle-label-padding: 0.5rem 0rem;\n  --sh-toggle-border-width: 0.1875rem;\n  --sh-min-touch-size: 4.5rem;\n  --sh-checkbox-inner-width: 1.625rem;\n  --sh-checkbox-inner-height: 1.625rem;\n  --sh-checkbox-outer-width: 2.75rem;\n  --sh-checkbox-outer-height: 2.75rem;\n  --sh-checkbox-label-line-height: 2rem;\n  --sh-checkbox-margin-right: 0.5rem;\n  --sh-checkbox-tick-line-height: 1.25rem;\n  --sh-checkbox-margin-around-checkbox: 0.5625rem;\n  --sh-checkbox-text-indent: -0.0625rem;\n  --sh-checkbox-label-width: 3.25rem;\n  --sh-checkbox-tick-font-size: 1.375rem;\n  --sh-checkbox-padding: 0.125rem;\n  --sh-min-touch-size: 4.5rem;\n  --sh-checkbox-label-padding: 0.375rem 0rem;\n  --sh-checkbox-border-width: 0.1875rem;\n  --sh-breadcrumb-item-item-height: 4rem;\n  --sh-breadcrumb-item-item-max-width: 16rem;\n  --sh-breadcrumb-item-item-line-height: 2rem;\n  --sh-breadcrumb-item-item-icon-margin: 3rem;\n  --sh-breadcrumb-item-item-icon-width: 3rem;\n  --sh-radio-button-container-margin: 0.125rem 0;\n  --sh-radio-button-label-line-height: 2rem;\n  --sh-radio-button-label-padding: 0.5rem;\n  --sh-radio-button-label-margin: 0.375rem 0;\n  --sh-radio-button-width: 2.75rem;\n  --sh-radio-button-height: 2.75rem;\n  --sh-radio-button-pseudo-width: 1.75rem;\n  --sh-radio-button-pseudo-height: 1.75rem;\n  --sh-radio-button-pseudo-margin: 0.5rem;\n  --sh-radio-button-pseudo-border-width: 0.1875rem;\n  --sh-radio-button-pseudo-border-width-active: 0.5rem;\n  --sh-min-touch-size: 4.5rem;\n  --sh-radio-group-margin: 2rem;\n  --sh-radio-group-horizontal-gap: 2rem 2rem;\n  --sh-tag-container-height: 4rem;\n  --sh-tag-wrapper-border: 0.125rem;\n  --sh-tag-padding: 0 1rem;\n  --sh-tag-label-line-height: 4rem;\n  --sh-tag-icon-padding: 0 0 0 0.5rem;\n  --sh-tag-border-radius: 0.1875rem;\n  --sh-tag-condensed-container-height: 3rem;\n  --sh-tag-condensed-icon-padding: 0 0 0 0.25rem;\n  --sh-spinner-width-s: 3rem;\n  --sh-spinner-height-s: 3rem;\n  --sh-spinner-width-m: 4rem;\n  --sh-spinner-height-m: 4rem;\n  --sh-spinner-label-height: 2rem;\n  --sh-spinner-label-line-height: 2rem;\n  --sh-spinner-margin-top: 0.625rem;\n  --sh-tooltip-max-content-width: 42rem;\n  --sh-tooltip-content-padding: 0.5rem 1rem;\n  --sh-tooltip-label-line-height: 1.75rem;\n  --sh-tooltip-padding-title: 0.75rem 1rem;\n  --sh-tooltip-title-line-height: 2.25rem;\n  --sh-switch-item-height: 4.5rem;\n  --sh-switch-item-width: 7.25rem;\n  --sh-switch-item-border-radius: 2.25rem;\n  --sh-switch-item-padding: 1.375rem 1.375rem;\n  --sh-switch-item-label-alignment: center;\n  --sh-switch-border-radius: 2.25rem;\n  --sh-switch-condensed-border-radius: 2rem;\n  --sh-switch-item-condensed-border-radius: 2rem;\n  --sh-switch-item-condensed-height: 3rem;\n  --sh-switch-item-condensed-padding: 0.5rem 1.375rem;\n  --sh-switch-item-icon-margin: 0.5rem 3.5rem;\n  --sh-switch-item-label-height: 1.75rem;\n  --sh-switch-item-icon-height: 3.5rem;\n  --sh-switch-item-icon-width: 3rem;\n  --sh-min-touch-size: 4.5rem;\n  --sh-search-icon-top: 0.25rem;\n  --sh-search-icon-left: 0rem;\n  --sh-search-input-height: 4.5rem;\n  --sh-search-value-line-height: 2rem;\n  --sh-search-input-padding: 1.25rem 1rem 1.25rem 4rem;\n  --sh-search-input-padding-right: 4rem;\n  --sh-search-border-radius: 0.125rem 0.125rem 0rem 0rem;\n  --sh-search-border-bottom-thickness: 0.0625rem;\n  --sh-search-list-item-height: 4.5rem;\n  --sh-search-single-line-list-item-padding: 1.25rem 0.75rem;\n  --sh-search-list-item-line-height: 2rem;\n  --sh-search-close-icon-right: 0rem;\n  --sh-search-multi-line-list-item-padding: 0.5rem 0.75rem;\n  --sh-search-multi-line-list-item-height: 4.5rem;\n  --sh-search-multi-line-single-item-height: 1.75rem;\n  --sh-search-empty-slot-item-gap: 1.5rem;\n  --sh-search-empty-wrapper-padding: var(--sh-search-empty-slot-item-gap) 0.75rem;\n  --sh-search-list-view-max-height: 24.75rem;\n  --sh-input-text-label-left: 0.75rem;\n  --sh-input-text-empty-label-top: 1.25rem;\n  --sh-input-text-empty-label-line-height: 2rem;\n  --sh-input-text-empty-padding: 1.25rem 0 1.1875rem 0.75rem;\n  --sh-input-text-height: 4.4375rem;\n  --sh-input-text-padding: 2.25rem 0 0.4375rem 0.75rem;\n  --sh-input-text-label-top: 0.5rem;\n  --sh-input-text-label-line-height: 1.75rem;\n  --sh-input-text-empty-no-border-padding-bottom: 1.25rem;\n  --sh-input-text-no-border-padding-bottom: 0.5rem;\n  --sh-input-text-no-border-condensed-padding-bottom: 1rem;\n  --sh-input-text-icon-left-margin: 0.5rem;\n  --sh-input-text-slot-icon-left-margin: 0.5rem;\n  --sh-input-text-icon-wrapper-right-padding: 0.75rem;\n  --sh-input-text-icon-size: 3.9375rem;\n  --sh-input-text-icon-wrapper-margin: 0rem;\n  --sh-input-text-helper-text-padding: 0.25rem 0.75rem 0;\n  --sh-input-text-condensed-label-top: 1rem;\n  --sh-input-text-condensed-padding: 1rem 0 0.9375rem 0.75rem;\n  --sh-input-text-condensed-height: 3.9375rem;\n  --sh-input-text-textarea-label-height: 2.5rem;\n  --sh-input-text-textarea-label-padding: 0.75rem 0 0.75rem 0.75rem;\n  --sh-input-text-textarea-padding: 0 0.75rem 0.4375rem;\n  --sh-input-text-textarea-line-height: 2rem;\n  --sh-input-text-textarea-empty-label-line-height: 2rem;\n  --sh-input-text-condensed-textarea-top: 0.75rem;\n  --sh-input-text-condensed-textarea-padding: 0.75rem 0 0.4375rem 0.75rem;\n  --sh-input-text-textarea-label-line-height: 1.75rem;\n  --sh-input-text-condensed-textarea-icon-top: 0rem;\n  --sh-input-text-pointer-events: none;\n  --sh-input-text-label-condensed-display: none;\n  --sh-input-text-input-cursor: text;\n  --sh-accordion-header-wrapper-min-height: 4.5rem;\n  --sh-accordion-container-padding-left-right: 0rem 1.5rem;\n  --sh-accordion-wrapper-padding-bottom: 1.5rem;\n  --sh-accordion-content-wrapper-width: 1.5rem;\n  --sh-accordion-label-line-height: 2.25rem;\n  --sh-accordion-expand-icon-margin: 0.25rem -0.75rem 0.25rem 0;\n  --sh-accordion-icon-padding: 1rem 0.75rem 1rem 0;\n  --sh-accordion-content-items-margin-top: 1.5rem;\n  --sh-accordion-content-items-margin-top-touch: 1.25rem;\n  --sh-accordion-content-first-item-margin-top: 0.75rem;\n  --sh-accordion-header-label-info-padding: 1.125rem 0.75rem 1.125rem 0;\n  --sh-accordion-arrow-invert-margin-right: 0.25rem 0.5rem 0.25rem 0;\n  --sh-accordion-content-wrapper-line-height: 2rem;\n  --sh-user-identifier-margin-left: 0.75rem;\n  --sh-user-identifier-height: 1.75rem;\n  --sh-user-identifier-circle-dimension: 3rem;\n  --sh-user-identifier-image-circle: 3.5rem;\n  --sh-user-identifier-margin: 0.25rem;\n  --sh-user-identifier-max-width: 16rem;\n  --sh-stepper-circle-dimension: 3rem;\n  --sh-stepper-circle-line-height: 3rem;\n  --sh-stepper-label-line-height: 2rem;\n  --sh-stepper-info-line-height: 1.75rem;\n  --sh-stepper-info-margin-top: 0.25rem;\n  --sh-stepper-line-top: 1.5rem;\n  --sh-stepper-line-width: 2.25rem;\n  --sh-stepper-line-border-width: 0.1875rem;\n  --sh-stepper-badge-top: -0.375rem;\n  --sh-stepper-badge-right: -0.375rem;\n  --sh-stepper-icon-size: 1.5rem;\n  --sh-stepper-font-size: 1.25rem;\n  --sh-stepper-border-width: 0.1875rem;\n  --sh-stepper-condensed-circle-dimension: 1.125rem;\n  --sh-stepper-condensed-border-width: 0.1875rem;\n  --sh-stepper-condensed-badge-top: -0.1875rem;\n  --sh-stepper-condensed-badge-right: -0.25rem;\n  --sh-stepper-condensed-line-top: 0.5625rem;\n  --sh-stepper-condensed-line-width: 0.875rem;\n  --sh-stepper-vertical-stepper-wrapper-min-height: 6rem;\n  --sh-stepper-condensed-vertical-stepper-wrapper-min-height: 2.125rem;\n  --sh-stepper-label-info-padding: 1rem 0rem;\n  --sh-stepper-condensed-label-info-padding: 0.5rem 0rem;\n  --sh-stepper-label-info-margin-left: 0.5rem;\n  --sh-stepper-condensed-label-info-margin-left: 0.0625rem;\n  --sh-stepper-vertical-stepper-circle-margin: 0.5rem 0rem;\n  --sh-stepper-vertical-line-left: 1.4375rem;\n  --sh-stepper-vertical-condensed-circle-margin: 0.25rem 0rem;\n  --sh-stepper-vertical-condensed-line-left: 0.5rem;\n  --sh-stepper-vertical-line-height: 2rem;\n  --sh-stepper-vertical-condensed-line-height: 0.8125rem;\n  --sh-nav-bar-nav-bar-wrapper-height: 5rem;\n  --sh-nav-bar-condensed-nav-bar-wrapper-height: 4.5rem;\n  --sh-nav-bar-functions-wrapper-gap: 1rem;\n  --sh-nav-bar-functions-wrapper-padding: 0 0 0 1.75rem;\n  --sh-nav-bar-nav-bar-wrapper-padding: 0 1.5rem;\n  --sh-value-indicator-s-label-line-height: 1.75rem;\n  --sh-value-indicator-l-label-line-height: 2.25rem;\n  --sh-value-indicator-s-value-line-height: 3rem;\n  --sh-value-indicator-l-value-line-height: 6rem;\n  --sh-value-indicator-l-unit-line-height: 4rem;\n  --sh-value-indicator-s-unit-line-height: 2rem;\n  --sh-value-indicator-s-unit-padding-top: 1.2rem;\n  --sh-value-indicator-l-unit-padding-top: 2rem;\n  --sh-value-indicator-l-unit-font-size: 2.75rem;\n  --sh-value-indicator-s-unit-font-size: 1.375rem;\n  --sh-value-indicator-l-icon-size-m: 6rem;\n  --sh-value-indicator-s-icon-size-m: 3rem;\n  --sh-value-indicator-s-icon-font-size-m: 3rem;\n  --sh-value-indicator-l-icon-font-size-m: 6rem;\n  --sh-value-indicator-l-label-font-size: 1.5rem;\n  --sh-value-indicator-s-label-font-size: 1.375rem;\n  --sh-value-indicator-l-value-font-size: 5.5rem;\n  --sh-value-indicator-s-value-font-size: 2.75rem;\n  --sh-value-indicator-s-status-size-m: 2.5rem;\n  --sh-value-indicator-s-status-font-size-m: 2.5rem;\n  --sh-value-indicator-s-icon-margin-right: 0.5rem;\n  --sh-value-indicator-l-icon-margin-right: 0.75rem;\n  --sh-notification-width: 26rem;\n  --sh-notification-item-header-margin: 0.75rem 0.75rem 0 1.5rem;\n  --sh-notification-item-header-icon-margin: 0.75rem 0.75rem 0.75rem 0;\n  --sh-notification-item-header-line-height: 2.25rem;\n  --sh-notification-item-header-max-height: 4.5rem;\n  --sh-notification-item-header-text-margin: 0.875rem 0.75rem 0.875rem 0;\n  --sh-notification-item-header-close-button-margin: 0rem 0.75rem 0 0;\n  --sh-notification-item-description-container-margin: 0.75rem 1.5rem 1.5rem 1.5rem;\n  --sh-notification-item-no-label-description-container-margin: 0.75rem 0.75rem 1.5rem 1.5rem;\n  --sh-notification-item-description-icon-margin: 0.75rem 0.75rem 0 0;\n  --sh-notification-item-description-line-height: 2rem;\n  --sh-notification-item-description-text-margin: 1rem 0.75rem 0rem 0;\n  --sh-notification-item-description-close-button-margin: -1.5rem;\n  --sh-notification-item-footer-margin: 0 1.5rem 1.5rem 1.5rem;\n  --sh-notification-item-description-slot-elements-margin-top: 1.5rem;\n  --sh-notification-item-badge-margin: 1.625rem 1rem 0.5rem 1rem;\n  --sh-notification-item-footer-slot-child-margin-left: 1rem;\n  --sh-input-number-icon-size: 3.9375rem;\n  --sh-input-number-input-right-padding: 0.5rem;\n  --sh-input-number-left-icon-padding: 0 0 0 0.5rem;\n  --sh-input-number-right-icon-padding: 0 0 0 0.5rem;\n  --sh-input-number-status-text-padding: 0.25rem 0.75rem 0 0.75rem;\n  --sh-numeric-keypad-width: 15rem;\n  --sh-numeric-keypad-height: 19.75rem;\n  --sh-numeric-keypad-circle-button-height: 4rem;\n  --sh-numeric-keypad-circle-button-width: 4rem;\n  --sh-numeric-keypad-container-padding: 1.25rem 1.5rem;\n  --sh-numeric-keypad-button-margins: 0.75rem;\n  --sh-numeric-keypad-button-center-margin: 0 0.75rem;\n  --sh-pane-wrapper-width: 23rem;\n  --sh-pane-wrapper-padding: 1.5rem;\n  --sh-pane-arrow-placement-padding: 1.25rem;\n  --sh-pane-arrow-position: -3rem;\n  --sh-pane-condensed-width: 9.5rem;\n  --sh-pane-body-wrapper-margin: 1.5rem;\n  --sh-pane-arrow-wrapper-padding: 0.25rem 0;\n  --sh-pane-slot-child-margin-left: 1rem;\n  --sh-pane-functions-slot-last-child-margin: -0.25rem -0.25rem 0 var(--sh-pane-slot-child-margin-left);\n  --sh-pane-functions-slot-not-last-child-margin: -0.25rem 0rem 0 var(--sh-pane-slot-child-margin-left);\n  --sh-pane-arrow-icon-size: 3rem;\n  --sh-pane-body-wrapper-line-height: 2rem;\n  --sh-progress-header-line-height: 2.25rem;\n  --sh-progress-progress-bar-height: 0.75rem;\n  --sh-progress-info-line-height: 2rem;\n  --sh-progress-header-margin-bottom: 1rem;\n  --sh-progress-footer-margin-top: 0rem;\n  --sh-progress-radial-header-margin-bottom: 0.625rem;\n  --sh-progress-radial-progress-height-xs: 2.5rem;\n  --sh-progress-radial-progress-ring-width-xs: 0.375rem;\n  --sh-progress-radial-progress-height-s: 3.5rem;\n  --sh-progress-radial-progress-ring-width-s: 0.5rem;\n  --sh-progress-radial-progress-height-m: 6rem;\n  --sh-progress-radial-progress-ring-width-m: 0.5rem;\n  --sh-progress-radial-progress-height-l: 10rem;\n  --sh-progress-radial-progress-ring-width-l: 0.625rem;\n  --sh-progress-radial-progress-height-xl: 20rem;\n  --sh-progress-radial-progress-ring-width-xl: 0.75rem;\n  --sh-progress-indeterminate-bar-length: 9.5rem;\n  --sh-progress-radial-progress-label-width-m: 4rem;\n  --sh-progress-radial-progress-label-width-l: 8rem;\n  --sh-progress-radial-progress-label-width-xl: 15rem;\n  --sh-pagination-wrapper-height: 4rem;\n  --sh-pagination-height: 3rem;\n  --sh-pagination-width: 2.25rem;\n  --sh-pagination-line-height: 3rem;\n  --sh-pagination-li-right-margin: 1.5rem;\n  --sh-pagination-border-radius: 1.5rem;\n  --sh-pagination-prev-page-icon-right-margin: 1.5rem;\n  --sh-pagination-next-page-icon-left-margin: 0;\n  --sh-pagination-page-number-padding: 0rem 0.375rem;\n  --sh-min-touch-size: 4.5rem;\n  --sh-popover-min-width: 19.5rem;\n  --sh-popover-width: 24rem;\n  --sh-popover-current-scale: xl;\n  --sh-popover-header-padding: 0.75rem 0.75rem 0rem 1.5rem;\n  --sh-popover-body-padding: 0.75rem 1.5rem 1.5rem;\n  --sh-popover-body-wrapper-margin-bottom: 1.5rem;\n  --sh-popover-footer-padding: 0 1.5rem 1.5rem;\n  --sh-popover-header-padding-with-empty-function-slot: 1.5rem;\n  --sh-popover-label-padding: 0.875rem 0;\n  --sh-popover-headerless-body-top-padding: 1.5rem;\n  --sh-popover-gap-between-footer-slot-elements: 1rem;\n  --sh-popover-gap-between-function-slot-elements: var(--sh-popover-gap-between-footer-slot-elements);\n  --sh-popover-label-margin-right: 0.75rem;\n  --sh-popover-label-line-height: 2.25rem;\n  --sh-popover-header-icon-margin-right: 0.75rem;\n  --sh-popover-content-line-height: 2rem;\n  --sh-popover-arrow-border-width: 0rem 0.5625rem 0.75rem 0.5625rem;\n  --sh-popover-arrow-transform-origin: 0.5625rem 0.75rem;\n  --sh-popover-submenu-translateY: -1rem;\n  --sh-split-button-icon-wrapper-width: 4.5rem;\n  --sh-split-button-current-scale: xl;\n  --sh-min-touch-size: 4.5rem;\n  --sh-card-padding: 0.75rem 1.5rem;\n  --sh-card-label-height: 2.25rem;\n  --sh-card-icon-margin-right: 0.75rem;\n  --sh-card-icon-line-height: 2.5rem;\n  --sh-card-icon-width: 2rem;\n  --sh-card-header-wrapper-padding: 1.5rem;\n  --sh-card-slot-not-name-padding: 0rem 1.5rem;\n  --sh-card-border-radius: 0.125rem;\n  --sh-card-slot-not-name-line-height: 2rem;\n  --sh-card-header-tab-margin-top: -1rem;\n  --sh-card-empty-header-not-empty-content-padding: 1.5rem;\n  --sh-card-empty-footer-not-empty-content-padding: 1.5rem;\n  --sh-card-image-icon-label-wrapper-padding: 0.75rem;\n  --sh-card-footer-margin: 1.5rem;\n  --sh-card-functions-slot-margin-left-first-child: 0.75rem;\n  --sh-card-footer-slot-margin-left-first-child: 0.5rem;\n  --sh-card-footer-margin-left-not-first-child: 1rem;\n  --sh-card-href-card-icon-empty-content: 0.5rem;\n  --sh-card-href-label-wrapper-empty-content-not-image-padding: 1.5rem;\n  --sh-card-label-icon-badge-margin: 0.75rem 0;\n  --sh-card-label-padding: 0.125rem 0rem;\n  --sh-card-icon-font-size-l: 3.5rem;\n  --sh-card-href-not-image-not-empty-footer-slot-margin: 0 1.5rem;\n  --sh-card-href-not-image-not-empty-footer-slot-padding: 1.5rem 0;\n  --sh-card-href-label-padding: 0.5rem 0 0 0;\n  --sh-drawer-width: 25rem;\n  --sh-drawer-header-wrapper-padding: 1.5rem;\n  --sh-drawer-label-wrapper-padding: 0.75rem 1.5rem;\n  --sh-drawer-gap-between-function-footer-slot-elements: 1rem;\n  --sh-drawer-body-wrapper-padding: 0 1.5rem;\n  --sh-drawer-menu-item-margin-top: 0rem;\n  --sh-drawer-headerless-body-wrapper-padding-top: 1.5rem;\n  --sh-drawer-footerless-body-wrapper-padding-bottom: var(--sh-drawer-headerless-body-wrapper-padding-top);\n  --sh-drawer-body-wrapper-margin-bottom: 1.5rem;\n  --sh-drawer-footer-wrapper-padding: var(--sh-drawer-footerless-body-wrapper-padding-bottom);\n  --sh-drawer-top-bottom-min-height: 13rem;\n  --sh-drawer-label-line-height: 2.25rem;\n  --sh-drawer-label-padding: 0.875rem 0;\n  --sh-drawer-label-margin-right: 0.75rem;\n  --sh-drawer-touch-gap-between-function-footer-slot-elements: 1rem;\n  --sh-drawer-body-wrapper-line-height: 2rem;\n  --sh-drawer-scrollpicker-padding: 1.5rem;\n  --sh-risk-score-sizeS: 6rem;\n  --sh-risk-score-sizeL: 10rem;\n  --sh-risk-score-radial-s-width: 4rem;\n  --sh-risk-score-radial-s-lh: 2rem;\n  --sh-risk-score-radial-l-width: 7.5rem;\n  --sh-risk-score-radial-l-lh: 3rem;\n  --sh-risk-score-lw-height: 0.5rem;\n  --sh-risk-score-lw-mrg-btm: 1rem;\n  --sh-risk-score-riskbar-mrg-left: 0.5rem;\n  --sh-risk-score-hw-mrg-btm: 1rem;\n  --sh-risk-score-hw-line-height: 2.25rem;\n  --sh-page-body-wrapper-padding: 1.5rem;\n  --sh-tab-item-text-line-height: 2.25rem;\n  --sh-tab-item-icon-height: 5rem;\n  --sh-tab-item-icon-line-height: 3rem;\n  --sh-tab-item-icon-padding: 1rem 1.5rem 0.875rem;\n  --sh-tab-item-icon-label-padding: 0.125rem 1.5rem 0rem;\n  --sh-tab-item-icon-label-padding-access-bar: 1rem 1rem;\n  --sh-tab-item-icon-label-line-height: 3rem;\n  --sh-tab-item-icon-label-height: 5rem;\n  --sh-tab-item-condensed-icon-padding: 0.75rem 1.5rem 0.625rem;\n  --sh-tab-item-condensed-icon-line-height: 3rem;\n  --sh-tab-item-condensed-icon-height: 4.5rem;\n  --sh-tab-item-access-bar-icon-height: 6.5rem;\n  --sh-tab-item-access-bar-icon-padding: 1.75rem 1.5rem 1.625rem 1.5rem;\n  --sh-tab-item-access-bar-icon-line-height: 3rem;\n  --sh-tab-item-patient-height: 6.5rem;\n  --sh-tab-item-condensed-height: 4.5rem;\n  --sh-tab-item-normal-height: 5rem;\n  --sh-tab-item-arrow-icons-padding: 0 0.25rem;\n  --sh-tab-item-arrow-icons-line-height: 4rem;\n  --sh-tab-item-tab-item-padding: 1.375rem 1.5rem 1.25rem;\n  --sh-tab-item-tab-item-line-height: 2.25rem;\n  --sh-tab-item-access-bar-padding: 2.125rem 1.5rem 2rem;\n  --sh-tab-item-access-bar-height: 6.5rem;\n  --sh-tab-item-access-bar-line-height: 2.25rem;\n  --sh-tab-item-condensed-padding: 1.125rem 1.5rem 1rem;\n  --sh-tab-item-condensed-line-height: 2.25rem;\n  --sh-tab-item-badge-margin: -2.1875rem -0.375rem 0rem 0.6125rem;\n  --sh-tab-item-empty-badge-margin: -2.625rem -0.25rem 0rem 0.75rem;\n  --sh-tab-item-slottedfn-mg-right: 4.25rem;\n  --sh-tab-item-slottedfn-mg-left: -0.5rem;\n  --sh-tab-item-close-icon-right: 0.25rem;\n  --sh-tab-item-patient-mg-left: 0.25rem;\n  --sh-tab-item-patient-mg-right: 0.5rem;\n  --sh-tab-item-pt-label-lh: 1.75rem;\n  --sh-tab-item-pt-info-lh: 1.75rem;\n  --sh-tab-item-close-icon-top: 0.25rem;\n  --sh-tab-item-close-icon-accessbar-top: 0.25rem;\n  --sh-tab-item-close-icon-accessbar-right: 0.25rem;\n  --sh-tab-item-condensed-empty-badge-margin: -2.4rem -0.65rem 0.5rem 0.5rem;\n  --sh-tab-item-condensed-badge-margin: -2.5em -0.7rem 0.5rem 0.5rem;\n  --sh-tab-item-tab-close-margin: 0.5rem;\n  --sh-tab-item-tab-min-width: 5.5rem;\n  --sh-tab-item-tab-max-width: 17.5rem;\n  --sh-tab-item-tab-l-max-width: 37rem;\n  --sh-tab-item-patient-active-max-width: 27rem;\n  --sh-tab-item-patient-min-width: 17.5rem;\n  --sh-tab-item-patient-text-margin-right: 3rem;\n  --sh-tab-item-condensed-patient-collapsed-input-height: 4.5rem;\n  --sh-tab-item-condensed-patient-collapsed-input-padding: 0rem 0.25rem 0rem 0.75rem;\n  --sh-tab-item-patient-popover-max-height: 17.5rem;\n  --sh-tab-item-patient-collapsed-height: 5rem;\n  --sh-tab-item-popover-max-height: 15.75rem;\n  --sh-tab-item-collapsed-input-height: 6.5rem;\n  --sh-tab-item-condensed-collapsed-input-height: 4.5rem;\n  --sh-tab-item-text-lh: 1.75rem;\n  --sh-tab-item-patient-close-icon-right: 0.25rem;\n  --sh-tab-item-access-context-closable-padding-right: 4.25rem;\n  --sh-tab-item-expand-icon-font-size: 4rem;\n  --sh-tab-item-label-line-height: 1.75rem;\n  --sh-tab-item-patient-padding: 1.25rem 0.5rem 1.125rem 0.5rem;\n  --sh-tab-item-collapsed-label-line-height: 4.5rem;\n  --sh-tab-item-patient-href-wrapper-margin: 0.5rem 0.5rem;\n  --sh-tab-item-collapsed-patient-href-wrapper-margin: 0.75rem 0.5rem;\n  --sh-tab-item-access-bar-icon-href-wrapper-margin: 1.75rem 1.5rem;\n  --sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin: 1rem 0rem;\n  --sh-tab-item-href-wrapper-margin: 2.125rem 1rem 2rem;\n  --sh-tab-item-href-badge-margin-top: -0.75rem;\n  --sh-tab-item-href-empty-badge-margin-top: -0.5625rem;\n  --sh-tab-item-access-bar-href-badge-margin-top: -0.1875rem;\n  --sh-tab-item-access-bar-href-default-badge-margin-top: 0.25rem;\n  --sh-tab-item-condensed-access-bar-href-default-badge-margin-top: -0.7125rem;\n  --sh-tab-item-condensed-pt-href-wrapper-margin: 0.125rem 0.5rem;\n  --sh-tab-item-collapsed-condensed-pt-href-wrapper-margin: 0rem 0.5rem;\n  --sh-tab-item-condensed-icon-href-wrapper-margin: 0.75rem 0rem 0.125rem;\n  --sh-tab-item-condensed-icon-pt-href-wrapper-margin: 0rem 0.5rem 0rem 0.5rem;\n  --sh-tab-item-href-condensed-height: 3.25rem;\n  --sh-tab-item-icon-href-wrapper-margin: 1rem 0.5rem;\n  --sh-tab-item-condensed-href-badge-margin-top: -0.8125rem;\n  --sh-tab-item-condensed-href-empty-badge-margin-top: -0.75rem;\n  --sh-tab-item-closable-condensed-href-badge-margin-top: -1.875rem;\n  --sh-tab-item-closable-condensed-empty-href-badge-margin-top: -2.4375rem;\n  --sh-tab-item-collapsed-href-accessbar-height: 5rem;\n  --sh-tab-item-tab-item-icon-margin: 0rem 0.5rem 0rem 0.25rem;\n  --sh-tab-item-condensed-collapsed-icon-href-wrapper-margin: 0rem 0rem 0.125rem;\n  --sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left: 0.5rem;\n  --sh-tab-item-collapsed-icon-height: 5rem;\n  --sh-tab-item-condensed-icon-only-href-wrapper-margin: 0.75rem 1.5rem 0.125rem;\n  --sh-tab-item-min-width-tab: 6rem;\n  --sh-tab-item-icon-href-padding: 0rem 1.5rem;\n  --sh-modal-label-wrapper-padding: 0rem 0.75rem 0rem 1.5rem;\n  --sh-modal-body-wrapper-padding: 1.5rem;\n  --sh-modal-footer-wrapper-padding: 1.5rem;\n  --sh-modal-footer-wrapper-margin-left: 1rem;\n  --sh-modal-close-button-2-margin: 0.5rem 0.5rem 0.5rem 0.5rem;\n  --sh-modal-modal-label-line-height: 2.25rem;\n  --sh-modal-close-button-margin-left: 1rem;\n  --sh-modal-icon-margin-right: 0.75rem;\n  --sh-modal-label-wrapper-height: 5.5rem;\n  --sh-modal-wrapper-content-margin-bottom: 1.5rem;\n  --sh-modal-functions-wrapper-gap: 1rem;\n  --sh-modal-functions-wrapper-margin-left: 0.75rem;\n  --sh-timepicker-height: 4.5rem;\n  --sh-timepicker-panel-height: 14rem;\n  --sh-timepicker-control-value-margin: 1rem 0;\n  --sh-timepicker-control-value-height: 2rem;\n  --sh-timepicker-icon-wrapper-padding-right: 0.75rem;\n  --sh-timepicker-icon-wrapper-gap: 0.5rem;\n  --sh-timepicker-label-without-value-line-height: 2rem;\n  --sh-timepicker-label-left: 0.75rem;\n  --sh-timepicker-label-top: 1.25rem;\n  --sh-timepicker-label-with-value-top: 0.5rem;\n  --sh-timepicker-label-with-value-line-height: 1.75rem;\n  --sh-timepicker-input-field-height: 1.75rem;\n  --sh-timepicker-input-field-padding: 2.25rem 0 0.5rem 0.75rem;\n  --sh-timepicker-placeholder-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-amPm-overlay-width: 4rem;\n  --sh-timepicker-amPm-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-amPm-label-width: 2.125rem;\n  --sh-timepicker-seperator-width: 0.625rem;\n  --sh-timepicker-seperator-height: var(--sh-timepicker-input-field-height);\n  --sh-timepicker-condensed-height: 4rem;\n  --sh-timepicker-condensed-label-top: 1rem;\n  --sh-timepicker-condensed-input-field-height: 2rem;\n  --sh-timepicker-condensed-input-field-padding: 1rem 0 1rem 0.75rem;\n  --sh-timepicker-helper-text-padding: 0.25rem 0.75rem 0rem;\n  --sh-scrollpicker-main-container-height: 22.5rem;\n  --sh-scrollpicker-data-cell-height: 4.5rem;\n  --sh-scrollpicker-data-cell-width: 5.5rem;\n  --sh-scrollpicker-selector-top: 9rem;\n  --sh-scrollpicker-selector-height: var(--sh-scrollpicker-data-cell-height);\n  --sh-scrollpicker-current-scale: xl;\n  --sh-tool-padding: 0.4375rem;\n  --sh-tool-bottom-padding-with-icon: 0.3125rem;\n  --sh-tool-height: 7rem;\n  --sh-tool-width: var(--sh-tool-height);\n  --sh-tool-condensed-padding: 0.1875rem;\n  --sh-tool-condensed-height: 4rem;\n  --sh-tool-condensed-width: var(--sh-tool-condensed-height);\n  --sh-tool-icon-value-label-font-size: 1.375rem;\n  --sh-tool-icon-value-label-line-height: var(--sh-tool-icon-value-label-font-size);\n  --sh-tool-value-label-line-height: 1.5rem;\n  --sh-tool-label-line-height: 1.5rem;\n  --sh-tool-label-with-icon-height: 2.875rem;\n  --sh-tool-icon-label-margin-top: 0.25rem;\n  --sh-tool-palette-height: 1.5rem;\n  --sh-tool-palette-width: var(--sh-tool-palette-height);\n  --sh-tool-arrow-height: 0.5rem;\n  --sh-tool-arrow-width: var(--sh-tool-arrow-height);\n  --sh-tool-arrow-border: 0.25rem;\n  --sh-tool-popover-max-height: 21.75rem;\n  --sh-tool-condensed-palette-height: 1rem;\n  --sh-tool-condensed-palette-width: var(--sh-tool-condensed-palette-height);\n  --sh-min-touch-size: 2.5rem;\n  --sh-slider-input-height: 2.75rem;\n  --sh-slider-input-width: 4.25rem;\n  --sh-slider-slider-area-height: 4rem;\n  --sh-slider-slider-area-margin-top: 0.25rem;\n  --sh-slider-thumb-diameter: 1.75rem;\n  --sh-slider-track-height: 0.25rem;\n  --sh-slider-input-padding: 0.375rem 0.875rem;\n  --sh-slider-horizontal-tooltip-thumb-distance: 1.375rem;\n  --sh-slider-tooltip-width: 4.25rem;\n  --sh-slider-tooltip-height: 2.75rem;\n  --sh-slider-tick-diameter: 0.875rem;\n  --sh-slider-tick-diameter-on-hover: 1.125rem;\n  --sh-slider-vertical-slider-tooltip-thumb-distance: 1.0625rem;\n  --sh-slider-vertical-slider-input-slider-distance: 1.5rem;\n  --sh-slider-vertical-slider-input-container-width: 7rem;\n  --sh-slider-vertical-slider-input-label-input-width: 2.625rem;\n  --sh-slider-step-tick-width: 0.125rem;\n  --sh-slider-step-tick-height: 1.25rem;\n  --sh-slider-range-input-separator-width: 0.25rem;\n  --sh-slider-range-input-separator-side-margin: 0.5rem;\n  --sh-slider-step-tick-min-width: 4rem;\n  --sh-slider-arrow-controls-inter-icon-gap: 0.5rem;\n  --sh-access-bar-height: 6.5rem;\n  --sh-access-bar-condensed-height: 4.5rem;\n  --sh-access-bar-mobile-height: 5rem;\n  --sh-access-bar-logo-height: 3.5rem;\n  --sh-access-bar-logo-margin-left: 0.5rem;\n  --sh-access-bar-logo-margin-right: 2.5rem;\n  --sh-access-bar-label-line-height: 2.25rem;\n  --sh-access-bar-condensed-logo-height: 3rem;\n  --sh-access-bar-label-margin-right: 2.5rem;\n  --sh-access-bar-padding: 1.5rem 2rem;\n  --sh-access-bar-functions-slot-margin-left: 1.5rem;\n  --sh-access-bar-user-identifier-margin-left: 2.5rem;\n  --sh-access-bar-window-controls-margins: 0.25rem -1.25rem 2.25rem 1.5rem;\n  --sh-access-bar-mobile-tabs-wrapper-margin: 0rem;\n  --sh-access-bar-window-controls-height: 4rem;\n  --sh-access-bar-condensed-padding: 0.75rem 2rem;\n  --sh-access-bar-mobile-wrapper-padding: 0.5rem 1.5rem;\n  --sh-access-bar-mobile-left-slot-margin-left: 1rem;\n  --sh-access-bar-mobile-right-slot-margin-right: 1rem;\n  --sh-home-screen-card-height: 22rem;\n  --sh-home-screen-card-width: 22rem;\n  --sh-home-screen-card-margin-right: 1.5rem;\n  --sh-home-screen-functions-button-bottom: 1.5rem;\n  --sh-home-screen-functions-button-right: 1.5rem;\n  --sh-home-screen-functions-card-bottom: 6.25rem;\n  --sh-home-screen-functions-card-right: 1.5rem;\n  --sh-home-screen-functions-card-width: 19.5rem;\n  --sh-workline-item-wrapper-height: 7.5rem;\n  --sh-workline-item-svg-height-width: 5.5rem;\n  --sh-workline-item-type-info-height-width: 4.5rem;\n  --sh-workline-item-progress-circle: 5rem;\n  --sh-workline-item-circle-stroke-width: 0.25rem;\n  --sh-workline-item-circle-stroke-dasharray: 7.6;\n  --sh-workline-wrapper-height: 11.5rem;\n  --sh-workline-item-label-height: 3.5rem;\n  --sh-workline-wrapper-top-padding: 0.75rem;\n  --sh-workline-item-wrapper-margin: 1rem;\n  --sh-workline-item-badge-wrapper-position: 0.75rem;\n  --sh-workline-item-icon-size-m: 2.25rem;\n  --sh-workline-item-triangle-height: 6rem;\n  --sh-workline-item-triangle-border-left-right: 0.5625rem;\n  --sh-workline-item-triangle-border-top-bottom: 0.75rem;\n  --sh-workline-item-badge-slotted-position-top: -0.5rem;\n  --sh-workline-item-badge-slotted-position-right: -0.5rem;\n  --sh-workline-item-margin: 1.25rem;\n  --sh-workline-item-thumbnail-width-height: 4.5rem;\n  --sh-workline-label-height: 2.5rem;\n  --sh-workline-right-wrapper-margin: 2rem;\n  --sh-workline-item-active-icon-size-m: 3rem;\n  --sh-workline-right-wrapper-left-padding: 2rem;\n  --sh-workline-item-info-line-height: 1.75rem;\n  --sh-workline-item-popover-clear-icon-padding: -0.75rem;\n  --sh-image-segment-slot-left: 1rem;\n  --sh-image-segment-slot-right: 1rem;\n  --sh-image-segment-slot-top: 1rem;\n  --sh-image-segment-slot-bottom: 1rem;\n  --sh-image-segment-left-right-margin: 0.5rem 0;\n  --sh-image-segment-top-bottom-margin: 0 0.5rem;\n  --sh-image-segment-text-line-height: 2rem;\n  --sh-image-segment-corner-right-ml: 1rem;\n  --sh-carousel-height: 4rem;\n  --sh-carousel-max-width: 16rem;\n  --sh-carousel-counter-line-height: 2rem;\n  --sh-carousel-counter-bottom: 0.5rem;\n  --sh-carousel-counter-padding: 0.25rem 0.5rem 0.25rem 0.5rem;\n  --sh-carousel-counter-left-right: 0.5rem;\n  --sh-carousel-counter-border-radius: 0.125rem;\n  --sh-carousel-arrow-left: 0.75rem;\n  --sh-carousel-arrow-right: 0.75rem;\n  --sh-carousel-icon-width: 4rem;\n  --sh-carousel-icon-height: 4rem;\n  --sh-carousel-arrow-padding: 0.25rem;\n  --sh-thumbnail-image-wrapper-padding: 0.5rem;\n  --sh-thumbnail-label-wrapper-margin: -0.25rem 0.5rem 0.25rem 0.5rem;\n  --sh-thumbnail-label-height: 3.5rem;\n  --sh-thumbnail-image-border-radius: 0.125rem;\n  --sh-thumbnail-thumbnail-border-radius: 0.125rem;\n  --sh-thumbnail-image-wrapper-padding-condensed: 0.25rem;\n  --sh-thumbnail-label-wrapper-margin-condensed: 0rem 0.25rem 0.25rem 0.25rem;\n  --sh-thumbnail-label-line-height: 1.75rem;\n  --sh-thumbnail-icons-wrapper-margin: 0rem 0rem 0.25rem 0.25rem;\n  --sh-thumbnail-thumbnail-border: 0.0625rem;\n  --sh-thumbnail-checkbox-border-radius: 0.125rem;\n  --sh-thumbnail-new-icon-width: 0.75rem;\n  --sh-thumbnail-new-icon-height: 0.75rem;\n  --sh-thumbnail-new-icon-margin: 0.625rem;\n  --sh-thumbnail-badge-width: 1.5rem;\n  --sh-thumbnail-badge-margin: 0.625rem;\n  --sh-thumbnail-indications-wrapper-margin: 0.1875rem 0.1875rem 0 0;\n  --sh-thumbnail-indications-wrapper-margin-left: 0.25rem;\n  --sh-thumbnail-info-slot-wrapper-bottom: 0.6875rem;\n  --sh-thumbnail-info-slot-wrapper-left: 0.6875rem;\n  --sh-thumbnail-info-slot-wrapper-padding: 0rem 0.375rem;\n  --sh-thumbnail-checkbox-height: 3.25rem;\n  --sh-thumbnail-checkbox-width: 3.25rem;\n  --sh-thumbnail-thumbnail-icon-bottom: 0.6875rem;\n  --sh-thumbnail-thumbnail-icon-right: 0.6875rem;\n  --sh-thumbnail-thumbnail-checkbox-top: 0.6875rem;\n  --sh-thumbnail-thumbnail-checkbox-left: 0.6875rem;\n  --sh-thumbnail-label-margin-bottom: 0.5rem;\n  --sh-datepicker-overlay-container-height: 4.5rem;\n  --sh-datepicker-overlay-container-height-condensed: 4rem;\n  --sh-datepicker-months-grid-gap: 0.5rem;\n  --sh-datepicker-date-panel-width: 33rem;\n  --sh-datepicker-date-panel-padding: 1.5rem 1rem 1rem 1rem;\n  --sh-datepicker-date-panel-height: 38rem;\n  --sh-datepicker-header-area-height: 4rem;\n  --sh-datepicker-month-and-year-display-width: 15rem;\n  --sh-datepicker-month-and-year-display-line-height: 4rem;\n  --sh-datepicker-month-and-year-display-border-radius: 2.5rem;\n  --sh-datepicker-date-grid-template-rows: 4rem;\n  --sh-datepicker-date-grid-template-columns: 4rem;\n  --sh-datepicker-date-grid-gap: 0.5rem;\n  --sh-datepicker-date-grid-margin-top: 0.5rem;\n  --sh-datepicker-week-day-name-line-height: 4rem;\n  --sh-datepicker-date-line-height: 4rem;\n  --sh-datepicker-date-border-radius: 2rem;\n  --sh-datepicker-date-height: 4rem;\n  --sh-datepicker-date-width: 4rem;\n  --sh-datepicker-icon-dummy-width: 4rem;\n  --sh-datepicker-icon-dummy-height: 4rem;\n  --sh-datepicker-date-panel-padding-year-and-month-selector: 1.5rem 1rem 4.5rem;\n  --sh-datepicker-header-area-height-year-and-month-selector: 4rem;\n  --sh-datepicker-line-height-year-selector: 4rem;\n  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 4rem;\n  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 7.5rem;\n  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;\n  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 2.5rem;\n  --sh-datepicker-date-grid-margin-year-and-month-selector: 4.5rem 3.25rem 0rem 3.25rem;\n  --sh-datepicker-date-grid-width-year-and-month-selector: 24.5rem;\n  --sh-datepicker-year-height-year-selector: 4rem;\n  --sh-datepicker-year-line-height-year-selector: 4rem;\n  --sh-datepicker-year-border-radius-year-selector: 2rem;\n  --sh-datepicker-month-and-year-width: 9rem;\n  --sh-datepicker-month-and-year-height: 4rem;\n  --sh-datepicker-month-height: 4rem;\n  --sh-datepicker-month-line-height: 4rem;\n  --sh-datepicker-month-border-radius: 2rem;\n  --sh-splash-screen-logo-height: 4rem;\n  --sh-splash-screen-logo-padding: 0.5rem 0rem 0rem 0.5rem;\n  --sh-splash-screen-data-wrapper-width: 43.5rem;\n  --sh-splash-screen-data-wrapper-min-height: 43rem;\n  --sh-splash-screen-data-wrapper-margin: 1.5rem auto 0rem;\n  --sh-splash-screen-label-font-size: 3rem;\n  --sh-splash-screen-label-line-height: 3.25rem;\n  --sh-splash-screen-label-margin-top: 1.5rem;\n  --sh-splash-screen-label-margin-bottom: 3rem;\n  --sh-splash-screen-header-2-margin-top: 1rem;\n  --sh-splash-screen-header-2-margin-bottom: 3rem;\n  --sh-splash-screen-header-2-line-height: 2.25rem;\n  --sh-splash-screen-data-wrapper-margin-bottom-slotted: 1rem;\n  --sh-splash-screen-footer-wrapper-margin-top: 2rem;\n  --sh-splash-screen-footer-wrapper-margin-bottom: 1.5rem;\n  --sh-splash-screen-footer-wrapper-margin-left-slotted-items: 1rem;\n  --sh-splash-screen-footer-text-margin-top: 1.5rem;\n  --sh-splash-screen-footer-text-min-height: 4rem;\n  --sh-splash-screen-footer-text-slotted-margin-bottom: 0.5rem;\n  --sh-splash-screen-modal-min-height: 56rem;\n  --sh-splash-screen-modal-width: 80rem;\n  --sh-splash-screen-image-margin: -1.5rem -1.5rem -1.5rem 1.5rem;\n  --sh-splash-screen-image-border-radius: 0rem 0.125rem 0.125rem 0rem;\n  --sh-list-item-padding: 0.25rem 1.5rem;\n  --sh-list-item-min-height: 4rem;\n  --sh-list-item-icon-margin: 1rem;\n  --sh-list-item-line-height: 2.25rem;\n  --sh-list-item-info-line-height: 1.75rem;\n  --sh-list-item-text-padding: 0.75rem 0;\n  --sh-list-item-arrow-right-margin: 1rem;\n  --sh-list-item-text-wrapper-left-margin: 1rem;\n  --sh-list-item-select-margin-right: 1rem;\n  --sh-list-item-right-slotted-margin: 1rem;\n  --sh-list-item-icon-size-s: 3.5rem;\n  --sh-list-item-bottom-first-margin: 1.5rem;\n  --sh-list-item-bottom-slot-margin: 0.75rem;\n  --sh-list-item-content-line-height: 2rem;\n  --sh-list-item-checkbox-right: 0rem;\n  --sh-list-item-select-wrapper-size: 4rem;\n  --sh-list-item-info-margin: 0.25rem 0;\n  --sh-list-item-left-slotted-margin: 0.5rem;\n  --sh-list-item-right-slotted-first-margin: 1rem;\n  --sh-list-item-divider-inset-margin: 1.5rem;\n  --sh-list-integrated-margin: 0 -1.5rem;\n  --sh-list-integrated-arrow-margin: 0.75rem;\n  --sh-table-cell-icon-min-width: 6rem;\n  --sh-table-cell-wrapper-margin: 0.5rem 1rem;\n  --sh-table-cell-line-height: 4rem;\n  --sh-table-cell-mobile-wrapper-margin: 0.5rem 0.75rem;\n  --sh-table-cell-condensed-wrapper-margin: 0.25rem 1rem;\n  --sh-table-cell-first-nested-padding: 5rem;\n  --sh-table-cell-nested-padding: 4rem;\n  --sh-table-cell-first-nested-padding-checkbox: 8.5rem;\n  --sh-table-cell-nested-padding-checkbox: 4.75rem;\n  --sh-table-head-icon-min-width: 6rem;\n  --sh-table-cell-icon-cell-min-width: 6rem;\n  --sh-table-cell-icon-checkbox-cell-min-width: 6rem;\n  --sh-table-cell-inset: 4.75rem;\n  --sh-table-cell-checkbox-margin-top: 0.5rem;\n  --sh-table-head-line-height: 4rem;\n  --sh-table-head-wrapper-margin: 0.5rem 1rem;\n  --sh-table-head-condensed-wrapper-margin: 0.25rem 1rem;\n  --sh-table-head-mobile-wrapper-margin: 0.5rem 0.75rem;\n  --sh-table-head-sort-icon-margin: 0.5rem 0;\n  --sh-table-head-condensed-wrapper-height: 4rem;\n  --sh-table-head-header-wrapper-height: 4rem;\n  --sh-table-head-padding-left: 4.5rem;\n  --sh-table-cell-padding-left: 4.5rem;\n  --sh-table-head-checkbox-margin-top: 0.5rem;\n  --sh-table-row-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));\n  --sh-table-row-header-slot-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-4));\n  --sh-table-row-initial-icon-left: 5rem;\n  --sh-table-row-multiselect-checkbox-left: 4.75rem;\n  --sh-table-row-nested-expand-collapse-left: 0.5rem;\n  --sh-table-row-arrow-inset: 4rem;\n  --sh-interactive-area-display: block;\n  --sh-interactive-area-min-touch-size: 4.5rem;\n  --scrollbar-size: 0.75rem;\n  --scrollbar-corner-radius: 0.375rem ;\n}\n@media (max-width: 84rem), (max-height: 60rem) {\n  [sh-scale=xl] sh-splash-screen::part(splash-image) {\n    display: none;\n  }\n  [sh-scale=xl] sh-splash-screen::part(splash-content-wrapper) {\n    width: 100% !important;\n  }\n  [sh-scale=xl] sh-splash-screen::part(splash-info) {\n    text-align: center;\n  }\n  [sh-scale=xl] sh-splash-screen::part(splash-card) {\n    height: 100% !important;\n    width: 100% !important;\n    max-height: unset !important;\n    max-width: unset !important;\n    min-height: fit-content;\n  }\n}\n\n/*\n * definitions of where to apply colors\n */\nhtml, [sh-color=light] {\n  -webkit-tap-highlight-color: transparent;\n  --focus-outline: 0.125rem solid rgb(59, 153, 252);\n  --highlight-5: rgba(0, 0, 0, 0.05);\n  --highlight-10: rgba(0, 0, 0, 0.1);\n  --highlight-15: rgba(0, 0, 0, 0.15);\n  --highlight-20: rgba(0, 0, 0, 0.2);\n  --base-0: rgba(255,255,255,1);\n  --base-1: rgb(235, 235, 235);\n  --base-2: rgb(245, 245, 245);\n  --base-3: rgba(255,255,255,1);\n  --base-4: rgba(255,255,255,1);\n  --blur-background-1: 255,255,255;\n  --ui-0: 0,153,153;\n  --ui-1: 0,0,0;\n  --ui-2: 236,102,2;\n  --ui-3: 207,75,0;\n  --ui-4: 216,88,8;\n  --ui-5: 125,125,125;\n  --ui-6: 200,200,200;\n  --ui-7: 255,255,255;\n  --functional-red: 231,0,29;\n  --functional-yellow: 255,210,0;\n  --functional-green: 0,154,56;\n  --functional-blue: 110,123,159;\n  --support-1: rgb(0, 121, 105);\n  --support-2: rgb(143, 26, 255);\n  --support-3: rgb(0, 136, 0);\n  --support-4: rgb(154, 83, 35);\n  --support-5: rgb(0, 106, 221);\n  --support-6: rgb(178, 27, 92);\n  --support-1-tint: rgb(61, 195, 176);\n  --support-2-tint: rgb(221, 111, 255);\n  --support-3-tint: rgb(17, 217, 0);\n  --support-4-tint: rgb(241, 158, 106);\n  --support-5-tint: rgb(108, 174, 255);\n  --support-6-tint: rgb(240, 93, 143);\n  --support-1-shade: rgb(0, 79, 65);\n  --support-2-shade: rgb(76, 0, 211);\n  --support-3-shade: rgb(0, 98, 0);\n  --support-4-shade: rgb(105, 41, 0);\n  --support-5-shade: rgb(0, 61, 166);\n  --support-6-shade: rgb(127, 0, 52);\n  --text-white: rgb(255, 255, 255);\n  --text-highlight: rgba(207, 75, 0, 0.9);\n  --text-primary: rgba(0, 0, 0, 0.9);\n  --text-secondary: rgba(0, 0, 0, 0.6);\n  --text-disabled: rgba(0, 0, 0, 0.2);\n  --opacity-1: 1;\n  --opacity-2: 0.9;\n  --opacity-3: 0.6;\n  --opacity-4: 0.4;\n  --opacity-5: 0.2;\n  --opacity-6: 0.1;\n  --opacity-7: 0.05;\n  --blur-1: 1.5rem;\n  --ui-8: 255,255,255;\n  --text-white-disabled-opacity: 0.6;\n  --text-white-disabled: rgba(255, 255, 255, 0.6);\n  --logo-1: #ec6602;\n  --logo-2: #009999;\n  --divider: 200,200,200;\n  --arrow-down: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAvklEQVRYhe2X0QnDMAxEr6VLJcs0o3WaZiwXgT+CkFWdXEghOjAkYPwecmScW2sNZ+Z+Kv3yAiVQAn8vsAFYf8BY+1pmHg586UPynoA/D+8vPcGqwHYAoy+QqYSGL1Ylot8AK6Hhw1gCUqZ9QmIE36NbMCNBwT2BjAQN/ybASKTgklEbagmozoACpuAS5kak29NLCC5hjuLRduiE4axARIKCZwQ8CRqeFbAkUnBJpAs8CeuZSv0XlEAJXFwAwAfZRzJMuiMA2AAAAABJRU5ErkJggg==");\n  --arrow-up: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAsUlEQVRYhe3W4QmAIBCG4SuapR2cpkarZWqHljEEAykvz+8Cf3SCP4TofZAO6rz31HL1Teu/BxjAAF8A5rjhNSjjLjkvyEvQG7jHHXoTCOAeVyFqAVwcRtQASnEIIQVw8TVuGCGZgrf4lpynDIJK01G6AWl8Q2/iDSCNqxAcoDYOI3IANA4hpFMgjZcQj5UDhK92V8Q5xJ6bCG4MrwcPMJ4iwhq5cbTfcgMYwABtAUR0AiVTLuJVBNbbAAAAAElFTkSuQmCC");\n  --arrow-right: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAs0lEQVRYhe3XYQpAQBAF4EfO4g5chqOty3AHl1mp/SFRO/PepjCl2D/va1szVDFGPFn1o+mfB3gAY7pk1RjDu8NzUCByd+Ac3ql2IhewXqxJELmAGcBUAmE5hEUQ1rdAjvD0ASnC24hkCKYTShBsK6YRillAIV4xjnsAw8X6kjMvWAAVzgLocAYgCfcCZOEegDTcCpCHWwBFwi2AtkS4BRBSoDR8L8tXcbi5p+r/N/w4AMAGHW8wdt+xYmYAAAAASUVORK5CYII=");\n  --arrow-left: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAuUlEQVRYhe3X4QmAIBAF4Fc0SzvYMjWaLVM7tIwRFERknN67+mEHQQbxPi4Vq0II+LLqT9OLB1gAhv0SV0MOd6exl7zE6sA13Ek7wQBcw49a3gDEwkcAkzVAHa4BUMJzAbTwHAA1PBVAD08BmIRLAWbhUoBpSQDbnj7fPO8BdFqctANmiJRPYIJInQN0RM4kpCJyVwENoVmGFIR2H1AjGBtRDNG+BbhDzNJDKfNU7CP3j/X/GxYOALACckAwdhxwRdcAAAAASUVORK5CYII=");\n  --shadow-flat: none;\n  --shadow-raised: 0 0.125rem 0.25rem rgba(0,0,0,0.10), 0 -0.0625rem 0.125rem rgba(0,0,0,0.1);\n  --shadow-navigation: 0 0 0.5rem rgba(0, 0, 0, 0.1);\n  --shadow-overlay: 0 0.25rem 0.5rem rgba(0,0,0,0.10), 0 -0.0625rem 0.25rem rgba(0,0,0,0.1);\n  --transition-time: 0.2s;\n  --hover-transition-time: 0.1s;\n  --focus-color: rgb(18, 132, 255);\n  --focus-outline: 0.125rem solid var(--focus-color);\n}\n\n[sh-color=dark], sh-toolbar[in-segment-theme] {\n  --highlight-5: rgba(255, 255, 255, 0.05);\n  --highlight-10: rgba(255, 255, 255, 0.1);\n  --highlight-15: rgba(255, 255, 255, 0.15);\n  --highlight-20: rgba(255, 255, 255, 0.2);\n  --base-0: rgb(20, 20, 20);\n  --base-1: rgb(30, 30, 30);\n  --blur-background-1: 60,60,60;\n  --base-2: rgb(40, 40, 40);\n  --base-3: rgb(50, 50, 50);\n  --base-4: rgb(60, 60, 60);\n  --ui-0: 0,153,153;\n  --ui-1: 255,255,255;\n  --ui-2: 236,102,2;\n  --ui-3: 207,75,0;\n  --ui-4: 171,70,6;\n  --ui-5: 125,125,125;\n  --ui-6: 60,60,60;\n  --ui-7: 0,0,0;\n  --functional-red: 231,0,29;\n  --functional-yellow: 255,210,0;\n  --functional-green: 0,154,56;\n  --functional-blue: 110,123,159;\n  --support-1: rgb(0, 121, 105);\n  --support-2: rgb(143, 26, 255);\n  --support-3: rgb(0, 136, 0);\n  --support-4: rgb(154, 83, 35);\n  --support-5: rgb(0, 106, 221);\n  --support-6: rgb(178, 27, 92);\n  --support-1-tint: rgb(61, 195, 176);\n  --support-2-tint: rgb(221, 111, 255);\n  --support-3-tint: rgb(17, 217, 0);\n  --support-4-tint: rgb(241, 158, 106);\n  --support-5-tint: rgb(108, 174, 255);\n  --support-6-tint: rgb(240, 93, 143);\n  --support-1-shade: rgb(0, 79, 65);\n  --support-2-shade: rgb(76, 0, 211);\n  --support-3-shade: rgb(0, 98, 0);\n  --support-4-shade: rgb(105, 41, 0);\n  --support-5-shade: rgb(0, 61, 166);\n  --support-6-shade: rgb(127, 0, 52);\n  --text-white: rgb(255, 255, 255);\n  --text-highlight: rgba(236, 102, 2, 0.9);\n  --text-primary: rgba(255, 255, 255, 0.9);\n  --text-secondary: rgba(255, 255, 255, 0.6);\n  --text-disabled: rgba(255, 255, 255, 0.2);\n  --opacity-1: 1;\n  --opacity-2: 0.9;\n  --opacity-3: 0.6;\n  --opacity-4: 0.4;\n  --opacity-5: 0.2;\n  --opacity-6: 0.1;\n  --opacity-7: 0.05;\n  --logo-1: rgba(255, 255, 255, 0.9);\n  --logo-2: rgba(255, 255, 255, 0.9);\n  --blur-1: 1.5rem;\n  --ui-8: 60,60,60;\n  --text-white-disabled-opacity: 0.2;\n  --text-white-disabled: rgba(255, 255, 255, 0.2);\n  --divider: 125,125,125;\n  --arrow-down: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAvklEQVRYhe2X0QnDMAxEr6VLJcs0o3WaZiwXgT+CkFWdXEghOjAkYPwecmScW2sNZ+Z+Kv3yAiVQAn8vsAFYf8BY+1pmHg586UPynoA/D+8vPcGqwHYAoy+QqYSGL1Ylot8AK6Hhw1gCUqZ9QmIE36NbMCNBwT2BjAQN/ybASKTgklEbagmozoACpuAS5kak29NLCC5hjuLRduiE4axARIKCZwQ8CRqeFbAkUnBJpAs8CeuZSv0XlEAJXFwAwAfZRzJMuiMA2AAAAABJRU5ErkJggg==");\n  --arrow-up: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAsUlEQVRYhe3W4QmAIBCG4SuapR2cpkarZWqHljEEAykvz+8Cf3SCP4TofZAO6rz31HL1Teu/BxjAAF8A5rjhNSjjLjkvyEvQG7jHHXoTCOAeVyFqAVwcRtQASnEIIQVw8TVuGCGZgrf4lpynDIJK01G6AWl8Q2/iDSCNqxAcoDYOI3IANA4hpFMgjZcQj5UDhK92V8Q5xJ6bCG4MrwcPMJ4iwhq5cbTfcgMYwABtAUR0AiVTLuJVBNbbAAAAAElFTkSuQmCC");\n  --arrow-right: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAs0lEQVRYhe3XYQpAQBAF4EfO4g5chqOty3AHl1mp/SFRO/PepjCl2D/va1szVDFGPFn1o+mfB3gAY7pk1RjDu8NzUCByd+Ac3ql2IhewXqxJELmAGcBUAmE5hEUQ1rdAjvD0ASnC24hkCKYTShBsK6YRillAIV4xjnsAw8X6kjMvWAAVzgLocAYgCfcCZOEegDTcCpCHWwBFwi2AtkS4BRBSoDR8L8tXcbi5p+r/N/w4AMAGHW8wdt+xYmYAAAAASUVORK5CYII=");\n  --arrow-left: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAuUlEQVRYhe3X4QmAIBAF4Fc0SzvYMjWaLVM7tIwRFERknN67+mEHQQbxPi4Vq0II+LLqT9OLB1gAhv0SV0MOd6exl7zE6sA13Ek7wQBcw49a3gDEwkcAkzVAHa4BUMJzAbTwHAA1PBVAD08BmIRLAWbhUoBpSQDbnj7fPO8BdFqctANmiJRPYIJInQN0RM4kpCJyVwENoVmGFIR2H1AjGBtRDNG+BbhDzNJDKfNU7CP3j/X/GxYOALACckAwdhxwRdcAAAAASUVORK5CYII=");\n  --shadow-flat: none;\n  --shadow-raised: 0 0.125rem 0.25rem rgba(0,0,0,0.20), 0 -0.0625rem 0.125rem rgba(0,0,0,0.1);\n  --shadow-navigation: 0 0 0.5rem rgba(0, 0, 0, 0.2);\n  --shadow-overlay: 0 0.25rem 0.5rem rgba(0,0,0,0.20), 0 -0.0625rem 0.25rem rgba(0,0,0,0.1);\n  --focus-color: rgb(18, 132, 255);\n  --focus-outline: 0.125rem solid var(--focus-color);\n}\n\n/*\n * backward compatibility only!\n * TODO: get rid of these..\n */\nhtml[theme=light] {\n  -webkit-tap-highlight-color: transparent;\n  --focus-outline: 0.125rem solid rgb(59, 153, 252);\n  --highlight-5: rgba(0, 0, 0, 0.05);\n  --highlight-10: rgba(0, 0, 0, 0.1);\n  --highlight-15: rgba(0, 0, 0, 0.15);\n  --highlight-20: rgba(0, 0, 0, 0.2);\n  --base-0: rgba(255,255,255,1);\n  --base-1: rgb(235, 235, 235);\n  --base-2: rgb(245, 245, 245);\n  --base-3: rgba(255,255,255,1);\n  --base-4: rgba(255,255,255,1);\n  --blur-background-1: 255,255,255;\n  --ui-0: 0,153,153;\n  --ui-1: 0,0,0;\n  --ui-2: 236,102,2;\n  --ui-3: 207,75,0;\n  --ui-4: 216,88,8;\n  --ui-5: 125,125,125;\n  --ui-6: 200,200,200;\n  --ui-7: 255,255,255;\n  --functional-red: 231,0,29;\n  --functional-yellow: 255,210,0;\n  --functional-green: 0,154,56;\n  --functional-blue: 110,123,159;\n  --support-1: rgb(0, 121, 105);\n  --support-2: rgb(143, 26, 255);\n  --support-3: rgb(0, 136, 0);\n  --support-4: rgb(154, 83, 35);\n  --support-5: rgb(0, 106, 221);\n  --support-6: rgb(178, 27, 92);\n  --support-1-tint: rgb(61, 195, 176);\n  --support-2-tint: rgb(221, 111, 255);\n  --support-3-tint: rgb(17, 217, 0);\n  --support-4-tint: rgb(241, 158, 106);\n  --support-5-tint: rgb(108, 174, 255);\n  --support-6-tint: rgb(240, 93, 143);\n  --support-1-shade: rgb(0, 79, 65);\n  --support-2-shade: rgb(76, 0, 211);\n  --support-3-shade: rgb(0, 98, 0);\n  --support-4-shade: rgb(105, 41, 0);\n  --support-5-shade: rgb(0, 61, 166);\n  --support-6-shade: rgb(127, 0, 52);\n  --text-white: rgb(255, 255, 255);\n  --text-highlight: rgba(207, 75, 0, 0.9);\n  --text-primary: rgba(0, 0, 0, 0.9);\n  --text-secondary: rgba(0, 0, 0, 0.6);\n  --text-disabled: rgba(0, 0, 0, 0.2);\n  --opacity-1: 1;\n  --opacity-2: 0.9;\n  --opacity-3: 0.6;\n  --opacity-4: 0.4;\n  --opacity-5: 0.2;\n  --opacity-6: 0.1;\n  --opacity-7: 0.05;\n  --blur-1: 1.5rem;\n  --ui-8: 255,255,255;\n  --text-white-disabled-opacity: 0.6;\n  --text-white-disabled: rgba(255, 255, 255, 0.6);\n  --logo-1: #ec6602;\n  --logo-2: #009999;\n  --divider: 200,200,200;\n  --arrow-down: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAvklEQVRYhe2X0QnDMAxEr6VLJcs0o3WaZiwXgT+CkFWdXEghOjAkYPwecmScW2sNZ+Z+Kv3yAiVQAn8vsAFYf8BY+1pmHg586UPynoA/D+8vPcGqwHYAoy+QqYSGL1Ylot8AK6Hhw1gCUqZ9QmIE36NbMCNBwT2BjAQN/ybASKTgklEbagmozoACpuAS5kak29NLCC5hjuLRduiE4axARIKCZwQ8CRqeFbAkUnBJpAs8CeuZSv0XlEAJXFwAwAfZRzJMuiMA2AAAAABJRU5ErkJggg==");\n  --arrow-up: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAsUlEQVRYhe3W4QmAIBCG4SuapR2cpkarZWqHljEEAykvz+8Cf3SCP4TofZAO6rz31HL1Teu/BxjAAF8A5rjhNSjjLjkvyEvQG7jHHXoTCOAeVyFqAVwcRtQASnEIIQVw8TVuGCGZgrf4lpynDIJK01G6AWl8Q2/iDSCNqxAcoDYOI3IANA4hpFMgjZcQj5UDhK92V8Q5xJ6bCG4MrwcPMJ4iwhq5cbTfcgMYwABtAUR0AiVTLuJVBNbbAAAAAElFTkSuQmCC");\n  --arrow-right: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAs0lEQVRYhe3XYQpAQBAF4EfO4g5chqOty3AHl1mp/SFRO/PepjCl2D/va1szVDFGPFn1o+mfB3gAY7pk1RjDu8NzUCByd+Ac3ql2IhewXqxJELmAGcBUAmE5hEUQ1rdAjvD0ASnC24hkCKYTShBsK6YRillAIV4xjnsAw8X6kjMvWAAVzgLocAYgCfcCZOEegDTcCpCHWwBFwi2AtkS4BRBSoDR8L8tXcbi5p+r/N/w4AMAGHW8wdt+xYmYAAAAASUVORK5CYII=");\n  --arrow-left: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAuUlEQVRYhe3X4QmAIBAF4Fc0SzvYMjWaLVM7tIwRFERknN67+mEHQQbxPi4Vq0II+LLqT9OLB1gAhv0SV0MOd6exl7zE6sA13Ek7wQBcw49a3gDEwkcAkzVAHa4BUMJzAbTwHAA1PBVAD08BmIRLAWbhUoBpSQDbnj7fPO8BdFqctANmiJRPYIJInQN0RM4kpCJyVwENoVmGFIR2H1AjGBtRDNG+BbhDzNJDKfNU7CP3j/X/GxYOALACckAwdhxwRdcAAAAASUVORK5CYII=");\n  --shadow-flat: none;\n  --shadow-raised: 0 0.125rem 0.25rem rgba(0,0,0,0.10), 0 -0.0625rem 0.125rem rgba(0,0,0,0.1);\n  --shadow-navigation: 0 0 0.5rem rgba(0, 0, 0, 0.1);\n  --shadow-overlay: 0 0.25rem 0.5rem rgba(0,0,0,0.10), 0 -0.0625rem 0.25rem rgba(0,0,0,0.1);\n  --transition-time: 0.2s;\n  --hover-transition-time: 0.1s;\n  --focus-color: rgb(18, 132, 255);\n  --focus-outline: 0.125rem solid var(--focus-color);\n}\n\nhtml[theme=dark] {\n  --highlight-5: rgba(255, 255, 255, 0.05);\n  --highlight-10: rgba(255, 255, 255, 0.1);\n  --highlight-15: rgba(255, 255, 255, 0.15);\n  --highlight-20: rgba(255, 255, 255, 0.2);\n  --base-0: rgb(20, 20, 20);\n  --base-1: rgb(30, 30, 30);\n  --blur-background-1: 60,60,60;\n  --base-2: rgb(40, 40, 40);\n  --base-3: rgb(50, 50, 50);\n  --base-4: rgb(60, 60, 60);\n  --ui-0: 0,153,153;\n  --ui-1: 255,255,255;\n  --ui-2: 236,102,2;\n  --ui-3: 207,75,0;\n  --ui-4: 171,70,6;\n  --ui-5: 125,125,125;\n  --ui-6: 60,60,60;\n  --ui-7: 0,0,0;\n  --functional-red: 231,0,29;\n  --functional-yellow: 255,210,0;\n  --functional-green: 0,154,56;\n  --functional-blue: 110,123,159;\n  --support-1: rgb(0, 121, 105);\n  --support-2: rgb(143, 26, 255);\n  --support-3: rgb(0, 136, 0);\n  --support-4: rgb(154, 83, 35);\n  --support-5: rgb(0, 106, 221);\n  --support-6: rgb(178, 27, 92);\n  --support-1-tint: rgb(61, 195, 176);\n  --support-2-tint: rgb(221, 111, 255);\n  --support-3-tint: rgb(17, 217, 0);\n  --support-4-tint: rgb(241, 158, 106);\n  --support-5-tint: rgb(108, 174, 255);\n  --support-6-tint: rgb(240, 93, 143);\n  --support-1-shade: rgb(0, 79, 65);\n  --support-2-shade: rgb(76, 0, 211);\n  --support-3-shade: rgb(0, 98, 0);\n  --support-4-shade: rgb(105, 41, 0);\n  --support-5-shade: rgb(0, 61, 166);\n  --support-6-shade: rgb(127, 0, 52);\n  --text-white: rgb(255, 255, 255);\n  --text-highlight: rgba(236, 102, 2, 0.9);\n  --text-primary: rgba(255, 255, 255, 0.9);\n  --text-secondary: rgba(255, 255, 255, 0.6);\n  --text-disabled: rgba(255, 255, 255, 0.2);\n  --opacity-1: 1;\n  --opacity-2: 0.9;\n  --opacity-3: 0.6;\n  --opacity-4: 0.4;\n  --opacity-5: 0.2;\n  --opacity-6: 0.1;\n  --opacity-7: 0.05;\n  --logo-1: rgba(255, 255, 255, 0.9);\n  --logo-2: rgba(255, 255, 255, 0.9);\n  --blur-1: 1.5rem;\n  --ui-8: 60,60,60;\n  --text-white-disabled-opacity: 0.2;\n  --text-white-disabled: rgba(255, 255, 255, 0.2);\n  --divider: 125,125,125;\n  --arrow-down: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAvklEQVRYhe2X0QnDMAxEr6VLJcs0o3WaZiwXgT+CkFWdXEghOjAkYPwecmScW2sNZ+Z+Kv3yAiVQAn8vsAFYf8BY+1pmHg586UPynoA/D+8vPcGqwHYAoy+QqYSGL1Ylot8AK6Hhw1gCUqZ9QmIE36NbMCNBwT2BjAQN/ybASKTgklEbagmozoACpuAS5kak29NLCC5hjuLRduiE4axARIKCZwQ8CRqeFbAkUnBJpAs8CeuZSv0XlEAJXFwAwAfZRzJMuiMA2AAAAABJRU5ErkJggg==");\n  --arrow-up: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAsUlEQVRYhe3W4QmAIBCG4SuapR2cpkarZWqHljEEAykvz+8Cf3SCP4TofZAO6rz31HL1Teu/BxjAAF8A5rjhNSjjLjkvyEvQG7jHHXoTCOAeVyFqAVwcRtQASnEIIQVw8TVuGCGZgrf4lpynDIJK01G6AWl8Q2/iDSCNqxAcoDYOI3IANA4hpFMgjZcQj5UDhK92V8Q5xJ6bCG4MrwcPMJ4iwhq5cbTfcgMYwABtAUR0AiVTLuJVBNbbAAAAAElFTkSuQmCC");\n  --arrow-right: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAs0lEQVRYhe3XYQpAQBAF4EfO4g5chqOty3AHl1mp/SFRO/PepjCl2D/va1szVDFGPFn1o+mfB3gAY7pk1RjDu8NzUCByd+Ac3ql2IhewXqxJELmAGcBUAmE5hEUQ1rdAjvD0ASnC24hkCKYTShBsK6YRillAIV4xjnsAw8X6kjMvWAAVzgLocAYgCfcCZOEegDTcCpCHWwBFwi2AtkS4BRBSoDR8L8tXcbi5p+r/N/w4AMAGHW8wdt+xYmYAAAAASUVORK5CYII=");\n  --arrow-left: url("data:image/png,base64,iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAABYlAAAWJQFJUiTwAAAAuUlEQVRYhe3X4QmAIBAF4Fc0SzvYMjWaLVM7tIwRFERknN67+mEHQQbxPi4Vq0II+LLqT9OLB1gAhv0SV0MOd6exl7zE6sA13Ek7wQBcw49a3gDEwkcAkzVAHa4BUMJzAbTwHAA1PBVAD08BmIRLAWbhUoBpSQDbnj7fPO8BdFqctANmiJRPYIJInQN0RM4kpCJyVwENoVmGFIR2H1AjGBtRDNG+BbhDzNJDKfNU7CP3j/X/GxYOALACckAwdhxwRdcAAAAASUVORK5CYII=");\n  --shadow-flat: none;\n  --shadow-raised: 0 0.125rem 0.25rem rgba(0,0,0,0.20), 0 -0.0625rem 0.125rem rgba(0,0,0,0.1);\n  --shadow-navigation: 0 0 0.5rem rgba(0, 0, 0, 0.2);\n  --shadow-overlay: 0 0.25rem 0.5rem rgba(0,0,0,0.20), 0 -0.0625rem 0.25rem rgba(0,0,0,0.1);\n  --focus-color: rgb(18, 132, 255);\n  --focus-outline: 0.125rem solid var(--focus-color);\n}\n\nhtml[dicom] {\n  --ui-2: 228, 120, 20; /* Orange (Idle) */\n  --ui-3: 208, 105, 24; /* Orange (Hover) */\n  --ui-4: 163, 82, 18; /* Orange(On Press) */\n}\n\n/* SCROLLBAR */\n::-webkit-scrollbar {\n  width: var(--scrollbar-size);\n  height: var(--scrollbar-size);\n  background-color: transparent;\n  visibility: hidden;\n}\n\n::-webkit-scrollbar-track {\n  background-color: rgba(var(--ui-1), var(--opacity-7));\n  border-radius: var(--scrollbar-corner-radius);\n}\n\n::-webkit-scrollbar-thumb {\n  background-color: rgba(var(--ui-1), var(--opacity-6));\n  border-radius: var(--scrollbar-corner-radius);\n}\n\n::-webkit-scrollbar-thumb:active,\n::-webkit-scrollbar-thumb:hover {\n  background-color: rgba(var(--ui-1), var(--opacity-4));\n}\n\n/* BODY STYLES */\nhtml, body {\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  margin: 0;\n  font-family: "siemens sans", "Open Sans", "Roboto", "Droid Sans", -apple-system, BlinkMacSystemFont, "Arial", "Calibri", sans-serif;\n  font-style: normal;\n  font-weight: 400;\n  overflow: hidden;\n  -webkit-text-size-adjust: 100%;\n}\n\nhtml {\n  zoom: 1;\n}\n\n:lang(ja) {\n  --super-header: normal 400 1.25rem bree-headline, "\u30D2\u30E9\u30AE\u30CE\u89D2\u30B4 Pro", "Hiragino Kaku Gothic Pro W3", "Osaka", "\u30E1\u30A4\u30EA\u30AA", "Meiryo", "\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF", "MS PGothic", "Noto Sans CJK JP", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-1: normal 400 1rem bree-headline, "\u30D2\u30E9\u30AE\u30CE\u89D2\u30B4 Pro", "Hiragino Kaku Gothic Pro W3", "Osaka", "\u30E1\u30A4\u30EA\u30AA", "Meiryo", "\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF", "MS PGothic", "Noto Sans CJK JP", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-2: normal 700 1rem siemens sans, "\u30D2\u30E9\u30AE\u30CE\u89D2\u30B4 Pro", "Hiragino Kaku Gothic Pro W3", "Osaka", "\u30E1\u30A4\u30EA\u30AA", "Meiryo", "\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF", "MS PGothic", "Noto Sans CJK JP", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-1: normal 700 0.875rem siemens sans, "\u30D2\u30E9\u30AE\u30CE\u89D2\u30B4 Pro", "Hiragino Kaku Gothic Pro W3", "Osaka", "\u30E1\u30A4\u30EA\u30AA", "Meiryo", "\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF", "MS PGothic", "Noto Sans CJK JP", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-2: normal 700 0.75rem siemens sans, "\u30D2\u30E9\u30AE\u30CE\u89D2\u30B4 Pro", "Hiragino Kaku Gothic Pro W3", "Osaka", "\u30E1\u30A4\u30EA\u30AA", "Meiryo", "\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF", "MS PGothic", "Noto Sans CJK JP", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-1: normal 400 0.875rem siemens sans, "\u30D2\u30E9\u30AE\u30CE\u89D2\u30B4 Pro", "Hiragino Kaku Gothic Pro W3", "Osaka", "\u30E1\u30A4\u30EA\u30AA", "Meiryo", "\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF", "MS PGothic", "Noto Sans CJK JP", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-2: normal 400 0.75rem siemens sans, "\u30D2\u30E9\u30AE\u30CE\u89D2\u30B4 Pro", "Hiragino Kaku Gothic Pro W3", "Osaka", "\u30E1\u30A4\u30EA\u30AA", "Meiryo", "\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF", "MS PGothic", "Noto Sans CJK JP", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n}\n\n:lang(zh-Hans) {\n  --super-header: normal 400 1.25rem bree-headline, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang SC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK SC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-1: normal 400 1rem bree-headline, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang SC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK SC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-2: normal 700 1rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang SC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK SC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-1: normal 700 0.875rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang SC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK SC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-2: normal 700 0.75rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang SC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK SC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-1: normal 400 0.875rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang SC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK SC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-2: normal 400 0.75rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang SC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK SC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n}\n\n:lang(ko) {\n  --super-header: normal 400 1.25rem bree-headline, "Apple SD Gothic Neo", "NanumBarunGothic", "\uB9D1\uC740 \uACE0\uB515", "Malgun Gothic", "\uAD74\uB9BC", "Gulim", "\uB3CB\uC6C0", "Dotum", "Noto Sans CJK KR", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-1: normal 400 1rem bree-headline, "Apple SD Gothic Neo", "NanumBarunGothic", "\uB9D1\uC740 \uACE0\uB515", "Malgun Gothic", "\uAD74\uB9BC", "Gulim", "\uB3CB\uC6C0", "Dotum", "Noto Sans CJK KR", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-2: normal 700 1rem siemens sans, "Apple SD Gothic Neo", "NanumBarunGothic", "\uB9D1\uC740 \uACE0\uB515", "Malgun Gothic", "\uAD74\uB9BC", "Gulim", "\uB3CB\uC6C0", "Dotum", "Noto Sans CJK KR", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-1: normal 700 0.875rem siemens sans, "Apple SD Gothic Neo", "NanumBarunGothic", "\uB9D1\uC740 \uACE0\uB515", "Malgun Gothic", "\uAD74\uB9BC", "Gulim", "\uB3CB\uC6C0", "Dotum", "Noto Sans CJK KR", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-2: normal 700 0.75rem siemens sans, "Apple SD Gothic Neo", "NanumBarunGothic", "\uB9D1\uC740 \uACE0\uB515", "Malgun Gothic", "\uAD74\uB9BC", "Gulim", "\uB3CB\uC6C0", "Dotum", "Noto Sans CJK KR", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-1: normal 400 0.875rem siemens sans, "Apple SD Gothic Neo", "NanumBarunGothic", "\uB9D1\uC740 \uACE0\uB515", "Malgun Gothic", "\uAD74\uB9BC", "Gulim", "\uB3CB\uC6C0", "Dotum", "Noto Sans CJK KR", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-2: normal 400 0.75rem siemens sans, "Apple SD Gothic Neo", "NanumBarunGothic", "\uB9D1\uC740 \uACE0\uB515", "Malgun Gothic", "\uAD74\uB9BC", "Gulim", "\uB3CB\uC6C0", "Dotum", "Noto Sans CJK KR", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n}\n\n:lang(zh-Hant) {\n  --super-header: normal 400 1.25rem bree-headline, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang TC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK TC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-1: normal 400 1rem bree-headline, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang TC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK TC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --header-2: normal 700 1rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang TC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK TC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-1: normal 700 0.875rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang TC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK TC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --title-2: normal 700 0.75rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang TC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK TC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-1: normal 400 0.875rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang TC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK TC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n  --body-2: normal 400 0.75rem siemens sans, "\u534E\u6587\u7EC6\u9ED1", "STXihei", "PingFang TC", "\u5FAE\u8F6F\u96C5\u9ED1\u4F53", "Microsoft YaHei New", "\u5FAE\u8F6F\u96C5\u9ED1", "Microsoft Yahei", "SimSun", "\u5B8B\u4F53", "Noto Sans CJK TC", "Helvetica Neue", "Helvetica", "Arial", "sans-serif";\n}\n\n/* Firefox scrollbar */\n* {\n  scrollbar-color: rgba(var(--ui-1), var(--opacity-6)) rgba(var(--ui-1), var(--opacity-7));\n  scrollbar-width: thin;\n}\n\n*:hover, *:active {\n  scrollbar-color: rgba(var(--ui-1), var(--opacity-4)) rgba(var(--ui-1), var(--opacity-7));\n  scrollbar-width: thin;\n}\n\n.max-resize-checker {\n  position: absolute;\n  z-index: -1;\n  visibility: hidden;\n  opacity: 0;\n  top: 0;\n  left: 0;\n  height: 100%;\n  transition: all 0s linear !important;\n}';
  styleInject(css_248z);

  // ../styles/index.ts
  var _a, _b;
  (_b = (_a = s4).disableWarning) == null ? void 0 : _b.call(_a, "change-in-update");

  // ../sh-badge/src/sh-badge.lit.scss.js
  var sh_badge_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-badge-font-size=0.625rem] - font size for badge
   */
  --sh-badge-font-size: 0.625rem;
  /* 
   * @cssprop [--sh-badge-min-width=1rem] - min width of badge
   */
  --sh-badge-min-width: 1rem;
  /* 
   * @cssprop [--sh-badge-max-width=4rem] - max width of badge
   */
  --sh-badge-max-width: 4rem;
  /* 
   * @cssprop [--sh-badge-height=1rem] - height of badge
   */
  --sh-badge-height: 1rem;
  /* 
   * @cssprop [--sh-badge-line-height=0.5rem] - line height of badge
   */
  --sh-badge-line-height: 0.5rem;
  /* 
   * @cssprop [--sh-badge-no-label-size=0.5rem] - size of empty badge in case no label is set
   */
  --sh-badge-no-label-size: 0.5rem;
  /* 
   * @cssprop [--sh-badge-padding=0.25rem 0.25rem] - padding for text labels
   */
  --sh-badge-padding: 0.25rem 0.25rem;
  /* 
   * @cssprop [--sh-badge-icon-font-size=1.5rem] - applied to interllay used icon as --sh-icon-font-size-xs
   */
  --sh-badge-icon-font-size: 1.5rem;
  /* 
   * @cssprop [--sh-badge-label-type-padding=0rem 0.25rem 0rem 0.125rem] - padding is applied if both type and label are defined 
   */
  --sh-badge-label-type-padding: 0rem 0.25rem 0rem 0.125rem;
  /* 
   * @cssprop [--sh-badge-label-line-height=1rem] - line-height is applied if both type and label are defined 
   */
  --sh-badge-label-line-height: 1rem;
}

:host {
  display: block;
  flex: none;
  align-items: center;
  padding: var(--sh-badge-padding);
  border-radius: var(--sh-badge-font-size);
  background: rgba(var(--ui-0), var(--opacity-1));
  font: var(--title-2);
  font-size: var(--sh-badge-font-size);
  color: var(--text-white);
  max-width: var(--sh-badge-max-width);
  min-width: var(--sh-badge-min-width);
  width: fit-content;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  height: var(--sh-badge-height);
  line-height: var(--sh-badge-line-height);
  box-sizing: border-box;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

sh-icon {
  --sh-icon-font-size-xs: var(--sh-badge-icon-font-size);
}

:host([label=""]:not([type=error]):not([type=success]):not([type=warning])),
:host(:not([label]):not([type=error]):not([type=success]):not([type=warning])) {
  width: var(--sh-badge-no-label-size);
  height: var(--sh-badge-no-label-size);
  max-width: var(--sh-badge-no-label-size);
  max-height: var(--sh-badge-no-label-size);
  min-width: var(--sh-badge-no-label-size);
  min-height: var(--sh-badge-no-label-size);
}

:host([show-label][label][type=error]),
:host([show-label][label][type=warning]),
:host([show-label][label][type=success]) {
  display: flex;
  padding: var(--sh-badge-label-type-padding);
  line-height: var(--sh-badge-label-line-height);
}

:host([label][type=error]) span,
:host([label][type=warning]) span,
:host([label][type=success]) span {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

:host([label][type=warning]) span {
  color: black;
}

:host([type]:not([label])) {
  padding: 0rem;
  background: transparent;
}

:host([type=error]) sh-icon {
  color: rgb(var(--functional-red));
}

:host([type=warning]) sh-icon {
  color: rgb(var(--functional-yellow));
}

:host([type=success]) sh-icon {
  color: rgb(var(--functional-green));
}

:host([show-label][type=error]) {
  background: rgb(var(--functional-red));
}

:host([show-label][type=warning]) {
  background: rgb(var(--functional-yellow));
}

:host([show-label][type=success]) {
  background: rgb(var(--functional-green));
}

:host([disabled]:not([type])) {
  color: var(--text-white-disabled);
  background: rgba(var(--ui-0), var(--opacity-5));
}

:host([disabled][type]) {
  opacity: 0.2;
}`;

  // ../sh-badge/src/sh-badge.js
  var SHBadge = class SHBadge2 extends s4 {
    constructor() {
      super(...arguments);
      this.disabled = false;
      this.showLabel = false;
    }
    static get styles() {
      return [sh_badge_lit_scss_default];
    }
    render() {
      return x`
      ${this.showLabel ? x` ${this.type === "error" || this.type === "warning" || this.type === "success" ? x`<sh-icon icon="${this.type}" size="xs"></sh-icon>` : ``}
            <!-- added span tag to handle elipses with display flex while type and label are provided-->
            ${this.label ? x`<span>${this.label}</span>` : ``}` : x`${this.label || (this.type === "error" || this.type === "warning" || this.type === "success" ? x`<sh-icon icon="${this.type}" size="xs"></sh-icon>` : "")}`}
    `;
    }
    updated(changedProperties) {
      if (changedProperties.has("label")) {
        this.processLabel();
      }
    }
    processLabel() {
      if (this.label) {
        if (this.label.match("^\\d+$|^\\d+[+]$") !== null) {
          const badgeLabel = parseInt(this.label, 10);
          if (badgeLabel >= 1e3 || this.label.toString().length > 3) {
            this.label = "999+";
          }
        }
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHBadge.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHBadge.prototype, "type", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHBadge.prototype, "disabled", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "show-label" })], SHBadge.prototype, "showLabel", void 0);
  SHBadge = __decorate([e4("sh-badge")], SHBadge);

  // ../sh-text/src/sh-text.lit.scss.js
  var sh_text_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-text-super-header-line-height=2rem] - line height of super header text
   */
  --sh-text-super-header-line-height: 2rem;
  /* 
   * @cssprop [--sh-text-header-line-height=1.5rem] - line height of header text
   */
  --sh-text-header-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-text-title1-line-height=1.25rem] - line height of title1 text
   */
  --sh-text-title1-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-text-title2-line-height=1rem] - line height of title2 text
   */
  --sh-text-title2-line-height: 1rem;
  /* 
   * @cssprop [--sh-text-body1-line-height=1.25rem] - line height of body1 text
   */
  --sh-text-body1-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-text-body2-line-height=1rem] - line height of body2 text
   */
  --sh-text-body2-line-height: 1rem;
}

:host {
  height: auto;
  height: -ms-fit-content;
  height: -moz-fit-content;
  width: 100%;
  font-size: 0.875rem;
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  transition: var(--transition-time) color ease-in-out;
  display: block;
}

:host ::slotted(a) {
  color: currentColor;
}

:host ::slotted(a:hover),
:host ::slotted(a.hover) {
  color: var(--text-highlight);
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
}

:host([super-header]),
:host([size=super-header]) {
  font: var(--super-header);
  line-height: var(--sh-text-super-header-line-height);
}

:host([size=header-1]) {
  font: var(--header-1);
}

:host([header]),
:host([size=header-2]) {
  font: var(--header-2);
}

:host([title-1]),
:host([size=title-1]) {
  font: var(--title-1);
}

:host([title-2]),
:host([size=title-2]) {
  font: var(--title-2);
}

:host([body-1]),
:host([size=body-1]) {
  font: var(--body-1);
}

:host([body-2]),
:host([size=body-2]) {
  font: var(--body-2);
  line-height: var(--sh-text-body2-line-height);
}

/* color */
:host([color=primary]),
:host([color=primary][href]) a {
  color: var(--text-primary);
}

/* color */
:host([color=secondary]),
:host([color=secondary][href]) a {
  color: var(--text-secondary);
}

/* disabled */
:host([disabled]),
:host([disabled][href]) a {
  color: var(--text-disabled);
  pointer-events: none;
}

:host([href][color=primary]:not([disabled])) a {
  color: var(--text-primary);
}

:host([href][color=secondary]:not([disabled])) a {
  color: var(--text-secondary);
}

/* href */
:host([href]:hover:not([disabled])[size=body-2]:not(.touch-device)) a,
:host([href]:hover:not([disabled])[size=body-1]:not(.touch-device)) a {
  color: var(--text-highlight);
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
}

:host h1,
h2,
h3,
h4,
h5,
p {
  margin: 0;
  font-size: inherit;
  font-weight: unset;
}

/* line height */
:host([size=header-1]),
:host([size=header-2]) {
  line-height: var(--sh-text-header-line-height);
}

:host([size=body-1]) {
  line-height: var(--sh-text-body1-line-height);
}

:host([size=title-1]) {
  line-height: var(--sh-text-title1-line-height);
}

:host([size=title-2]) {
  line-height: var(--sh-text-title2-line-height);
}`;

  // ../sh-text/src/sh-text.js
  var SHText = class SHText2 extends s4 {
    constructor() {
      super(...arguments);
      this.size = "body-1";
      this.color = "primary";
      this.disabled = false;
    }
    static get styles() {
      return sh_text_lit_scss_default;
    }
    render() {
      return this.href && (this.size === "body-1" || this.size === "body-2") ? x`<a href="${this.href}" tabindex=${this.isDisabled()}><slot></slot></a>` : x`<slot></slot>`;
    }
    isDisabled() {
      return this.disabled ? -1 : 0;
    }
    attributeChangedCallback(name, oldval, newval) {
      super.attributeChangedCallback(name, oldval, newval);
      this.dispatchEvent(new Event(`${name}-changed`));
    }
    firstUpdated() {
      this.handleLegacyAttributes();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    handleLegacyAttributes() {
      const arr = ["super-header", "header", "body-1", "body-2", "title-1", "title-2"];
      arr.forEach((attr) => {
        if (this.hasAttribute(attr)) {
          console.warn(`You are using a legacy property (${attr}) of sh-text component. Please use the new 'size' and 'color' properties instead.`);
          if (this.size) {
            this.removeAttribute("size");
          }
        }
      });
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHText.prototype, "size", void 0);
  __decorate([n5({ type: String, reflect: true })], SHText.prototype, "color", void 0);
  __decorate([n5({ type: String, reflect: true })], SHText.prototype, "href", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHText.prototype, "disabled", void 0);
  SHText = __decorate([e4("sh-text")], SHText);

  // ../utils/window-size.js
  var windowSize = {};
  windowSize.util = (() => {
    function valueMatches(documentWidth, operation, breakpoint) {
      let match;
      switch (operation) {
        case "<":
          match = documentWidth < breakpoint;
          break;
        case ">":
          match = documentWidth > breakpoint;
          break;
        case "=":
          match = documentWidth === breakpoint;
          break;
        default:
          match = null;
      }
      return match;
    }
    return {
      valueMatches
    };
  })();

  // ../sh-access-bar/src/sh-access-bar.lit.scss.js
  var sh_access_bar_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-access-bar-height=4.5rem] - access bar height
   */
  --sh-access-bar-height: 4.5rem;
  /* 
   * @cssprop [--sh-access-bar-padding=1.25rem 1rem] - access bar item padding
   */
  --sh-access-bar-padding: 1.25rem 1rem;
  /* 
   * @cssprop [--sh-access-bar-logo-height=2rem] - access bar logo height
   */
  --sh-access-bar-logo-height: 2rem;
  /* 
   * @cssprop [--sh-access-bar-logo-margin-left=0.5rem] - access bar logo margin left
   */
  --sh-access-bar-logo-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-access-bar-logo-margin-right=2.5rem] - access bar logo margin right
   */
  --sh-access-bar-logo-margin-right: 2.5rem;
  /* 
   * @cssprop [--sh-access-bar-label-line-height=1.5rem] - label line height
   */
  --sh-access-bar-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-access-bar-label-margin-right=2.5rem] - access bar label margin right
   */
  --sh-access-bar-label-margin-right: 2.5rem;
  /* 
   * @cssprop [--sh-access-bar-condensed-height=2.5rem] - height of condensed access bar
   */
  --sh-access-bar-condensed-height: 2.5rem;
  /* 
   * @cssprop [--sh-access-bar-functions-slot-margin-left=1rem] - margin left of functions slot functions wrapper
   */
  --sh-access-bar-functions-slot-margin-left: 1rem;
  /* 
   * @cssprop [--sh-access-bar-condensed-padding=0.5rem 1rem] - access bar condensed height
   */
  --sh-access-bar-condensed-padding: 0.5rem 1rem;
  /* 
   * @cssprop [--sh-access-bar-condensed-logo-height=1.5rem] - height of the svg logo in condensed access bar
   */
  --sh-access-bar-condensed-logo-height: 1.5rem;
  /* 
   * @cssprop [--sh-access-bar-user-identifier-margin-left=1.5rem] - margin left of the user identifier in access bar
   */
  --sh-access-bar-user-identifier-margin-left: 1.5rem;
  /* 
   * @cssprop [--sh-access-bar-window-controls-margins=0.5rem -0.5rem 2.5rem 1rem] - Window control margins when native is set
   */
  --sh-access-bar-window-controls-margins: 0.5rem -0.5rem 2.5rem 1rem;
  /* 
   * @cssprop [--sh-access-bar-window-controls-height=1.5rem] - height of the window controls
   */
  --sh-access-bar-window-controls-height: 1.5rem;
  /* 
   * @cssprop [--sh-access-bar-mobile-wrapper-padding=0.75rem 1rem] - padding of the access-bar when mobile property is set
   */
  --sh-access-bar-mobile-wrapper-padding: 0.75rem 1rem;
  /* 
   * @cssprop [--sh-access-bar-mobile-height=3.5rem] - height of the access bar in mobile
   */
  --sh-access-bar-mobile-height: 3.5rem;
  /* 
   * @cssprop [--sh-access-bar-mobile-tabs-wrapper-margin=0rem] - margin of the tabs-wrapper in mobile access bar
   */
  --sh-access-bar-mobile-tabs-wrapper-margin: 0rem;
  /* 
   * @cssprop [--sh-access-bar-mobile-left-slot-margin-left=0.5rem] - margin-left of slot left mobile access bar
   */
  --sh-access-bar-mobile-left-slot-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-access-bar-mobile-right-slot-margin-right=0.5rem] - margin right of slot right mobile access bar
   */
  --sh-access-bar-mobile-right-slot-margin-right: 0.5rem;
}

:host {
  background: var(--base-0);
  transition: var(--transition-time) all ease-in-out;
  box-shadow: var(--shadow-navigation);
  display: block;
  padding: 0rem;
  z-index: 4;
  height: var(--sh-access-bar-height);
}

.access-wrapper {
  display: flex;
  width: 100%;
  height: 100%;
  padding: var(--sh-access-bar-padding);
  box-sizing: border-box;
  align-items: center;
}

.logo {
  height: var(--sh-access-bar-logo-height);
  margin-left: var(--sh-access-bar-logo-margin-left);
  margin-right: var(--sh-access-bar-logo-margin-right);
  background-size: cover;
  display: flex;
  align-items: center;
}

:host([cursor-change]) .logo {
  cursor: pointer;
}

.siemens {
  fill: var(--logo-2);
}

.healthineers {
  fill: var(--logo-1);
}

.label {
  margin-right: var(--sh-access-bar-label-margin-right);
  font: var(--header-1);
  color: var(--text-primary);
  line-height: var(--sh-access-bar-label-line-height);
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  flex-direction: column;
  justify-content: center;
  align-self: center;
}

.tabs-wrapper {
  margin: -1.25rem 0;
  display: flex;
  flex-direction: row;
}

:host([empty-info]) .tabs-wrapper {
  flex: 1;
}

.overflow-hidden {
  overflow: hidden;
}

:host([condensed]) .tabs-wrapper {
  margin: -0.5rem auto -0.5rem 0;
}

.functions-wrapper > ::slotted([slot=functions]) {
  margin-left: var(--sh-access-bar-functions-slot-margin-left);
}

.user-wrapper > ::slotted(sh-user-identifier[slot=user]) {
  margin-left: var(--sh-access-bar-user-identifier-margin-left);
}

.functions-wrapper {
  display: contents;
  align-items: center;
}

/* native (window controls) */
.window-controls {
  display: inline-flex;
  height: var(--sh-access-bar-window-controls-height);
  gap: 0.5rem;
  margin: var(--sh-access-bar-window-controls-margins);
}

:host([condensed]) .window-controls {
  align-self: center;
  margin-top: unset;
  margin-bottom: unset;
}

/* condensed */
:host([condensed]) {
  height: var(--sh-access-bar-condensed-height);
}

:host([condensed]) .sh-access-wrapper,
:host([condensed]) .access-wrapper {
  padding: var(--sh-access-bar-condensed-padding);
}

:host([condensed]) .logo svg {
  height: var(--sh-access-bar-condensed-logo-height);
}

:host([condensed]) .logo {
  align-self: center;
}

:host([condensed]) .user-wrapper {
  display: flex;
  align-items: center;
}

/* mobile */
:host([mobile]) {
  height: var(--sh-access-bar-mobile-height);
}

.access-wrapper > ::slotted([slot=left]),
.access-wrapper > ::slotted([slot=right]),
:host([mobile]) .logo,
:host([mobile]) .user-wrapper > ::slotted([slot=user]),
:host([mobile]) .functions-wrapper > ::slotted([slot=functions]),
:host([mobile]) .access-wrapper > .tabs-wrapper > ::slotted([slot=tabs]),
:host([mobile]) .access-wrapper > .info-wrapper > ::slotted([slot=info]) {
  display: none;
}

:host(:not([empty-info])) .info-wrapper {
  display: flex;
  flex: 1;
  align-items: center;
}

:host(:not([empty-info])) .info-wrapper > ::slotted([slot=info]) {
  margin-left: 1rem;
}

:host([mobile]) .tabs-wrapper {
  margin: var(--sh-access-bar-mobile-tabs-wrapper-margin);
}

:host([mobile]) .access-wrapper > ::slotted([slot=left]),
:host([mobile]) .access-wrapper > ::slotted([slot=right]) {
  display: flex;
}

:host([mobile]) .access-wrapper > ::slotted(*[slot=left]:not(:first-child)) {
  margin-left: var(--sh-access-bar-mobile-left-slot-margin-left);
}

:host([mobile]) .access-wrapper > slot[name=right]::slotted(*:not(:last-child)) {
  margin-right: var(--sh-access-bar-mobile-right-slot-margin-right);
}

:host([mobile]) .access-wrapper {
  justify-content: space-between;
  padding: var(--sh-access-bar-mobile-wrapper-padding);
  align-items: center;
}

:host([mobile]) .label {
  margin-right: 0;
  z-index: 5;
  max-width: calc(100% - 13rem);
  position: absolute;
  right: 50%;
  transform: translate(50%, 0);
}

/* slots */
slot[name=right],
slot[name=left] {
  display: flex;
}

slot[name=left] {
  margin-right: 1rem;
}

slot[name=right] {
  margin-left: 1rem;
}

/* 3rd party logo or any svg logo */
.logo > img,
.logo > svg {
  height: 100%;
}

:host([logo]) .logo {
  width: auto;
}`;

  // ../sh-access-bar/src/sh-access-bar.js
  var SHAccessBar = class extends s4 {
    static get properties() {
      return {
        label: {
          type: String,
          reflect: true
        },
        mobile: {
          type: Boolean,
          reflect: true
        },
        condensed: {
          type: Boolean,
          reflect: true
        },
        embedded: {
          type: Boolean,
          reflect: true
        },
        native: {
          type: Boolean,
          reflect: true
        },
        logo: {
          type: String,
          reflect: true
        },
        cursorChange: {
          type: Boolean,
          reflect: true,
          attribute: "cursor-change"
        },
        _emptyInfo: {
          type: Boolean,
          reflect: true,
          attribute: "empty-info"
        }
      };
    }
    static get styles() {
      return [sharedStyles, sh_access_bar_lit_scss_default];
    }
    render() {
      return x`
      <div class="access-wrapper">
        ${!this.embedded ? x`
              <div class="logo" @click="${() => dispatchCustomEvent(this, "logo-clicked")}">
                ${this.logo ? x` <img .src="${this.logo}" /> ` : x`
                      <svg
                        xmlns:svg="http://www.w3.org/2000/svg"
                        xmlns="http://www.w3.org/2000/svg"
                        version="1.1"
                        viewBox="-1.24339497 -1.24339497 179.20878994 43.93328894"
                      >
                        <path
                          class="healthineers"
                          d="m 146.66688,22.51125 c 0.23875,0.23875 0.55125,0.35875 0.865,0.35875 0.3125,0 0.62625,-0.12 0.86375,-0.35875 0.24,-0.23875 0.35875,-0.55125 0.35875,-0.865 0,-0.3125 -0.11875,-0.625 -0.35875,-0.865 -0.2375,-0.23875 -0.55125,-0.3575 -0.86375,-0.3575 -0.31375,0 -0.62625,0.11875 -0.865,0.3575 -0.23875,0.24 -0.35875,0.5525 -0.35875,0.865 0,0.31375 0.12,0.62625 0.35875,0.865 m 6.16875,-6.16863 c 0.31,0.31 0.71625,0.465 1.12375,0.465 0.40625,0 0.81374,-0.155 1.12375,-0.465 0.31125,-0.31 0.46499,-0.7175 0.46499,-1.12375 0,-0.4075 -0.15375,-0.81375 -0.46499,-1.12375 -0.31001,-0.31 -0.7175,-0.46625 -1.12375,-0.46625 -0.4075,0 -0.81375,0.15625 -1.12375,0.46625 -0.31001,0.31 -0.465,0.71625 -0.465,1.12375 0,0.40625 0.155,0.81375 0.465,1.12375 m -0.008,12.84888 c 0.31,0.31 0.71625,0.465 1.12375,0.465 0.40625,0 0.81375,-0.155 1.12375,-0.465 0.31125,-0.31 0.465,-0.7175 0.465,-1.12375 0,-0.4075 -0.15376,-0.81375 -0.465,-1.12375 -0.31,-0.31 -0.7175,-0.46625 -1.12375,-0.46625 -0.4075,0 -0.81375,0.15625 -1.12375,0.46625 -0.31,0.31 -0.465,0.71625 -0.465,1.12375 0,0.40625 0.155,0.81375 0.465,1.12375 m 6.09812,-18.93988 c 0.40375,0.40375 0.9325,0.605 1.46125,0.605 0.52875,0 1.0575,-0.20125 1.46125,-0.605 0.40375,-0.40375 0.605,-0.9325 0.605,-1.46125 0,-0.52875 -0.20125,-1.0575 -0.605,-1.46125 -0.40375,-0.40375 -0.9325,-0.605 -1.46125,-0.605 -0.52875,0 -1.0575,0.20125 -1.46125,0.605 -0.40375,0.40375 -0.605,0.9325 -0.605,1.46125 0,0.52875 0.20125,1.0575 0.605,1.46125 m -0.008,12.84875 c 0.40375,0.40375 0.9325,0.605 1.46125,0.605 0.52875,0 1.0575,-0.20125 1.46125,-0.605 0.40375,-0.40375 0.605,-0.9325 0.605,-1.46125 0,-0.52875 -0.20125,-1.0575 -0.605,-1.46125 -0.40375,-0.40375 -0.9325,-0.605 -1.46125,-0.605 -0.52875,0 -1.0575,0.20125 -1.46125,0.605 -0.40375,0.40375 -0.605,0.9325 -0.605,1.46125 0,0.52875 0.20125,1.0575 0.605,1.46125 m -0.007,12.84925 c 0.40375,0.40375 0.9325,0.605 1.46125,0.605 0.52875,0 1.0575,-0.20125 1.46125,-0.605 0.40375,-0.40375 0.605,-0.9325 0.605,-1.46125 0,-0.52875 -0.20125,-1.0575 -0.605,-1.46125 -0.40375,-0.40375 -0.9325,-0.605 -1.46125,-0.605 -0.52875,0 -1.0575,0.20125 -1.46125,0.605 -0.40375,0.40375 -0.605,0.9325 -0.605,1.46125 0,0.52875 0.20125,1.0575 0.605,1.46125 m 5.99688,-18.839 c 0.52375,0.525 1.21125,0.78625 1.89875,0.78625 0.68875,0 1.37625,-0.26125 1.90125,-0.78625 0.52375,-0.52375 0.78625,-1.21125 0.78625,-1.89875 0,-0.6875 -0.2625,-1.375 -0.7875,-1.9 -0.525,-0.525 -1.2125,-0.7875 -1.9,-0.7875 -0.6875,0 -1.375,0.2625 -1.89875,0.78625 -0.525,0.525 -0.7875,1.2125 -0.7875,1.9 0,0.68875 0.2625,1.37625 0.7875,1.9 m -0.006,12.84925 c 0.52375,0.525 1.21125,0.78625 1.89875,0.78625 0.68875,0 1.37625,-0.26125 1.90125,-0.78625 0.52375,-0.525 0.78625,-1.21125 0.78625,-1.89875 0,-0.6875 -0.2625,-1.375 -0.7875,-1.9 -0.525,-0.525 -1.2125,-0.7875 -1.9,-0.7875 -0.6875,0 -1.375,0.26125 -1.89875,0.78625 -0.525,0.525 -0.7875,1.2125 -0.7875,1.9 0,0.68875 0.2625,1.375 0.7875,1.9 m 5.85787,-5.858 c 0.6825,0.6825 1.575,1.02375 2.47,1.02375 0.89375,0 1.78625,-0.34125 2.46875,-1.02375 0.6825,-0.6825 1.02375,-1.57625 1.02375,-2.47 0,-0.89375 -0.34125,-1.78625 -1.02375,-2.46875 -0.6825,-0.6825 -1.575,-1.02375 -2.46875,-1.02375 -0.895,0 -1.7875,0.34125 -2.47,1.02375 -0.6825,0.6825 -1.02375,1.575 -1.02375,2.46875 0,0.89375 0.34125,1.7875 1.02375,2.47"
                          style="fill-opacity:1;fill-rule:nonzero;stroke:none"
                        ></path>
                        <path
                          class="siemens"
                          d="m 132.43,15.29 0,-3.0175 c 1.70125,0.54125 3.22125,0.81125 4.5575,0.81125 1.82375,0 2.73625,-0.48125 2.73625,-1.445 0,-0.36 -0.13,-0.66125 -0.3875,-0.90625 -0.2725,-0.26 -0.9725,-0.61875 -2.1,-1.07875 -2.0025,-0.82 -3.31625,-1.525 -3.93,-2.11375 -0.79,-0.76375 -1.18625,-1.7375 -1.18625,-2.92375 0,-1.5025 0.57375,-2.65 1.7275,-3.44 C 134.9825,0.3925 136.46625,0 138.295,0 c 1.02625,0 2.3575,0.16375 3.99,0.49125 l 0.3775,0.065 0,2.90125 c -1.41875,-0.56625 -2.7375,-0.84875 -3.96125,-0.84875 -1.705,0 -2.5575,0.47 -2.5575,1.41375 0,0.35125 0.1725,0.63875 0.51625,0.8625 0.27375,0.17125 1.07,0.5525 2.38375,1.14375 1.85,0.82625 3.08875,1.545 3.71125,2.1575 0.735,0.72625 1.1025,1.665 1.1025,2.8175 0,1.65375 -0.7175,2.91625 -2.1475,3.78625 -1.1725,0.70375 -2.68875,1.05625 -4.5425,1.05625 -1.56875,0 -3.14875,-0.185 -4.7375,-0.55625 m -6.0335,-15.02513 0,10.22375 -5.24375,-10.22375 -4.945,0 0,15.2725 3.005,0 0,-10.36 5.385,10.36 4.80375,0 0,-15.2725 -3.005,0 z m -24.11275,0 0,15.2725 11.1175,0 0,-2.91875 -7.00625,0 0,-3.62375 5.945,0 0,-2.51875 -5.945,0 0,-3.4475 6.82875,0 0,-2.76375 -10.94,0 z m -9.16475,0 -3.94,9.7575 -3.84125,-9.7575 -5.53125,0 0,15.2725 3.005,0 0,-10.8125 4.3925,10.96625 2.645,0 4.47875,-10.96625 0,10.8125 4.04375,0 0,-15.2725 -5.2525,0 z m -27.214,0 0,15.2725 11.11625,0 0,-2.91875 -7.005,0 0,-3.62375 5.94375,0 0,-2.51875 -5.94375,0 0,-3.4475 6.82875,0 0,-2.76375 -10.94,0 z m -8.1775,15.27163 2.1325,0 2.13375,0 0,-7.63625 0,-7.63625 -2.13375,0 -2.1325,0 0,7.63625 0,7.63625 z M 43.89188,15.29 l 0,-3.0175 c 1.71624,0.54125 3.23499,0.81125 4.55749,0.81125 1.82375,0 2.73626,-0.48125 2.73626,-1.445 0,-0.36 -0.13376,-0.66125 -0.39875,-0.90625 -0.27376,-0.26 -0.96875,-0.61875 -2.09001,-1.07875 C 46.68813,8.8275 45.37563,8.1225 44.76562,7.54 43.97812,6.77 43.58187,5.8 43.58187,4.62625 c 0,-1.50875 0.57625,-2.66 1.7275,-3.45 C 46.44563,0.3925 47.92813,0 49.75437,0 c 1.00751,0 2.46501,0.185 4.37,0.55625 l 0,2.90125 c -1.41749,-0.56625 -2.735,-0.84875 -3.95,-0.84875 -1.71375,0 -2.56999,0.47 -2.56999,1.41375 0,0.35125 0.17374,0.63875 0.51875,0.8625 0.28749,0.17875 1.07874,0.56 2.3725,1.14375 1.86249,0.82625 3.10499,1.545 3.72125,2.1575 0.73374,0.72625 1.10249,1.665 1.10249,2.8175 0,1.65375 -0.71999,2.91625 -2.15999,3.78625 -1.16375,0.70375 -2.67626,1.05625 -4.53125,1.05625 -1.5675,0 -3.14626,-0.185 -4.73625,-0.55625"
                          style="fill-opacity:1;fill-rule:nonzero;stroke:none"
                        ></path>
                        <path
                          class="healthineers"
                          d="m 56.56775,30.56875 3.44875,0 0,-2.87 -3.44875,0 0,-4.15875 -3.65875,0 0,4.16 -2.03,0 0,2.87 2.03,0 0,6.5 c 0,2.2125 0.21,4.37 4.00125,4.37 1.15875,0 2.5525,-0.34125 3.34375,-0.84125 l -0.79125,-2.45 c -0.5775,0.2375 -1.13125,0.4225 -1.60625,0.4225 -0.97375,0 -1.28875,-0.58 -1.28875,-2.0275 l 0,-5.975 z m 86.37162,-2.10438 0.01,-0.0312 c -1.165,-0.7625 -2.6925,-1.2225 -4.35875,-1.135 -2.705,0.14125 -4.83125,1.75375 -4.68375,4.54 0.14625,2.78875 2.17875,3.44625 4.17875,3.92125 1.14875,0.2825 2.10875,0.4975 2.1625,1.5225 0.0525,1 -0.6375,1.43125 -1.60875,1.4825 -1.19,0.0612 -2.695,-0.4675 -3.665,-0.96625 l -1.09126,2.51 c 0.76876,0.51375 2.74875,1.24625 5.08,1.125 3.04625,-0.16 5.04,-1.76375 4.885,-4.73625 -0.14375,-2.735 -2.33125,-3.3325 -4.28124,-3.8375 -1.20125,-0.305 -2.08625,-0.6025 -2.14125,-1.6275 -0.045,-0.86875 0.6475,-1.2475 1.515,-1.29375 0.89875,-0.0462 1.86625,0.3475 2.89375,1.0675 l 1.105,-2.54125 z m -14.82687,4.289 c 0.0525,-1.39375 0.895,-2.29 2.21125,-2.29 0.68375,0 1.3175,0.18375 1.8675,0.47375 L 132.85,27.77837 c -0.63125,-0.3425 -1.44625,-0.47375 -2.185,-0.47375 -1.23625,0 -2.52625,0.73625 -3.1575,2.29 l -0.3425,-1.89625 -2.975,0 0.26375,2.3175 0,11.02875 3.65875,0 0,-8.29125 z m -40.03688,8.29188 0,-8.555 c 0,-1.26375 0.89626,-2.36875 2.29001,-2.36875 1.39625,0 1.63124,1.07875 1.63124,2.52625 l 0,8.3975 3.65875,0 0,-9.10875 c 0,-3.1575 -1.57875,-4.6325 -4.18374,-4.6325 -1.76376,0 -3.08,0.73875 -3.97501,1.975 l -0.26375,-1.58 -3.05375,0 0.23751,2.475 0,10.87125 3.65874,0 z M 77.35125,23.52912 c 0,0.555 0.19375,1.025 0.53875,1.3575 0.345,0.33125 0.84125,0.525 1.4475,0.525 0.5925,0 1.09625,-0.19375 1.45,-0.525 0.355,-0.3325 0.56125,-0.8025 0.56125,-1.3575 0,-0.51625 -0.20625,-0.98625 -0.56125,-1.32875 -0.35375,-0.34125 -0.8575,-0.55375 -1.45,-0.55375 -0.59375,0 -1.09,0.2125 -1.4375,0.55375 -0.34875,0.3425 -0.54875,0.8125 -0.54875,1.32875 m 0.16812,17.5165 1.83001,0 1.82875,0 0,-6.6725 0,-6.67375 -1.82875,0 -1.83001,0 0,6.67375 0,6.6725 z m -10.8175,-3.7e-4 0,-8.6075 c 0,-1.2375 0.89501,-2.31625 2.2375,-2.31625 1.39501,0 1.68376,1.0525 1.68376,2.42125 l 0,8.5025 3.65875,0 0,-9.05375 c 0,-3.13375 -1.5,-4.6875 -4.26376,-4.6875 -1.29,0 -2.47375,0.47375 -3.31625,1.36875 l 0,-5.1325 -3.65874,0 0,17.505 3.65874,0 z m -22.82162,-17.4785 0,13.50375 c 0,2.21125 0.21,4.37 4.00125,4.37 1.15875,0 2.5525,-0.34125 3.3425,-0.8425 l -0.79,-2.44875 c -0.57875,0.2375 -1.13125,0.4225 -1.60375,0.4225 -0.97625,0 -1.29125,-0.58 -1.29125,-2.0275 l 0,-12.9775 -3.65875,0 z m -3.05338,17.4785 -0.26374,-2.6575 0,-10.11 c -2,-0.73625 -3.94876,-0.97375 -4.84375,-0.97375 -4.65751,0 -6.97501,3.0275 -6.97501,7.66125 0,3.5525 1.29001,6.44875 5.10625,6.44875 1.4225,0 2.7375,-0.52625 3.52751,-1.7375 l 0.1325,0.0275 0.18374,1.34125 3.1325,0 z M 36.93063,36.7815 c 0,0.97375 -0.78875,1.97375 -2.15751,1.97375 -1.94874,0 -2.39625,-1.86875 -2.39625,-4.00125 0,-2.58 0.7375,-4.7375 2.89625,-4.7375 0.68376,0 1.315,0.13125 1.65751,0.28875 l 0,6.47625 z M 9.13375,23.54075 l 0,6.975 -5.37,0 0,-6.975 -3.76375,0 0,17.505 3.76375,0 0,-7.23875 5.37,0 0,7.23875 3.765,0 0,-17.505 -3.765,0 z m 17.50512,7.60712 c 0,-2.5 -1.71125,-3.84375 -4.37,-3.84375 -4.31624,0 -6.55375,3.52875 -6.55375,7.3975 0,3.94875 1.79001,6.73875 6.26376,6.73875 2.65999,0 4.5025,-1.21125 4.8175,-1.47375 l -1.0525,-2.4475 c -0.73625,0.49875 -1.86875,1.13125 -3.29001,1.13125 -2.00124,0 -2.84375,-1.34375 -3.02749,-2.60625 3.185,-0.13125 7.21249,-0.9225 7.21249,-4.89625 m -3.21125,0.0275 c 0,1.815 -2.44874,2.23625 -4.15875,2.29 0.0775,-1.8175 1.02625,-3.58125 2.81626,-3.58125 0.815,0 1.34249,0.5 1.34249,1.29125 m 98.18325,-0.0275 c 0,-2.5 -1.71125,-3.84375 -4.37,-3.84375 -4.31624,0 -6.55375,3.52875 -6.55375,7.3975 0,3.94875 1.79,6.73875 6.26375,6.73875 2.66,0 4.5025,-1.21125 4.8175,-1.47375 l -1.05375,-2.4475 c -0.73625,0.49875 -1.8675,1.13125 -3.28874,1.13125 -2.00125,0 -2.8425,-1.34375 -3.02751,-2.60625 3.18625,-0.13125 7.2125,-0.9225 7.2125,-4.89625 m -3.21124,0.0275 c 0,1.815 -2.44875,2.23625 -4.15875,2.29 0.0775,-1.8175 1.02625,-3.58125 2.81625,-3.58125 0.815,0 1.3425,0.5 1.3425,1.29125 m -9.55525,-0.0275 c 0,-2.5 -1.71125,-3.84375 -4.37,-3.84375 -4.31625,0 -6.55376,3.52875 -6.55376,7.3975 0,3.94875 1.79,6.73875 6.26376,6.73875 2.66,0 4.5025,-1.21125 4.8175,-1.47375 l -1.0525,-2.4475 c -0.7375,0.49875 -1.86875,1.13125 -3.29,1.13125 -2.00125,0 -2.84375,-1.34375 -3.0275,-2.60625 3.18625,-0.13125 7.2125,-0.9225 7.2125,-4.89625 m -3.21125,0.0275 c 0,1.815 -2.44875,2.23625 -4.15875,2.29 0.0775,-1.8175 1.02625,-3.58125 2.81625,-3.58125 0.815,0 1.3425,0.5 1.3425,1.29125"
                          style="fill-opacity:1;fill-rule:nonzero;stroke:none"
                        ></path>
                      </svg>
                    `}
              </div>
            ` : ""}
        <!-- left content -->
        ${this.mobile ? x` <slot name="left"></slot> ` : ""}
        <!-- label -->
        ${this.label ? x` <div class="label">${this.label}</div> ` : ""}
        <!-- right content -->
        ${this.mobile ? x` <slot name="right"></slot> ` : x`
              <div class="tabs-wrapper">
                <slot name="tabs" @slotchange="${this._handleTabsSlotChange.bind(this)}"></slot>
              </div>
              <div class="info-wrapper">
                <slot name="info" @slotchange="${this._handleInfoSlotChange.bind(this)}"></slot>
              </div>
              <div class="functions-wrapper">
                <slot name="functions"></slot>
              </div>
              <div class="user-wrapper">
                <slot name="user" tabindex="0"></slot>
              </div>
              ${this.native ? x`
                    <div class="window-controls">
                      <sh-icon
                        button
                        icon="minimize"
                        size="s"
                        @click="${(e8) => this._dispatchEventOnClickOfWindowControl(e8)}"
                      ></sh-icon>
                      <sh-icon
                        button
                        icon="maximize"
                        size="s"
                        @click="${(e8) => this._dispatchEventOnClickOfWindowControl(e8)}"
                      ></sh-icon>
                      <sh-icon
                        button
                        icon="cancel"
                        size="s"
                        @click="${(e8) => this._dispatchEventOnClickOfWindowControl(e8)}"
                      ></sh-icon>
                    </div>
                  ` : ""}
            `}
      </div>
    `;
    }
    constructor() {
      super();
      this._emptyInfo = true;
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.mobile) {
        this.resizeListener = this._handleResize.bind(this);
        window.addEventListener("resize", this.resizeListener);
      }
    }
    firstUpdated() {
      const iconLength = this.querySelectorAll("sh-icon").length;
      const windowIcons = this.shadowRoot.querySelectorAll("sh-icon").length;
      this._updateTabsCollapsedState();
      this._handleAccessContext();
      if (iconLength > 0) {
        for (let i7 = 0; i7 < iconLength; i7++) {
          this.querySelectorAll("sh-icon")[i7].setAttribute("tabindex", "0");
        }
      }
      if (windowIcons > 0) {
        for (let i7 = 0; i7 < windowIcons; i7++) {
          this.shadowRoot.querySelectorAll("sh-icon")[i7].setAttribute("tabindex", "0");
        }
      }
      this.mobile = this.mobile || windowSize.util.valueMatches(document.documentElement.clientWidth, "<", 768);
    }
    _handleTabsSlotChange(e8) {
      this._handleAccessContext();
      const nodes = e8.target.assignedNodes({ flatten: true });
      if (nodes.length > 0) {
        this._enableCollapsedMenuToOverflow(nodes[0].collapsed);
      }
      this._updateTabsCollapsedState();
      this._handleCondensed();
    }
    _handleInfoSlotChange(e8) {
      const nodes = e8.target.assignedNodes({ flatten: true });
      this._emptyInfo = nodes.length === 0;
    }
    _enableCollapsedMenuToOverflow(hasCollapsed) {
      const tabsWrapper = this.shadowRoot.querySelector(".tabs-wrapper");
      if (!tabsWrapper)
        return;
      if (hasCollapsed) {
        tabsWrapper.classList.remove("overflow-hidden");
      } else {
        tabsWrapper.classList.add("overflow-hidden");
      }
    }
    disconnectedCallback() {
      window.removeEventListener("resize", this.resizeListener);
      super.disconnectedCallback();
    }
    updated(changedProperties) {
      const listOfProperties = ["label", "mobile", "condensed", "embedded", "native"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      if (changedProperties.has("condensed")) {
        this._handleCondensed();
      }
    }
    _handleResize() {
      this.mobile = windowSize.util.valueMatches(document.documentElement.clientWidth, "<", 768);
      this._updateTabsCollapsedState();
    }
    _updateTabsCollapsedState() {
      const tabs = this.querySelector("sh-tabs");
      if (!tabs) {
        return;
      }
      tabs.addEventListener("collapsed-changed", (e8) => this._enableCollapsedMenuToOverflow(e8.target.collapsed));
      const widthReduced = windowSize.util.valueMatches(document.documentElement.clientWidth, "<", 1025) && (!tabs.fixed || !tabs.hasAttribute("fixed"));
      tabs.collapsed = widthReduced;
    }
    _handleAccessContext() {
      const tabs = this.querySelectorAll("sh-tabs");
      tabs.forEach((el) => {
        el._accessContext = true;
      });
      const userIdentifier = this.querySelectorAll("sh-user-identifier");
      for (let i7 = 0; i7 < userIdentifier.length; i7++) {
        userIdentifier[i7].setAttribute("access-context", "");
      }
    }
    _handleCondensed() {
      const tabItems = this.querySelectorAll("sh-tab-item");
      const tabs = this.querySelectorAll("sh-tabs");
      const userIdentifier = this.querySelectorAll("sh-user-identifier");
      tabs.forEach((el) => {
        el.condensed = this.condensed;
      });
      tabItems.forEach((el) => {
        el.condensed = this.condensed;
      });
      userIdentifier.forEach((el) => {
        el.condensed = this.condensed;
      });
    }
    _dispatchEventOnClickOfWindowControl(e8) {
      const newIconName = e8.target.icon === "cancel" ? "close" : e8.target.icon;
      dispatchCustomEvent(this, `${newIconName}-pressed`);
    }
    getWindowIconDirectly(icon) {
      let isValidIcon;
      const thisIconName = icon === "close" ? "cancel" : icon;
      switch (icon) {
        case "minimize":
        case "maximize":
        case "close":
          isValidIcon = true;
          break;
        default:
          isValidIcon = false;
      }
      if (isValidIcon) {
        return this.shadowRoot.querySelector(`.window-controls sh-icon[icon="${thisIconName}"]`);
      } else {
        return void 0;
      }
    }
  };
  customElements.define("sh-access-bar", SHAccessBar);

  // ../utils/checkbox-toggle-mixin.ts
  var CheckboxToggleMixin = (superClass) => {
    class CheckboxToggleMixinElement extends superClass {
      updated(changedProperties) {
        super.updated(changedProperties);
        const listOfProperties = ["active", "neutral"];
        dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      }
      firstUpdated() {
        this.addEventListener("click", () => this.handleClick());
        this.addEventListener("focus", () => this.handleFocus());
        this.addEventListener("blur", () => this.handleBlur());
      }
      handleClick() {
        this.active = !this.active;
      }
    }
    __decorateClass([
      n5({ type: Boolean, reflect: true })
    ], CheckboxToggleMixinElement.prototype, "active", 2);
    __decorateClass([
      n5({ type: Boolean, reflect: true })
    ], CheckboxToggleMixinElement.prototype, "neutral", 2);
    return CheckboxToggleMixinElement;
  };

  // ../utils/control-state-mixin.js
  var ControlStateMixin2 = (superClass) => {
    class ControlStateMixinElement extends superClass {
      constructor() {
        super(...arguments);
        this.disabled = void 0;
        this.tabindex = "0";
      }
      attributeChangedCallback(name, oldval, newval) {
        super.attributeChangedCallback(name, oldval, newval);
        if (name === "disabled") {
          this.setAttribute("aria-disabled", JSON.stringify(this.disabled));
        }
      }
      updated(changedProperties) {
        super.updated(changedProperties);
        if (changedProperties.has("disabled")) {
          this.handleDisabledChange();
        }
        const listOfProperties = ["disabled"];
        dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      }
      handleDisabledChange() {
        var _a4;
        if (this.disabled) {
          this.setAttribute("data-previous-tabindex", (_a4 = this.getAttribute("tabindex")) !== null && _a4 !== void 0 ? _a4 : "");
          this.removeAttribute("tabindex");
          this.blur();
        } else {
          const previousTabindex = this.dataset.previousTabindex;
          if (Number.isInteger(parseInt(previousTabindex !== null && previousTabindex !== void 0 ? previousTabindex : "", 10))) {
            this.setAttribute("tabindex", previousTabindex !== null && previousTabindex !== void 0 ? previousTabindex : "");
          }
        }
      }
    }
    __decorate([n5({ type: Boolean, reflect: true })], ControlStateMixinElement.prototype, "disabled", void 0);
    __decorate([n5({ type: String, reflect: true })], ControlStateMixinElement.prototype, "tabindex", void 0);
    return ControlStateMixinElement;
  };

  // ../utils/focus-blur-mixin.js
  var FocusBlurMixin2 = (superClass) => {
    class FocusBlurMixinElementextends extends superClass {
      handleFocus() {
        this.addEventListener("keyup", this.handleKeyup);
      }
      handleBlur() {
        var _a4;
        this.removeEventListener("keyup", this.handleKeyup);
        const focusItem = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".focus-item");
        if (focusItem) {
          focusItem.classList.remove("item-focused");
        } else {
          this.classList.remove("item-focused");
        }
      }
      firstUpdated() {
        this.addEventListener("focus", () => this.handleFocus());
        this.addEventListener("blur", () => this.handleBlur());
      }
      handleKeyup(e8) {
        var _a4;
        const focusItem = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".focus-item");
        if (keyboardInteraction(e8, KEYCODE.TAB) && !this.disabled) {
          if (focusItem) {
            focusItem.classList.add("item-focused");
          } else {
            this.classList.add("item-focused");
          }
        }
        if (keyboardInteraction(e8, KEYCODE.SPACE)) {
          this._spaceKeyAction();
        }
        if (keyboardInteraction(e8, KEYCODE.ENTER)) {
          this._enterKeyAction();
        }
      }
      _spaceKeyAction() {
        return;
      }
      _enterKeyAction() {
        return;
      }
    }
    return FocusBlurMixinElementextends;
  };

  // ../utils/refrain-space-scroll-mixin.js
  var RefrainSpaceScrollMixin = (superClass) => {
    class RefrainSpaceScrollMixinElement extends superClass {
      connectedCallback() {
        super.connectedCallback();
        this._preventScroll = this._preventSpaceScroll.bind(this);
        this.addEventListener("keydown", this._preventScroll);
      }
      _preventSpaceScroll(e8) {
        const element = e8.composedPath()[0];
        if (keyboardInteraction2(e8, KEYCODE2.SPACE) && element.tagName !== "INPUT" && element.tagName !== "TEXTAREA") {
          e8.preventDefault();
        }
      }
      disconnectedCallback() {
        this.removeEventListener("keydown", this._preventScroll);
        super.disconnectedCallback();
      }
    }
    return RefrainSpaceScrollMixinElement;
  };

  // ../sh-checkbox/src/sh-checkbox.lit.scss.js
  var sh_checkbox_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-checkbox-inner-width=1rem] - checkbox width
   */
  --sh-checkbox-inner-width: 1rem;
  /* 
   * @cssprop [--sh-checkbox-inner-height=1rem] - checkbox height
   */
  --sh-checkbox-inner-height: 1rem;
  /* 
   * @cssprop [--sh-checkbox-outer-width=1.5rem] - checkbox outer width
   */
  --sh-checkbox-outer-width: 1.5rem;
  /* 
   * @cssprop [--sh-checkbox-outer-height=1.5rem] - checkbox outer height
   */
  --sh-checkbox-outer-height: 1.5rem;
  /* 
   * @cssprop [--sh-checkbox-tick-line-height=0.875rem] - checkbox tick line height
   */
  --sh-checkbox-tick-line-height: 0.875rem;
  /* 
   * @cssprop [--sh-checkbox-tick-font-size=0.875rem] - tick font size
   */
  --sh-checkbox-tick-font-size: 0.875rem;
  /* 
   * @cssprop [--sh-checkbox-border-width=0.125rem] - checkbox border width
   */
  --sh-checkbox-border-width: 0.125rem;
  /* 
   * @cssprop [--sh-checkbox-border-radius=0.125rem] - checkbox border radius
   */
  --sh-checkbox-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-checkbox-label-line-height=1.25rem] - checkbox label line height
   */
  --sh-checkbox-label-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-checkbox-margin-right=0.5rem] - checkbox margin right
   */
  --sh-checkbox-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-checkbox-margin-around-checkbox=0.25rem] - margin around checkbox
   */
  --sh-checkbox-margin-around-checkbox: 0.25rem;
  /* 
   * @cssprop [--sh-checkbox-text-indent=-0.0625rem] - tick text indent
   */
  --sh-checkbox-text-indent: -0.0625rem;
  /* 
   * @cssprop [--sh-checkbox-outline-offset=-0.125rem] - outline ofset
   */
  --sh-checkbox-outline-offset: -0.125rem;
  /* 
   * @cssprop [--sh-checkbox-label-width=2rem] - label width
   */
  --sh-checkbox-label-width: 2rem;
  /* 
   * @cssprop [--sh-checkbox-padding=0rem] - checkbox top and bottom padding
   */
  --sh-checkbox-padding: 0rem;
  /* 
   * @cssprop [--sh-checkbox-label-padding=0rem] - label padding
   */
  --sh-checkbox-label-padding: 0rem;
}

:host {
  display: flex;
  flex-direction: row;
  color: var(--text-primary);
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  outline: none;
  align-items: center;
  width: 100%;
  cursor: pointer;
  position: relative;
  font: var(--body-1);
  height: fit-content;
  padding: var(--sh-checkbox-padding) 0;
}

#checkbox {
  width: var(--sh-checkbox-inner-width);
  height: var(--sh-checkbox-inner-height);
  opacity: 0;
  position: absolute;
  margin: 0 var(--sh-checkbox-margin-around-checkbox);
  top: var(--sh-checkbox-margin-around-checkbox);
  align-self: flex-start;
}

.checkboxLabel {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  width: calc(100% - var(--sh-checkbox-label-width));
  line-height: var(--sh-checkbox-label-line-height);
  padding: var(--sh-checkbox-label-padding);
  word-break: break-word;
}

#pseudoCheckbox::before {
  border-style: solid;
  border-width: var(--sh-checkbox-border-width);
  border-color: rgba(var(--ui-1), var(--opacity-4));
  width: var(--sh-checkbox-inner-width);
  height: var(--sh-checkbox-inner-height);
  position: absolute;
  margin: var(--sh-checkbox-margin-around-checkbox);
  border-radius: var(--sh-checkbox-border-radius);
  content: "\\E0E6";
  display: flex;
  flex-direction: column;
  -webkit-flex-direction: column;
  visibility: visible;
  box-sizing: border-box;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background, var(--hover-transition-time) border-color;
  font-family: "sh-icons";
  font-weight: 700;
  color: transparent;
  font-size: var(--sh-checkbox-tick-font-size);
  text-indent: var(--sh-checkbox-text-indent);
  line-height: var(--sh-checkbox-tick-line-height);
  text-align: center;
  vertical-align: middle;
}

#pseudoCheckbox {
  width: var(--sh-checkbox-outer-width);
  height: var(--sh-checkbox-outer-height);
  visibility: hidden;
  cursor: pointer;
  position: relative;
  margin-right: var(--sh-checkbox-margin-right);
  align-self: flex-start;
  display: inline-block;
}

:host([label=""]),
:host(:not([label])) {
  width: fit-content;
  width: -moz-fit-content;
}

:host(.touch-device) #pseudoCheckbox {
  visibility: visible;
}

.item-focused:before {
  outline: var(--focus-outline);
  outline-offset: var(--sh-checkbox-outline-offset);
}

:host([active]) #pseudoCheckbox::before {
  color: var(--base-3);
  background: rgba(var(--ui-2), var(--opacity-1));
  border-color: transparent;
}

:host([neutral][active]:not([disabled])) #pseudoCheckbox::before {
  background: rgba(var(--ui-1), var(--opacity-3));
}

:host(:not([active]):hover:not(.touch-device)) #pseudoCheckbox::before {
  border-color: rgba(var(--ui-1), var(--opacity-3));
}

:host([active]:hover:not(.touch-device)) #pseudoCheckbox::before {
  background: rgba(var(--ui-3), var(--opacity-1));
}

:host([neutral][active]:hover:not(.touch-device)) #pseudoCheckbox::before {
  background: rgba(var(--ui-1), var(--opacity-2)) !important;
}

:host([indeterminate]) #pseudoCheckbox::before {
  content: "\\E011";
}

:host([disabled]) {
  cursor: not-allowed;
  pointer-events: none;
  color: var(--text-disabled);
}

:host([disabled]:not([active])) #pseudoCheckbox::before {
  border-color: rgba(var(--ui-1), var(--opacity-5));
}

:host([active][disabled]:not([neutral])) #pseudoCheckbox::before {
  background: rgba(var(--ui-2), var(--opacity-5));
}

:host([neutral][active][disabled]) #pseudoCheckbox::before {
  background: rgba(var(--ui-1), var(--opacity-5));
}`;

  // ../sh-checkbox/src/sh-checkbox.js
  var SHCheckbox = class SHCheckbox2 extends RefrainSpaceScrollMixin(CheckboxToggleMixin(ControlStateMixin2(FocusBlurMixin2(s4)))) {
    constructor() {
      super();
    }
    static get styles() {
      return [sh_checkbox_lit_scss_default, extendInteractiveArea()];
    }
    render() {
      return x`
      <input
        tabindex="-1"
        id="checkbox"
        type="checkbox"
        role="presentation"
        ?checked="${this.active}"
        ?active="${this.active}"
        ?disabled="${this.disabled}"
        ?aria-checked="${this.indeterminate ? "mixed" : this.active}"
        ?indeterminate="${this.indeterminate}"
        value="${this.active}"
      />
      <span id="pseudoCheckbox" class="focus-item"></span>
      <span class="checkboxLabel">${this.label}</span>
    `;
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      const listOfProperties = ["label", "indeterminate"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    firstUpdated() {
      super.firstUpdated();
      this.addEventListener("click", () => {
        dispatchCustomEvent(this, "checked");
      });
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role"))
        this.setAttribute("role", "checkbox");
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    _spaceKeyAction() {
      this.handleClick();
    }
  };
  __decorate([n5({ type: Boolean, reflect: true })], SHCheckbox.prototype, "indeterminate", void 0);
  __decorate([n5({ type: String, reflect: true })], SHCheckbox.prototype, "label", void 0);
  SHCheckbox = __decorate([e4("sh-checkbox")], SHCheckbox);

  // ../utils/attribute-changed-event-dispatcher.ts
  var dispatchAttributeChangedEvent2 = function(component, changedProperties, listOfProperties) {
    changedProperties.forEach((_value, key) => {
      const changedProperty = key.toString();
      const propertyInKebabCase = changedProperty.toString().replace(/([A-Z])/g, "-$1").toLowerCase();
      if (listOfProperties.includes(changedProperty)) {
        dispatchCustomEvent(component, `${propertyInKebabCase}-changed`, null, false);
      }
    });
  };

  // ../utils/overlay-placement-flipped-algorithm.ts
  function getFlippedAlgorithm(placement) {
    const algorithmInfo = {
      top: [
        {
          from: "bottom",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        }
      ],
      bottom: [
        {
          from: "top",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "top",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        }
      ],
      left: [
        {
          from: "right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        }
      ],
      right: [
        {
          from: "left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        }
      ],
      "top-left": [
        {
          from: "bottom-left",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        }
      ],
      "top-right": [
        {
          from: "bottom-right",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "bottom-diag-left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        }
      ],
      "bottom-left": [
        {
          from: "top-left",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "top-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        }
      ],
      "bottom-right": [
        {
          from: "top-right",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "top-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "top-diag-right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        }
      ],
      "left-up": [
        {
          from: "right-up",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "right-up",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        }
      ],
      "right-up": [
        {
          from: "left-up",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "left-up",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        }
      ],
      "left-down": [
        {
          from: "right-down",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "right-down",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "top-diag-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        }
      ],
      "right-down": [
        {
          from: "left-down",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "left-down",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "top-diag-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        }
      ]
    };
    return algorithmInfo[placement];
  }

  // ../utils/overlay-placement-unflipped-algorithm.ts
  function getUnFlippedAlgorithm(placement) {
    const algorithmInfo = {
      bottom: [
        {
          from: "bottom",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        }
      ],
      top: [
        {
          from: "top",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "top",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        }
      ],
      right: [
        {
          from: "right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        }
      ],
      left: [
        {
          from: "left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        }
      ],
      "bottom-left": [
        {
          from: "bottom-left",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        }
      ],
      "bottom-right": [
        {
          from: "bottom-right",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "bottom-diag-left",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        }
      ],
      "top-left": [
        {
          from: "top-left",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "top-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        }
      ],
      "top-right": [
        {
          from: "top-right",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "top-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "top-diag-right",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        }
      ],
      "right-up": [
        {
          from: "right-up",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "right-up",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        }
      ],
      "left-up": [
        {
          from: "left-up",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "left-up",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "top-diag-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        }
      ],
      "right-down": [
        {
          from: "right-down",
          to: "bottom-diag-right",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "right-down",
          to: "top-diag-right",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "top-diag-right",
          to: "top-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        },
        {
          from: "bottom-diag-right",
          to: "bottom-diag-left",
          increment: "overlayRight",
          incrementBy: -1
        }
      ],
      "left-down": [
        {
          from: "left-down",
          to: "bottom-diag-left",
          increment: "overlayTop",
          incrementBy: 1
        },
        {
          from: "left-down",
          to: "top-diag-left",
          increment: "overlayBottom",
          incrementBy: -1
        },
        {
          from: "top-diag-left",
          to: "top-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        },
        {
          from: "bottom-diag-left",
          to: "bottom-diag-right",
          increment: "overlayLeft",
          incrementBy: 1
        }
      ]
    };
    return algorithmInfo[placement];
  }

  // ../utils/rem-to-pixel-convertor.ts
  var convertToPixel = (remValue) => {
    const htmlFontSize = Number(getComputedStyle(document.documentElement)["font-size"].split("px")[0]);
    return remValue * htmlFontSize;
  };

  // ../utils/getOverlayPlacement.ts
  function getOverlayPlacementInfo(placement, overlayRect, targetRect, viewportRect, overlayTargetDistance, viewportPadding, flippedAlgorithm, unflippedAlgorithm, suppressPlacementWarning = false) {
    getComputedStyle(document.documentElement);
    let actualViewport;
    ({ overlayRect, targetRect, actualViewport } = getRectParameters(viewportRect, targetRect, overlayRect, viewportPadding));
    const { overlayTop, overlayLeft, overlayRight, overlayBottom } = getPlacementInfo(placement, targetRect, overlayRect, overlayTargetDistance);
    let requiredLeft = overlayLeft;
    let requiredTop = overlayTop;
    let hasFoundIdeal = false;
    const overlayWillBeWithinViewport = isWithinViewport(overlayTop, overlayLeft, overlayRight, overlayBottom, actualViewport);
    const targetIsOutsideViewport = isTargetOutsideViewport(targetRect, actualViewport);
    if (!overlayWillBeWithinViewport) {
      const overlayPlacementAlgorithmOutput = overlayPlacementAlgorithm(placement, requiredLeft, requiredTop, targetRect, overlayRect, overlayTargetDistance, actualViewport, flippedAlgorithm, unflippedAlgorithm);
      hasFoundIdeal = overlayPlacementAlgorithmOutput.hasFoundIdeal;
      if (!hasFoundIdeal) {
        const correctedPlacementWrtViewportInfo = getCorrectedCurrentPlacementWRTViewport(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport);
        if (!suppressPlacementWarning) {
          console.warn("Could not find an ideal position within the viewport for the overlay without overlap with the target\n\nSo trying to fit the overlay within the viewport", "\nby correcting for the given placement: 	", placement, "\n\nNote: The target will be overlapped.\n\nSuggestion: Try to place the target in some other position within the viewport OR try to reduce the overlay's width and height");
        }
        requiredLeft = correctedPlacementWrtViewportInfo.placementInfo.overlayLeft;
        requiredTop = correctedPlacementWrtViewportInfo.placementInfo.overlayTop;
        if (!correctedPlacementWrtViewportInfo.foundIdealWrtViewport && !suppressPlacementWarning) {
          console.warn("Could not fit the Overlay within the Viewport.\n\n", "Are you sure the overlay width and/or height is less than effective viewport width (viewport width -" + convertToPixel(viewportPadding) + "px ) and/or effective viewport height (viewport height -" + convertToPixel(viewportPadding) + "px ) ?");
        }
      } else {
        requiredLeft = overlayPlacementAlgorithmOutput.idealLeft;
        requiredTop = overlayPlacementAlgorithmOutput.idealTop;
      }
    }
    if (targetIsOutsideViewport && !suppressPlacementWarning) {
      console.warn("The effective target (target boundary + " + convertToPixel(overlayTargetDistance) + "px margin around it) is outside the effective viewport (viewport boundary - " + convertToPixel(viewportPadding) + "px inner padding)");
    }
    return { requiredLeft, requiredTop, targetIsOutsideViewport };
  }
  function getRectParameters(viewportRect, targetRect, overlayRect, viewportPadding) {
    viewportRect = JSON.parse(JSON.stringify(viewportRect));
    targetRect = JSON.parse(JSON.stringify(targetRect));
    overlayRect = JSON.parse(JSON.stringify(overlayRect));
    const viewportRectLeft = viewportRect.left + convertToPixel(viewportPadding);
    const viewportRectRight = viewportRect.right - convertToPixel(viewportPadding);
    const viewportRectTop = viewportRect.top + convertToPixel(viewportPadding);
    const viewportRectBottom = viewportRect.bottom - convertToPixel(viewportPadding);
    const actualViewport = {
      left: viewportRectLeft,
      right: viewportRectRight,
      top: viewportRectTop,
      bottom: viewportRectBottom,
      width: viewportRectRight - viewportRectLeft,
      height: viewportRectBottom - viewportRectTop
    };
    return { overlayRect, targetRect, actualViewport };
  }
  function getPlacementInfo(placement, targetRect, overlayRect, overlayTargetDistance) {
    let overlayTop = 0;
    let overlayLeft = 0;
    let overlayRight = 0;
    let overlayBottom = 0;
    switch (placement) {
      case "top":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left + targetRect.width / 2 - overlayRect.width / 2;
        }
        break;
      case "top-left":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left;
        }
        break;
      case "top-right":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right - overlayRect.width;
        }
        break;
      case "bottom":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left + targetRect.width / 2 - overlayRect.width / 2;
        }
        break;
      case "bottom-left":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left;
        }
        break;
      case "bottom-right":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right - overlayRect.width;
        }
        break;
      case "left":
        {
          overlayTop = targetRect.top + targetRect.height / 2 - overlayRect.height / 2;
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "left-up":
        {
          overlayTop = targetRect.top;
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "left-down":
        {
          overlayTop = targetRect.bottom - overlayRect.height;
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "right":
        {
          overlayTop = targetRect.top + targetRect.height / 2 - overlayRect.height / 2;
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "right-up":
        {
          overlayTop = targetRect.top;
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "right-down":
        {
          overlayTop = targetRect.bottom - overlayRect.height;
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "top-diag-left":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "top-diag-right":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "bottom-diag-left":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "bottom-diag-right":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
    }
    overlayTop = Math.round(overlayTop);
    overlayLeft = Math.round(overlayLeft);
    overlayRight = overlayLeft + overlayRect.width;
    overlayBottom = overlayTop + overlayRect.height;
    return { overlayTop, overlayLeft, overlayRight, overlayBottom };
  }
  function overlayPlacementAlgorithm(placement, left, top, targetRect, overlayRect, overlayTargetDistance, actualViewport, flippedAlgorithm, unflippedAlgorithm) {
    let hasFoundIdeal = false, idealLeft = left, idealTop = top;
    const algorithmSteps = getAlgorithmSteps(placement, satisfiesFlipCondition(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport), flippedAlgorithm, unflippedAlgorithm);
    for (let step = 0; step < algorithmSteps.length; ++step) {
      const algorithmStep = algorithmSteps[step];
      const fromPlacement = algorithmStep.from;
      const toPlacement = algorithmStep.to;
      const incrementValue = algorithmStep.increment;
      const incrementBy = algorithmStep.incrementBy;
      const fromPlacementData = getPlacementInfo(fromPlacement, targetRect, overlayRect, overlayTargetDistance);
      const toPlacementData = getPlacementInfo(toPlacement, targetRect, overlayRect, overlayTargetDistance);
      for (let i7 = fromPlacementData[incrementValue]; incrementBy === 1 ? i7 < toPlacementData[incrementValue] : i7 > toPlacementData[incrementValue]; incrementBy === 1 ? ++i7 : --i7) {
        const overlayData = getOtherOverlaySides(incrementValue, i7, fromPlacementData, overlayRect);
        if (isWithinViewport(overlayData.overlayTop, overlayData.overlayLeft, overlayData.overlayRight, overlayData.overlayBottom, actualViewport)) {
          idealLeft = overlayData.overlayLeft;
          idealTop = overlayData.overlayTop;
          hasFoundIdeal = true;
          break;
        }
      }
      if (hasFoundIdeal) {
        break;
      }
    }
    return { hasFoundIdeal, idealTop, idealLeft };
  }
  function isWithinViewport(top, left, right, bottom, actualViewport) {
    return left >= actualViewport.left && right <= actualViewport.right && top >= actualViewport.top && bottom <= actualViewport.bottom;
  }
  function satisfiesFlipCondition(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport) {
    const placementInfo = getPlacementInfo(placement, targetRect, overlayRect, overlayTargetDistance);
    const flipConditionDictionary = {
      top: placementInfo.overlayTop < actualViewport.top,
      bottom: placementInfo.overlayBottom > actualViewport.bottom,
      left: placementInfo.overlayLeft < actualViewport.left,
      right: placementInfo.overlayRight > actualViewport.right,
      "top-left": placementInfo.overlayTop < actualViewport.top,
      "top-right": placementInfo.overlayTop < actualViewport.top,
      "bottom-left": placementInfo.overlayBottom > actualViewport.bottom,
      "bottom-right": placementInfo.overlayBottom > actualViewport.bottom,
      "left-up": placementInfo.overlayLeft < actualViewport.left,
      "left-down": placementInfo.overlayLeft < actualViewport.left,
      "right-up": placementInfo.overlayRight > actualViewport.right,
      "right-down": placementInfo.overlayRight > actualViewport.right
    };
    return flipConditionDictionary[placement];
  }
  function getCorrectedCurrentPlacementWRTViewport(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport) {
    let foundIdealWrtViewport = false;
    let placementInfo = getPlacementInfo(placement, targetRect, overlayRect, overlayTargetDistance);
    const viewportCorrectionOrder = getViewportCorrectionOrder(placement);
    placementInfo = correctToViewportForSide(viewportCorrectionOrder[0], placementInfo, overlayRect, actualViewport);
    placementInfo = correctToViewportForSide(viewportCorrectionOrder[1], placementInfo, overlayRect, actualViewport);
    placementInfo = correctToViewportForSide(viewportCorrectionOrder[2], placementInfo, overlayRect, actualViewport);
    placementInfo = correctToViewportForSide(viewportCorrectionOrder[3], placementInfo, overlayRect, actualViewport);
    foundIdealWrtViewport = isWithinViewport(placementInfo.overlayTop, placementInfo.overlayLeft, placementInfo.overlayRight, placementInfo.overlayBottom, actualViewport);
    return { foundIdealWrtViewport, placementInfo };
  }
  function isTargetOutsideViewport(targetRect, actualViewport) {
    return targetRect.right <= actualViewport.left || targetRect.left >= actualViewport.right || targetRect.bottom <= actualViewport.top || targetRect.top >= actualViewport.bottom;
  }
  function getOtherOverlaySides(incrementSide, incrementValue, placementData, overlayRect) {
    const overlaySidesDictionary = {
      overlayLeft: {
        overlayTop: placementData.overlayTop,
        overlayLeft: incrementValue
      },
      overlayTop: {
        overlayTop: incrementValue,
        overlayLeft: placementData.overlayLeft
      },
      overlayRight: {
        overlayTop: placementData.overlayTop,
        overlayLeft: incrementValue - overlayRect.width
      },
      overlayBottom: {
        overlayTop: incrementValue - overlayRect.height,
        overlayLeft: placementData.overlayLeft
      }
    };
    const topLeftData = overlaySidesDictionary[incrementSide];
    const overlayRight = topLeftData.overlayLeft + overlayRect.width;
    const overlayBottom = topLeftData.overlayTop + overlayRect.height;
    return __spreadProps(__spreadValues({}, topLeftData), { overlayRight, overlayBottom });
  }
  function getAlgorithmSteps(placement, flipped, flippedAlgorithm, unflippedAlgorithm) {
    let algorithm;
    if (flipped) {
      algorithm = flippedAlgorithm || getFlippedAlgorithm(placement);
    } else {
      algorithm = unflippedAlgorithm || getUnFlippedAlgorithm(placement);
    }
    return algorithm;
  }
  function correctToViewportForSide(side, placementInfo, overlayRect, actualViewport) {
    if (side === "overlayTop") {
      if (placementInfo.overlayTop < actualViewport.top) {
        placementInfo.overlayTop = actualViewport.top;
      }
    }
    if (side === "overlayRight") {
      if (placementInfo.overlayRight > actualViewport.right) {
        placementInfo.overlayRight = actualViewport.right;
      }
    }
    if (side === "overlayLeft") {
      if (placementInfo.overlayLeft < actualViewport.left) {
        placementInfo.overlayLeft = actualViewport.left;
      }
    }
    if (side === "overlayBottom") {
      if (placementInfo.overlayBottom > actualViewport.bottom) {
        placementInfo.overlayBottom = actualViewport.bottom;
      }
    }
    placementInfo = getOtherOverlaySides(side, placementInfo[side], placementInfo, overlayRect);
    return placementInfo;
  }
  function getViewportCorrectionOrder(placement) {
    let order = [];
    switch (placement) {
      case "top":
      case "top-left":
      case "top-right":
        order = ["overlayTop", "overlayRight", "overlayBottom", "overlayLeft"];
        break;
      case "bottom":
      case "bottom-left":
      case "bottom-right":
        order = ["overlayBottom", "overlayLeft", "overlayTop", "overlayRight"];
        break;
      case "left":
      case "left-up":
      case "left-down":
        order = ["overlayLeft", "overlayTop", "overlayRight", "overlayBottom"];
        break;
      case "right":
      case "right-up":
      case "right-down":
        order = ["overlayRight", "overlayBottom", "overlayLeft", "overlayTop"];
        break;
    }
    return order;
  }

  // ../sh-tooltip/src/sh-tooltip.lit.scss.js
  var sh_tooltip_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-tooltip-max-content-width=25rem] - maximum width of the tooltip
   */
  --sh-tooltip-max-content-width: 25rem;
  /* 
   * @cssprop [--sh-tooltip-content-padding=0.25rem 0.5rem] - padding for the tooltip
   */
  --sh-tooltip-content-padding: 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tooltip-label-line-height=1rem] - line height of the tooltip label
   */
  --sh-tooltip-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-tooltip-padding-title=0.5rem] - padding for the tooltip with title
   */
  --sh-tooltip-padding-title: 0.5rem;
  /* 
   * @cssprop [--sh-tooltip-title-line-height=1rem] - line height of the tooltip title
   */
  --sh-tooltip-title-line-height: 1rem;
  /* 
   * @cssprop [--sh-tooltip-margin-value=0.5rem] - margin value of the tooltip title and error icon
   */
  --sh-tooltip-margin-value: 0.5rem;
  /* 
   * @cssprop [--sh-tooltip-content-border-radius=0.125rem] - border-radius of the tooltip
   */
  --sh-tooltip-content-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-tooltip-margin-top-value=0rem] - margin top for the tooltip
   */
  --sh-tooltip-margin-top-value: 0rem;
}

:host {
  position: fixed;
  opacity: 0;
  visibility: hidden;
  color: var(--text-primary);
  transition-property: opacity, visibility, z-index;
  transition-timing-function: ease-in-out;
  transition-duration: var(--transition-time);
  transition-delay: 0s;
  width: fit-content;
  width: -ms-fit-content;
  width: -moz-fit-content;
  height: auto;
  margin-top: var(--sh-tooltip-margin-top-value) !important;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  overflow: hidden;
  display: block;
  background: var(--base-4);
  box-shadow: var(--shadow-overlay);
  border-radius: var(--sh-tooltip-content-border-radius);
  padding: var(--sh-tooltip-content-padding);
  z-index: 999;
  max-width: var(--sh-tooltip-max-content-width);
  box-sizing: border-box;
  word-break: break-all;
}

:host([title]) {
  padding: var(--sh-tooltip-padding-title);
}

:host .tooltip-label {
  font: var(--body-2);
  color: var(--text-primary);
  line-height: var(--sh-tooltip-label-line-height);
}

:host .tooltip-title {
  font: var(--title-2);
  color: var(--text-primary);
  display: block;
  line-height: var(--sh-tooltip-title-line-height);
  margin-bottom: var(--sh-tooltip-margin-value);
  word-break: break-all;
}

.label-wrapper {
  display: flex;
  flex-direction: row;
}

#tooltipIcon {
  margin-right: var(--sh-tooltip-margin-value);
}

:host([visible]) {
  visibility: visible;
  opacity: 1;
  pointer-events: all;
}

:host([visible][delay]) {
  transition-delay: 0.4s;
}`;

  // ../sh-tooltip/src/sh-tooltip.js
  var SHTooltip = class SHTooltip2 extends s4 {
    constructor() {
      super();
      this.error = false;
      this.visible = false;
      this.delay = false;
      this.positionFixedAdjustment = false;
      this.variation = "long";
      this.placement = "top";
    }
    static get styles() {
      return [sharedStyles, sh_tooltip_lit_scss_default];
    }
    render() {
      return x`
      ${this.title && this.variation === "long" ? x` <div class="tooltip-title">${this.title}</div> ` : ""}
      <div class="label-wrapper">
        ${this.icon ? x` <sh-icon icon="${this.icon}" id="tooltipIcon" size="s"></sh-icon> ` : ""}
        ${this.label ? x` <div class="tooltip-label">${this.label}</div> ` : ""}
      </div>
      <slot></slot>
    `;
    }
    updated(changedProperties) {
      if (changedProperties.has("target")) {
        this._handleTarget();
      }
      if (this.visible && (changedProperties.has("visible") || changedProperties.has("placement")) && this._targetEl && this.placement !== "pointer") {
        this._setOverlayPlacement(this._targetEl);
      }
      if (changedProperties.has("error")) {
        this._handleError();
      }
      if (changedProperties.has("_targetEl") && changedProperties.get("_targetEl")) {
        this._removeTargetEventListener(changedProperties.get("_targetEl"));
      }
      const listOfProperties = [
        "label",
        "title",
        "variation",
        "target",
        "visible",
        "placement",
        "icon",
        "error"
      ];
      dispatchAttributeChangedEvent2(this, changedProperties, listOfProperties);
    }
    getTarget() {
      const target = this.target;
      if (target) {
        if (typeof target === "string") {
          return this.parentElement ? this.parentElement.querySelector(`[id="${target}"]`) || document.getElementById(target) : document.getElementById(target);
        } else if (target instanceof HTMLElement) {
          return target;
        } else {
          throw new Error(`

The "target" property is not of valid type.
The "target" property can take string value corresponding to the id of the target.
It can also have its value equal to a DOM Node reference (instance of HTMLElement)
`);
        }
      }
      return null;
    }
    _setOverlayPlacement(attachNode) {
      const placementInfo = getOverlayPlacementInfo(this.placement, this.getBoundingClientRect(), attachNode.getBoundingClientRect(), JSON.parse(JSON.stringify(document.body.getBoundingClientRect())), 0.5, 0.5, null, null, true);
      let calculatedLeft = placementInfo.requiredLeft;
      let calculatedTop = placementInfo.requiredTop;
      if (this.positionFixedAdjustment) {
        const translateX = this.getBoundingClientRect().left - this.offsetLeft;
        const translateY = this.getBoundingClientRect().top - this.offsetTop;
        calculatedLeft -= translateX;
        calculatedTop -= translateY;
      }
      this.style.left = calculatedLeft + "px";
      this.style.top = calculatedTop + "px";
    }
    firstUpdated() {
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      this._showListener = this._setVisible.bind(this);
      this._hideListener = this._clearVisible.bind(this);
      this._tooltipMouseEnter = this._tooltipMouseEnterActions.bind(this);
      this._tooltipMouseLeave = this._tooltipMouseLeaveActions.bind(this);
      this.addEventListener("mouseenter", this._tooltipMouseEnter);
      this.addEventListener("mouseleave", this._tooltipMouseLeave);
    }
    _tooltipMouseEnterActions() {
      this.visible = true;
    }
    _tooltipMouseLeaveActions() {
      this.visible = false;
    }
    _handleTarget() {
      this._targetEl = this.getTarget();
      if (this._targetEl) {
        this._targetEl.addEventListener("mouseenter", this._showListener);
        this._targetEl.addEventListener("mouseleave", this._hideListener);
        this._targetEl.addEventListener("focus", this._showListener);
        this._targetEl.addEventListener("blur", this._hideListener);
        this._targetEl.addEventListener("tap", this._hideListener);
      }
    }
    _removeTargetEventListener(oldTarget) {
      oldTarget.removeEventListener("mouseenter", this._showListener);
      oldTarget.removeEventListener("focus", this._showListener);
      oldTarget.removeEventListener("mouseleave", this._hideListener);
      oldTarget.removeEventListener("blur", this._hideListener);
      oldTarget.removeEventListener("tap", this._hideListener);
    }
    disconnectedCallback() {
      if (this._targetEl) {
        this._removeTargetEventListener(this._targetEl);
      }
      this.removeEventListener("mouseenter", this._tooltipMouseEnter);
      this.removeEventListener("mouseleave", this._tooltipMouseLeave);
      super.disconnectedCallback();
    }
    _setVisible(e8) {
      if (this.placement === "pointer") {
        const pointerDistance = 8;
        const evt = e8;
        this.style.left = evt.clientX + this.offsetWidth > document.body.getBoundingClientRect().right ? `${evt.clientX - this.offsetWidth + pointerDistance}px` : `${evt.clientX + pointerDistance}px`;
        this.style.top = evt.clientY + this.offsetHeight > document.body.getBoundingClientRect().bottom ? `${evt.clientY - this.offsetHeight + pointerDistance}px` : `${evt.clientY + pointerDistance}px`;
      }
      if (!this.classList.contains("touch-device")) {
        this.visible = true;
      }
    }
    _clearVisible() {
      this.visible = false;
    }
    _handleError() {
      if (this.error) {
        this.icon = "error";
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHTooltip.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHTooltip.prototype, "title", void 0);
  __decorate([n5({ type: String, reflect: true })], SHTooltip.prototype, "variation", void 0);
  __decorate([n5({ type: String, reflect: true })], SHTooltip.prototype, "icon", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTooltip.prototype, "error", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTooltip.prototype, "visible", void 0);
  __decorate([n5({ type: String, reflect: true })], SHTooltip.prototype, "target", void 0);
  __decorate([n5({ type: String, reflect: true })], SHTooltip.prototype, "placement", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTooltip.prototype, "delay", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "position-fixed-adjustment" })], SHTooltip.prototype, "positionFixedAdjustment", void 0);
  __decorate([n5({ type: Element })], SHTooltip.prototype, "_targetEl", void 0);
  SHTooltip = __decorate([e4("sh-tooltip")], SHTooltip);

  // ../sh-menu-item/src/sh-menu-item.lit.scss.js
  var sh_menu_item_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-menu-item-item-height=2.5rem] - Height of the menu-item
   */
  --sh-menu-item-item-height: 2.5rem;
  /* 
   * @cssprop [--sh-menu-item-label-line-height=1.5rem] - Line height of the menu item label
   */
  --sh-menu-item-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-menu-item-item-padding=0.25rem 0] - padding of the menu item
   */
  --sh-menu-item-item-padding: 0.25rem 0;
  /* 
   * @cssprop [--sh-menu-item-item-padding-hover=0.25rem 0.5rem] - padding of the menu item on hover
   */
  --sh-menu-item-item-padding-hover: 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-item-margin-hover=0 -0.5rem] - margin of the menu item on hover
   */
  --sh-menu-item-item-margin-hover: 0 -0.5rem;
  /* 
   * @cssprop [--sh-menu-item-item-width=calc(100% + 1rem)] - width of the item on hover or active
   */
  --sh-menu-item-item-width: calc(100% + 1rem);
  /* 
   * @cssprop [--sh-menu-item-icon-right-margin=0.5rem] - right margin of the icon
   */
  --sh-menu-item-icon-right-margin: 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-vertical-item-padding=0.5rem] - padding of the vertical menu item
   */
  --sh-menu-item-vertical-item-padding: 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-vertical-icon-margin=0rem auto 0.5rem] - margin of the vertical menu item icon
   */
  --sh-menu-item-vertical-icon-margin: 0rem auto 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-chapter-wrapper-margin-left=3.5rem] - left margin of the chapter wrapper
   */
  --sh-menu-item-chapter-wrapper-margin-left: 3.5rem;
  /* 
   * @cssprop [--sh-menu-item-chapter-arrow-margin-right=0.5rem] - right margin of the chapter arrow icon
   */
  --sh-menu-item-chapter-arrow-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-chapter-sibling-margin-left=2rem] - left margin of the chapter sibling
   */
  --sh-menu-item-chapter-sibling-margin-left: 2rem;
  /* 
   * @cssprop [--sh-menu-item-chapter-sibling-margin-left-hover=1.5rem] - left margin of the chapter sibling on hover
   */
  --sh-menu-item-chapter-sibling-margin-left-hover: 1.5rem;
  /* 
   * @cssprop [--sh-menu-item-functions-slot-margin=0.25rem 0rem 0rem -1.75rem] - margin of the elements inside functions slot
   */
  --sh-menu-item-functions-slot-margin: 0.25rem 0rem 0rem -1.75rem;
  /* 
   * @cssprop [--sh-menu-item-icon-size=1.5rem] - size of the icon
   */
  --sh-menu-item-icon-size: 1.5rem;
  /* 
   * @cssprop [--sh-menu-item-button-icon-right-xs=0rem] - right position of icon button in function slot in xs size
   */
  --sh-menu-item-button-icon-right-xs: 0rem;
  /* 
   * @cssprop [--sh-menu-item-button-icon-right-s=0rem] - right position of icon button in function slot in s size
   */
  --sh-menu-item-button-icon-right-s: 0rem;
  /* 
   * @cssprop [--sh-menu-item-button-icon-right-m=0rem] - right position of icon button in function slot in m size
   */
  --sh-menu-item-button-icon-right-m: 0rem;
  /* 
   * @cssprop [--sh-menu-item-button-icon-margin-left-xs=0.5rem] - margin-left of button icon in xs size of icon
   */
  --sh-menu-item-button-icon-margin-left-xs: 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-button-icon-margin-left-s=0.5rem] - margin-left of button icon in s size of icon
   */
  --sh-menu-item-button-icon-margin-left-s: 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-button-icon-margin-left-m=0.5rem] - margin-left of button icon in m size of icon
   */
  --sh-menu-item-button-icon-margin-left-m: 0.5rem;
  /* 
   * @cssprop [--sh-menu-item-button-icon-margin-left-l=0.5rem] - margin-left of button icon in l size of icon
   */
  --sh-menu-item-button-icon-margin-left-l: 0.5rem;
}

:host {
  width: 100%;
  outline: none;
  display: block;
  height: fit-content;
}

:host([icon]:not([checkbox]):not([vertical-alignment]):not(:focus-visible)) .menu-item-wrapper {
  padding: var(--sh-menu-item-item-padding);
  min-height: var(--sh-menu-item-item-height);
}

:host([icon]:not([checkbox]):not([vertical-alignment])) .menu-item-wrapper[active] {
  padding: var(--sh-menu-item-item-padding-hover);
}

.vertical-item-wrapper {
  display: flex;
  align-items: center;
  width: 100%;
}

:host([vertical-alignment]) .vertical-item-wrapper {
  display: block;
  margin: auto;
}

:host([vertical-alignment]) #checkbox,
:host([vertical-alignment]) #menu-item-icon {
  margin: var(--sh-menu-item-vertical-icon-margin);
}

:host([vertical-alignment]) .menu-item-label {
  text-align: center;
  line-height: var(--sh-menu-item-label-line-height);
}

:host(:not(.touch-device):not([active])[vertical-alignment]) .menu-item-wrapper:hover,
:host([vertical-alignment]) .menu-item-wrapper[active],
:host([vertical-alignment]) .menu-item-wrapper {
  width: 100%;
  margin: 0rem;
  padding: var(--sh-menu-item-vertical-item-padding);
}

:host(:not([label-rows="1"])) #checkbox,
:host(:not([label-rows="1"])) #menu-item-icon,
:host(:not([label-rows="1"])) ::slotted(*[slot=functions]),
:host([vertical-alignment]) ::slotted(*[slot=functions]) {
  align-self: flex-start;
}

.menu-item-wrapper {
  height: fit-content;
  height: -ms-fit-content;
  height: -moz-fit-content;
  min-height: var(--sh-menu-item-item-height);
  width: 100%;
  box-sizing: border-box;
  padding: var(--sh-menu-item-item-padding);
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background;
  border-radius: 0.125rem;
  display: flex;
  flex-direction: row;
  cursor: pointer;
  outline: none;
  align-items: center;
}

:host(:focus-visible:not([disabled]):not([vertical-alignment])) .menu-item-wrapper {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
  padding: var(--sh-menu-item-item-padding-hover);
  margin: var(--sh-menu-item-item-margin-hover);
  width: var(--sh-menu-item-item-width);
}

:host(:focus-visible:not([disabled])[vertical-alignment]) .menu-item-wrapper {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
}

:host(:focus-visible:not([disabled]):not([chapter]).chapter-sibling) .menu-item-wrapper {
  padding: var(--sh-menu-item-item-padding-hover);
  margin: var(--sh-menu-item-item-margin-hover);
  margin-left: calc(var(--sh-menu-item-chapter-sibling-margin-left) - var(--sh-menu-item-chapter-arrow-margin-right)) !important;
  width: var(--sh-menu-item-item-width);
}

:host(:focus-visible:not([disabled])[chapter]) {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
  padding: 0 var(--sh-menu-item-chapter-arrow-margin-right) 0 0;
  margin: var(--sh-menu-item-item-margin-hover);
}
:host(:focus-visible:not([disabled])[chapter]) .menu-item-wrapper {
  outline: none;
}

:host(:focus-visible:not([disabled])[chapter].chapter-sibling) {
  padding: 0 var(--sh-menu-item-chapter-arrow-margin-right);
}

:host(.chapter-sibling) .menu-item-wrapper {
  overflow: hidden;
}

.functions-wrapper {
  display: flex;
  align-items: center;
  height: var(--sh-menu-item-icon-size);
}

/* active */
.menu-item-wrapper[active] {
  padding: var(--sh-menu-item-item-padding-hover);
  margin: var(--sh-menu-item-item-margin-hover);
  width: var(--sh-menu-item-item-width);
  background: rgba(var(--ui-1), var(--opacity-6));
}

.menu-item-wrapper.item-focused {
  padding: var(--sh-menu-item-item-padding-hover);
  margin: var(--sh-menu-item-item-margin-hover);
  width: var(--sh-menu-item-item-width);
}

:host(:not([chapter]).chapter-sibling) .item-wrapper > .menu-item-wrapper.item-focused {
  padding: var(--sh-menu-item-item-padding-hover);
  margin: 0 -0.5rem 0 1.5rem;
  margin-left: var(--sh-menu-item-chapter-sibling-margin-left);
  width: var(--sh-menu-item-item-width);
}

:host([icon]:not([checkbox]):not([vertical-alignment])) .item-wrapper > .menu-item-wrapper.item-focused,
:host([icon]:not([checkbox]):not([vertical-alignment])) .item-wrapper > .menu-item-wrapper.item-focused:hover,
:host([icon]:not([checkbox]):not(.touch-device):not([vertical-alignment])) .item-wrapper > .menu-item-wrapper.hover {
  padding: var(--sh-menu-item-item-padding-hover) !important;
}

/* disabled */
:host([disabled]) {
  pointer-events: none;
  cursor: none;
}

.menu-item-label {
  font: var(--body-1);
  line-height: var(--sh-menu-item-label-line-height);
  font-weight: normal;
  color: var(--text-primary);
  flex: 1;
  transition: var(--transition-time) all ease-in-out;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
  -moz-user-select: none;
  -webkit-user-select: none;
  user-select: none;
  position: relative;
  word-break: break-all;
  visibility: visible;
}

sh-icon#menu-item-icon {
  position: relative;
  color: var(--text-primary);
  margin-right: var(--sh-menu-item-icon-right-margin);
}

:host([vertical-alignment]) ::slotted(*[slot=functions]) {
  margin: var(--sh-menu-item-functions-slot-margin);
}

:host(:not([vertical-alignment])) ::slotted(*[slot=functions]) {
  margin-left: 0.5rem;
}

:host(:not([vertical-alignment])[label-rows="1"]) ::slotted(*[slot=functions]) {
  position: relative;
  align-self: center;
  flex-shrink: 0;
}

:host(:not([vertical-alignment])[label-rows="1"]) ::slotted([slot=functions][button][size=xs]) {
  right: var(--sh-menu-item-button-icon-right-xs);
  margin-left: var(--sh-menu-item-button-icon-margin-left-xs);
}

:host(:not([vertical-alignment])[label-rows="1"]) ::slotted([slot=functions][button][size=s]) {
  right: var(--sh-menu-item-button-icon-right-s);
  margin-left: var(--sh-menu-item-button-icon-margin-left-s);
}

:host(:not([vertical-alignment])[label-rows="1"]) ::slotted([slot=functions][button][size=m]) {
  right: var(--sh-menu-item-button-icon-right-m);
  margin-left: var(--sh-menu-item-button-icon-margin-left-m);
}

.item-wrapper {
  display: flex;
  flex-direction: row;
  text-decoration: none;
  align-items: center;
}

/* chapter menu */
.chapter-wrapper {
  transition: 0.1s all ease-in-out;
}

.chapter-wrapper > ::slotted([chapter]) {
  margin-left: calc(-1 * (var(--sh-icon-size-s) + var(--sh-menu-item-chapter-arrow-margin-right)));
  width: calc(100% + var(--sh-icon-size-s) + var(--sh-menu-item-chapter-arrow-margin-right));
}

.chapter-wrapper > ::slotted(*) {
  visibility: hidden;
}

:host([expanded]) .chapter-wrapper > ::slotted(*) {
  visibility: visible;
}

:host(:not([expanded])) > .chapter-wrapper {
  max-height: 0rem;
  overflow: hidden;
  pointer-events: none;
  transform: translateY(-0.5rem);
  opacity: 0;
}

:host([chapter]) > .chapter-wrapper {
  display: flex;
  flex-direction: column;
  margin-left: var(--sh-menu-item-chapter-wrapper-margin-left);
}

.arrow-icon {
  margin-right: var(--sh-menu-item-chapter-arrow-margin-right);
}

:host([chapter][expanded]) > .item-wrapper > .arrow-icon {
  transform: rotate(90deg);
}

:host(:not([chapter]).chapter-sibling) > .item-wrapper > .menu-item-wrapper {
  margin-left: var(--sh-menu-item-chapter-sibling-margin-left);
}

/* hover */
/* CSS rules with .hover class are needed for use in dropdown component */
:host(:not(.touch-device):not([active])) .menu-item-wrapper:hover,
:host(:not(.touch-device):not([active])) .menu-item-wrapper.hover,
:host(.hover:not(.touch-device):not([active])) .menu-item-wrapper {
  background: rgba(var(--ui-1), var(--opacity-7));
  padding: var(--sh-menu-item-item-padding-hover);
  margin: var(--sh-menu-item-item-margin-hover);
  width: var(--sh-menu-item-item-width);
}

:host(.focus:not(.touch-device)) .menu-item-wrapper {
  outline: var(--focus-outline);
}

:host([icon]:not([checkbox]):not(.touch-device):not([active]):not([vertical-alignment])) .menu-item-wrapper:hover,
:host([icon]:not([checkbox]):not(.touch-device):not([active])) .menu-item-wrapper.hover,
:host(.hover[icon]:not([checkbox]):not(.touch-device):not([active])) .menu-item-wrapper {
  background: rgba(var(--ui-1), var(--opacity-7));
  padding: var(--sh-menu-item-item-padding-hover);
}

:host(.chapter-sibling:not([chapter]):not(.touch-device)) .menu-item-wrapper:hover,
:host(.chapter-sibling:not([chapter]):not(.touch-device)) .menu-item-wrapper.hover,
:host(.hover.chapter-sibling:not([chapter]):not(.touch-device)) .menu-item-wrapper,
:host(.chapter-sibling:not([chapter])[active]) .menu-item-wrapper {
  margin-left: var(--sh-menu-item-chapter-sibling-margin-left-hover);
}

:host(:not(.touch-device):not([active])) .menu-item-wrapper[disabled] {
  background: transparent;
}

:host([disabled]) .menu-item-label {
  color: var(--text-disabled);
}

:host([disabled]) #menu-item-icon {
  opacity: 0.2;
}

#checkbox {
  width: fit-content;
  width: -moz-fit-content;
}`;

  // ../utils/on-ellipsis-tooltip.js
  var DisplayTooltip = function(e8, content, tooltip) {
    if (tooltip.classList.contains("touch-device"))
      return;
    if (e8.target.scrollWidth > e8.target.offsetWidth || e8.target.scrollHeight > e8.target.offsetHeight) {
      tooltip.target = e8.target;
      tooltip.setAttribute("label", content);
      tooltip.visible = true;
    } else {
      tooltip.target = Math.random().toString();
      tooltip.visible = false;
    }
  };
  var displayTooltip = function(e8, content, tooltip) {
    if (tooltip.classList.contains("touch-device")) {
      return;
    }
    tooltip.target = e8.target;
    tooltip.setAttribute("label", content);
    tooltip.visible = true;
  };
  var toogleTooltip = function(e8) {
    return e8.target.scrollWidth > e8.target.offsetWidth || e8.target.scrollHeight > e8.target.offsetHeight;
  };

  // ../sh-menu-item/src/sh-menu-item.js
  var SHMenuItem = class extends ControlStateMixin2(FocusBlurMixin2(RefrainSpaceScrollMixin(s4))) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        icon: { type: String, reflect: true },
        href: { type: String, reflect: true },
        active: { type: Boolean, reflect: true },
        role: { type: String, reflect: true },
        chapter: { type: Boolean, reflect: true },
        expanded: { type: Boolean, reflect: true },
        value: { type: String, reflect: true },
        checkbox: { type: Boolean, reflect: true },
        toggle: { type: Boolean, reflect: true },
        iconColor: { type: String, reflect: true, attribute: "icon-color" },
        iconSize: { type: String, reflect: true, attribute: "icon-size" },
        verticalAlignment: { type: Boolean, reflect: true, attribute: "vertical-alignment" },
        labelRows: { type: String, reflect: true, attribute: "label-rows" }
      };
    }
    static get styles() {
      return [sharedStyles, sh_menu_item_lit_scss_default];
    }
    render() {
      return x`
      <div class="item-wrapper">
        ${this.chapter ? x` <sh-icon
              id="menuExpandIcon"
              ?disabled="${this.disabled}"
              button
              icon="arrow-right-s"
              size="s"
              class="arrow-icon"
              @click="${this._handleExpandIconClick}"
              tabindex="-1"
            >
            </sh-icon>` : ""}
        <div
          id="menuExpandWrapper"
          class="menu-item-wrapper${!this.chapter ? " focus-item" : ""}"
          role="button"
          ?active="${this.active}"
          ?disabled="${this.disabled}"
          @click="${this._handleClicked}"
        >
          <div class="vertical-item-wrapper">
            ${this.icon && !this.checkbox ? x` <sh-icon
                  .icon="${this.icon}"
                  size="${this.iconSize ? this.iconSize : "m"}"
                  id="menu-item-icon"
                  .color="${this.iconColor}"
                >
                </sh-icon>` : ""}
            ${this.checkbox ? x` <sh-checkbox
                  neutral
                  tabindex="-1"
                  label=""
                  ?active="${this.active}"
                  ?disabled="${this.disabled}"
                  id="checkbox"
                ></sh-checkbox>` : ""}
            <!--Do not change the class name "menu-item-label" as it could be used at application end to expand/collapse tree structure view on click of menu item label or arrow-->
            ${this._displaymenuItemLabel()}
            <sh-tooltip placement="bottom-left" position-fixed-adjustment></sh-tooltip>
          </div>
          ${!this.verticalAlignment ? x`<div class="functions-wrapper">
                <slot name="functions" id="functions"></slot>
              </div> ` : ""}
        </div>
        ${this.verticalAlignment ? x` <slot name="functions" id="functions"></slot>` : ""}
      </div>
      <div class="chapter-wrapper">
        <slot id="chapterSlot" @slotchange="${this._chapterSlotObserver}"></slot>
      </div>
    `;
    }
    constructor() {
      super();
      this.label = "label";
      this.value = "";
      this.toggle = true;
      this.verticalAlignment = false;
      this.iconSize = "m";
      this.labelRows = "1";
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      if (!this.hasAttribute("role")) {
        this.role = "listitem";
      }
      this._handleFocus = this._handleFocus.bind(this);
      this.addEventListener("focus", this._handleFocus);
      this._addOrRemoveClass();
    }
    firstUpdated() {
      super.firstUpdated();
      const tooltip = this.shadowRoot.querySelector("sh-tooltip");
      this.shadowRoot.querySelector(".menu-item-label").addEventListener("mouseover", function(e8) {
        DisplayTooltip(e8, this.textContent, tooltip);
      });
      this.addEventListener("keyup", (e8) => this._handleKeyup(e8));
      this.addEventListener("keydown", (e8) => this._handleKeydown(e8));
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("disabled")) {
        this._handleDisabledChange();
      }
      if (changedProperties.has("active")) {
        this._handleActiveChange();
      }
      const listOfProperties = ["icon", "href", "expanded", "value"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _handleFocus() {
      this.onkeyup = (e8) => {
        if ((keyboardInteraction(e8, KEYCODE.ENTER) && !this.checkbox || keyboardInteraction(e8, KEYCODE.SPACE)) && e8.composedPath()[0] === this) {
          this._handleClicked();
        }
      };
    }
    _chapterSlotObserver() {
      const functionsSlot = this.shadowRoot.querySelector("#functions");
      const hasChildMenuItems = this.childElementCount > functionsSlot.assignedNodes({ flatten: true }).length;
      this.chapter = hasChildMenuItems;
      this._addOrRemoveClass();
    }
    _addOrRemoveClass() {
      if (this.parentNode.tagName === "SH-MENU-ITEM") {
        return;
      }
      const siblingItems = this.parentNode.children;
      if (this.chapter) {
        for (const sibling of siblingItems) {
          sibling.classList.add("chapter-sibling");
        }
      } else if (!this.classList.contains("chapter-sibling")) {
        for (const sibling of siblingItems) {
          if (sibling.chapter) {
            this.classList.add("chapter-sibling");
            break;
          }
        }
      }
    }
    _handleDisabledChange() {
      for (const child of this.children) {
        child.disabled = this.disabled;
      }
    }
    _handleClicked() {
      if (this.href !== void 0) {
        window.location.href = this.href;
      }
      const clickedElement = {
        label: this.value === "" ? this.label : this.value,
        icon: this.icon
      };
      dispatchCustomEvent(this, "clicked", clickedElement);
      this.clicked = true;
      this._toggleActive();
    }
    _toggleActive() {
      if (this.toggle) {
        this.active = !this.active;
      }
    }
    _handleActiveChange() {
      dispatchCustomEvent(this, "active-changed");
      if (this.active && !this.clicked) {
        dispatchCustomEvent(this, "menu-item-active");
      }
      this.clicked = false;
    }
    _handleExpandIconClick() {
      if (this.expanded) {
        this._collapse();
      } else {
        this._expand();
      }
    }
    _handleKeydown(e8) {
      if (keyboardInteraction(e8, KEYCODE.TAB) && e8.target.tagName === "SH-MENU-ITEM") {
        this._setTabIndex(e8.target.children);
        if (!e8.shiftKey) {
          if (e8.target.nextElementSibling && !e8.target.nextElementSibling.disabled) {
            this._addItemFocusedClass(e8.target.nextElementSibling);
          } else if (e8.target.parentElement && e8.target.parentElement.nextElementSibling) {
            this._addItemFocusedClass(e8.target.parentElement.nextElementSibling);
          }
        } else {
          if (e8.target.previousElementSibling && !e8.target.previousElementSibling.disabled) {
            this._addItemFocusedClass(e8.target.previousElementSibling);
          }
        }
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_DOWN) || keyboardInteraction(e8, KEYCODE.ARROW_UP) || e8.code === "Home" || e8.code === "End") {
        e8.preventDefault();
      }
    }
    _addItemFocusedClass(item) {
      if (!item.disabled) {
        item.tabIndex = 0;
        item.classList.add("item-focused");
      }
    }
    _handleKeyup(e8) {
      if (e8.target.chapter && keyboardInteraction(e8, KEYCODE.ARROW_RIGHT)) {
        if (!e8.target.expanded) {
          this._expand();
          e8.stopPropagation();
        } else {
          e8.target.children[0].focus();
        }
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_DOWN) || e8.code === "Home") {
        e8.preventDefault();
        if (e8.target.expanded && e8.target.chapter) {
          e8.target.children[0].focus();
        } else if (e8.target.nextElementSibling !== null && e8.target.tagName === "SH-MENU-ITEM") {
          e8.target.nextElementSibling.focus();
        }
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_UP) || e8.code === "End") {
        e8.preventDefault();
        if (e8.target.previousElementSibling !== null && e8.target.tagName === "SH-MENU-ITEM") {
          e8.target.previousElementSibling.focus();
        } else {
          e8.target.parentElement.focus();
        }
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_LEFT)) {
        if (e8.target.chapter && e8.target.expanded) {
          this._collapse();
          this._setTabIndex(e8.target.children);
          e8.stopPropagation();
        } else {
          e8.target.parentElement.focus();
        }
      }
    }
    _setTabIndex(menuChildren) {
      Array.from(menuChildren).forEach((element) => {
        if (element.tagName === "SH-MENU-ITEM") {
          element.tabIndex = -1;
        }
      });
    }
    _collapse() {
      this.expanded = false;
      dispatchCustomEvent(this, "collapse", null, false);
    }
    _expand() {
      this.expanded = true;
      dispatchCustomEvent(this, "expand", null, false);
    }
    _displaymenuItemLabel() {
      return x` <div
      class="menu-item-label"
      style="-webkit-line-clamp: ${this.labelRows !== "1" && this.labelRows !== "2" && this.labelRows !== "auto" ? "2" : this.labelRows}"
    >
      ${this.label}
    </div>`;
    }
    disconnectedCallback() {
      this.removeEventListener("focus", this._handleFocus);
      super.disconnectedCallback();
    }
  };
  customElements.define("sh-menu-item", SHMenuItem);

  // ../utils/refrain-space-scroll-mixin.ts
  var RefrainSpaceScrollMixin2 = (superClass) => {
    class RefrainSpaceScrollMixinElement extends superClass {
      connectedCallback() {
        super.connectedCallback();
        this._preventScroll = this._preventSpaceScroll.bind(this);
        this.addEventListener("keydown", this._preventScroll);
      }
      _preventSpaceScroll(e8) {
        const element = e8.composedPath()[0];
        if (keyboardInteraction2(e8, KEYCODE2.SPACE) && element.tagName !== "INPUT" && element.tagName !== "TEXTAREA") {
          e8.preventDefault();
        }
      }
      disconnectedCallback() {
        this.removeEventListener("keydown", this._preventScroll);
        super.disconnectedCallback();
      }
    }
    return RefrainSpaceScrollMixinElement;
  };

  // ../sh-accordion/src/sh-accordion.lit.scss.js
  var sh_accordion_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-accordion-header-wrapper-min-height=2.5rem] - minimum height of header wrapper
   */
  --sh-accordion-header-wrapper-min-height: 2.5rem;
  /* 
   * @cssprop [--sh-accordion-container-padding-left-right=0 1rem] - Left and right side padding of container
   */
  --sh-accordion-container-padding-left-right: 0 1rem;
  /* 
   * @cssprop [--sh-accordion-header-label-info-padding=0.5rem 0.5rem 0.5rem 0] - padding of accordion label and info
   */
  --sh-accordion-header-label-info-padding: 0.5rem 0.5rem 0.5rem 0;
  /* 
   * @cssprop [--sh-accordion-content-wrapper-width=1rem] - width of content wrapper
   */
  --sh-accordion-content-wrapper-width: 1rem;
  /* 
   * @cssprop [--sh-accordion-content-wrapper-line-height=1.25rem] - line-height of content wrapper
   */
  --sh-accordion-content-wrapper-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-accordion-wrapper-padding-bottom=1rem] - bottom padding of accordion wrapper
   */
  --sh-accordion-wrapper-padding-bottom: 1rem;
  /* 
   * @cssprop [--sh-accordion-label-line-height=1.5rem] - line height of accordion label
   */
  --sh-accordion-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-accordion-expand-icon-margin=0.25rem 0 0.25rem 0] - margin of expand icon
   */
  --sh-accordion-expand-icon-margin: 0.25rem 0 0.25rem 0;
  /* 
   * @cssprop [--sh-accordion-arrow-invert-margin=0.25rem 0.5rem 0.25rem 0] - margin of expand icon
   */
  --sh-accordion-arrow-invert-margin: 0.25rem 0.5rem 0.25rem 0;
  /* 
   * @cssprop [--sh-accordion-icon-padding=0.5rem 0.5rem 0.5rem 0] - padding of header icon
   */
  --sh-accordion-icon-padding: 0.5rem 0.5rem 0.5rem 0;
  /* 
   * @cssprop [--sh-accordion-content-items-margin-top=0.5rem] - vertical gap between items in content
   */
  --sh-accordion-content-items-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-accordion-content-items-margin-top-touch=1rem] - vertical gap between items in content for touch device
   */
  --sh-accordion-content-items-margin-top-touch: 1rem;
  /* 
   * @cssprop [--sh-accordion-content-first-item-margin-top=0rem] - top margin of first item in the content
   */
  --sh-accordion-content-first-item-margin-top: 0rem;
}

:host {
  width: 100%;
  transition: var(--transition-time) max-height ease-in-out, var(--transition-time) background-color ease-in-out;
  box-shadow: var(--shadow-raised);
  box-sizing: border-box;
  background: var(--base-3);
  border-radius: 0.125rem;
  display: block;
}

:host([flat]) {
  border-radius: 0rem;
  background: transparent;
  padding: 0;
  box-shadow: none;
}

.accordion-wrapper {
  width: 100%;
  height: fit-content;
  height: -ms-fit-content;
  height: -moz-fit-content;
  display: flex;
  flex-direction: column;
  transition: var(--transition-time) all ease-in-out;
  box-sizing: border-box;
  border-radius: 0.125rem;
  word-break: break-word;
}

.header-wrapper {
  min-height: var(--sh-accordion-header-wrapper-min-height);
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  padding: var(--sh-accordion-container-padding-left-right);
  cursor: pointer;
}

:host([flat]) .header-wrapper {
  padding: 0rem;
}

.header-wrapper:focus-visible {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
}

.accordion-label {
  color: var(--text-primary);
  font: var(--header-2);
  line-height: var(--sh-accordion-label-line-height);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding: var(--sh-accordion-header-label-info-padding);
  align-self: center;
}

:host([label-rows=auto]) .accordion-label {
  white-space: unset;
}

.label {
  display: contents;
}

.accordion-info {
  min-width: 1.125rem;
  width: auto;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: right;
  flex: auto;
  line-height: var(--sh-accordion-label-line-height);
  padding: var(--sh-accordion-header-label-info-padding);
}

:host([info]) .accordion-label {
  min-width: 3.375rem;
  width: auto;
  flex: auto;
}

:host(:not([info])) .accordion-info {
  display: none;
}

.accordion-wrapper sh-icon.expand {
  color: rgba(var(--ui-1), var(--opacity-3));
  transition: var(--transition-time) color ease-in-out;
  margin: 0.25rem 0;
}

:host(:not([flat]):not([arrow-invert])) > .accordion-wrapper sh-icon.expand {
  margin: var(--sh-accordion-expand-icon-margin);
}

.content-wrapper {
  display: flex;
  width: calc(100% - var(--sh-accordion-content-wrapper-width) * 2);
  flex-direction: column;
  padding: var(--sh-accordion-container-padding-left-right);
  font: var(--body-1);
  line-height: var(--sh-accordion-content-wrapper-line-height);
  color: var(--text-primary);
}

/* expanded */
:host(:not([expanded])) > .accordion-wrapper > .content-wrapper {
  visibility: hidden;
  opacity: 0;
  overflow: hidden;
  transition: var(--transition-time) all ease-in-out, var(--transition-time) max-height ease-in-out, var(--transition-time) padding ease-in-out;
  max-height: 0rem;
}

:host([expanded]) > .accordion-wrapper {
  padding-bottom: var(--sh-accordion-wrapper-padding-bottom);
}

:host([expanded]) > .accordion-wrapper > .header-wrapper > sh-icon.expand {
  transform: rotate(-180deg);
  transform-style: preserve-3d;
}

:host([expanded]) > .accordion-wrapper > .content-wrapper {
  visibility: visible;
  opacity: 1;
  max-height: 9999rem;
  overflow: visible;
}

.accordion-icon {
  padding: var(--sh-accordion-icon-padding);
}

:host([arrow-invert]) .expand {
  margin: var(--sh-accordion-arrow-invert-margin);
}

.footer-wrapper {
  display: flex;
  flex-direction: row;
  justify-content: flex-end;
  padding-top: 1rem;
  margin-top: 0rem;
}

.footer-wrapper[empty-footer] {
  display: none;
}

.footer-wrapper > ::slotted(*) {
  margin-left: 0.5rem;
}

.content-wrapper > ::slotted(*) {
  margin-top: var(--sh-accordion-content-items-margin-top);
}

.content-wrapper > ::slotted(*:first-child) {
  margin-top: var(--sh-accordion-content-first-item-margin-top);
}

.content-wrapper > ::slotted(sh-menu-item) {
  margin-top: 0rem;
}

.header-slot-wrapper {
  flex: 1;
  max-width: calc(100% - 2.5rem);
  margin-right: 0.5rem;
}

.header-slot-wrapper > ::slotted(*) {
  padding: var(--sh-accordion-header-label-info-padding);
  line-height: var(--sh-accordion-label-line-height);
  font-weight: bold;
  font-size: var(--font-size-header-2);
}

.header-slot-wrapper[empty-header] {
  display: none;
}

/* disabled */
:host([disabled]) {
  pointer-events: none;
}

:host([disabled]) .header-slot-wrapper > ::slotted(*),
:host([disabled]) .accordion-label,
:host([disabled]) .accordion-info {
  color: var(--text-disabled);
}

/* touch */
@media (pointer: coarse) {
  .content-wrapper > ::slotted(*) {
    margin-top: var(--sh-accordion-content-items-margin-top-touch);
  }
}
/* hover */
:host(:not(.touch-device)) .header-wrapper:hover sh-icon.expand {
  color: rgba(var(--ui-1), var(--opacity-2));
}`;

  // ../sh-accordion/src/sh-accordion.js
  var SHAccordion = class SHAccordion2 extends RefrainSpaceScrollMixin2(s4) {
    constructor() {
      super(...arguments);
      this.emptyHeader = true;
      this.emptyFooter = true;
      this.label = "Accordion Label";
      this.expanded = false;
      this.flat = false;
      this.disabled = false;
      this.arrowInvert = false;
    }
    static get styles() {
      return [sh_accordion_lit_scss_default];
    }
    firstUpdated() {
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("disabled")) {
        this.handleDisabled();
      }
      const listOfProperties = ["label", "info", "flat", "expanded", "icon", "disabled"];
      dispatchAttributeChangedEvent2(this, changedProperties, listOfProperties);
    }
    render() {
      return x`
      <div class="accordion-wrapper">
        <div
          class="header-wrapper"
          tabindex="${this.disabled ? "-1" : "0"}"
          @click="${() => this.handleExpand()}"
          @keyup="${(e8) => this.handleHeaderWrapperKeyUp(e8)}"
        >
          ${this.arrowInvert ? this.getArrowIcon() : A}
          ${this.icon && this.emptyHeader ? this.getIconWithEmptyHeader() : A}
          ${this.emptyHeader ? this.getEmptyHeader() : A}
          <div class="header-slot-wrapper" ?empty-header=${this.emptyHeader}>
            ${this.getHeaderSlot()}
          </div>
          ${!this.arrowInvert ? this.getArrowIcon() : A}
        </div>
        <div class="content-wrapper">
          <slot></slot>
          <div class="footer-wrapper" ?empty-footer=${this.emptyFooter}>
            <slot
              name="footer"
              class="footer"
              @slotchange="${(e8) => this.footerSlotChange(e8)}"
            ></slot>
          </div>
        </div>
      </div>
    `;
    }
    getHeaderSlot() {
      return x`<slot
      name="header"
      class="header"
      @slotchange="${(e8) => {
        this.headerSlotChange(e8);
      }}"
    ></slot>`;
    }
    getEmptyHeader() {
      return x` <sh-text size="header-2" class="accordion-label">${this.label}</sh-text>
      <sh-text size="body-1" color="secondary" class="accordion-info">${this.info}</sh-text>`;
    }
    getIconWithEmptyHeader() {
      return x` <sh-icon
      size="s"
      .icon="${this.icon}"
      .color="${this.iconColor}"
      class="accordion-icon"
      ?disabled="${this.disabled}"
    ></sh-icon>`;
    }
    footerSlotChange(e8) {
      if (e8.target instanceof HTMLSlotElement) {
        this.updateSlotFlag(e8.target);
      }
    }
    headerSlotChange(e8) {
      if (e8.target instanceof HTMLSlotElement) {
        this.updateHeaderSlotFlag(e8.target);
      }
    }
    handleHeaderWrapperKeyUp(e8) {
      if (keyboardInteraction2(e8, KEYCODE2.SPACE) || keyboardInteraction2(e8, KEYCODE2.ENTER) || e8.code === KEYCODE2.NUMPAD_ENTER.code) {
        if (e8.target instanceof HTMLElement) {
          e8.target.click();
        }
      }
    }
    handleExpand() {
      this.expanded = !this.expanded;
    }
    getArrowIcon() {
      return x`<sh-icon
      class="expand accordion-expand"
      icon="arrow-down-s"
      button
      tabindex="-1"
      ?disabled="${this.disabled}"
    ></sh-icon>`;
    }
    updateHeaderSlotFlag(slot) {
      const headerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyHeader = headerNodes === 0;
    }
    updateSlotFlag(slot) {
      const footerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyFooter = footerNodes === 0;
    }
    handleDisabled() {
      if (this.disabled) {
        this.expanded = false;
      }
    }
  };
  __decorate([t3()], SHAccordion.prototype, "emptyHeader", void 0);
  __decorate([t3()], SHAccordion.prototype, "emptyFooter", void 0);
  __decorate([n5({ type: String, reflect: true })], SHAccordion.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHAccordion.prototype, "info", void 0);
  __decorate([n5({ type: String, reflect: true })], SHAccordion.prototype, "icon", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-color" })], SHAccordion.prototype, "iconColor", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "label-rows" })], SHAccordion.prototype, "labelRows", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHAccordion.prototype, "expanded", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHAccordion.prototype, "flat", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHAccordion.prototype, "disabled", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "arrow-invert" })], SHAccordion.prototype, "arrowInvert", void 0);
  SHAccordion = __decorate([e4("sh-accordion")], SHAccordion);

  // ../utils/tooltip-ellipsis-checker-mixin.ts
  var TooltipEllipsisCheckerMixin = (superClass) => {
    class TooltipEllipsisCheckerMixinElementextends extends superClass {
      ellipsisChecker(scrollWidth, offsetWidth, scrollHeight, offsetHeight, direction = "both") {
        switch (direction) {
          case "horizontal":
            return scrollWidth > offsetWidth;
          default:
            return scrollWidth > offsetWidth || scrollHeight > offsetHeight;
        }
      }
    }
    return TooltipEllipsisCheckerMixinElementextends;
  };

  // ../utils/window-location.ts
  var windowLocation2 = {
    setWindowLocationHRef(url) {
      window.location.href = url;
    }
  };

  // ../sh-breadcrumbs/src/sh-breadcrumb-item.lit.scss.js
  var sh_breadcrumb_item_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-breadcrumb-item-item-height=1.5rem] - height of breadcrumb item
   */
  --sh-breadcrumb-item-item-height: 1.5rem;
  /* 
   * @cssprop [--sh-breadcrumb-item-item-max-width=10rem] - max width of breadcrumb item
   */
  --sh-breadcrumb-item-item-max-width: 10rem;
  /* 
   * @cssprop [--sh-breadcrumb-item-item-line-height=1.25rem] - line height of breadcrumb item
   */
  --sh-breadcrumb-item-item-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-breadcrumb-item-item-icon-margin=-0.25rem 0] - icon margin of breadcrumb
   */
  --sh-breadcrumb-item-item-icon-margin: -0.25rem 0;
  /* 
   * @cssprop [--sh-breadcrumb-item-item-icon-width=2rem] - icon max width
   */
  --sh-breadcrumb-item-item-icon-width: 2rem;
}

:host {
  float: left;
  margin-right: 0.25rem;
  height: var(--sh-breadcrumb-item-item-height);
  display: inline-flex;
  align-items: center;
}

sh-text {
  color: var(--text-secondary);
  text-decoration: none;
  margin-right: 0.25rem;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
  max-width: var(--sh-breadcrumb-item-item-max-width);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  cursor: pointer;
  font: var(--body-1);
  line-height: var(--sh-breadcrumb-item-item-line-height);
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  outline: transparent;
}

sh-icon {
  color: rgba(var(--ui-1), var(--opacity-3));
  margin: -0.25rem 0;
  max-width: var(--sh-breadcrumb-item-item-icon-width);
}

/* State Styles */
:host([active]) sh-text {
  color: var(--text-primary);
  cursor: default;
  max-width: none;
}

/* hover */
:host(:not(.no-hovermq)) sh-text:hover,
sh-text.hover {
  color: var(--text-primary);
}

/* focus */
.item-focused {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
}`;

  // ../sh-breadcrumbs/src/sh-breadcrumb-item.js
  var SHBreadcrumbItem = class SHBreadcrumbItem2 extends TooltipEllipsisCheckerMixin(FocusBlurMixin(s4)) {
    static get styles() {
      return [sharedStyles, sh_breadcrumb_item_lit_scss_default];
    }
    render() {
      return x`
      ${this.label ? x`<sh-text
              id="breadcrumbtexttooltip"
              class="focus-item"
              @click="${() => this._navigateByHref()}"
              @mouseenter="${(e8) => this._showTooltip(e8)}"
              @focus="${(e8) => this._showTooltip(e8)}"
              >${this.label}</sh-text
            ><sh-tooltip
              .target="${this.breadcrumbText}"
              .label="${this.label}"
              placement="bottom-left"
              position-fixed-adjustment
            ></sh-tooltip>` : A}
      ${!this.active ? x` <sh-icon icon="arrow-right-s"></sh-icon> ` : A}
    `;
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "link");
      }
    }
    firstUpdated() {
      var _a4;
      super.firstUpdated();
      (_a4 = this.breadcrumbText) === null || _a4 === void 0 ? void 0 : _a4.setAttribute("tabindex", "0");
    }
    _showTooltip(e8) {
      const target = e8.target;
      const isEllipsis = this.ellipsisChecker(target.scrollWidth, target.offsetWidth, target.scrollHeight, target.offsetHeight, "horizontal");
      if (isEllipsis === true) {
        this.breadcrumbTooltip.setAttribute("visible", "");
      } else {
        this.breadcrumbTooltip.setAttribute("target", "");
        this.breadcrumbTooltip.removeAttribute("visible");
      }
    }
    _navigateByHref() {
      if (this.href && !this.active) {
        windowLocation2.setWindowLocationHRef(this.href);
      }
    }
    _enterKeyAction() {
      this._navigateByHref();
    }
  };
  __decorate([n5({ type: Boolean, reflect: true })], SHBreadcrumbItem.prototype, "active", void 0);
  __decorate([n5({ type: String, reflect: true })], SHBreadcrumbItem.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHBreadcrumbItem.prototype, "href", void 0);
  __decorate([i4("sh-text")], SHBreadcrumbItem.prototype, "breadcrumbText", void 0);
  __decorate([i4("sh-tooltip", true)], SHBreadcrumbItem.prototype, "breadcrumbTooltip", void 0);
  SHBreadcrumbItem = __decorate([e4("sh-breadcrumb-item")], SHBreadcrumbItem);

  // ../sh-breadcrumbs/src/sh-breadcrumbs.js
  var SHBreadcrumbs = class SHBreadcrumbs2 extends s4 {
    static get styles() {
      return [
        sharedStyles,
        i`
        :host {
          float: left;
          display: block;
          overflow: hidden;
        }
      `
      ];
    }
    render() {
      return x` <slot @slotchange="${this._handleSlotChange}"></slot> `;
    }
    _handleSlotChange() {
      const breadcrumbItems = this.querySelectorAll("sh-breadcrumb-item");
      for (let i7 = 0; i7 < breadcrumbItems.length; i7++) {
        breadcrumbItems[i7].active = true;
        if (breadcrumbItems[i7 - 1]) {
          breadcrumbItems[i7 - 1].active = false;
        }
      }
    }
  };
  SHBreadcrumbs = __decorate([e4("sh-breadcrumbs")], SHBreadcrumbs);

  // ../sh-button/src/sh-button.lit.scss.js
  var sh_button_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-button-button-height=2rem] - height of the button
   */
  --sh-button-button-height: 2rem;
  /* 
   * @cssprop [--sh-button-width-size-s=6rem] - width of the button s
   */
  --sh-button-width-size-s: 6rem;
  /* 
   * @cssprop [--sh-button-width-size-m=9.5rem] - width of the button m
   */
  --sh-button-width-size-m: 9.5rem;
  /* 
   * @cssprop [--sh-button-width-size-l=11.5rem] - width of the button l
   */
  --sh-button-width-size-l: 11.5rem;
  /* 
   * @cssprop [--sh-button-label-line-height=1.5rem] - line height of the label
   */
  --sh-button-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-button-button-border-radius=1rem] - border radius of the button
   */
  --sh-button-button-border-radius: 1rem;
  /* 
   * @cssprop [--sh-button-button-padding=0.25rem 1rem] - padding of the button
   */
  --sh-button-button-padding: 0.25rem 1rem;
  /* 
   * @cssprop [--sh-button-icon-width=3rem] - width of the icon button
   */
  --sh-button-icon-width: 3rem;
  /* 
   * @cssprop [--sh-button-icon-height=3rem] - height of the icon button
   */
  --sh-button-icon-height: 3rem;
  /* 
   * @cssprop [--sh-button-icon-size=2rem] - size of the icon
   */
  --sh-button-icon-size: 2rem;
  /* 
   * @cssprop [--sh-button-icon-padding=0.5rem] - padding of the icon
   */
  --sh-button-icon-padding: 0.5rem;
  /* 
   * @cssprop [--sh-button-padding-right-left=2rem] - left right padding of the button
   */
  --sh-button-padding-right-left: 2rem;
  /* 
   * @cssprop [--sh-button-tooltip-height=1.5rem] - line height and height of the tooltip
   */
  --sh-button-tooltip-height: 1.5rem;
  /* 
   * @cssprop [--sh-button-tooltip-max-width=15rem] - max width of the tooltip
   */
  --sh-button-tooltip-max-width: 15rem;
  /* 
   * @cssprop [--sh-button-tooltip-top-margin=0rem] - margin-top for the tooltip
   */
  --sh-button-tooltip-top-margin: 0rem;
  /* 
   * @cssprop [--sh-button-tooltip-margin=0.25rem] - margin for the tooltip
   */
  --sh-button-tooltip-margin: 0.25rem;
  /* 
   * @cssprop [--sh-button-tooltip-margin-top=-1.5rem] - margin for tooltip top placement
   */
  --sh-button-tooltip-margin-top: -1.5rem;
  /* 
   * @cssprop [--sh-button-tooltip-hover-margin-top=-1.75rem] - margin for tooltip top placement on hover
   */
  --sh-button-tooltip-hover-margin-top: -1.75rem;
  /* 
   * @cssprop [--sh-button-tertiary-border-thickness=0.0625rem] - border thickness of a tertiary button
   */
  --sh-button-tertiary-border-thickness: 0.0625rem;
  /* 
   * @cssprop [--sh-button-flex-shrink-icon=unset] - flex-shrink of an icon button
   */
  --sh-button-flex-shrink-icon: unset;
  /* 
   * @cssprop [--sh-button-icon-label-margin-right=0.25rem] - padding right of icon when both icon and label present
   */
  --sh-button-icon-label-margin-right: 0.25rem;
  /* 
   * @cssprop [--sh-button-button-padding-icon-position=0.25rem 1.25rem 0.25rem 1rem] - padding of the button when icon is set
   */
  --sh-button-button-padding-icon-position: 0.25rem 1.25rem 0.25rem 1rem;
  /* 
   * @cssprop [--sh-button-icon-size-s=1.5rem] - button icon size when both icon and label present
   */
  --sh-button-icon-size-s: 1.5rem;
}

:host {
  display: flex;
  height: var(--sh-button-button-height);
  padding: var(--sh-button-button-padding);
  position: relative;
  flex-direction: row;
  border-radius: var(--sh-button-button-border-radius);
  cursor: pointer;
  box-sizing: border-box;
  outline: 0;
  justify-content: center;
  transition: var(--hover-transition-time) background;
  align-items: center;
}

:host([icon]) {
  flex-shrink: var(--sh-button-flex-shrink-icon);
}

.label {
  text-align: center;
  align-self: center;
  font: var(--title-1);
  line-height: var(--sh-button-label-line-height) !important;
  overflow: hidden;
  white-space: nowrap;
  -o-text-overflow: ellipsis;
  text-overflow: ellipsis;
  font-weight: bold;
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  -moz-user-select: none;
  -webkit-user-select: none;
}

:host([icon]:not([icon-position])) sh-icon {
  margin: auto;
}

/* size */
:host(:not([icon])[size=s]) .label,
:host(:not([icon])[shape=pill-s]) .label {
  width: calc(var(--sh-button-width-size-s) - var(--sh-button-padding-right-left));
}

:host(:not([icon])[size=m]) .label,
:host(:not([icon])[shape=pill-m]) .label {
  width: calc(var(--sh-button-width-size-m) - var(--sh-button-padding-right-left));
}

:host(:not([icon])[size=l]) .label,
:host(:not([icon])[shape=pill-l]) .label {
  width: calc(var(--sh-button-width-size-l) - var(--sh-button-padding-right-left));
}

/* icon button */
:host([icon]:not([shape^=pill-]):not([icon-position])),
:host([icon]:not([icon-position])[shape=circle]) {
  position: relative;
  width: var(--sh-button-icon-width);
  height: var(--sh-button-icon-height);
  padding: var(--sh-button-icon-padding);
  border-radius: 50%;
}

sh-icon {
  --sh-icon-size-m: var(--sh-button-icon-size);
  --sh-icon-font-size-m: var(--sh-button-icon-size);
  --sh-icon-size-s: var(--sh-button-icon-size-s);
  --sh-icon-font-size-s: var(--sh-button-icon-size-s);
}

/* color='primary' */
:host([color=primary]) {
  background-color: rgba(var(--ui-3), var(--opacity-1));
}

:host([color=primary]:hover:not(:active):not(.touch-device)) {
  background-color: rgba(var(--ui-2), var(--opacity-1));
}

:host([color=primary]:active) {
  background-color: rgba(var(--ui-4), var(--opacity-1));
}

:host([color=primary]) .label,
:host([color=primary]) sh-icon {
  color: var(--text-white);
}

/* color='secondary' */
:host([color=secondary]) {
  background-color: rgba(var(--ui-1), var(--opacity-6));
}

:host([color=secondary]:hover:not(:active):not(.touch-device)) {
  background-color: rgba(var(--ui-1), var(--opacity-5));
}

:host([color=secondary]:active) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([color=secondary]) .label {
  color: var(--text-primary);
}

/* color='tertiary' */
:host(:not([icon])[color=tertiary]),
:host([icon][icon-position][color=tertiary]) {
  padding: var(--sh-button-button-padding);
  border: var(--sh-button-tertiary-border-thickness) solid rgba(var(--ui-1), var(--opacity-6));
  color: var(--text-primary);
}

:host([icon][icon-position][color=tertiary]:hover:not(:active):not(.touch-device)),
:host(:not([icon])[color=tertiary]:hover:not(:active):not(.touch-device)) {
  background-color: rgba(var(--ui-1), var(--opacity-5));
}

:host([icon][icon-position][color=tertiary]:active),
:host(:not([icon])[color=tertiary]:active) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([color=tertiary]) {
  background-color: transparent;
}

:host([color=tertiary]:not([icon-position])) sh-icon {
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([icon][color=tertiary]:hover:not(:active):not(.touch-device)) sh-icon {
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([color=tertiary]:active) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([color=tertiary]) .label {
  color: var(--text-primary);
}

/* disabled */
:host([disabled]) {
  pointer-events: none;
  cursor: not-allowed;
}

:host([color=primary][disabled]) .label,
:host([color=primary][disabled]) sh-icon {
  color: var(--text-white-disabled);
}

:host(:not([color=primary])[disabled]) .label,
:host(:not([color=primary])[disabled]) sh-icon {
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([color=primary][disabled]) {
  background-color: rgba(var(--ui-2), var(--opacity-5));
}

:host([color=secondary][disabled]) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host(:not([icon])[color=tertiary][disabled]) {
  border: var(--sh-button-tertiary-border-thickness) solid rgba(var(--ui-1), var(--opacity-7));
}

:host([color=tertiary]) .label {
  color: var(--text-primary);
}

/* touch */
:host(:hover:not(:active):not(.touch-device)) .tooltip {
  opacity: 1;
  visibility: visible;
}

:host(:hover:not(:active):not(.touch-device)) .top.tooltip {
  margin-top: var(--sh-button-tooltip-hover-margin-top);
}

:host(:hover:not(:active):not(.touch-device)) .bottom.tooltip {
  margin-top: var(--sh-button-tooltip-margin);
}

:host(:hover:not(:active):not(.touch-device)) .left.tooltip {
  margin-right: var(--sh-button-tooltip-margin);
}

:host(:hover:not(:active):not(.touch-device)) .right.tooltip {
  margin-left: var(--sh-button-tooltip-margin);
}

:host([icon][icon-position]:not([size=full-width]):not([size=max-content])),
:host(:not([icon])) {
  /**
           * To prevent the browser from
           * shrinking the button when 
           * the window is resized to a
           * smaller size, we set 
           * flex-shrink to 0.
          */
  flex-shrink: 0;
  min-width: var(--sh-button-width-size-s);
  max-width: var(--sh-button-width-size-l);
}

:host([size=s]),
:host([shape=pill-s]) {
  width: var(--sh-button-width-size-s);
}

:host([size=m]),
:host([shape=pill-m]) {
  width: var(--sh-button-width-size-m);
}

:host([size=l]),
:host([shape=pill-l]) {
  width: var(--sh-button-width-size-l);
}

:host([size=auto]),
:host([size=max-content]) {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
}

:host([size=max-content]) {
  max-width: unset;
}

:host([size=full-width]) {
  max-width: unset;
  width: 100% !important;
}

:host(:not([label=""])[icon-position]) sh-icon {
  margin-right: var(--sh-button-icon-label-margin-right);
}

:host(:not([label=""])[icon][icon-position]) {
  padding: var(--sh-button-button-padding-icon-position);
}

:host(.item-focused) {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
}

.tooltip-wc {
  white-space: nowrap;
}

:host([color=primary]) .btn-icon {
  --ui-1: 255, 255, 255;
}

:host([disabled]) .btn-icon {
  opacity: 1;
}

:host([color=primary][disabled]) .btn-icon {
  --opacity-1: var(--text-white-disabled-opacity);
  --opacity-2: var(--text-white-disabled-opacity);
  --opacity-3: var(--text-white-disabled-opacity);
  --opacity-4: var(--text-white-disabled-opacity);
  --opacity-5: var(--text-white-disabled-opacity);
}

:host(:not([color=primary])[disabled]) .btn-icon {
  --opacity-1: var(--opacity-5);
  --opacity-2: var(--opacity-5);
  --opacity-3: var(--opacity-5);
  --opacity-4: var(--opacity-5);
}`;

  // ../sh-button/src/sh-button.js
  var SHButton = class SHButton2 extends RefrainSpaceScrollMixin(ControlStateMixin(FocusBlurMixin(s4))) {
    constructor() {
      super();
      this.label = "Label";
      this.size = "s";
      this.color = "primary";
      this.role = "button";
    }
    static get styles() {
      return [extendInteractiveArea(), sh_button_lit_scss_default];
    }
    render() {
      return x`
      ${this.icon ? x`<sh-icon
            icon="${this.icon}"
            size="${this.getIconPosition()}"
            .disabled="${this.disabled}"
            class="btn-icon"
          ></sh-icon>` : A}
      ${this.tooltip ? x` <sh-tooltip
            .target="${this}"
            placement="${this.tooltip}"
            label="${this.label}"
            position-fixed-adjustment
            class="tooltip-wc"
          ></sh-tooltip>` : A}
      ${this.label && !this.icon || this.label && this.icon && this.iconPosition ? x`<div class="label">${this.label}</div> ` : A}
    `;
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("href") && this.href) {
        this.addHrefListener();
      }
      const listOfProperties = ["icon", "label", "size", "color", "tooltip", "href"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    firstUpdated() {
      super.firstUpdated();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      this.addEventListener("focus", () => this.handleFocus());
      this.addEventListener("blur", () => this.handleBlur());
      if (this.hasAttribute("shape")) {
        this.handleLegacyAttributes();
      }
    }
    addHrefListener() {
      this.addEventListener("click", () => {
        if (this.href)
          window.location.href = this.href;
      });
    }
    handleLegacyAttributes() {
      const shape = this.getAttribute("shape");
      if (shape == "pill-s") {
        this.size = "s";
      } else if (shape == "pill-m") {
        this.size = "m";
      } else if (shape == "pill-l") {
        this.size = "l";
      } else if (shape == "circle") {
        if (!this.icon) {
          this.icon = "save";
        }
      }
      console.warn(`You are using a legacy property (${shape}) of sh-button component. Please use the new 'size' property instead.`);
    }
    handleFocus() {
      this.addEventListener("keyup", this.handleKeyup);
    }
    handleKeyup(e8) {
      super.handleKeyup(e8);
      if (keyboardInteraction2(e8, KEYCODE2.ENTER) || keyboardInteraction2(e8, KEYCODE2.SPACE)) {
        this.click();
      }
    }
    handleBlur() {
      super.handleBlur();
      this.removeEventListener("keyup", this.handleKeyup);
    }
    getIconPosition() {
      return this.iconPosition ? "s" : "m";
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHButton.prototype, "icon", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-position" })], SHButton.prototype, "iconPosition", void 0);
  __decorate([n5({ type: String, reflect: true })], SHButton.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHButton.prototype, "size", void 0);
  __decorate([n5({ type: String, reflect: true })], SHButton.prototype, "color", void 0);
  __decorate([n5({ type: String, reflect: true })], SHButton.prototype, "tooltip", void 0);
  __decorate([n5({ type: String, reflect: true })], SHButton.prototype, "href", void 0);
  __decorate([n5({ type: String, reflect: true })], SHButton.prototype, "role", void 0);
  SHButton = __decorate([e4("sh-button")], SHButton);

  // ../sh-card/src/sh-card.lit.scss.js
  var sh_card_lit_scss_default = i`[sh-scale=s] {
  /* 
   * @cssprop [--sh-card-border-radius=0.125rem] - card border radius
   */
  --sh-card-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-card-label-height=1.5rem] - card label height
   */
  --sh-card-label-height: 1.5rem;
  /* 
   * @cssprop [--sh-card-padding=1rem] - card padding
   */
  --sh-card-padding: 1rem;
  /* 
   * @cssprop [--sh-card-icon-margin-right=0.5rem] -  card icon margin right
   */
  --sh-card-icon-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-card-icon-line-height=1.5rem] - card icon line height
   */
  --sh-card-icon-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-card-icon-width=2rem] - card icon width
   */
  --sh-card-icon-width: 2rem;
  /* 
   * @cssprop [--sh-card-header-wrapper-padding=1rem] - card header wrapperpadding
   */
  --sh-card-header-wrapper-padding: 1rem;
  /* 
   * @cssprop [--sh-card-slot-not-name-line-height=1.25rem] - line height of the slot in card whivh is not name
   */
  --sh-card-slot-not-name-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-card-header-tab-margin-top=-1rem] - margin top for header slot slotted tab
   */
  --sh-card-header-tab-margin-top: -1rem;
  /* 
   * @cssprop [--sh-card-empty-header-not-empty-content-padding=1rem] - padding top for slot which is not name and is empty header and has content
   */
  --sh-card-empty-header-not-empty-content-padding: 1rem;
  /* 
   * @cssprop [--sh-card-empty-footer-not-empty-content-padding=1rem] - padding bottom for slot which is not name and is empty footer and has content
   */
  --sh-card-empty-footer-not-empty-content-padding: 1rem;
  /* 
   * @cssprop [--sh-card-image-icon-label-wrapper-padding=0.5rem] - padding bottom between image icon and label wrapper
   */
  --sh-card-image-icon-label-wrapper-padding: 0.5rem;
  /* 
   * @cssprop [--sh-card-footer-margin=0.5rem] - margin  bottom for slotted footer not first child
   */
  --sh-card-footer-margin: 0.5rem;
  /* 
   * @cssprop [--sh-card-footer-margin-left-not-first-child=0.5rem] - margin -left for slotted footer not first child
   */
  --sh-card-footer-margin-left-not-first-child: 0.5rem;
  /* 
   * @cssprop [--sh-card-footer-not-empty-margin=0.5rem] - margin for slotted footer not empty and not image
   */
  --sh-card-footer-not-empty-margin: 0.5rem;
  /* 
   * @cssprop [--sh-card-footer-not-empty-padding=0.5rem] - padding for slotted footer not empty and not image
   */
  --sh-card-footer-not-empty-padding: 0.5rem;
  /* 
   * @cssprop [--sh-card-label-icon-badge-margin=0rem] - margin for label
   */
  --sh-card-label-icon-badge-margin: 0rem;
  /* 
   * @cssprop [--sh-card-label-padding=1rem] - card label padding
   */
  --sh-card-label-padding: 1rem;
  /* 
   * @cssprop [--sh-card-icon-font-size-l=2.5rem] - applied to interllay used icon as --sh-icon-font-size-l
   */
  --sh-card-icon-font-size-l: 2.5rem;
  /* 
   * @cssprop [--sh-card-href-not-image-not-empty-footer-slot-margin=0 1rem] - card with link empty footer margin
   */
  --sh-card-href-not-image-not-empty-footer-slot-margin: 0 1rem;
  /* 
   * @cssprop [--sh-card-href-not-image-not-empty-footer-slot-padding=1rem 0] - card with link empty footer padding
   */
  --sh-card-href-not-image-not-empty-footer-slot-padding: 1rem 0;
  /* 
   * @cssprop [--sh-card-href-label-padding=0] - card with link  padding
   */
  --sh-card-href-label-padding: 0;
}

:host {
  width: 100%;
}

.card-wrapper {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
  border-radius: var(--sh-card-border-radius);
  background-color: var(--base-3);
  box-shadow: var(--shadow-raised);
  transition: var(--transition-time) all ease-in-out;
}

.label-wrapper {
  display: flex;
  flex-direction: row;
  padding: var(--sh-card-padding);
  align-items: center;
  min-height: 1.5rem;
}

:host([label-rows=auto]) .label-wrapper,
:host([label-rows=auto]) slot[name=functions] {
  align-items: unset;
}

sh-icon.card-icon {
  margin-right: var(--sh-card-icon-margin-right);
}

.card-label {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  font: var(--header-2);
  font-weight: bold;
  line-height: var(--sh-card-label-height) !important;
  flex: 1;
  color: var(--text-primary);
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  max-width: 100%;
  margin: var(--sh-card-label-icon-badge-margin);
  word-break: break-all;
  padding: var(--sh-card-label-padding);
}

/* slots */
slot {
  display: flex;
}

.header-wrapper,
slot[name=footer] {
  padding: var(--sh-card-header-wrapper-padding);
}

slot[name=functions] {
  align-items: center;
}

.header-wrapper {
  height: fit-content;
  overflow: hidden;
}

slot:not([name]) {
  padding: var(--sh-card-slot-not-name-padding);
  flex: 1;
  box-sizing: border-box;
  flex-direction: column;
  overflow: auto;
  font: var(--body-1);
  color: var(--text-primary);
  line-height: var(--sh-card-slot-not-name-line-height);
}

slot[name=footer] {
  height: fit-content;
  flex-wrap: wrap;
  justify-content: flex-end;
  align-items: center;
}

slot[name=header]::slotted(sh-tabs) {
  margin-top: var(--sh-card-header-tab-margin-top);
}

slot:not([name]).empty-header:not(.empty-content) {
  padding-top: var(--sh-card-empty-header-not-empty-content-padding);
}

slot:not([name]).empty-footer:not(.empty-content) {
  padding-bottom: var(--sh-card-empty-footer-not-empty-content-padding);
}

slot.empty,
.header-wrapper.empty {
  padding: 0rem;
}

/* image */
.image-wrapper {
  height: 0rem;
  padding-top: 56.25%;
  position: relative;
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

.image-wrapper sh-icon,
.image-wrapper img {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate3d(-50%, -50%, 0);
}

.image-wrapper sh-icon {
  --sh-icon-size-m: 4rem;
  --sh-icon-font-size-m: 4rem;
}

img {
  height: 100%;
  width: 100%;
  display: block;
  background-position: center;
  object-fit: cover;
  background-repeat: no-repeat;
}

:host([image-contain]) img {
  object-fit: contain;
}

:host([image][href]) .label-wrapper,
:host([image]) .label-wrapper,
:host([image-icon]) .label-wrapper {
  padding-bottom: var(--sh-card-image-icon-label-wrapper-padding);
}

/* Content Spacing */
slot:not([name])::slotted(:not(:last-child)) {
  margin-bottom: var(--sh-card-footer-margin);
}

slot[name=functions]::slotted(*),
slot[name=footer]::slotted(*:not(:first-child)) {
  margin-left: var(--sh-card-footer-margin-left-not-first-child);
}

slot[name=functions]::slotted(:first-child) {
  margin-left: var(--sh-card-functions-slot-margin-left-first-child);
}

slot:not([name])::slotted(sh-list-item),
slot:not([name])::slotted(sh-menu-item) {
  margin-bottom: 0px !important;
  margin-top: 0px !important;
}

/* href */
:host([href]) {
  cursor: pointer;
  display: block;
  height: inherit;
  outline: none;
}

:host([href]:hover) .card-wrapper {
  box-shadow: var(--shadow-overlay);
}

:host([href]) .card-wrapper::before {
  pointer-events: none;
  transition: var(--transition-time) all ease-in-out;
  content: "";
  border-radius: var(--sh-card-border-radius);
  height: 100%;
  width: 100%;
  position: absolute;
}

.card-badge {
  position: absolute;
  left: calc(100% - 0.25rem);
  bottom: calc(100% - 0.25rem);
  transform: translate(-50%, 50%);
}

.icon-badge-wrapper {
  position: relative;
  margin: var(--sh-card-label-icon-badge-margin);
}

:host([href]) .icon-badge-wrapper {
  position: relative;
  margin: 0;
}

:host([href]:hover) .card-wrapper::before {
  background-color: rgba(var(--ui-5), var(--opacity-7));
}

:host([href]:not([image])) .label-wrapper.empty-content {
  padding: var(--sh-card-href-label-wrapper-empty-content-not-image-padding);
  height: 100%;
  align-items: center;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
}

:host([href]:not([image])) .label-wrapper.empty-content:not(.empty-footer) {
  padding-bottom: 0rem;
}

:host([href]) .card-label {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  font: var(--header-2);
  font-weight: bold;
  line-height: var(--sh-card-label-height) !important;
  flex: 1;
  color: var(--text-primary);
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  max-width: 100%;
  word-break: break-all;
  padding: var(--sh-card-href-label-padding);
  margin: 0;
}

:host([href]) .label-wrapper.empty-content .card-label {
  flex: unset;
}

:host([href]:not([image])) .card-icon.empty-content {
  margin-right: unset;
  margin-bottom: var(--sh-card-href-card-icon-empty-content);
}

:host([href]) slot[name=footer]::slotted(*:not(:first-child)) {
  margin: unset;
}

:host([href]:not([image])) slot[name=footer]:not(.empty).empty-content {
  border-top: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));
}

:host([href]:not([image])) slot[name=footer]:not(.empty) {
  margin: var(--sh-card-href-not-image-not-empty-footer-slot-margin);
  padding: var(--sh-card-href-not-image-not-empty-footer-slot-padding);
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

/* href disabled */
:host([href][disabled]) {
  pointer-events: none;
}

:host([href][disabled]) .card-wrapper {
  opacity: var(--opacity-4);
}

:host([href][disabled]) .card-label {
  color: var(--text-disabled);
}

:host([label-rows=auto]) .card-label {
  white-space: unset;
  word-break: break-all;
}

/* touch */
@media (pointer: coarse) {
  slot:not([name])::slotted(*:not(:first-child)) {
    margin-top: 1rem;
  }
  slot[name=functions]::slotted(*:not(:first-child)),
  slot[name=footer]::slotted(*:not(:first-child)) {
    margin-left: 1rem;
  }
}
:host([blue-outline]) {
  box-shadow: inset 0rem 0rem 0rem 0.125rem var(--focus-color);
}

sh-icon {
  --sh-icon-font-size-l: var(--sh-card-icon-font-size-l);
}

.header-data {
  padding-bottom: 0px;
}`;

  // ../sh-card/src/sh-card.js
  var SHCard = class SHCard2 extends s4 {
    constructor() {
      super(...arguments);
      this.emptyFooter = true;
      this.emptyHeader = true;
      this.emptyContent = true;
    }
    static get styles() {
      return [sharedStyles, sh_card_lit_scss_default];
    }
    render() {
      return x`
      <div class="card-wrapper">
        ${this.image || this.imageIcon ? x`
              <div class="image-wrapper">
                ${this.image ? x` <img src="${this.image}" /> ` : ""}
                ${this.imageIcon && !this.image ? x`
                      <sh-icon
                        color="rgba(var(--ui-1), var(--opacity-5))"
                        icon="${this.imageIcon}"
                        class="image-icon"
                      ></sh-icon>
                    ` : ""}
              </div>
            ` : ""}
        ${this.label ? x`
              <div
                class="label-wrapper ${this.emptyFooter ? "empty-footer" : ""}
                ${!this.emptyHeader ? "header-data" : ""}
                ${this.emptyContent ? "empty-content" : ""}"
              >
                <div class="icon-badge-wrapper">
                  ${this.icon ? x`
                        <sh-icon
                          size="${(this.href || this.hasAttribute("href")) && !this.image && this.emptyContent ? "l" : "s"}"
                          icon="${this.icon}"
                          .disabled="${(this.href || this.hasAttribute("href")) && this.disabled}"
                          .color="${this.iconColor}"
                          class="card-icon ${this.emptyContent ? "empty-content" : ""}"
                        >
                        </sh-icon>
                        ${this.badge !== null && this.badge !== void 0 && this.href !== null && this.href !== void 0 ? x`${this.badge === "warning" || this.badge === "success" || this.badge === "error" ? x`<sh-badge class="card-badge" type="${this.badge}"></sh-badge>` : x`<sh-badge
                                  class="card-badge"
                                  label="${this.badge}"
                                ></sh-badge>`}` : ""}
                      ` : ""}
                </div>
                <div class="card-label">${this.label}</div>
                ${!(this.emptyContent && this.href) ? x` <slot name="functions"></slot> ` : ""}
              </div>
            ` : ""}
        ${!this.href ? x`
              <div class="header-wrapper ${this.emptyHeader ? "empty" : ""}">
                <slot name="header" @slotchange="${(e8) => this.headerSlotChange(e8)}"></slot>
              </div>
            ` : ""}
        <slot
          class="${this.emptyHeader && !this.label ? "empty-header" : ""} ${this.emptyFooter ? "empty-footer" : ""} ${this.emptyContent ? "empty-content" : ""}"
          @slotchange="${(e8) => this.contentSlotChange(e8)}"
        ></slot>
        <slot
          name="footer"
          @slotchange="${(e8) => this.footerSlotChange(e8)}"
          class="${this.emptyFooter ? "empty" : ""} ${this.emptyContent ? "empty-content" : ""}"
        ></slot>
      </div>
    `;
    }
    update(changedProperties) {
      super.update(changedProperties);
      if (changedProperties.has("cardHeight")) {
        console.warn('You are using a legacy property (cardHeight) of the "sh-card" component. For adjusting the height of the Card please use CSS styles instead.');
        this.handleCardHeight();
      }
      if (this.href && !this.disabled) {
        this.setAttribute("tabindex", "0");
      } else {
        this.removeAttribute("tabindex");
      }
    }
    updated(changedProperties) {
      const listOfProperties = ["label", "icon", "image", "cardHeight", "disabled"];
      dispatchAttributeChangedEvent2(this, changedProperties, listOfProperties);
    }
    firstUpdated() {
      this.addEventListener("click", () => {
        if (this.href && !this.disabled) {
          window.location.href = this.href;
        }
      });
      this.addEventListener("focus", () => this.handleFocus());
      this.addEventListener("blur", () => this.handleBlur());
    }
    headerSlotChange(e8) {
      if (e8.target instanceof HTMLSlotElement) {
        this.updateHeaderSlotFlag(e8.target);
      }
    }
    updateHeaderSlotFlag(slot) {
      const headerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyHeader = headerNodes === 0;
    }
    footerSlotChange(e8) {
      if (e8.target instanceof HTMLSlotElement) {
        this.updateFooterSlotFlag(e8.target);
      }
    }
    updateFooterSlotFlag(slot) {
      const footerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyFooter = footerNodes === 0;
    }
    contentSlotChange(e8) {
      if (e8.target instanceof HTMLSlotElement) {
        this.updateContentSlotFlag(e8.target);
      }
    }
    updateContentSlotFlag(slot) {
      const assignedNodes = Array.from(slot.assignedNodes()).filter((el) => el.data && el.tagName !== "SH-CHART" ? el.data.trim().split("\n").join("").split(" ").join("") : "");
      this.emptyContent = assignedNodes.length === 0 && slot.assignedElements().length === 0;
    }
    handleCardHeight() {
      var _a4;
      const cardWrapper = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".card-wrapper");
      if (cardWrapper != null) {
        cardWrapper.style.minHeight = String(this.cardHeight);
        cardWrapper.style.maxHeight = String(this.cardHeight);
      }
    }
    handleFocus() {
      this.addEventListener("keyup", this.handleKeyboard);
    }
    handleKeyboard(e8) {
      if ((e8.code === "Space" || e8.code === "Enter" || e8.code === "NumpadEnter") && this.href) {
        window.location.href = this.href;
      }
      if (e8.code === "Tab" && !this.disabled && this.href) {
        this.style.outline = "var(--focus-outline)";
      }
    }
    handleBlur() {
      this.style.outline = "";
      this.style.outlineOffset = "";
      this.removeEventListener("keyup", this.handleKeyboard);
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHCard.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHCard.prototype, "image", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "image-contain" })], SHCard.prototype, "imageContain", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "image-icon" })], SHCard.prototype, "imageIcon", void 0);
  __decorate([n5({ type: String, reflect: true })], SHCard.prototype, "icon", void 0);
  __decorate([n5({ type: String, reflect: true })], SHCard.prototype, "badge", void 0);
  __decorate([n5({ type: String, reflect: true })], SHCard.prototype, "href", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "card-height" })], SHCard.prototype, "cardHeight", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHCard.prototype, "disabled", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-color" })], SHCard.prototype, "iconColor", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "label-rows" })], SHCard.prototype, "labelRows", void 0);
  __decorate([n5({ type: Boolean })], SHCard.prototype, "emptyFooter", void 0);
  __decorate([n5({ type: Boolean })], SHCard.prototype, "emptyHeader", void 0);
  __decorate([n5({ type: Boolean })], SHCard.prototype, "emptyContent", void 0);
  SHCard = __decorate([e4("sh-card")], SHCard);

  // ../../../../node_modules/lit-html/directive.js
  var t4 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
  var e7 = (t5) => (...e8) => ({ _$litDirective$: t5, values: e8 });
  var i5 = class {
    constructor(t5) {
    }
    get _$AU() {
      return this._$AM._$AU;
    }
    _$AT(t5, e8, i7) {
      this._$Ct = t5, this._$AM = e8, this._$Ci = i7;
    }
    _$AS(t5, e8) {
      return this.update(t5, e8);
    }
    update(t5, e8) {
      return this.render(...e8);
    }
  };

  // ../../../../node_modules/lit-html/directives/style-map.js
  var i6 = "important";
  var n7 = " !" + i6;
  var o6 = e7(class extends i5 {
    constructor(t5) {
      var e8;
      if (super(t5), t5.type !== t4.ATTRIBUTE || t5.name !== "style" || ((e8 = t5.strings) === null || e8 === void 0 ? void 0 : e8.length) > 2)
        throw Error("The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.");
    }
    render(t5) {
      return Object.keys(t5).reduce((e8, r4) => {
        const s5 = t5[r4];
        return s5 == null ? e8 : e8 + `${r4 = r4.includes("-") ? r4 : r4.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, "-$&").toLowerCase()}:${s5};`;
      }, "");
    }
    update(e8, [r4]) {
      const { style: s5 } = e8.element;
      if (this.ht === void 0) {
        this.ht = new Set();
        for (const t5 in r4)
          this.ht.add(t5);
        return this.render(r4);
      }
      this.ht.forEach((t5) => {
        r4[t5] == null && (this.ht.delete(t5), t5.includes("-") ? s5.removeProperty(t5) : s5[t5] = "");
      });
      for (const t5 in r4) {
        const e9 = r4[t5];
        if (e9 != null) {
          this.ht.add(t5);
          const r5 = typeof e9 == "string" && e9.endsWith(n7);
          t5.includes("-") || r5 ? s5.setProperty(t5, r5 ? e9.slice(0, -11) : e9, r5 ? i6 : "") : s5[t5] = e9;
        }
      }
      return T;
    }
  });

  // ../utils/throttling-mixin.js
  var ThrottlingMixin = (superClass) => {
    class Throttle extends superClass {
      constructor() {
        super(...arguments);
        this.delay = 0;
      }
      throttle(throttlingFunction, delay) {
        if (this.timerSet)
          return;
        this.throttleCallback = throttlingFunction;
        this.delay = delay;
        this.clock = window.requestAnimationFrame(this.clockControl.bind(this));
      }
      clockControl() {
        this.timerSet = true;
        this.timer = setTimeout(() => {
          this.timerSet = void 0;
          this.throttleCallback();
        }, this.delay);
      }
      disconnectedCallback() {
        window.cancelAnimationFrame(this.clock);
        clearTimeout(this.timer);
        super.disconnectedCallback();
      }
    }
    __decorate([n5({ type: Number, reflect: true })], Throttle.prototype, "delay", void 0);
    __decorate([n5({ type: Boolean, reflect: true })], Throttle.prototype, "timerSet", void 0);
    return Throttle;
  };

  // ../sh-carousel/src/sh-carousel.lit.scss.js
  var sh_carousel_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-carousel-counter-line-height=1rem] - line height of counter
   */
  --sh-carousel-counter-line-height: 1rem;
  /* 
   * @cssprop [--sh-carousel-counter-bottom=0.25rem] - placement of counter from bottom
   */
  --sh-carousel-counter-bottom: 0.25rem;
  /* 
   * @cssprop [--sh-carousel-counter-left-right=0.25rem] - placement of counter left and right
   */
  --sh-carousel-counter-left-right: 0.25rem;
  /* 
   * @cssprop [--sh-carousel-counter-border-radius=0.125rem] - placement of counter bottom
   */
  --sh-carousel-counter-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-carousel-counter-padding=0.25rem] - the padding for counter
   */
  --sh-carousel-counter-padding: 0.25rem;
  /* 
   * @cssprop [--sh-carousel-arrow-left=0.5rem] - the position of arrow from left
   */
  --sh-carousel-arrow-left: 0.5rem;
  /* 
   * @cssprop [--sh-carousel-arrow-right=0.5rem] - the position of arrow from right
   */
  --sh-carousel-arrow-right: 0.5rem;
  /* 
   * @cssprop [--sh-carousel-arrow-padding=0.25rem] - the padding for arrow
   */
  --sh-carousel-arrow-padding: 0.25rem;
  /* 
   * @cssprop [--sh-carousel-icon-width=2rem] - the width of arrow icon
   */
  --sh-carousel-icon-width: 2rem;
  /* 
   * @cssprop [--sh-carousel-icon-height=2rem] - the height of arrow icon
   */
  --sh-carousel-icon-height: 2rem;
}

:host {
  display: flex;
  position: relative;
  font: var(--body-1);
  width: 100%;
  height: fit-content;
  height: -moz-fit-content;
}

slot::-webkit-scrollbar {
  display: none;
}

slot {
  display: flex;
  align-items: center;
  scroll-snap-type: x mandatory;
  overflow-x: scroll;
  scroll-behavior: smooth;
  width: 100%;
  height: fit-content;
  scrollbar-width: none;
}

::slotted(*) {
  flex: none;
  width: var(--slot-component-width);
}

/* snap */
:host([snap=start]) ::slotted(*) {
  scroll-snap-align: start;
}

:host([snap=end]) ::slotted(*) {
  scroll-snap-align: end;
}

:host([snap=center]) ::slotted(*) {
  scroll-snap-align: center;
}

/* counter */
.counter {
  position: absolute;
  bottom: var(--sh-carousel-counter-bottom);
  left: 50%;
  transform: translateX(-50%);
  border-radius: var(--sh-carousel-counter-border-radius);
  line-height: var(--sh-carousel-counter-line-height);
  color: var(--text-primary);
  padding: var(--sh-carousel-counter-padding);
}

/* arrow */
.arrow {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  border-radius: 50%;
  transition: 0.2s all ease-in-out;
  padding: var(--sh-carousel-arrow-padding);
}

.arrow,
.counter {
  background: rgba(var(--ui-7), var(--opacity-3));
}

.arrow:hover {
  background: rgba(var(--ui-7), var(--opacity-2));
}

.arrow.left {
  left: var(--sh-carousel-arrow-left);
}

.arrow.right {
  right: var(--sh-carousel-arrow-right);
}

sh-icon {
  width: var(--sh-carousel-icon-width);
  height: var(--sh-carousel-icon-height);
}`;

  // ../sh-carousel/src/sh-carousel.js
  var SHCarousel = class SHCarousel2 extends ThrottlingMixin(s4) {
    constructor() {
      super(...arguments);
      this._currentItem = 1;
      this._totalSlotElements = 0;
      this.elementWidth = "30%";
      this.gap = "0.5rem";
      this.snap = "start";
    }
    static get styles() {
      return [sh_carousel_lit_scss_default];
    }
    render() {
      return x`
      <slot
        id="slot"
        style="${o6(this.getDimensionStyles())}"
        @scroll="${this.throttleScroll}"
        @slotchange="${(e8) => this.contentSlotChange(e8)}"
      ></slot>
      ${this.counter ? x` <div class="counter">${this._currentItem} / ${this._totalSlotElements}</div> ` : ""}
      ${this.arrows ? x`
            ${this._currentItem > 1 ? x` <sh-icon
                  button
                  icon="arrow-left-s"
                  size="m"
                  class="arrow left"
                  @click="${() => this.scrollToItem(this._currentItem - 1)}"
                ></sh-icon>` : ""}
            ${this._currentItem < this._totalSlotElements ? x` <sh-icon
                  icon="arrow-right-s"
                  button
                  @click="${() => this.scrollToItem(this._currentItem + 1)}"
                  class="arrow right"
                ></sh-icon>` : ""}
          ` : ""}
    `;
    }
    connectedCallback() {
      super.connectedCallback();
    }
    update(changedProperties) {
      super.update(changedProperties);
      if (changedProperties.has("snap") && this.arrows) {
        this.snap = "start";
      }
      if (changedProperties.has("arrows") && this.arrows && !(this.snap === "start")) {
        this.snap = "start";
      }
    }
    contentSlotChange(e8) {
      const slot = e8.target;
      const slotElements = slot.assignedElements({
        flatten: true
      }).length;
      if (slotElements) {
        this._totalSlotElements = this.children.length;
        this.handleScroll();
      }
    }
    getDimensionStyles() {
      return {
        "--slot-component-width": this.elementWidth,
        gap: this.gap
      };
    }
    handleScroll() {
      const slot = this.renderRoot.querySelector("slot");
      if (slot) {
        this._currentItem = Math.floor(slot.scrollLeft / (this.children[0].clientWidth + parseInt(this.gap, 10)) + 1);
      }
    }
    throttleScroll() {
      this.throttle(this.handleScroll.bind(this), 50);
    }
    scrollToItem(itemIndex) {
      if (itemIndex === 0) {
        itemIndex = 1;
      }
      const item = this.children[itemIndex - 1];
      item === null || item === void 0 ? void 0 : item.scrollIntoView({ block: "nearest", inline: this.snap });
    }
  };
  __decorate([t3()], SHCarousel.prototype, "_currentItem", void 0);
  __decorate([t3()], SHCarousel.prototype, "_totalSlotElements", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "element-width" })], SHCarousel.prototype, "elementWidth", void 0);
  __decorate([n5({ type: String, reflect: true })], SHCarousel.prototype, "gap", void 0);
  __decorate([n5({ type: String, reflect: true })], SHCarousel.prototype, "snap", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHCarousel.prototype, "counter", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHCarousel.prototype, "arrows", void 0);
  SHCarousel = __decorate([e4("sh-carousel")], SHCarousel);

  // ../chartjs-es/dist/index.js
  (() => {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule2 = (target) => __defProp2(target, "__esModule", { value: true });
    var __require2 = /* @__PURE__ */ ((x2) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x2, {
      get: (a3, b2) => (typeof __require !== "undefined" ? __require : a3)[b2]
    }) : x2)(function(x2) {
      if (typeof __require !== "undefined")
        return __require.apply(this, arguments);
      throw new Error('Dynamic require of "' + x2 + '" is not supported');
    });
    var __commonJS2 = (cb, mod) => function __require22() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __reExport2 = (target, module, desc) => {
      if (module && typeof module === "object" || typeof module === "function") {
        for (let key of __getOwnPropNames2(module))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc2(module, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule2 = (module) => {
      return __reExport2(__markAsModule2(__defProp2(module != null ? __create2(__getProtoOf2(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
    };
    var require_moment = __commonJS2({
      "node_modules/chart.js/node_modules/moment/moment.js"(exports, module) {
        (function(global2, factory) {
          typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
        })(exports, function() {
          "use strict";
          var hookCallback;
          function hooks() {
            return hookCallback.apply(null, arguments);
          }
          function setHookCallback(callback) {
            hookCallback = callback;
          }
          function isArray(input) {
            return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
          }
          function isObject(input) {
            return input != null && Object.prototype.toString.call(input) === "[object Object]";
          }
          function hasOwnProp(a3, b2) {
            return Object.prototype.hasOwnProperty.call(a3, b2);
          }
          function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
              return Object.getOwnPropertyNames(obj).length === 0;
            } else {
              var k2;
              for (k2 in obj) {
                if (hasOwnProp(obj, k2)) {
                  return false;
                }
              }
              return true;
            }
          }
          function isUndefined(input) {
            return input === void 0;
          }
          function isNumber(input) {
            return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
          }
          function isDate(input) {
            return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
          }
          function map(arr, fn) {
            var res = [], i7, arrLen = arr.length;
            for (i7 = 0; i7 < arrLen; ++i7) {
              res.push(fn(arr[i7], i7));
            }
            return res;
          }
          function extend(a3, b2) {
            for (var i7 in b2) {
              if (hasOwnProp(b2, i7)) {
                a3[i7] = b2[i7];
              }
            }
            if (hasOwnProp(b2, "toString")) {
              a3.toString = b2.toString;
            }
            if (hasOwnProp(b2, "valueOf")) {
              a3.valueOf = b2.valueOf;
            }
            return a3;
          }
          function createUTC(input, format2, locale2, strict) {
            return createLocalOrUTC(input, format2, locale2, strict, true).utc();
          }
          function defaultParsingFlags() {
            return {
              empty: false,
              unusedTokens: [],
              unusedInput: [],
              overflow: -2,
              charsLeftOver: 0,
              nullInput: false,
              invalidEra: null,
              invalidMonth: null,
              invalidFormat: false,
              userInvalidated: false,
              iso: false,
              parsedDateParts: [],
              era: null,
              meridiem: null,
              rfc2822: false,
              weekdayMismatch: false
            };
          }
          function getParsingFlags(m2) {
            if (m2._pf == null) {
              m2._pf = defaultParsingFlags();
            }
            return m2._pf;
          }
          var some;
          if (Array.prototype.some) {
            some = Array.prototype.some;
          } else {
            some = function(fun) {
              var t5 = Object(this), len = t5.length >>> 0, i7;
              for (i7 = 0; i7 < len; i7++) {
                if (i7 in t5 && fun.call(this, t5[i7], i7, t5)) {
                  return true;
                }
              }
              return false;
            };
          }
          function isValid(m2) {
            if (m2._isValid == null) {
              var flags = getParsingFlags(m2), parsedParts = some.call(flags.parsedDateParts, function(i7) {
                return i7 != null;
              }), isNowValid = !isNaN(m2._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
              if (m2._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
              }
              if (Object.isFrozen == null || !Object.isFrozen(m2)) {
                m2._isValid = isNowValid;
              } else {
                return isNowValid;
              }
            }
            return m2._isValid;
          }
          function createInvalid(flags) {
            var m2 = createUTC(NaN);
            if (flags != null) {
              extend(getParsingFlags(m2), flags);
            } else {
              getParsingFlags(m2).userInvalidated = true;
            }
            return m2;
          }
          var momentProperties = hooks.momentProperties = [], updateInProgress = false;
          function copyConfig(to2, from2) {
            var i7, prop, val, momentPropertiesLen = momentProperties.length;
            if (!isUndefined(from2._isAMomentObject)) {
              to2._isAMomentObject = from2._isAMomentObject;
            }
            if (!isUndefined(from2._i)) {
              to2._i = from2._i;
            }
            if (!isUndefined(from2._f)) {
              to2._f = from2._f;
            }
            if (!isUndefined(from2._l)) {
              to2._l = from2._l;
            }
            if (!isUndefined(from2._strict)) {
              to2._strict = from2._strict;
            }
            if (!isUndefined(from2._tzm)) {
              to2._tzm = from2._tzm;
            }
            if (!isUndefined(from2._isUTC)) {
              to2._isUTC = from2._isUTC;
            }
            if (!isUndefined(from2._offset)) {
              to2._offset = from2._offset;
            }
            if (!isUndefined(from2._pf)) {
              to2._pf = getParsingFlags(from2);
            }
            if (!isUndefined(from2._locale)) {
              to2._locale = from2._locale;
            }
            if (momentPropertiesLen > 0) {
              for (i7 = 0; i7 < momentPropertiesLen; i7++) {
                prop = momentProperties[i7];
                val = from2[prop];
                if (!isUndefined(val)) {
                  to2[prop] = val;
                }
              }
            }
            return to2;
          }
          function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
              this._d = new Date(NaN);
            }
            if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
            }
          }
          function isMoment(obj) {
            return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
          }
          function warn(msg) {
            if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
              console.warn("Deprecation warning: " + msg);
            }
          }
          function deprecate(msg, fn) {
            var firstTime = true;
            return extend(function() {
              if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                var args = [], arg, i7, key, argLen = arguments.length;
                for (i7 = 0; i7 < argLen; i7++) {
                  arg = "";
                  if (typeof arguments[i7] === "object") {
                    arg += "\n[" + i7 + "] ";
                    for (key in arguments[0]) {
                      if (hasOwnProp(arguments[0], key)) {
                        arg += key + ": " + arguments[0][key] + ", ";
                      }
                    }
                    arg = arg.slice(0, -2);
                  } else {
                    arg = arguments[i7];
                  }
                  args.push(arg);
                }
                warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
                firstTime = false;
              }
              return fn.apply(this, arguments);
            }, fn);
          }
          var deprecations = {};
          function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
            }
          }
          hooks.suppressDeprecationWarnings = false;
          hooks.deprecationHandler = null;
          function isFunction(input) {
            return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
          }
          function set(config) {
            var prop, i7;
            for (i7 in config) {
              if (hasOwnProp(config, i7)) {
                prop = config[i7];
                if (isFunction(prop)) {
                  this[i7] = prop;
                } else {
                  this["_" + i7] = prop;
                }
              }
            }
            this._config = config;
            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
          }
          function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig), prop;
            for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                  res[prop] = {};
                  extend(res[prop], parentConfig[prop]);
                  extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                  res[prop] = childConfig[prop];
                } else {
                  delete res[prop];
                }
              }
            }
            for (prop in parentConfig) {
              if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                res[prop] = extend({}, res[prop]);
              }
            }
            return res;
          }
          function Locale(config) {
            if (config != null) {
              this.set(config);
            }
          }
          var keys;
          if (Object.keys) {
            keys = Object.keys;
          } else {
            keys = function(obj) {
              var i7, res = [];
              for (i7 in obj) {
                if (hasOwnProp(obj, i7)) {
                  res.push(i7);
                }
              }
              return res;
            };
          }
          var defaultCalendar = {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
          };
          function calendar(key, mom, now2) {
            var output = this._calendar[key] || this._calendar["sameElse"];
            return isFunction(output) ? output.call(mom, now2) : output;
          }
          function zeroFill(number, targetLength, forceSign) {
            var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
            return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
          }
          var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
          function addFormatToken(token2, padded, ordinal2, callback) {
            var func = callback;
            if (typeof callback === "string") {
              func = function() {
                return this[callback]();
              };
            }
            if (token2) {
              formatTokenFunctions[token2] = func;
            }
            if (padded) {
              formatTokenFunctions[padded[0]] = function() {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
            }
            if (ordinal2) {
              formatTokenFunctions[ordinal2] = function() {
                return this.localeData().ordinal(func.apply(this, arguments), token2);
              };
            }
          }
          function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, "");
            }
            return input.replace(/\\/g, "");
          }
          function makeFormatFunction(format2) {
            var array = format2.match(formattingTokens), i7, length;
            for (i7 = 0, length = array.length; i7 < length; i7++) {
              if (formatTokenFunctions[array[i7]]) {
                array[i7] = formatTokenFunctions[array[i7]];
              } else {
                array[i7] = removeFormattingTokens(array[i7]);
              }
            }
            return function(mom) {
              var output = "", i22;
              for (i22 = 0; i22 < length; i22++) {
                output += isFunction(array[i22]) ? array[i22].call(mom, format2) : array[i22];
              }
              return output;
            };
          }
          function formatMoment(m2, format2) {
            if (!m2.isValid()) {
              return m2.localeData().invalidDate();
            }
            format2 = expandFormat(format2, m2.localeData());
            formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
            return formatFunctions[format2](m2);
          }
          function expandFormat(format2, locale2) {
            var i7 = 5;
            function replaceLongDateFormatTokens(input) {
              return locale2.longDateFormat(input) || input;
            }
            localFormattingTokens.lastIndex = 0;
            while (i7 >= 0 && localFormattingTokens.test(format2)) {
              format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
              localFormattingTokens.lastIndex = 0;
              i7 -= 1;
            }
            return format2;
          }
          var defaultLongDateFormat = {
            LTS: "h:mm:ss A",
            LT: "h:mm A",
            L: "MM/DD/YYYY",
            LL: "MMMM D, YYYY",
            LLL: "MMMM D, YYYY h:mm A",
            LLLL: "dddd, MMMM D, YYYY h:mm A"
          };
          function longDateFormat(key) {
            var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
            if (format2 || !formatUpper) {
              return format2;
            }
            this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
              if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
                return tok.slice(1);
              }
              return tok;
            }).join("");
            return this._longDateFormat[key];
          }
          var defaultInvalidDate = "Invalid date";
          function invalidDate() {
            return this._invalidDate;
          }
          var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
          function ordinal(number) {
            return this._ordinal.replace("%d", number);
          }
          var defaultRelativeTime = {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            ss: "%d seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            w: "a week",
            ww: "%d weeks",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
          };
          function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
          }
          function pastFuture(diff2, output) {
            var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
            return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
          }
          var aliases = {};
          function addUnitAlias(unit, shorthand) {
            var lowerCase = unit.toLowerCase();
            aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
          }
          function normalizeUnits(units) {
            return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
          }
          function normalizeObjectUnits(inputObject) {
            var normalizedInput = {}, normalizedProp, prop;
            for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                  normalizedInput[normalizedProp] = inputObject[prop];
                }
              }
            }
            return normalizedInput;
          }
          var priorities = {};
          function addUnitPriority(unit, priority) {
            priorities[unit] = priority;
          }
          function getPrioritizedUnits(unitsObj) {
            var units = [], u3;
            for (u3 in unitsObj) {
              if (hasOwnProp(unitsObj, u3)) {
                units.push({ unit: u3, priority: priorities[u3] });
              }
            }
            units.sort(function(a3, b2) {
              return a3.priority - b2.priority;
            });
            return units;
          }
          function isLeapYear(year) {
            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
          }
          function absFloor(number) {
            if (number < 0) {
              return Math.ceil(number) || 0;
            } else {
              return Math.floor(number);
            }
          }
          function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion, value = 0;
            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
            }
            return value;
          }
          function makeGetSet(unit, keepTime) {
            return function(value) {
              if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
              } else {
                return get(this, unit);
              }
            };
          }
          function get(mom, unit) {
            return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
          }
          function set$1(mom, unit, value) {
            if (mom.isValid() && !isNaN(value)) {
              if (unit === "FullYear" && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                value = toInt(value);
                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value, mom.month(), daysInMonth(value, mom.month()));
              } else {
                mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
              }
            }
          }
          function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units]();
            }
            return this;
          }
          function stringSet(units, value) {
            if (typeof units === "object") {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units), i7, prioritizedLen = prioritized.length;
              for (i7 = 0; i7 < prioritizedLen; i7++) {
                this[prioritized[i7].unit](units[prioritized[i7].unit]);
              }
            } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                return this[units](value);
              }
            }
            return this;
          }
          var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, regexes;
          regexes = {};
          function addRegexToken(token2, regex, strictRegex) {
            regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
              return isStrict && strictRegex ? strictRegex : regex;
            };
          }
          function getParseRegexForToken(token2, config) {
            if (!hasOwnProp(regexes, token2)) {
              return new RegExp(unescapeFormat(token2));
            }
            return regexes[token2](config._strict, config._locale);
          }
          function unescapeFormat(s5) {
            return regexEscape(s5.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p22, p3, p4) {
              return p1 || p22 || p3 || p4;
            }));
          }
          function regexEscape(s5) {
            return s5.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
          }
          var tokens = {};
          function addParseToken(token2, callback) {
            var i7, func = callback, tokenLen;
            if (typeof token2 === "string") {
              token2 = [token2];
            }
            if (isNumber(callback)) {
              func = function(input, array) {
                array[callback] = toInt(input);
              };
            }
            tokenLen = token2.length;
            for (i7 = 0; i7 < tokenLen; i7++) {
              tokens[token2[i7]] = func;
            }
          }
          function addWeekParseToken(token2, callback) {
            addParseToken(token2, function(input, array, config, token3) {
              config._w = config._w || {};
              callback(input, config._w, config, token3);
            });
          }
          function addTimeToArrayFromToken(token2, input, config) {
            if (input != null && hasOwnProp(tokens, token2)) {
              tokens[token2](input, config._a, config, token2);
            }
          }
          var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
          function mod(n8, x2) {
            return (n8 % x2 + x2) % x2;
          }
          var indexOf;
          if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
          } else {
            indexOf = function(o8) {
              var i7;
              for (i7 = 0; i7 < this.length; ++i7) {
                if (this[i7] === o8) {
                  return i7;
                }
              }
              return -1;
            };
          }
          function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
              return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
          }
          addFormatToken("M", ["MM", 2], "Mo", function() {
            return this.month() + 1;
          });
          addFormatToken("MMM", 0, 0, function(format2) {
            return this.localeData().monthsShort(this, format2);
          });
          addFormatToken("MMMM", 0, 0, function(format2) {
            return this.localeData().months(this, format2);
          });
          addUnitAlias("month", "M");
          addUnitPriority("month", 8);
          addRegexToken("M", match1to2);
          addRegexToken("MM", match1to2, match2);
          addRegexToken("MMM", function(isStrict, locale2) {
            return locale2.monthsShortRegex(isStrict);
          });
          addRegexToken("MMMM", function(isStrict, locale2) {
            return locale2.monthsRegex(isStrict);
          });
          addParseToken(["M", "MM"], function(input, array) {
            array[MONTH] = toInt(input) - 1;
          });
          addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
            var month = config._locale.monthsParse(input, token2, config._strict);
            if (month != null) {
              array[MONTH] = month;
            } else {
              getParsingFlags(config).invalidMonth = input;
            }
          });
          var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
          function localeMonths(m2, format2) {
            if (!m2) {
              return isArray(this._months) ? this._months : this._months["standalone"];
            }
            return isArray(this._months) ? this._months[m2.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m2.month()];
          }
          function localeMonthsShort(m2, format2) {
            if (!m2) {
              return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
            }
            return isArray(this._monthsShort) ? this._monthsShort[m2.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m2.month()];
          }
          function handleStrictParse(monthName, format2, strict) {
            var i7, ii, mom, llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i7 = 0; i7 < 12; ++i7) {
                mom = createUTC([2e3, i7]);
                this._shortMonthsParse[i7] = this.monthsShort(mom, "").toLocaleLowerCase();
                this._longMonthsParse[i7] = this.months(mom, "").toLocaleLowerCase();
              }
            }
            if (strict) {
              if (format2 === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format2 === "MMM") {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }
          function localeMonthsParse(monthName, format2, strict) {
            var i7, mom, regex;
            if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format2, strict);
            }
            if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
            }
            for (i7 = 0; i7 < 12; i7++) {
              mom = createUTC([2e3, i7]);
              if (strict && !this._longMonthsParse[i7]) {
                this._longMonthsParse[i7] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
                this._shortMonthsParse[i7] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
              }
              if (!strict && !this._monthsParse[i7]) {
                regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
                this._monthsParse[i7] = new RegExp(regex.replace(".", ""), "i");
              }
              if (strict && format2 === "MMMM" && this._longMonthsParse[i7].test(monthName)) {
                return i7;
              } else if (strict && format2 === "MMM" && this._shortMonthsParse[i7].test(monthName)) {
                return i7;
              } else if (!strict && this._monthsParse[i7].test(monthName)) {
                return i7;
              }
            }
          }
          function setMonth(mom, value) {
            var dayOfMonth;
            if (!mom.isValid()) {
              return mom;
            }
            if (typeof value === "string") {
              if (/^\d+$/.test(value)) {
                value = toInt(value);
              } else {
                value = mom.localeData().monthsParse(value);
                if (!isNumber(value)) {
                  return mom;
                }
              }
            }
            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
            mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
            return mom;
          }
          function getSetMonth(value) {
            if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
            } else {
              return get(this, "Month");
            }
          }
          function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
          }
          function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, "_monthsRegex")) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsShortStrictRegex;
              } else {
                return this._monthsShortRegex;
              }
            } else {
              if (!hasOwnProp(this, "_monthsShortRegex")) {
                this._monthsShortRegex = defaultMonthsShortRegex;
              }
              return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
            }
          }
          function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
              if (!hasOwnProp(this, "_monthsRegex")) {
                computeMonthsParse.call(this);
              }
              if (isStrict) {
                return this._monthsStrictRegex;
              } else {
                return this._monthsRegex;
              }
            } else {
              if (!hasOwnProp(this, "_monthsRegex")) {
                this._monthsRegex = defaultMonthsRegex;
              }
              return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
            }
          }
          function computeMonthsParse() {
            function cmpLenRev(a3, b2) {
              return b2.length - a3.length;
            }
            var shortPieces = [], longPieces = [], mixedPieces = [], i7, mom;
            for (i7 = 0; i7 < 12; i7++) {
              mom = createUTC([2e3, i7]);
              shortPieces.push(this.monthsShort(mom, ""));
              longPieces.push(this.months(mom, ""));
              mixedPieces.push(this.months(mom, ""));
              mixedPieces.push(this.monthsShort(mom, ""));
            }
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            for (i7 = 0; i7 < 12; i7++) {
              shortPieces[i7] = regexEscape(shortPieces[i7]);
              longPieces[i7] = regexEscape(longPieces[i7]);
            }
            for (i7 = 0; i7 < 24; i7++) {
              mixedPieces[i7] = regexEscape(mixedPieces[i7]);
            }
            this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
            this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
          }
          addFormatToken("Y", 0, 0, function() {
            var y2 = this.year();
            return y2 <= 9999 ? zeroFill(y2, 4) : "+" + y2;
          });
          addFormatToken(0, ["YY", 2], 0, function() {
            return this.year() % 100;
          });
          addFormatToken(0, ["YYYY", 4], 0, "year");
          addFormatToken(0, ["YYYYY", 5], 0, "year");
          addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
          addUnitAlias("year", "y");
          addUnitPriority("year", 1);
          addRegexToken("Y", matchSigned);
          addRegexToken("YY", match1to2, match2);
          addRegexToken("YYYY", match1to4, match4);
          addRegexToken("YYYYY", match1to6, match6);
          addRegexToken("YYYYYY", match1to6, match6);
          addParseToken(["YYYYY", "YYYYYY"], YEAR);
          addParseToken("YYYY", function(input, array) {
            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
          });
          addParseToken("YY", function(input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
          });
          addParseToken("Y", function(input, array) {
            array[YEAR] = parseInt(input, 10);
          });
          function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
          }
          hooks.parseTwoDigitYear = function(input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
          };
          var getSetYear = makeGetSet("FullYear", true);
          function getIsLeapYear() {
            return isLeapYear(this.year());
          }
          function createDate(y2, m2, d3, h3, M2, s5, ms) {
            var date;
            if (y2 < 100 && y2 >= 0) {
              date = new Date(y2 + 400, m2, d3, h3, M2, s5, ms);
              if (isFinite(date.getFullYear())) {
                date.setFullYear(y2);
              }
            } else {
              date = new Date(y2, m2, d3, h3, M2, s5, ms);
            }
            return date;
          }
          function createUTCDate(y2) {
            var date, args;
            if (y2 < 100 && y2 >= 0) {
              args = Array.prototype.slice.call(arguments);
              args[0] = y2 + 400;
              date = new Date(Date.UTC.apply(null, args));
              if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y2);
              }
            } else {
              date = new Date(Date.UTC.apply(null, arguments));
            }
            return date;
          }
          function firstWeekOffset(year, dow, doy) {
            var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
            return -fwdlw + fwd - 1;
          }
          function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
            if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
            } else {
              resYear = year;
              resDayOfYear = dayOfYear;
            }
            return {
              year: resYear,
              dayOfYear: resDayOfYear
            };
          }
          function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
            if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
            } else {
              resYear = mom.year();
              resWeek = week;
            }
            return {
              week: resWeek,
              year: resYear
            };
          }
          function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
          }
          addFormatToken("w", ["ww", 2], "wo", "week");
          addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
          addUnitAlias("week", "w");
          addUnitAlias("isoWeek", "W");
          addUnitPriority("week", 5);
          addUnitPriority("isoWeek", 5);
          addRegexToken("w", match1to2);
          addRegexToken("ww", match1to2, match2);
          addRegexToken("W", match1to2);
          addRegexToken("WW", match1to2, match2);
          addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
            week[token2.substr(0, 1)] = toInt(input);
          });
          function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
          }
          var defaultLocaleWeek = {
            dow: 0,
            doy: 6
          };
          function localeFirstDayOfWeek() {
            return this._week.dow;
          }
          function localeFirstDayOfYear() {
            return this._week.doy;
          }
          function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, "d");
          }
          function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, "d");
          }
          addFormatToken("d", 0, "do", "day");
          addFormatToken("dd", 0, 0, function(format2) {
            return this.localeData().weekdaysMin(this, format2);
          });
          addFormatToken("ddd", 0, 0, function(format2) {
            return this.localeData().weekdaysShort(this, format2);
          });
          addFormatToken("dddd", 0, 0, function(format2) {
            return this.localeData().weekdays(this, format2);
          });
          addFormatToken("e", 0, 0, "weekday");
          addFormatToken("E", 0, 0, "isoWeekday");
          addUnitAlias("day", "d");
          addUnitAlias("weekday", "e");
          addUnitAlias("isoWeekday", "E");
          addUnitPriority("day", 11);
          addUnitPriority("weekday", 11);
          addUnitPriority("isoWeekday", 11);
          addRegexToken("d", match1to2);
          addRegexToken("e", match1to2);
          addRegexToken("E", match1to2);
          addRegexToken("dd", function(isStrict, locale2) {
            return locale2.weekdaysMinRegex(isStrict);
          });
          addRegexToken("ddd", function(isStrict, locale2) {
            return locale2.weekdaysShortRegex(isStrict);
          });
          addRegexToken("dddd", function(isStrict, locale2) {
            return locale2.weekdaysRegex(isStrict);
          });
          addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
            var weekday = config._locale.weekdaysParse(input, token2, config._strict);
            if (weekday != null) {
              week.d = weekday;
            } else {
              getParsingFlags(config).invalidWeekday = input;
            }
          });
          addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
            week[token2] = toInt(input);
          });
          function parseWeekday(input, locale2) {
            if (typeof input !== "string") {
              return input;
            }
            if (!isNaN(input)) {
              return parseInt(input, 10);
            }
            input = locale2.weekdaysParse(input);
            if (typeof input === "number") {
              return input;
            }
            return null;
          }
          function parseIsoWeekday(input, locale2) {
            if (typeof input === "string") {
              return locale2.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
          }
          function shiftWeekdays(ws, n8) {
            return ws.slice(n8, 7).concat(ws.slice(0, n8));
          }
          var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
          function localeWeekdays(m2, format2) {
            var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m2 && m2 !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
            return m2 === true ? shiftWeekdays(weekdays, this._week.dow) : m2 ? weekdays[m2.day()] : weekdays;
          }
          function localeWeekdaysShort(m2) {
            return m2 === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m2 ? this._weekdaysShort[m2.day()] : this._weekdaysShort;
          }
          function localeWeekdaysMin(m2) {
            return m2 === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m2 ? this._weekdaysMin[m2.day()] : this._weekdaysMin;
          }
          function handleStrictParse$1(weekdayName, format2, strict) {
            var i7, ii, mom, llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];
              for (i7 = 0; i7 < 7; ++i7) {
                mom = createUTC([2e3, 1]).day(i7);
                this._minWeekdaysParse[i7] = this.weekdaysMin(mom, "").toLocaleLowerCase();
                this._shortWeekdaysParse[i7] = this.weekdaysShort(mom, "").toLocaleLowerCase();
                this._weekdaysParse[i7] = this.weekdays(mom, "").toLocaleLowerCase();
              }
            }
            if (strict) {
              if (format2 === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format2 === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            } else {
              if (format2 === "dddd") {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else if (format2 === "ddd") {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                  return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
              }
            }
          }
          function localeWeekdaysParse(weekdayName, format2, strict) {
            var i7, mom, regex;
            if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(this, weekdayName, format2, strict);
            }
            if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
            }
            for (i7 = 0; i7 < 7; i7++) {
              mom = createUTC([2e3, 1]).day(i7);
              if (strict && !this._fullWeekdaysParse[i7]) {
                this._fullWeekdaysParse[i7] = new RegExp("^" + this.weekdays(mom, "").replace(".", "\\.?") + "$", "i");
                this._shortWeekdaysParse[i7] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$", "i");
                this._minWeekdaysParse[i7] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$", "i");
              }
              if (!this._weekdaysParse[i7]) {
                regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
                this._weekdaysParse[i7] = new RegExp(regex.replace(".", ""), "i");
              }
              if (strict && format2 === "dddd" && this._fullWeekdaysParse[i7].test(weekdayName)) {
                return i7;
              } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i7].test(weekdayName)) {
                return i7;
              } else if (strict && format2 === "dd" && this._minWeekdaysParse[i7].test(weekdayName)) {
                return i7;
              } else if (!strict && this._weekdaysParse[i7].test(weekdayName)) {
                return i7;
              }
            }
          }
          function getSetDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, "d");
            } else {
              return day;
            }
          }
          function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, "d");
          }
          function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
              return this.day() || 7;
            }
          }
          function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysStrictRegex;
              } else {
                return this._weekdaysRegex;
              }
            } else {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                this._weekdaysRegex = defaultWeekdaysRegex;
              }
              return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
            }
          }
          function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysShortStrictRegex;
              } else {
                return this._weekdaysShortRegex;
              }
            } else {
              if (!hasOwnProp(this, "_weekdaysShortRegex")) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }
              return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
            }
          }
          function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, "_weekdaysRegex")) {
                computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                return this._weekdaysMinStrictRegex;
              } else {
                return this._weekdaysMinRegex;
              }
            } else {
              if (!hasOwnProp(this, "_weekdaysMinRegex")) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }
              return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
            }
          }
          function computeWeekdaysParse() {
            function cmpLenRev(a3, b2) {
              return b2.length - a3.length;
            }
            var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i7, mom, minp, shortp, longp;
            for (i7 = 0; i7 < 7; i7++) {
              mom = createUTC([2e3, 1]).day(i7);
              minp = regexEscape(this.weekdaysMin(mom, ""));
              shortp = regexEscape(this.weekdaysShort(mom, ""));
              longp = regexEscape(this.weekdays(mom, ""));
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
            }
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);
            this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;
            this._weekdaysStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
            this._weekdaysShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
            this._weekdaysMinStrictRegex = new RegExp("^(" + minPieces.join("|") + ")", "i");
          }
          function hFormat() {
            return this.hours() % 12 || 12;
          }
          function kFormat() {
            return this.hours() || 24;
          }
          addFormatToken("H", ["HH", 2], 0, "hour");
          addFormatToken("h", ["hh", 2], 0, hFormat);
          addFormatToken("k", ["kk", 2], 0, kFormat);
          addFormatToken("hmm", 0, 0, function() {
            return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
          });
          addFormatToken("hmmss", 0, 0, function() {
            return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });
          addFormatToken("Hmm", 0, 0, function() {
            return "" + this.hours() + zeroFill(this.minutes(), 2);
          });
          addFormatToken("Hmmss", 0, 0, function() {
            return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
          });
          function meridiem(token2, lowercase) {
            addFormatToken(token2, 0, 0, function() {
              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
            });
          }
          meridiem("a", true);
          meridiem("A", false);
          addUnitAlias("hour", "h");
          addUnitPriority("hour", 13);
          function matchMeridiem(isStrict, locale2) {
            return locale2._meridiemParse;
          }
          addRegexToken("a", matchMeridiem);
          addRegexToken("A", matchMeridiem);
          addRegexToken("H", match1to2);
          addRegexToken("h", match1to2);
          addRegexToken("k", match1to2);
          addRegexToken("HH", match1to2, match2);
          addRegexToken("hh", match1to2, match2);
          addRegexToken("kk", match1to2, match2);
          addRegexToken("hmm", match3to4);
          addRegexToken("hmmss", match5to6);
          addRegexToken("Hmm", match3to4);
          addRegexToken("Hmmss", match5to6);
          addParseToken(["H", "HH"], HOUR);
          addParseToken(["k", "kk"], function(input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
          });
          addParseToken(["a", "A"], function(input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
          });
          addParseToken(["h", "hh"], function(input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
          });
          addParseToken("hmm", function(input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken("hmmss", function(input, array, config) {
            var pos1 = input.length - 4, pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
          });
          addParseToken("Hmm", function(input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
          });
          addParseToken("Hmmss", function(input, array, config) {
            var pos1 = input.length - 4, pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
          });
          function localeIsPM(input) {
            return (input + "").toLowerCase().charAt(0) === "p";
          }
          var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
          function localeMeridiem(hours2, minutes2, isLower) {
            if (hours2 > 11) {
              return isLower ? "pm" : "PM";
            } else {
              return isLower ? "am" : "AM";
            }
          }
          var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,
            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,
            week: defaultLocaleWeek,
            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,
            meridiemParse: defaultLocaleMeridiemParse
          };
          var locales = {}, localeFamilies = {}, globalLocale;
          function commonPrefix(arr1, arr2) {
            var i7, minl = Math.min(arr1.length, arr2.length);
            for (i7 = 0; i7 < minl; i7 += 1) {
              if (arr1[i7] !== arr2[i7]) {
                return i7;
              }
            }
            return minl;
          }
          function normalizeLocale(key) {
            return key ? key.toLowerCase().replace("_", "-") : key;
          }
          function chooseLocale(names) {
            var i7 = 0, j, next, locale2, split;
            while (i7 < names.length) {
              split = normalizeLocale(names[i7]).split("-");
              j = split.length;
              next = normalizeLocale(names[i7 + 1]);
              next = next ? next.split("-") : null;
              while (j > 0) {
                locale2 = loadLocale(split.slice(0, j).join("-"));
                if (locale2) {
                  return locale2;
                }
                if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
                  break;
                }
                j--;
              }
              i7++;
            }
            return globalLocale;
          }
          function isLocaleNameSane(name) {
            return name.match("^[^/\\\\]*$") != null;
          }
          function loadLocale(name) {
            var oldLocale = null, aliasedRequire;
            if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
              try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = __require2;
                aliasedRequire("./locale/" + name);
                getSetGlobalLocale(oldLocale);
              } catch (e8) {
                locales[name] = null;
              }
            }
            return locales[name];
          }
          function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
              if (isUndefined(values)) {
                data = getLocale(key);
              } else {
                data = defineLocale(key, values);
              }
              if (data) {
                globalLocale = data;
              } else {
                if (typeof console !== "undefined" && console.warn) {
                  console.warn("Locale " + key + " not found. Did you forget to load it?");
                }
              }
            }
            return globalLocale._abbr;
          }
          function defineLocale(name, config) {
            if (config !== null) {
              var locale2, parentConfig = baseConfig;
              config.abbr = name;
              if (locales[name] != null) {
                deprecateSimple("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info.");
                parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                  parentConfig = locales[config.parentLocale]._config;
                } else {
                  locale2 = loadLocale(config.parentLocale);
                  if (locale2 != null) {
                    parentConfig = locale2._config;
                  } else {
                    if (!localeFamilies[config.parentLocale]) {
                      localeFamilies[config.parentLocale] = [];
                    }
                    localeFamilies[config.parentLocale].push({
                      name,
                      config
                    });
                    return null;
                  }
                }
              }
              locales[name] = new Locale(mergeConfigs(parentConfig, config));
              if (localeFamilies[name]) {
                localeFamilies[name].forEach(function(x2) {
                  defineLocale(x2.name, x2.config);
                });
              }
              getSetGlobalLocale(name);
              return locales[name];
            } else {
              delete locales[name];
              return null;
            }
          }
          function updateLocale(name, config) {
            if (config != null) {
              var locale2, tmpLocale, parentConfig = baseConfig;
              if (locales[name] != null && locales[name].parentLocale != null) {
                locales[name].set(mergeConfigs(locales[name]._config, config));
              } else {
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                  parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                  config.abbr = name;
                }
                locale2 = new Locale(config);
                locale2.parentLocale = locales[name];
                locales[name] = locale2;
              }
              getSetGlobalLocale(name);
            } else {
              if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                  locales[name] = locales[name].parentLocale;
                  if (name === getSetGlobalLocale()) {
                    getSetGlobalLocale(name);
                  }
                } else if (locales[name] != null) {
                  delete locales[name];
                }
              }
            }
            return locales[name];
          }
          function getLocale(key) {
            var locale2;
            if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
            }
            if (!key) {
              return globalLocale;
            }
            if (!isArray(key)) {
              locale2 = loadLocale(key);
              if (locale2) {
                return locale2;
              }
              key = [key];
            }
            return chooseLocale(key);
          }
          function listLocales() {
            return keys(locales);
          }
          function checkOverflow(m2) {
            var overflow, a3 = m2._a;
            if (a3 && getParsingFlags(m2).overflow === -2) {
              overflow = a3[MONTH] < 0 || a3[MONTH] > 11 ? MONTH : a3[DATE] < 1 || a3[DATE] > daysInMonth(a3[YEAR], a3[MONTH]) ? DATE : a3[HOUR] < 0 || a3[HOUR] > 24 || a3[HOUR] === 24 && (a3[MINUTE] !== 0 || a3[SECOND] !== 0 || a3[MILLISECOND] !== 0) ? HOUR : a3[MINUTE] < 0 || a3[MINUTE] > 59 ? MINUTE : a3[SECOND] < 0 || a3[SECOND] > 59 ? SECOND : a3[MILLISECOND] < 0 || a3[MILLISECOND] > 999 ? MILLISECOND : -1;
              if (getParsingFlags(m2)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
              }
              if (getParsingFlags(m2)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
              }
              if (getParsingFlags(m2)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
              }
              getParsingFlags(m2).overflow = overflow;
            }
            return m2;
          }
          var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
            ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
            ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
            ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
            ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
            ["YYYY-DDD", /\d{4}-\d{3}/],
            ["YYYY-MM", /\d{4}-\d\d/, false],
            ["YYYYYYMMDD", /[+-]\d{10}/],
            ["YYYYMMDD", /\d{8}/],
            ["GGGG[W]WWE", /\d{4}W\d{3}/],
            ["GGGG[W]WW", /\d{4}W\d{2}/, false],
            ["YYYYDDD", /\d{7}/],
            ["YYYYMM", /\d{6}/, false],
            ["YYYY", /\d{4}/, false]
          ], isoTimes = [
            ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
            ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
            ["HH:mm:ss", /\d\d:\d\d:\d\d/],
            ["HH:mm", /\d\d:\d\d/],
            ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
            ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
            ["HHmmss", /\d\d\d\d\d\d/],
            ["HHmm", /\d\d\d\d/],
            ["HH", /\d\d/]
          ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60
          };
          function configFromISO(config) {
            var i7, l5, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
            if (match) {
              getParsingFlags(config).iso = true;
              for (i7 = 0, l5 = isoDatesLen; i7 < l5; i7++) {
                if (isoDates[i7][1].exec(match[1])) {
                  dateFormat = isoDates[i7][0];
                  allowTime = isoDates[i7][2] !== false;
                  break;
                }
              }
              if (dateFormat == null) {
                config._isValid = false;
                return;
              }
              if (match[3]) {
                for (i7 = 0, l5 = isoTimesLen; i7 < l5; i7++) {
                  if (isoTimes[i7][1].exec(match[3])) {
                    timeFormat = (match[2] || " ") + isoTimes[i7][0];
                    break;
                  }
                }
                if (timeFormat == null) {
                  config._isValid = false;
                  return;
                }
              }
              if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
              }
              if (match[4]) {
                if (tzRegex.exec(match[4])) {
                  tzFormat = "Z";
                } else {
                  config._isValid = false;
                  return;
                }
              }
              config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
              configFromStringAndFormat(config);
            } else {
              config._isValid = false;
            }
          }
          function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
            var result = [
              untruncateYear(yearStr),
              defaultLocaleMonthsShort.indexOf(monthStr),
              parseInt(dayStr, 10),
              parseInt(hourStr, 10),
              parseInt(minuteStr, 10)
            ];
            if (secondStr) {
              result.push(parseInt(secondStr, 10));
            }
            return result;
          }
          function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
              return 2e3 + year;
            } else if (year <= 999) {
              return 1900 + year;
            }
            return year;
          }
          function preprocessRFC2822(s5) {
            return s5.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
          }
          function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
              if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
              }
            }
            return true;
          }
          function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
              return obsOffsets[obsOffset];
            } else if (militaryOffset) {
              return 0;
            } else {
              var hm = parseInt(numOffset, 10), m2 = hm % 100, h3 = (hm - m2) / 100;
              return h3 * 60 + m2;
            }
          }
          function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
            if (match) {
              parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
              if (!checkWeekday(match[1], parsedArray, config)) {
                return;
              }
              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);
              config._d = createUTCDate.apply(null, config._a);
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
              getParsingFlags(config).rfc2822 = true;
            } else {
              config._isValid = false;
            }
          }
          function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
            }
            configFromISO(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }
            configFromRFC2822(config);
            if (config._isValid === false) {
              delete config._isValid;
            } else {
              return;
            }
            if (config._strict) {
              config._isValid = false;
            } else {
              hooks.createFromInputFallback(config);
            }
          }
          hooks.createFromInputFallback = deprecate("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(config) {
            config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
          });
          function defaults(a3, b2, c3) {
            if (a3 != null) {
              return a3;
            }
            if (b2 != null) {
              return b2;
            }
            return c3;
          }
          function currentDateArray(config) {
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
              return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate()
              ];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
          }
          function configFromArray(config) {
            var i7, date, input = [], currentDate, expectedWeekday, yearToUse;
            if (config._d) {
              return;
            }
            currentDate = currentDateArray(config);
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
            }
            if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
              if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
              }
              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
            }
            for (i7 = 0; i7 < 3 && config._a[i7] == null; ++i7) {
              config._a[i7] = input[i7] = currentDate[i7];
            }
            for (; i7 < 7; i7++) {
              config._a[i7] = input[i7] = config._a[i7] == null ? i7 === 2 ? 1 : 0 : config._a[i7];
            }
            if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
              config._nextDay = true;
              config._a[HOUR] = 0;
            }
            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
            expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
            if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }
            if (config._nextDay) {
              config._a[HOUR] = 24;
            }
            if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
              getParsingFlags(config).weekdayMismatch = true;
            }
          }
          function dayOfYearFromWeekInfo(config) {
            var w2, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
            w2 = config._w;
            if (w2.GG != null || w2.W != null || w2.E != null) {
              dow = 1;
              doy = 4;
              weekYear = defaults(w2.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
              week = defaults(w2.W, 1);
              weekday = defaults(w2.E, 1);
              if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
              }
            } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;
              curWeek = weekOfYear(createLocal(), dow, doy);
              weekYear = defaults(w2.gg, config._a[YEAR], curWeek.year);
              week = defaults(w2.w, curWeek.week);
              if (w2.d != null) {
                weekday = w2.d;
                if (weekday < 0 || weekday > 6) {
                  weekdayOverflow = true;
                }
              } else if (w2.e != null) {
                weekday = w2.e + dow;
                if (w2.e < 0 || w2.e > 6) {
                  weekdayOverflow = true;
                }
              } else {
                weekday = dow;
              }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
            } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
            }
          }
          hooks.ISO_8601 = function() {
          };
          hooks.RFC_2822 = function() {
          };
          function configFromStringAndFormat(config) {
            if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
            }
            if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;
            var string = "" + config._i, i7, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
            tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
            tokenLen = tokens2.length;
            for (i7 = 0; i7 < tokenLen; i7++) {
              token2 = tokens2[i7];
              parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
              if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                  getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
              }
              if (formatTokenFunctions[token2]) {
                if (parsedInput) {
                  getParsingFlags(config).empty = false;
                } else {
                  getParsingFlags(config).unusedTokens.push(token2);
                }
                addTimeToArrayFromToken(token2, parsedInput, config);
              } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token2);
              }
            }
            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
            if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
            }
            if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
              getParsingFlags(config).bigHour = void 0;
            }
            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
            era = getParsingFlags(config).era;
            if (era !== null) {
              config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }
            configFromArray(config);
            checkOverflow(config);
          }
          function meridiemFixWrap(locale2, hour, meridiem2) {
            var isPm;
            if (meridiem2 == null) {
              return hour;
            }
            if (locale2.meridiemHour != null) {
              return locale2.meridiemHour(hour, meridiem2);
            } else if (locale2.isPM != null) {
              isPm = locale2.isPM(meridiem2);
              if (isPm && hour < 12) {
                hour += 12;
              }
              if (!isPm && hour === 12) {
                hour = 0;
              }
              return hour;
            } else {
              return hour;
            }
          }
          function configFromStringAndArray(config) {
            var tempConfig, bestMoment, scoreToBeat, i7, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
            if (configfLen === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
            }
            for (i7 = 0; i7 < configfLen; i7++) {
              currentScore = 0;
              validFormatFound = false;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i7];
              configFromStringAndFormat(tempConfig);
              if (isValid(tempConfig)) {
                validFormatFound = true;
              }
              currentScore += getParsingFlags(tempConfig).charsLeftOver;
              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
              getParsingFlags(tempConfig).score = currentScore;
              if (!bestFormatIsValid) {
                if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                  if (validFormatFound) {
                    bestFormatIsValid = true;
                  }
                }
              } else {
                if (currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
                }
              }
            }
            extend(config, bestMoment || tempConfig);
          }
          function configFromObject(config) {
            if (config._d) {
              return;
            }
            var i7 = normalizeObjectUnits(config._i), dayOrDate = i7.day === void 0 ? i7.date : i7.day;
            config._a = map([i7.year, i7.month, dayOrDate, i7.hour, i7.minute, i7.second, i7.millisecond], function(obj) {
              return obj && parseInt(obj, 10);
            });
            configFromArray(config);
          }
          function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
              res.add(1, "d");
              res._nextDay = void 0;
            }
            return res;
          }
          function prepareConfig(config) {
            var input = config._i, format2 = config._f;
            config._locale = config._locale || getLocale(config._l);
            if (input === null || format2 === void 0 && input === "") {
              return createInvalid({ nullInput: true });
            }
            if (typeof input === "string") {
              config._i = input = config._locale.preparse(input);
            }
            if (isMoment(input)) {
              return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
              config._d = input;
            } else if (isArray(format2)) {
              configFromStringAndArray(config);
            } else if (format2) {
              configFromStringAndFormat(config);
            } else {
              configFromInput(config);
            }
            if (!isValid(config)) {
              config._d = null;
            }
            return config;
          }
          function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
              config._d = new Date(hooks.now());
            } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
            } else if (typeof input === "string") {
              configFromString(config);
            } else if (isArray(input)) {
              config._a = map(input.slice(0), function(obj) {
                return parseInt(obj, 10);
              });
              configFromArray(config);
            } else if (isObject(input)) {
              configFromObject(config);
            } else if (isNumber(input)) {
              config._d = new Date(input);
            } else {
              hooks.createFromInputFallback(config);
            }
          }
          function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
            var c3 = {};
            if (format2 === true || format2 === false) {
              strict = format2;
              format2 = void 0;
            }
            if (locale2 === true || locale2 === false) {
              strict = locale2;
              locale2 = void 0;
            }
            if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
              input = void 0;
            }
            c3._isAMomentObject = true;
            c3._useUTC = c3._isUTC = isUTC;
            c3._l = locale2;
            c3._i = input;
            c3._f = format2;
            c3._strict = strict;
            return createFromConfig(c3);
          }
          function createLocal(input, format2, locale2, strict) {
            return createLocalOrUTC(input, format2, locale2, strict, false);
          }
          var prototypeMin = deprecate("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          }), prototypeMax = deprecate("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          });
          function pickBy(fn, moments) {
            var res, i7;
            if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
            }
            if (!moments.length) {
              return createLocal();
            }
            res = moments[0];
            for (i7 = 1; i7 < moments.length; ++i7) {
              if (!moments[i7].isValid() || moments[i7][fn](res)) {
                res = moments[i7];
              }
            }
            return res;
          }
          function min() {
            var args = [].slice.call(arguments, 0);
            return pickBy("isBefore", args);
          }
          function max() {
            var args = [].slice.call(arguments, 0);
            return pickBy("isAfter", args);
          }
          var now = function() {
            return Date.now ? Date.now() : +new Date();
          };
          var ordering = [
            "year",
            "quarter",
            "month",
            "week",
            "day",
            "hour",
            "minute",
            "second",
            "millisecond"
          ];
          function isDurationValid(m2) {
            var key, unitHasDecimal = false, i7, orderLen = ordering.length;
            for (key in m2) {
              if (hasOwnProp(m2, key) && !(indexOf.call(ordering, key) !== -1 && (m2[key] == null || !isNaN(m2[key])))) {
                return false;
              }
            }
            for (i7 = 0; i7 < orderLen; ++i7) {
              if (m2[ordering[i7]]) {
                if (unitHasDecimal) {
                  return false;
                }
                if (parseFloat(m2[ordering[i7]]) !== toInt(m2[ordering[i7]])) {
                  unitHasDecimal = true;
                }
              }
            }
            return true;
          }
          function isValid$1() {
            return this._isValid;
          }
          function createInvalid$1() {
            return createDuration(NaN);
          }
          function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
            this._isValid = isDurationValid(normalizedInput);
            this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 1e3 * 60 * 60;
            this._days = +days2 + weeks2 * 7;
            this._months = +months2 + quarters * 3 + years2 * 12;
            this._data = {};
            this._locale = getLocale();
            this._bubble();
          }
          function isDuration(obj) {
            return obj instanceof Duration;
          }
          function absRound(number) {
            if (number < 0) {
              return Math.round(-1 * number) * -1;
            } else {
              return Math.round(number);
            }
          }
          function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i7;
            for (i7 = 0; i7 < len; i7++) {
              if (dontConvert && array1[i7] !== array2[i7] || !dontConvert && toInt(array1[i7]) !== toInt(array2[i7])) {
                diffs++;
              }
            }
            return diffs + lengthDiff;
          }
          function offset(token2, separator) {
            addFormatToken(token2, 0, 0, function() {
              var offset2 = this.utcOffset(), sign2 = "+";
              if (offset2 < 0) {
                offset2 = -offset2;
                sign2 = "-";
              }
              return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
            });
          }
          offset("Z", ":");
          offset("ZZ", "");
          addRegexToken("Z", matchShortOffset);
          addRegexToken("ZZ", matchShortOffset);
          addParseToken(["Z", "ZZ"], function(input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
          });
          var chunkOffset = /([\+\-]|\d\d)/gi;
          function offsetFromString(matcher, string) {
            var matches2 = (string || "").match(matcher), chunk, parts2, minutes2;
            if (matches2 === null) {
              return null;
            }
            chunk = matches2[matches2.length - 1] || [];
            parts2 = (chunk + "").match(chunkOffset) || ["-", 0, 0];
            minutes2 = +(parts2[1] * 60) + toInt(parts2[2]);
            return minutes2 === 0 ? 0 : parts2[0] === "+" ? minutes2 : -minutes2;
          }
          function cloneWithOffset(input, model) {
            var res, diff2;
            if (model._isUTC) {
              res = model.clone();
              diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
              res._d.setTime(res._d.valueOf() + diff2);
              hooks.updateOffset(res, false);
              return res;
            } else {
              return createLocal(input).local();
            }
          }
          function getDateOffset(m2) {
            return -Math.round(m2._d.getTimezoneOffset());
          }
          hooks.updateOffset = function() {
          };
          function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset2 = this._offset || 0, localAdjust;
            if (!this.isValid()) {
              return input != null ? this : NaN;
            }
            if (input != null) {
              if (typeof input === "string") {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                  return this;
                }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                this.add(localAdjust, "m");
              }
              if (offset2 !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                  addSubtract(this, createDuration(input - offset2, "m"), 1, false);
                } else if (!this._changeInProgress) {
                  this._changeInProgress = true;
                  hooks.updateOffset(this, true);
                  this._changeInProgress = null;
                }
              }
              return this;
            } else {
              return this._isUTC ? offset2 : getDateOffset(this);
            }
          }
          function getSetZone(input, keepLocalTime) {
            if (input != null) {
              if (typeof input !== "string") {
                input = -input;
              }
              this.utcOffset(input, keepLocalTime);
              return this;
            } else {
              return -this.utcOffset();
            }
          }
          function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
          }
          function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;
              if (keepLocalTime) {
                this.subtract(getDateOffset(this), "m");
              }
            }
            return this;
          }
          function setOffsetToParsedOffset() {
            if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === "string") {
              var tZone = offsetFromString(matchOffset, this._i);
              if (tZone != null) {
                this.utcOffset(tZone);
              } else {
                this.utcOffset(0, true);
              }
            }
            return this;
          }
          function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
              return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;
            return (this.utcOffset() - input) % 60 === 0;
          }
          function isDaylightSavingTime() {
            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
          }
          function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
            }
            var c3 = {}, other;
            copyConfig(c3, this);
            c3 = prepareConfig(c3);
            if (c3._a) {
              other = c3._isUTC ? createUTC(c3._a) : createLocal(c3._a);
              this._isDSTShifted = this.isValid() && compareArrays(c3._a, other.toArray()) > 0;
            } else {
              this._isDSTShifted = false;
            }
            return this._isDSTShifted;
          }
          function isLocal() {
            return this.isValid() ? !this._isUTC : false;
          }
          function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
          }
          function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
          }
          var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
          function createDuration(input, key) {
            var duration = input, match = null, sign2, ret, diffRes;
            if (isDuration(input)) {
              duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
              };
            } else if (isNumber(input) || !isNaN(+input)) {
              duration = {};
              if (key) {
                duration[key] = +input;
              } else {
                duration.milliseconds = +input;
              }
            } else if (match = aspNetRegex.exec(input)) {
              sign2 = match[1] === "-" ? -1 : 1;
              duration = {
                y: 0,
                d: toInt(match[DATE]) * sign2,
                h: toInt(match[HOUR]) * sign2,
                m: toInt(match[MINUTE]) * sign2,
                s: toInt(match[SECOND]) * sign2,
                ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
              };
            } else if (match = isoRegex.exec(input)) {
              sign2 = match[1] === "-" ? -1 : 1;
              duration = {
                y: parseIso(match[2], sign2),
                M: parseIso(match[3], sign2),
                w: parseIso(match[4], sign2),
                d: parseIso(match[5], sign2),
                h: parseIso(match[6], sign2),
                m: parseIso(match[7], sign2),
                s: parseIso(match[8], sign2)
              };
            } else if (duration == null) {
              duration = {};
            } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
              diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
            }
            ret = new Duration(duration);
            if (isDuration(input) && hasOwnProp(input, "_locale")) {
              ret._locale = input._locale;
            }
            if (isDuration(input) && hasOwnProp(input, "_isValid")) {
              ret._isValid = input._isValid;
            }
            return ret;
          }
          createDuration.fn = Duration.prototype;
          createDuration.invalid = createInvalid$1;
          function parseIso(inp, sign2) {
            var res = inp && parseFloat(inp.replace(",", "."));
            return (isNaN(res) ? 0 : res) * sign2;
          }
          function positiveMomentsDifference(base, other) {
            var res = {};
            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, "M").isAfter(other)) {
              --res.months;
            }
            res.milliseconds = +other - +base.clone().add(res.months, "M");
            return res;
          }
          function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
              return { milliseconds: 0, months: 0 };
            }
            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
            } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
            }
            return res;
          }
          function createAdder(direction, name) {
            return function(val, period) {
              var dur, tmp;
              if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.");
                tmp = val;
                val = period;
                period = tmp;
              }
              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
            };
          }
          function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
            if (!mom.isValid()) {
              return;
            }
            updateOffset = updateOffset == null ? true : updateOffset;
            if (months2) {
              setMonth(mom, get(mom, "Month") + months2 * isAdding);
            }
            if (days2) {
              set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
            }
            if (milliseconds2) {
              mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
            }
            if (updateOffset) {
              hooks.updateOffset(mom, days2 || months2);
            }
          }
          var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
          function isString(input) {
            return typeof input === "string" || input instanceof String;
          }
          function isMomentInput(input) {
            return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
          }
          function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
              "years",
              "year",
              "y",
              "months",
              "month",
              "M",
              "days",
              "day",
              "d",
              "dates",
              "date",
              "D",
              "hours",
              "hour",
              "h",
              "minutes",
              "minute",
              "m",
              "seconds",
              "second",
              "s",
              "milliseconds",
              "millisecond",
              "ms"
            ], i7, property, propertyLen = properties.length;
            for (i7 = 0; i7 < propertyLen; i7 += 1) {
              property = properties[i7];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }
            return objectTest && propertyTest;
          }
          function isNumberOrStringArray(input) {
            var arrayTest = isArray(input), dataTypeTest = false;
            if (arrayTest) {
              dataTypeTest = input.filter(function(item) {
                return !isNumber(item) && isString(input);
              }).length === 0;
            }
            return arrayTest && dataTypeTest;
          }
          function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
              "sameDay",
              "nextDay",
              "lastDay",
              "nextWeek",
              "lastWeek",
              "sameElse"
            ], i7, property;
            for (i7 = 0; i7 < properties.length; i7 += 1) {
              property = properties[i7];
              propertyTest = propertyTest || hasOwnProp(input, property);
            }
            return objectTest && propertyTest;
          }
          function getCalendarFormat(myMoment, now2) {
            var diff2 = myMoment.diff(now2, "days", true);
            return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
          }
          function calendar$1(time, formats) {
            if (arguments.length === 1) {
              if (!arguments[0]) {
                time = void 0;
                formats = void 0;
              } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = void 0;
              } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = void 0;
              }
            }
            var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
            return this.format(output || this.localeData().calendar(format2, this, createLocal(now2)));
          }
          function clone() {
            return new Moment(this);
          }
          function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || "millisecond";
            if (units === "millisecond") {
              return this.valueOf() > localInput.valueOf();
            } else {
              return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
          }
          function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || "millisecond";
            if (units === "millisecond") {
              return this.valueOf() < localInput.valueOf();
            } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
          }
          function isBetween(from2, to2, units, inclusivity) {
            var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
              return false;
            }
            inclusivity = inclusivity || "()";
            return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
          }
          function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input), inputMs;
            if (!(this.isValid() && localInput.isValid())) {
              return false;
            }
            units = normalizeUnits(units) || "millisecond";
            if (units === "millisecond") {
              return this.valueOf() === localInput.valueOf();
            } else {
              inputMs = localInput.valueOf();
              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
            }
          }
          function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
          }
          function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
          }
          function diff(input, units, asFloat) {
            var that, zoneDelta, output;
            if (!this.isValid()) {
              return NaN;
            }
            that = cloneWithOffset(input, this);
            if (!that.isValid()) {
              return NaN;
            }
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
            units = normalizeUnits(units);
            switch (units) {
              case "year":
                output = monthDiff(this, that) / 12;
                break;
              case "month":
                output = monthDiff(this, that);
                break;
              case "quarter":
                output = monthDiff(this, that) / 3;
                break;
              case "second":
                output = (this - that) / 1e3;
                break;
              case "minute":
                output = (this - that) / 6e4;
                break;
              case "hour":
                output = (this - that) / 36e5;
                break;
              case "day":
                output = (this - that - zoneDelta) / 864e5;
                break;
              case "week":
                output = (this - that - zoneDelta) / 6048e5;
                break;
              default:
                output = this - that;
            }
            return asFloat ? output : absFloor(output);
          }
          function monthDiff(a3, b2) {
            if (a3.date() < b2.date()) {
              return -monthDiff(b2, a3);
            }
            var wholeMonthDiff = (b2.year() - a3.year()) * 12 + (b2.month() - a3.month()), anchor = a3.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
            if (b2 - anchor < 0) {
              anchor2 = a3.clone().add(wholeMonthDiff - 1, "months");
              adjust = (b2 - anchor) / (anchor - anchor2);
            } else {
              anchor2 = a3.clone().add(wholeMonthDiff + 1, "months");
              adjust = (b2 - anchor) / (anchor2 - anchor);
            }
            return -(wholeMonthDiff + adjust) || 0;
          }
          hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
          hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
          function toString() {
            return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
          }
          function toISOString(keepOffset) {
            if (!this.isValid()) {
              return null;
            }
            var utc = keepOffset !== true, m2 = utc ? this.clone().utc() : this;
            if (m2.year() < 0 || m2.year() > 9999) {
              return formatMoment(m2, utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ");
            }
            if (isFunction(Date.prototype.toISOString)) {
              if (utc) {
                return this.toDate().toISOString();
              } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m2, "Z"));
              }
            }
            return formatMoment(m2, utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ");
          }
          function inspect() {
            if (!this.isValid()) {
              return "moment.invalid(/* " + this._i + " */)";
            }
            var func = "moment", zone = "", prefix, year, datetime, suffix;
            if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
              zone = "Z";
            }
            prefix = "[" + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
            datetime = "-MM-DD[T]HH:mm:ss.SSS";
            suffix = zone + '[")]';
            return this.format(prefix + year + datetime + suffix);
          }
          function format(inputString) {
            if (!inputString) {
              inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
          }
          function from(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }
          function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
          }
          function to(time, withoutSuffix) {
            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
              return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
            } else {
              return this.localeData().invalidDate();
            }
          }
          function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
          }
          function locale(key) {
            var newLocaleData;
            if (key === void 0) {
              return this._locale._abbr;
            } else {
              newLocaleData = getLocale(key);
              if (newLocaleData != null) {
                this._locale = newLocaleData;
              }
              return this;
            }
          }
          var lang = deprecate("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(key) {
            if (key === void 0) {
              return this.localeData();
            } else {
              return this.locale(key);
            }
          });
          function localeData() {
            return this._locale;
          }
          var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
          function mod$1(dividend, divisor) {
            return (dividend % divisor + divisor) % divisor;
          }
          function localStartOfDate(y2, m2, d3) {
            if (y2 < 100 && y2 >= 0) {
              return new Date(y2 + 400, m2, d3) - MS_PER_400_YEARS;
            } else {
              return new Date(y2, m2, d3).valueOf();
            }
          }
          function utcStartOfDate(y2, m2, d3) {
            if (y2 < 100 && y2 >= 0) {
              return Date.UTC(y2 + 400, m2, d3) - MS_PER_400_YEARS;
            } else {
              return Date.UTC(y2, m2, d3);
            }
          }
          function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === void 0 || units === "millisecond" || !this.isValid()) {
              return this;
            }
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
            switch (units) {
              case "year":
                time = startOfDate(this.year(), 0, 1);
                break;
              case "quarter":
                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                break;
              case "month":
                time = startOfDate(this.year(), this.month(), 1);
                break;
              case "week":
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                break;
              case "isoWeek":
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                break;
              case "day":
              case "date":
                time = startOfDate(this.year(), this.month(), this.date());
                break;
              case "hour":
                time = this._d.valueOf();
                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                break;
              case "minute":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
              case "second":
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
            }
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }
          function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === void 0 || units === "millisecond" || !this.isValid()) {
              return this;
            }
            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
            switch (units) {
              case "year":
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
              case "quarter":
                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                break;
              case "month":
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
              case "week":
                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                break;
              case "isoWeek":
                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                break;
              case "day":
              case "date":
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
              case "hour":
                time = this._d.valueOf();
                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                break;
              case "minute":
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
              case "second":
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
            }
            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
          }
          function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 6e4;
          }
          function unix() {
            return Math.floor(this.valueOf() / 1e3);
          }
          function toDate() {
            return new Date(this.valueOf());
          }
          function toArray() {
            var m2 = this;
            return [
              m2.year(),
              m2.month(),
              m2.date(),
              m2.hour(),
              m2.minute(),
              m2.second(),
              m2.millisecond()
            ];
          }
          function toObject() {
            var m2 = this;
            return {
              years: m2.year(),
              months: m2.month(),
              date: m2.date(),
              hours: m2.hours(),
              minutes: m2.minutes(),
              seconds: m2.seconds(),
              milliseconds: m2.milliseconds()
            };
          }
          function toJSON() {
            return this.isValid() ? this.toISOString() : null;
          }
          function isValid$2() {
            return isValid(this);
          }
          function parsingFlags() {
            return extend({}, getParsingFlags(this));
          }
          function invalidAt() {
            return getParsingFlags(this).overflow;
          }
          function creationData() {
            return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict
            };
          }
          addFormatToken("N", 0, 0, "eraAbbr");
          addFormatToken("NN", 0, 0, "eraAbbr");
          addFormatToken("NNN", 0, 0, "eraAbbr");
          addFormatToken("NNNN", 0, 0, "eraName");
          addFormatToken("NNNNN", 0, 0, "eraNarrow");
          addFormatToken("y", ["y", 1], "yo", "eraYear");
          addFormatToken("y", ["yy", 2], 0, "eraYear");
          addFormatToken("y", ["yyy", 3], 0, "eraYear");
          addFormatToken("y", ["yyyy", 4], 0, "eraYear");
          addRegexToken("N", matchEraAbbr);
          addRegexToken("NN", matchEraAbbr);
          addRegexToken("NNN", matchEraAbbr);
          addRegexToken("NNNN", matchEraName);
          addRegexToken("NNNNN", matchEraNarrow);
          addParseToken(["N", "NN", "NNN", "NNNN", "NNNNN"], function(input, array, config, token2) {
            var era = config._locale.erasParse(input, token2, config._strict);
            if (era) {
              getParsingFlags(config).era = era;
            } else {
              getParsingFlags(config).invalidEra = input;
            }
          });
          addRegexToken("y", matchUnsigned);
          addRegexToken("yy", matchUnsigned);
          addRegexToken("yyy", matchUnsigned);
          addRegexToken("yyyy", matchUnsigned);
          addRegexToken("yo", matchEraYearOrdinal);
          addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
          addParseToken(["yo"], function(input, array, config, token2) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
              match = input.match(config._locale._eraYearOrdinalRegex);
            }
            if (config._locale.eraYearOrdinalParse) {
              array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
              array[YEAR] = parseInt(input, 10);
            }
          });
          function localeEras(m2, format2) {
            var i7, l5, date, eras = this._eras || getLocale("en")._eras;
            for (i7 = 0, l5 = eras.length; i7 < l5; ++i7) {
              switch (typeof eras[i7].since) {
                case "string":
                  date = hooks(eras[i7].since).startOf("day");
                  eras[i7].since = date.valueOf();
                  break;
              }
              switch (typeof eras[i7].until) {
                case "undefined":
                  eras[i7].until = Infinity;
                  break;
                case "string":
                  date = hooks(eras[i7].until).startOf("day").valueOf();
                  eras[i7].until = date.valueOf();
                  break;
              }
            }
            return eras;
          }
          function localeErasParse(eraName, format2, strict) {
            var i7, l5, eras = this.eras(), name, abbr, narrow;
            eraName = eraName.toUpperCase();
            for (i7 = 0, l5 = eras.length; i7 < l5; ++i7) {
              name = eras[i7].name.toUpperCase();
              abbr = eras[i7].abbr.toUpperCase();
              narrow = eras[i7].narrow.toUpperCase();
              if (strict) {
                switch (format2) {
                  case "N":
                  case "NN":
                  case "NNN":
                    if (abbr === eraName) {
                      return eras[i7];
                    }
                    break;
                  case "NNNN":
                    if (name === eraName) {
                      return eras[i7];
                    }
                    break;
                  case "NNNNN":
                    if (narrow === eraName) {
                      return eras[i7];
                    }
                    break;
                }
              } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i7];
              }
            }
          }
          function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? 1 : -1;
            if (year === void 0) {
              return hooks(era.since).year();
            } else {
              return hooks(era.since).year() + (year - era.offset) * dir;
            }
          }
          function getEraName() {
            var i7, l5, val, eras = this.localeData().eras();
            for (i7 = 0, l5 = eras.length; i7 < l5; ++i7) {
              val = this.clone().startOf("day").valueOf();
              if (eras[i7].since <= val && val <= eras[i7].until) {
                return eras[i7].name;
              }
              if (eras[i7].until <= val && val <= eras[i7].since) {
                return eras[i7].name;
              }
            }
            return "";
          }
          function getEraNarrow() {
            var i7, l5, val, eras = this.localeData().eras();
            for (i7 = 0, l5 = eras.length; i7 < l5; ++i7) {
              val = this.clone().startOf("day").valueOf();
              if (eras[i7].since <= val && val <= eras[i7].until) {
                return eras[i7].narrow;
              }
              if (eras[i7].until <= val && val <= eras[i7].since) {
                return eras[i7].narrow;
              }
            }
            return "";
          }
          function getEraAbbr() {
            var i7, l5, val, eras = this.localeData().eras();
            for (i7 = 0, l5 = eras.length; i7 < l5; ++i7) {
              val = this.clone().startOf("day").valueOf();
              if (eras[i7].since <= val && val <= eras[i7].until) {
                return eras[i7].abbr;
              }
              if (eras[i7].until <= val && val <= eras[i7].since) {
                return eras[i7].abbr;
              }
            }
            return "";
          }
          function getEraYear() {
            var i7, l5, dir, val, eras = this.localeData().eras();
            for (i7 = 0, l5 = eras.length; i7 < l5; ++i7) {
              dir = eras[i7].since <= eras[i7].until ? 1 : -1;
              val = this.clone().startOf("day").valueOf();
              if (eras[i7].since <= val && val <= eras[i7].until || eras[i7].until <= val && val <= eras[i7].since) {
                return (this.year() - hooks(eras[i7].since).year()) * dir + eras[i7].offset;
              }
            }
            return this.year();
          }
          function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, "_erasNameRegex")) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
          }
          function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, "_erasAbbrRegex")) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
          }
          function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, "_erasNarrowRegex")) {
              computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
          }
          function matchEraAbbr(isStrict, locale2) {
            return locale2.erasAbbrRegex(isStrict);
          }
          function matchEraName(isStrict, locale2) {
            return locale2.erasNameRegex(isStrict);
          }
          function matchEraNarrow(isStrict, locale2) {
            return locale2.erasNarrowRegex(isStrict);
          }
          function matchEraYearOrdinal(isStrict, locale2) {
            return locale2._eraYearOrdinalRegex || matchUnsigned;
          }
          function computeErasParse() {
            var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i7, l5, eras = this.eras();
            for (i7 = 0, l5 = eras.length; i7 < l5; ++i7) {
              namePieces.push(regexEscape(eras[i7].name));
              abbrPieces.push(regexEscape(eras[i7].abbr));
              narrowPieces.push(regexEscape(eras[i7].narrow));
              mixedPieces.push(regexEscape(eras[i7].name));
              mixedPieces.push(regexEscape(eras[i7].abbr));
              mixedPieces.push(regexEscape(eras[i7].narrow));
            }
            this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
            this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
            this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
            this._erasNarrowRegex = new RegExp("^(" + narrowPieces.join("|") + ")", "i");
          }
          addFormatToken(0, ["gg", 2], 0, function() {
            return this.weekYear() % 100;
          });
          addFormatToken(0, ["GG", 2], 0, function() {
            return this.isoWeekYear() % 100;
          });
          function addWeekYearFormatToken(token2, getter) {
            addFormatToken(0, [token2, token2.length], 0, getter);
          }
          addWeekYearFormatToken("gggg", "weekYear");
          addWeekYearFormatToken("ggggg", "weekYear");
          addWeekYearFormatToken("GGGG", "isoWeekYear");
          addWeekYearFormatToken("GGGGG", "isoWeekYear");
          addUnitAlias("weekYear", "gg");
          addUnitAlias("isoWeekYear", "GG");
          addUnitPriority("weekYear", 1);
          addUnitPriority("isoWeekYear", 1);
          addRegexToken("G", matchSigned);
          addRegexToken("g", matchSigned);
          addRegexToken("GG", match1to2, match2);
          addRegexToken("gg", match1to2, match2);
          addRegexToken("GGGG", match1to4, match4);
          addRegexToken("gggg", match1to4, match4);
          addRegexToken("GGGGG", match1to6, match6);
          addRegexToken("ggggg", match1to6, match6);
          addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
            week[token2.substr(0, 2)] = toInt(input);
          });
          addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
            week[token2] = hooks.parseTwoDigitYear(input);
          });
          function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
          }
          function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
          }
          function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
          }
          function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
          }
          function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
          }
          function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
          }
          function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
              return weekOfYear(this, dow, doy).year;
            } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
          }
          function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
          }
          addFormatToken("Q", 0, "Qo", "quarter");
          addUnitAlias("quarter", "Q");
          addUnitPriority("quarter", 7);
          addRegexToken("Q", match1);
          addParseToken("Q", function(input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
          });
          function getSetQuarter(input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
          }
          addFormatToken("D", ["DD", 2], "Do", "date");
          addUnitAlias("date", "D");
          addUnitPriority("date", 9);
          addRegexToken("D", match1to2);
          addRegexToken("DD", match1to2, match2);
          addRegexToken("Do", function(isStrict, locale2) {
            return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
          });
          addParseToken(["D", "DD"], DATE);
          addParseToken("Do", function(input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
          });
          var getSetDayOfMonth = makeGetSet("Date", true);
          addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
          addUnitAlias("dayOfYear", "DDD");
          addUnitPriority("dayOfYear", 4);
          addRegexToken("DDD", match1to3);
          addRegexToken("DDDD", match3);
          addParseToken(["DDD", "DDDD"], function(input, array, config) {
            config._dayOfYear = toInt(input);
          });
          function getSetDayOfYear(input) {
            var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
          }
          addFormatToken("m", ["mm", 2], 0, "minute");
          addUnitAlias("minute", "m");
          addUnitPriority("minute", 14);
          addRegexToken("m", match1to2);
          addRegexToken("mm", match1to2, match2);
          addParseToken(["m", "mm"], MINUTE);
          var getSetMinute = makeGetSet("Minutes", false);
          addFormatToken("s", ["ss", 2], 0, "second");
          addUnitAlias("second", "s");
          addUnitPriority("second", 15);
          addRegexToken("s", match1to2);
          addRegexToken("ss", match1to2, match2);
          addParseToken(["s", "ss"], SECOND);
          var getSetSecond = makeGetSet("Seconds", false);
          addFormatToken("S", 0, 0, function() {
            return ~~(this.millisecond() / 100);
          });
          addFormatToken(0, ["SS", 2], 0, function() {
            return ~~(this.millisecond() / 10);
          });
          addFormatToken(0, ["SSS", 3], 0, "millisecond");
          addFormatToken(0, ["SSSS", 4], 0, function() {
            return this.millisecond() * 10;
          });
          addFormatToken(0, ["SSSSS", 5], 0, function() {
            return this.millisecond() * 100;
          });
          addFormatToken(0, ["SSSSSS", 6], 0, function() {
            return this.millisecond() * 1e3;
          });
          addFormatToken(0, ["SSSSSSS", 7], 0, function() {
            return this.millisecond() * 1e4;
          });
          addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
            return this.millisecond() * 1e5;
          });
          addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
            return this.millisecond() * 1e6;
          });
          addUnitAlias("millisecond", "ms");
          addUnitPriority("millisecond", 16);
          addRegexToken("S", match1to3, match1);
          addRegexToken("SS", match1to3, match2);
          addRegexToken("SSS", match1to3, match3);
          var token, getSetMillisecond;
          for (token = "SSSS"; token.length <= 9; token += "S") {
            addRegexToken(token, matchUnsigned);
          }
          function parseMs(input, array) {
            array[MILLISECOND] = toInt(("0." + input) * 1e3);
          }
          for (token = "S"; token.length <= 9; token += "S") {
            addParseToken(token, parseMs);
          }
          getSetMillisecond = makeGetSet("Milliseconds", false);
          addFormatToken("z", 0, 0, "zoneAbbr");
          addFormatToken("zz", 0, 0, "zoneName");
          function getZoneAbbr() {
            return this._isUTC ? "UTC" : "";
          }
          function getZoneName() {
            return this._isUTC ? "Coordinated Universal Time" : "";
          }
          var proto = Moment.prototype;
          proto.add = add;
          proto.calendar = calendar$1;
          proto.clone = clone;
          proto.diff = diff;
          proto.endOf = endOf;
          proto.format = format;
          proto.from = from;
          proto.fromNow = fromNow;
          proto.to = to;
          proto.toNow = toNow;
          proto.get = stringGet;
          proto.invalidAt = invalidAt;
          proto.isAfter = isAfter;
          proto.isBefore = isBefore;
          proto.isBetween = isBetween;
          proto.isSame = isSame;
          proto.isSameOrAfter = isSameOrAfter;
          proto.isSameOrBefore = isSameOrBefore;
          proto.isValid = isValid$2;
          proto.lang = lang;
          proto.locale = locale;
          proto.localeData = localeData;
          proto.max = prototypeMax;
          proto.min = prototypeMin;
          proto.parsingFlags = parsingFlags;
          proto.set = stringSet;
          proto.startOf = startOf;
          proto.subtract = subtract;
          proto.toArray = toArray;
          proto.toObject = toObject;
          proto.toDate = toDate;
          proto.toISOString = toISOString;
          proto.inspect = inspect;
          if (typeof Symbol !== "undefined" && Symbol.for != null) {
            proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
              return "Moment<" + this.format() + ">";
            };
          }
          proto.toJSON = toJSON;
          proto.toString = toString;
          proto.unix = unix;
          proto.valueOf = valueOf;
          proto.creationData = creationData;
          proto.eraName = getEraName;
          proto.eraNarrow = getEraNarrow;
          proto.eraAbbr = getEraAbbr;
          proto.eraYear = getEraYear;
          proto.year = getSetYear;
          proto.isLeapYear = getIsLeapYear;
          proto.weekYear = getSetWeekYear;
          proto.isoWeekYear = getSetISOWeekYear;
          proto.quarter = proto.quarters = getSetQuarter;
          proto.month = getSetMonth;
          proto.daysInMonth = getDaysInMonth;
          proto.week = proto.weeks = getSetWeek;
          proto.isoWeek = proto.isoWeeks = getSetISOWeek;
          proto.weeksInYear = getWeeksInYear;
          proto.weeksInWeekYear = getWeeksInWeekYear;
          proto.isoWeeksInYear = getISOWeeksInYear;
          proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
          proto.date = getSetDayOfMonth;
          proto.day = proto.days = getSetDayOfWeek;
          proto.weekday = getSetLocaleDayOfWeek;
          proto.isoWeekday = getSetISODayOfWeek;
          proto.dayOfYear = getSetDayOfYear;
          proto.hour = proto.hours = getSetHour;
          proto.minute = proto.minutes = getSetMinute;
          proto.second = proto.seconds = getSetSecond;
          proto.millisecond = proto.milliseconds = getSetMillisecond;
          proto.utcOffset = getSetOffset;
          proto.utc = setOffsetToUTC;
          proto.local = setOffsetToLocal;
          proto.parseZone = setOffsetToParsedOffset;
          proto.hasAlignedHourOffset = hasAlignedHourOffset;
          proto.isDST = isDaylightSavingTime;
          proto.isLocal = isLocal;
          proto.isUtcOffset = isUtcOffset;
          proto.isUtc = isUtc;
          proto.isUTC = isUtc;
          proto.zoneAbbr = getZoneAbbr;
          proto.zoneName = getZoneName;
          proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
          proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
          proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
          proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", getSetZone);
          proto.isDSTShifted = deprecate("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", isDaylightSavingTimeShifted);
          function createUnix(input) {
            return createLocal(input * 1e3);
          }
          function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
          }
          function preParsePostFormat(string) {
            return string;
          }
          var proto$1 = Locale.prototype;
          proto$1.calendar = calendar;
          proto$1.longDateFormat = longDateFormat;
          proto$1.invalidDate = invalidDate;
          proto$1.ordinal = ordinal;
          proto$1.preparse = preParsePostFormat;
          proto$1.postformat = preParsePostFormat;
          proto$1.relativeTime = relativeTime;
          proto$1.pastFuture = pastFuture;
          proto$1.set = set;
          proto$1.eras = localeEras;
          proto$1.erasParse = localeErasParse;
          proto$1.erasConvertYear = localeErasConvertYear;
          proto$1.erasAbbrRegex = erasAbbrRegex;
          proto$1.erasNameRegex = erasNameRegex;
          proto$1.erasNarrowRegex = erasNarrowRegex;
          proto$1.months = localeMonths;
          proto$1.monthsShort = localeMonthsShort;
          proto$1.monthsParse = localeMonthsParse;
          proto$1.monthsRegex = monthsRegex;
          proto$1.monthsShortRegex = monthsShortRegex;
          proto$1.week = localeWeek;
          proto$1.firstDayOfYear = localeFirstDayOfYear;
          proto$1.firstDayOfWeek = localeFirstDayOfWeek;
          proto$1.weekdays = localeWeekdays;
          proto$1.weekdaysMin = localeWeekdaysMin;
          proto$1.weekdaysShort = localeWeekdaysShort;
          proto$1.weekdaysParse = localeWeekdaysParse;
          proto$1.weekdaysRegex = weekdaysRegex;
          proto$1.weekdaysShortRegex = weekdaysShortRegex;
          proto$1.weekdaysMinRegex = weekdaysMinRegex;
          proto$1.isPM = localeIsPM;
          proto$1.meridiem = localeMeridiem;
          function get$1(format2, index, field, setter) {
            var locale2 = getLocale(), utc = createUTC().set(setter, index);
            return locale2[field](utc, format2);
          }
          function listMonthsImpl(format2, index, field) {
            if (isNumber(format2)) {
              index = format2;
              format2 = void 0;
            }
            format2 = format2 || "";
            if (index != null) {
              return get$1(format2, index, field, "month");
            }
            var i7, out = [];
            for (i7 = 0; i7 < 12; i7++) {
              out[i7] = get$1(format2, i7, field, "month");
            }
            return out;
          }
          function listWeekdaysImpl(localeSorted, format2, index, field) {
            if (typeof localeSorted === "boolean") {
              if (isNumber(format2)) {
                index = format2;
                format2 = void 0;
              }
              format2 = format2 || "";
            } else {
              format2 = localeSorted;
              index = format2;
              localeSorted = false;
              if (isNumber(format2)) {
                index = format2;
                format2 = void 0;
              }
              format2 = format2 || "";
            }
            var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i7, out = [];
            if (index != null) {
              return get$1(format2, (index + shift) % 7, field, "day");
            }
            for (i7 = 0; i7 < 7; i7++) {
              out[i7] = get$1(format2, (i7 + shift) % 7, field, "day");
            }
            return out;
          }
          function listMonths(format2, index) {
            return listMonthsImpl(format2, index, "months");
          }
          function listMonthsShort(format2, index) {
            return listMonthsImpl(format2, index, "monthsShort");
          }
          function listWeekdays(localeSorted, format2, index) {
            return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
          }
          function listWeekdaysShort(localeSorted, format2, index) {
            return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
          }
          function listWeekdaysMin(localeSorted, format2, index) {
            return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
          }
          getSetGlobalLocale("en", {
            eras: [
              {
                since: "0001-01-01",
                until: Infinity,
                offset: 1,
                name: "Anno Domini",
                narrow: "AD",
                abbr: "AD"
              },
              {
                since: "0000-12-31",
                until: -Infinity,
                offset: 1,
                name: "Before Christ",
                narrow: "BC",
                abbr: "BC"
              }
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function(number) {
              var b2 = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b2 === 1 ? "st" : b2 === 2 ? "nd" : b2 === 3 ? "rd" : "th";
              return number + output;
            }
          });
          hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", getSetGlobalLocale);
          hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", getLocale);
          var mathAbs = Math.abs;
          function abs() {
            var data = this._data;
            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);
            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);
            return this;
          }
          function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);
            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;
            return duration._bubble();
          }
          function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
          }
          function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
          }
          function absCeil(number) {
            if (number < 0) {
              return Math.floor(number);
            } else {
              return Math.ceil(number);
            }
          }
          function bubble() {
            var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
            if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
              milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
              days2 = 0;
              months2 = 0;
            }
            data.milliseconds = milliseconds2 % 1e3;
            seconds2 = absFloor(milliseconds2 / 1e3);
            data.seconds = seconds2 % 60;
            minutes2 = absFloor(seconds2 / 60);
            data.minutes = minutes2 % 60;
            hours2 = absFloor(minutes2 / 60);
            data.hours = hours2 % 24;
            days2 += absFloor(hours2 / 24);
            monthsFromDays = absFloor(daysToMonths(days2));
            months2 += monthsFromDays;
            days2 -= absCeil(monthsToDays(monthsFromDays));
            years2 = absFloor(months2 / 12);
            months2 %= 12;
            data.days = days2;
            data.months = months2;
            data.years = years2;
            return this;
          }
          function daysToMonths(days2) {
            return days2 * 4800 / 146097;
          }
          function monthsToDays(months2) {
            return months2 * 146097 / 4800;
          }
          function as(units) {
            if (!this.isValid()) {
              return NaN;
            }
            var days2, months2, milliseconds2 = this._milliseconds;
            units = normalizeUnits(units);
            if (units === "month" || units === "quarter" || units === "year") {
              days2 = this._days + milliseconds2 / 864e5;
              months2 = this._months + daysToMonths(days2);
              switch (units) {
                case "month":
                  return months2;
                case "quarter":
                  return months2 / 3;
                case "year":
                  return months2 / 12;
              }
            } else {
              days2 = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                case "week":
                  return days2 / 7 + milliseconds2 / 6048e5;
                case "day":
                  return days2 + milliseconds2 / 864e5;
                case "hour":
                  return days2 * 24 + milliseconds2 / 36e5;
                case "minute":
                  return days2 * 1440 + milliseconds2 / 6e4;
                case "second":
                  return days2 * 86400 + milliseconds2 / 1e3;
                case "millisecond":
                  return Math.floor(days2 * 864e5) + milliseconds2;
                default:
                  throw new Error("Unknown unit " + units);
              }
            }
          }
          function valueOf$1() {
            if (!this.isValid()) {
              return NaN;
            }
            return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
          }
          function makeAs(alias) {
            return function() {
              return this.as(alias);
            };
          }
          var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y");
          function clone$1() {
            return createDuration(this);
          }
          function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + "s"]() : NaN;
          }
          function makeGetter(name) {
            return function() {
              return this.isValid() ? this._data[name] : NaN;
            };
          }
          var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
          function weeks() {
            return absFloor(this.days() / 7);
          }
          var round = Math.round, thresholds = {
            ss: 44,
            s: 45,
            m: 45,
            h: 22,
            d: 26,
            w: null,
            M: 11
          };
          function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
            return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
          }
          function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
            var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a3 = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
            if (thresholds2.w != null) {
              a3 = a3 || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
            }
            a3 = a3 || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
            a3[2] = withoutSuffix;
            a3[3] = +posNegDuration > 0;
            a3[4] = locale2;
            return substituteTimeAgo.apply(null, a3);
          }
          function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === void 0) {
              return round;
            }
            if (typeof roundingFunction === "function") {
              round = roundingFunction;
              return true;
            }
            return false;
          }
          function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === void 0) {
              return false;
            }
            if (limit === void 0) {
              return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === "s") {
              thresholds.ss = limit - 1;
            }
            return true;
          }
          function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }
            var withSuffix = false, th = thresholds, locale2, output;
            if (typeof argWithSuffix === "object") {
              argThresholds = argWithSuffix;
              argWithSuffix = false;
            }
            if (typeof argWithSuffix === "boolean") {
              withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === "object") {
              th = Object.assign({}, thresholds, argThresholds);
              if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
              }
            }
            locale2 = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale2);
            if (withSuffix) {
              output = locale2.pastFuture(+this, output);
            }
            return locale2.postformat(output);
          }
          var abs$1 = Math.abs;
          function sign(x2) {
            return (x2 > 0) - (x2 < 0) || +x2;
          }
          function toISOString$1() {
            if (!this.isValid()) {
              return this.localeData().invalidDate();
            }
            var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s5, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
            if (!total) {
              return "P0D";
            }
            minutes2 = absFloor(seconds2 / 60);
            hours2 = absFloor(minutes2 / 60);
            seconds2 %= 60;
            minutes2 %= 60;
            years2 = absFloor(months2 / 12);
            months2 %= 12;
            s5 = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
            totalSign = total < 0 ? "-" : "";
            ymSign = sign(this._months) !== sign(total) ? "-" : "";
            daysSign = sign(this._days) !== sign(total) ? "-" : "";
            hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
            return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s5 + "S" : "");
          }
          var proto$2 = Duration.prototype;
          proto$2.isValid = isValid$1;
          proto$2.abs = abs;
          proto$2.add = add$1;
          proto$2.subtract = subtract$1;
          proto$2.as = as;
          proto$2.asMilliseconds = asMilliseconds;
          proto$2.asSeconds = asSeconds;
          proto$2.asMinutes = asMinutes;
          proto$2.asHours = asHours;
          proto$2.asDays = asDays;
          proto$2.asWeeks = asWeeks;
          proto$2.asMonths = asMonths;
          proto$2.asQuarters = asQuarters;
          proto$2.asYears = asYears;
          proto$2.valueOf = valueOf$1;
          proto$2._bubble = bubble;
          proto$2.clone = clone$1;
          proto$2.get = get$2;
          proto$2.milliseconds = milliseconds;
          proto$2.seconds = seconds;
          proto$2.minutes = minutes;
          proto$2.hours = hours;
          proto$2.days = days;
          proto$2.weeks = weeks;
          proto$2.months = months;
          proto$2.years = years;
          proto$2.humanize = humanize;
          proto$2.toISOString = toISOString$1;
          proto$2.toString = toISOString$1;
          proto$2.toJSON = toISOString$1;
          proto$2.locale = locale;
          proto$2.localeData = localeData;
          proto$2.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", toISOString$1);
          proto$2.lang = lang;
          addFormatToken("X", 0, 0, "unix");
          addFormatToken("x", 0, 0, "valueOf");
          addRegexToken("x", matchSigned);
          addRegexToken("X", matchTimestamp);
          addParseToken("X", function(input, array, config) {
            config._d = new Date(parseFloat(input) * 1e3);
          });
          addParseToken("x", function(input, array, config) {
            config._d = new Date(toInt(input));
          });
          hooks.version = "2.29.4";
          setHookCallback(createLocal);
          hooks.fn = proto;
          hooks.min = min;
          hooks.max = max;
          hooks.now = now;
          hooks.utc = createUTC;
          hooks.unix = createUnix;
          hooks.months = listMonths;
          hooks.isDate = isDate;
          hooks.locale = getSetGlobalLocale;
          hooks.invalid = createInvalid;
          hooks.duration = createDuration;
          hooks.isMoment = isMoment;
          hooks.weekdays = listWeekdays;
          hooks.parseZone = createInZone;
          hooks.localeData = getLocale;
          hooks.isDuration = isDuration;
          hooks.monthsShort = listMonthsShort;
          hooks.weekdaysMin = listWeekdaysMin;
          hooks.defineLocale = defineLocale;
          hooks.updateLocale = updateLocale;
          hooks.locales = listLocales;
          hooks.weekdaysShort = listWeekdaysShort;
          hooks.normalizeUnits = normalizeUnits;
          hooks.relativeTimeRounding = getSetRelativeTimeRounding;
          hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
          hooks.calendarFormat = getCalendarFormat;
          hooks.prototype = proto;
          hooks.HTML5_FMT = {
            DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
            DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
            DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
            DATE: "YYYY-MM-DD",
            TIME: "HH:mm",
            TIME_SECONDS: "HH:mm:ss",
            TIME_MS: "HH:mm:ss.SSS",
            WEEK: "GGGG-[W]WW",
            MONTH: "YYYY-MM"
          };
          return hooks;
        });
      }
    });
    var require_Chart = __commonJS2({
      "node_modules/chart.js/dist/Chart.js"(exports, module) {
        (function(global2, factory) {
          typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(function() {
            try {
              return require_moment();
            } catch (e8) {
            }
          }()) : typeof define === "function" && define.amd ? define(["require"], function(require2) {
            return factory(function() {
              try {
                return require2("moment");
              } catch (e8) {
              }
            }());
          }) : (global2 = global2 || self, global2.Chart = factory(global2.moment));
        })(exports, function(moment) {
          "use strict";
          moment = moment && moment.hasOwnProperty("default") ? moment["default"] : moment;
          function createCommonjsModule(fn, module2) {
            return module2 = { exports: {} }, fn(module2, module2.exports), module2.exports;
          }
          function getCjsExportFromNamespace(n8) {
            return n8 && n8["default"] || n8;
          }
          var colorName = {
            "aliceblue": [240, 248, 255],
            "antiquewhite": [250, 235, 215],
            "aqua": [0, 255, 255],
            "aquamarine": [127, 255, 212],
            "azure": [240, 255, 255],
            "beige": [245, 245, 220],
            "bisque": [255, 228, 196],
            "black": [0, 0, 0],
            "blanchedalmond": [255, 235, 205],
            "blue": [0, 0, 255],
            "blueviolet": [138, 43, 226],
            "brown": [165, 42, 42],
            "burlywood": [222, 184, 135],
            "cadetblue": [95, 158, 160],
            "chartreuse": [127, 255, 0],
            "chocolate": [210, 105, 30],
            "coral": [255, 127, 80],
            "cornflowerblue": [100, 149, 237],
            "cornsilk": [255, 248, 220],
            "crimson": [220, 20, 60],
            "cyan": [0, 255, 255],
            "darkblue": [0, 0, 139],
            "darkcyan": [0, 139, 139],
            "darkgoldenrod": [184, 134, 11],
            "darkgray": [169, 169, 169],
            "darkgreen": [0, 100, 0],
            "darkgrey": [169, 169, 169],
            "darkkhaki": [189, 183, 107],
            "darkmagenta": [139, 0, 139],
            "darkolivegreen": [85, 107, 47],
            "darkorange": [255, 140, 0],
            "darkorchid": [153, 50, 204],
            "darkred": [139, 0, 0],
            "darksalmon": [233, 150, 122],
            "darkseagreen": [143, 188, 143],
            "darkslateblue": [72, 61, 139],
            "darkslategray": [47, 79, 79],
            "darkslategrey": [47, 79, 79],
            "darkturquoise": [0, 206, 209],
            "darkviolet": [148, 0, 211],
            "deeppink": [255, 20, 147],
            "deepskyblue": [0, 191, 255],
            "dimgray": [105, 105, 105],
            "dimgrey": [105, 105, 105],
            "dodgerblue": [30, 144, 255],
            "firebrick": [178, 34, 34],
            "floralwhite": [255, 250, 240],
            "forestgreen": [34, 139, 34],
            "fuchsia": [255, 0, 255],
            "gainsboro": [220, 220, 220],
            "ghostwhite": [248, 248, 255],
            "gold": [255, 215, 0],
            "goldenrod": [218, 165, 32],
            "gray": [128, 128, 128],
            "green": [0, 128, 0],
            "greenyellow": [173, 255, 47],
            "grey": [128, 128, 128],
            "honeydew": [240, 255, 240],
            "hotpink": [255, 105, 180],
            "indianred": [205, 92, 92],
            "indigo": [75, 0, 130],
            "ivory": [255, 255, 240],
            "khaki": [240, 230, 140],
            "lavender": [230, 230, 250],
            "lavenderblush": [255, 240, 245],
            "lawngreen": [124, 252, 0],
            "lemonchiffon": [255, 250, 205],
            "lightblue": [173, 216, 230],
            "lightcoral": [240, 128, 128],
            "lightcyan": [224, 255, 255],
            "lightgoldenrodyellow": [250, 250, 210],
            "lightgray": [211, 211, 211],
            "lightgreen": [144, 238, 144],
            "lightgrey": [211, 211, 211],
            "lightpink": [255, 182, 193],
            "lightsalmon": [255, 160, 122],
            "lightseagreen": [32, 178, 170],
            "lightskyblue": [135, 206, 250],
            "lightslategray": [119, 136, 153],
            "lightslategrey": [119, 136, 153],
            "lightsteelblue": [176, 196, 222],
            "lightyellow": [255, 255, 224],
            "lime": [0, 255, 0],
            "limegreen": [50, 205, 50],
            "linen": [250, 240, 230],
            "magenta": [255, 0, 255],
            "maroon": [128, 0, 0],
            "mediumaquamarine": [102, 205, 170],
            "mediumblue": [0, 0, 205],
            "mediumorchid": [186, 85, 211],
            "mediumpurple": [147, 112, 219],
            "mediumseagreen": [60, 179, 113],
            "mediumslateblue": [123, 104, 238],
            "mediumspringgreen": [0, 250, 154],
            "mediumturquoise": [72, 209, 204],
            "mediumvioletred": [199, 21, 133],
            "midnightblue": [25, 25, 112],
            "mintcream": [245, 255, 250],
            "mistyrose": [255, 228, 225],
            "moccasin": [255, 228, 181],
            "navajowhite": [255, 222, 173],
            "navy": [0, 0, 128],
            "oldlace": [253, 245, 230],
            "olive": [128, 128, 0],
            "olivedrab": [107, 142, 35],
            "orange": [255, 165, 0],
            "orangered": [255, 69, 0],
            "orchid": [218, 112, 214],
            "palegoldenrod": [238, 232, 170],
            "palegreen": [152, 251, 152],
            "paleturquoise": [175, 238, 238],
            "palevioletred": [219, 112, 147],
            "papayawhip": [255, 239, 213],
            "peachpuff": [255, 218, 185],
            "peru": [205, 133, 63],
            "pink": [255, 192, 203],
            "plum": [221, 160, 221],
            "powderblue": [176, 224, 230],
            "purple": [128, 0, 128],
            "rebeccapurple": [102, 51, 153],
            "red": [255, 0, 0],
            "rosybrown": [188, 143, 143],
            "royalblue": [65, 105, 225],
            "saddlebrown": [139, 69, 19],
            "salmon": [250, 128, 114],
            "sandybrown": [244, 164, 96],
            "seagreen": [46, 139, 87],
            "seashell": [255, 245, 238],
            "sienna": [160, 82, 45],
            "silver": [192, 192, 192],
            "skyblue": [135, 206, 235],
            "slateblue": [106, 90, 205],
            "slategray": [112, 128, 144],
            "slategrey": [112, 128, 144],
            "snow": [255, 250, 250],
            "springgreen": [0, 255, 127],
            "steelblue": [70, 130, 180],
            "tan": [210, 180, 140],
            "teal": [0, 128, 128],
            "thistle": [216, 191, 216],
            "tomato": [255, 99, 71],
            "turquoise": [64, 224, 208],
            "violet": [238, 130, 238],
            "wheat": [245, 222, 179],
            "white": [255, 255, 255],
            "whitesmoke": [245, 245, 245],
            "yellow": [255, 255, 0],
            "yellowgreen": [154, 205, 50]
          };
          var conversions = createCommonjsModule(function(module2) {
            var reverseKeywords = {};
            for (var key in colorName) {
              if (colorName.hasOwnProperty(key)) {
                reverseKeywords[colorName[key]] = key;
              }
            }
            var convert2 = module2.exports = {
              rgb: { channels: 3, labels: "rgb" },
              hsl: { channels: 3, labels: "hsl" },
              hsv: { channels: 3, labels: "hsv" },
              hwb: { channels: 3, labels: "hwb" },
              cmyk: { channels: 4, labels: "cmyk" },
              xyz: { channels: 3, labels: "xyz" },
              lab: { channels: 3, labels: "lab" },
              lch: { channels: 3, labels: "lch" },
              hex: { channels: 1, labels: ["hex"] },
              keyword: { channels: 1, labels: ["keyword"] },
              ansi16: { channels: 1, labels: ["ansi16"] },
              ansi256: { channels: 1, labels: ["ansi256"] },
              hcg: { channels: 3, labels: ["h", "c", "g"] },
              apple: { channels: 3, labels: ["r16", "g16", "b16"] },
              gray: { channels: 1, labels: ["gray"] }
            };
            for (var model in convert2) {
              if (convert2.hasOwnProperty(model)) {
                if (!("channels" in convert2[model])) {
                  throw new Error("missing channels property: " + model);
                }
                if (!("labels" in convert2[model])) {
                  throw new Error("missing channel labels property: " + model);
                }
                if (convert2[model].labels.length !== convert2[model].channels) {
                  throw new Error("channel and label counts mismatch: " + model);
                }
                var channels = convert2[model].channels;
                var labels = convert2[model].labels;
                delete convert2[model].channels;
                delete convert2[model].labels;
                Object.defineProperty(convert2[model], "channels", { value: channels });
                Object.defineProperty(convert2[model], "labels", { value: labels });
              }
            }
            convert2.rgb.hsl = function(rgb) {
              var r4 = rgb[0] / 255;
              var g2 = rgb[1] / 255;
              var b2 = rgb[2] / 255;
              var min = Math.min(r4, g2, b2);
              var max = Math.max(r4, g2, b2);
              var delta = max - min;
              var h3;
              var s5;
              var l5;
              if (max === min) {
                h3 = 0;
              } else if (r4 === max) {
                h3 = (g2 - b2) / delta;
              } else if (g2 === max) {
                h3 = 2 + (b2 - r4) / delta;
              } else if (b2 === max) {
                h3 = 4 + (r4 - g2) / delta;
              }
              h3 = Math.min(h3 * 60, 360);
              if (h3 < 0) {
                h3 += 360;
              }
              l5 = (min + max) / 2;
              if (max === min) {
                s5 = 0;
              } else if (l5 <= 0.5) {
                s5 = delta / (max + min);
              } else {
                s5 = delta / (2 - max - min);
              }
              return [h3, s5 * 100, l5 * 100];
            };
            convert2.rgb.hsv = function(rgb) {
              var rdif;
              var gdif;
              var bdif;
              var h3;
              var s5;
              var r4 = rgb[0] / 255;
              var g2 = rgb[1] / 255;
              var b2 = rgb[2] / 255;
              var v2 = Math.max(r4, g2, b2);
              var diff = v2 - Math.min(r4, g2, b2);
              var diffc = function(c3) {
                return (v2 - c3) / 6 / diff + 1 / 2;
              };
              if (diff === 0) {
                h3 = s5 = 0;
              } else {
                s5 = diff / v2;
                rdif = diffc(r4);
                gdif = diffc(g2);
                bdif = diffc(b2);
                if (r4 === v2) {
                  h3 = bdif - gdif;
                } else if (g2 === v2) {
                  h3 = 1 / 3 + rdif - bdif;
                } else if (b2 === v2) {
                  h3 = 2 / 3 + gdif - rdif;
                }
                if (h3 < 0) {
                  h3 += 1;
                } else if (h3 > 1) {
                  h3 -= 1;
                }
              }
              return [
                h3 * 360,
                s5 * 100,
                v2 * 100
              ];
            };
            convert2.rgb.hwb = function(rgb) {
              var r4 = rgb[0];
              var g2 = rgb[1];
              var b2 = rgb[2];
              var h3 = convert2.rgb.hsl(rgb)[0];
              var w2 = 1 / 255 * Math.min(r4, Math.min(g2, b2));
              b2 = 1 - 1 / 255 * Math.max(r4, Math.max(g2, b2));
              return [h3, w2 * 100, b2 * 100];
            };
            convert2.rgb.cmyk = function(rgb) {
              var r4 = rgb[0] / 255;
              var g2 = rgb[1] / 255;
              var b2 = rgb[2] / 255;
              var c3;
              var m2;
              var y2;
              var k22;
              k22 = Math.min(1 - r4, 1 - g2, 1 - b2);
              c3 = (1 - r4 - k22) / (1 - k22) || 0;
              m2 = (1 - g2 - k22) / (1 - k22) || 0;
              y2 = (1 - b2 - k22) / (1 - k22) || 0;
              return [c3 * 100, m2 * 100, y2 * 100, k22 * 100];
            };
            function comparativeDistance(x2, y2) {
              return Math.pow(x2[0] - y2[0], 2) + Math.pow(x2[1] - y2[1], 2) + Math.pow(x2[2] - y2[2], 2);
            }
            convert2.rgb.keyword = function(rgb) {
              var reversed = reverseKeywords[rgb];
              if (reversed) {
                return reversed;
              }
              var currentClosestDistance = Infinity;
              var currentClosestKeyword;
              for (var keyword2 in colorName) {
                if (colorName.hasOwnProperty(keyword2)) {
                  var value = colorName[keyword2];
                  var distance = comparativeDistance(rgb, value);
                  if (distance < currentClosestDistance) {
                    currentClosestDistance = distance;
                    currentClosestKeyword = keyword2;
                  }
                }
              }
              return currentClosestKeyword;
            };
            convert2.keyword.rgb = function(keyword2) {
              return colorName[keyword2];
            };
            convert2.rgb.xyz = function(rgb) {
              var r4 = rgb[0] / 255;
              var g2 = rgb[1] / 255;
              var b2 = rgb[2] / 255;
              r4 = r4 > 0.04045 ? Math.pow((r4 + 0.055) / 1.055, 2.4) : r4 / 12.92;
              g2 = g2 > 0.04045 ? Math.pow((g2 + 0.055) / 1.055, 2.4) : g2 / 12.92;
              b2 = b2 > 0.04045 ? Math.pow((b2 + 0.055) / 1.055, 2.4) : b2 / 12.92;
              var x2 = r4 * 0.4124 + g2 * 0.3576 + b2 * 0.1805;
              var y2 = r4 * 0.2126 + g2 * 0.7152 + b2 * 0.0722;
              var z2 = r4 * 0.0193 + g2 * 0.1192 + b2 * 0.9505;
              return [x2 * 100, y2 * 100, z2 * 100];
            };
            convert2.rgb.lab = function(rgb) {
              var xyz = convert2.rgb.xyz(rgb);
              var x2 = xyz[0];
              var y2 = xyz[1];
              var z2 = xyz[2];
              var l5;
              var a3;
              var b2;
              x2 /= 95.047;
              y2 /= 100;
              z2 /= 108.883;
              x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
              y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
              z2 = z2 > 8856e-6 ? Math.pow(z2, 1 / 3) : 7.787 * z2 + 16 / 116;
              l5 = 116 * y2 - 16;
              a3 = 500 * (x2 - y2);
              b2 = 200 * (y2 - z2);
              return [l5, a3, b2];
            };
            convert2.hsl.rgb = function(hsl) {
              var h3 = hsl[0] / 360;
              var s5 = hsl[1] / 100;
              var l5 = hsl[2] / 100;
              var t1;
              var t22;
              var t32;
              var rgb;
              var val;
              if (s5 === 0) {
                val = l5 * 255;
                return [val, val, val];
              }
              if (l5 < 0.5) {
                t22 = l5 * (1 + s5);
              } else {
                t22 = l5 + s5 - l5 * s5;
              }
              t1 = 2 * l5 - t22;
              rgb = [0, 0, 0];
              for (var i7 = 0; i7 < 3; i7++) {
                t32 = h3 + 1 / 3 * -(i7 - 1);
                if (t32 < 0) {
                  t32++;
                }
                if (t32 > 1) {
                  t32--;
                }
                if (6 * t32 < 1) {
                  val = t1 + (t22 - t1) * 6 * t32;
                } else if (2 * t32 < 1) {
                  val = t22;
                } else if (3 * t32 < 2) {
                  val = t1 + (t22 - t1) * (2 / 3 - t32) * 6;
                } else {
                  val = t1;
                }
                rgb[i7] = val * 255;
              }
              return rgb;
            };
            convert2.hsl.hsv = function(hsl) {
              var h3 = hsl[0];
              var s5 = hsl[1] / 100;
              var l5 = hsl[2] / 100;
              var smin = s5;
              var lmin = Math.max(l5, 0.01);
              var sv;
              var v2;
              l5 *= 2;
              s5 *= l5 <= 1 ? l5 : 2 - l5;
              smin *= lmin <= 1 ? lmin : 2 - lmin;
              v2 = (l5 + s5) / 2;
              sv = l5 === 0 ? 2 * smin / (lmin + smin) : 2 * s5 / (l5 + s5);
              return [h3, sv * 100, v2 * 100];
            };
            convert2.hsv.rgb = function(hsv) {
              var h3 = hsv[0] / 60;
              var s5 = hsv[1] / 100;
              var v2 = hsv[2] / 100;
              var hi = Math.floor(h3) % 6;
              var f2 = h3 - Math.floor(h3);
              var p3 = 255 * v2 * (1 - s5);
              var q = 255 * v2 * (1 - s5 * f2);
              var t5 = 255 * v2 * (1 - s5 * (1 - f2));
              v2 *= 255;
              switch (hi) {
                case 0:
                  return [v2, t5, p3];
                case 1:
                  return [q, v2, p3];
                case 2:
                  return [p3, v2, t5];
                case 3:
                  return [p3, q, v2];
                case 4:
                  return [t5, p3, v2];
                case 5:
                  return [v2, p3, q];
              }
            };
            convert2.hsv.hsl = function(hsv) {
              var h3 = hsv[0];
              var s5 = hsv[1] / 100;
              var v2 = hsv[2] / 100;
              var vmin = Math.max(v2, 0.01);
              var lmin;
              var sl;
              var l5;
              l5 = (2 - s5) * v2;
              lmin = (2 - s5) * vmin;
              sl = s5 * vmin;
              sl /= lmin <= 1 ? lmin : 2 - lmin;
              sl = sl || 0;
              l5 /= 2;
              return [h3, sl * 100, l5 * 100];
            };
            convert2.hwb.rgb = function(hwb) {
              var h3 = hwb[0] / 360;
              var wh = hwb[1] / 100;
              var bl = hwb[2] / 100;
              var ratio = wh + bl;
              var i7;
              var v2;
              var f2;
              var n8;
              if (ratio > 1) {
                wh /= ratio;
                bl /= ratio;
              }
              i7 = Math.floor(6 * h3);
              v2 = 1 - bl;
              f2 = 6 * h3 - i7;
              if ((i7 & 1) !== 0) {
                f2 = 1 - f2;
              }
              n8 = wh + f2 * (v2 - wh);
              var r4;
              var g2;
              var b2;
              switch (i7) {
                default:
                case 6:
                case 0:
                  r4 = v2;
                  g2 = n8;
                  b2 = wh;
                  break;
                case 1:
                  r4 = n8;
                  g2 = v2;
                  b2 = wh;
                  break;
                case 2:
                  r4 = wh;
                  g2 = v2;
                  b2 = n8;
                  break;
                case 3:
                  r4 = wh;
                  g2 = n8;
                  b2 = v2;
                  break;
                case 4:
                  r4 = n8;
                  g2 = wh;
                  b2 = v2;
                  break;
                case 5:
                  r4 = v2;
                  g2 = wh;
                  b2 = n8;
                  break;
              }
              return [r4 * 255, g2 * 255, b2 * 255];
            };
            convert2.cmyk.rgb = function(cmyk) {
              var c3 = cmyk[0] / 100;
              var m2 = cmyk[1] / 100;
              var y2 = cmyk[2] / 100;
              var k22 = cmyk[3] / 100;
              var r4;
              var g2;
              var b2;
              r4 = 1 - Math.min(1, c3 * (1 - k22) + k22);
              g2 = 1 - Math.min(1, m2 * (1 - k22) + k22);
              b2 = 1 - Math.min(1, y2 * (1 - k22) + k22);
              return [r4 * 255, g2 * 255, b2 * 255];
            };
            convert2.xyz.rgb = function(xyz) {
              var x2 = xyz[0] / 100;
              var y2 = xyz[1] / 100;
              var z2 = xyz[2] / 100;
              var r4;
              var g2;
              var b2;
              r4 = x2 * 3.2406 + y2 * -1.5372 + z2 * -0.4986;
              g2 = x2 * -0.9689 + y2 * 1.8758 + z2 * 0.0415;
              b2 = x2 * 0.0557 + y2 * -0.204 + z2 * 1.057;
              r4 = r4 > 31308e-7 ? 1.055 * Math.pow(r4, 1 / 2.4) - 0.055 : r4 * 12.92;
              g2 = g2 > 31308e-7 ? 1.055 * Math.pow(g2, 1 / 2.4) - 0.055 : g2 * 12.92;
              b2 = b2 > 31308e-7 ? 1.055 * Math.pow(b2, 1 / 2.4) - 0.055 : b2 * 12.92;
              r4 = Math.min(Math.max(0, r4), 1);
              g2 = Math.min(Math.max(0, g2), 1);
              b2 = Math.min(Math.max(0, b2), 1);
              return [r4 * 255, g2 * 255, b2 * 255];
            };
            convert2.xyz.lab = function(xyz) {
              var x2 = xyz[0];
              var y2 = xyz[1];
              var z2 = xyz[2];
              var l5;
              var a3;
              var b2;
              x2 /= 95.047;
              y2 /= 100;
              z2 /= 108.883;
              x2 = x2 > 8856e-6 ? Math.pow(x2, 1 / 3) : 7.787 * x2 + 16 / 116;
              y2 = y2 > 8856e-6 ? Math.pow(y2, 1 / 3) : 7.787 * y2 + 16 / 116;
              z2 = z2 > 8856e-6 ? Math.pow(z2, 1 / 3) : 7.787 * z2 + 16 / 116;
              l5 = 116 * y2 - 16;
              a3 = 500 * (x2 - y2);
              b2 = 200 * (y2 - z2);
              return [l5, a3, b2];
            };
            convert2.lab.xyz = function(lab) {
              var l5 = lab[0];
              var a3 = lab[1];
              var b2 = lab[2];
              var x2;
              var y2;
              var z2;
              y2 = (l5 + 16) / 116;
              x2 = a3 / 500 + y2;
              z2 = y2 - b2 / 200;
              var y22 = Math.pow(y2, 3);
              var x22 = Math.pow(x2, 3);
              var z22 = Math.pow(z2, 3);
              y2 = y22 > 8856e-6 ? y22 : (y2 - 16 / 116) / 7.787;
              x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
              z2 = z22 > 8856e-6 ? z22 : (z2 - 16 / 116) / 7.787;
              x2 *= 95.047;
              y2 *= 100;
              z2 *= 108.883;
              return [x2, y2, z2];
            };
            convert2.lab.lch = function(lab) {
              var l5 = lab[0];
              var a3 = lab[1];
              var b2 = lab[2];
              var hr;
              var h3;
              var c3;
              hr = Math.atan2(b2, a3);
              h3 = hr * 360 / 2 / Math.PI;
              if (h3 < 0) {
                h3 += 360;
              }
              c3 = Math.sqrt(a3 * a3 + b2 * b2);
              return [l5, c3, h3];
            };
            convert2.lch.lab = function(lch) {
              var l5 = lch[0];
              var c3 = lch[1];
              var h3 = lch[2];
              var a3;
              var b2;
              var hr;
              hr = h3 / 360 * 2 * Math.PI;
              a3 = c3 * Math.cos(hr);
              b2 = c3 * Math.sin(hr);
              return [l5, a3, b2];
            };
            convert2.rgb.ansi16 = function(args) {
              var r4 = args[0];
              var g2 = args[1];
              var b2 = args[2];
              var value = 1 in arguments ? arguments[1] : convert2.rgb.hsv(args)[2];
              value = Math.round(value / 50);
              if (value === 0) {
                return 30;
              }
              var ansi = 30 + (Math.round(b2 / 255) << 2 | Math.round(g2 / 255) << 1 | Math.round(r4 / 255));
              if (value === 2) {
                ansi += 60;
              }
              return ansi;
            };
            convert2.hsv.ansi16 = function(args) {
              return convert2.rgb.ansi16(convert2.hsv.rgb(args), args[2]);
            };
            convert2.rgb.ansi256 = function(args) {
              var r4 = args[0];
              var g2 = args[1];
              var b2 = args[2];
              if (r4 === g2 && g2 === b2) {
                if (r4 < 8) {
                  return 16;
                }
                if (r4 > 248) {
                  return 231;
                }
                return Math.round((r4 - 8) / 247 * 24) + 232;
              }
              var ansi = 16 + 36 * Math.round(r4 / 255 * 5) + 6 * Math.round(g2 / 255 * 5) + Math.round(b2 / 255 * 5);
              return ansi;
            };
            convert2.ansi16.rgb = function(args) {
              var color = args % 10;
              if (color === 0 || color === 7) {
                if (args > 50) {
                  color += 3.5;
                }
                color = color / 10.5 * 255;
                return [color, color, color];
              }
              var mult = (~~(args > 50) + 1) * 0.5;
              var r4 = (color & 1) * mult * 255;
              var g2 = (color >> 1 & 1) * mult * 255;
              var b2 = (color >> 2 & 1) * mult * 255;
              return [r4, g2, b2];
            };
            convert2.ansi256.rgb = function(args) {
              if (args >= 232) {
                var c3 = (args - 232) * 10 + 8;
                return [c3, c3, c3];
              }
              args -= 16;
              var rem;
              var r4 = Math.floor(args / 36) / 5 * 255;
              var g2 = Math.floor((rem = args % 36) / 6) / 5 * 255;
              var b2 = rem % 6 / 5 * 255;
              return [r4, g2, b2];
            };
            convert2.rgb.hex = function(args) {
              var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
              var string = integer.toString(16).toUpperCase();
              return "000000".substring(string.length) + string;
            };
            convert2.hex.rgb = function(args) {
              var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
              if (!match) {
                return [0, 0, 0];
              }
              var colorString2 = match[0];
              if (match[0].length === 3) {
                colorString2 = colorString2.split("").map(function(char) {
                  return char + char;
                }).join("");
              }
              var integer = parseInt(colorString2, 16);
              var r4 = integer >> 16 & 255;
              var g2 = integer >> 8 & 255;
              var b2 = integer & 255;
              return [r4, g2, b2];
            };
            convert2.rgb.hcg = function(rgb) {
              var r4 = rgb[0] / 255;
              var g2 = rgb[1] / 255;
              var b2 = rgb[2] / 255;
              var max = Math.max(Math.max(r4, g2), b2);
              var min = Math.min(Math.min(r4, g2), b2);
              var chroma = max - min;
              var grayscale;
              var hue;
              if (chroma < 1) {
                grayscale = min / (1 - chroma);
              } else {
                grayscale = 0;
              }
              if (chroma <= 0) {
                hue = 0;
              } else if (max === r4) {
                hue = (g2 - b2) / chroma % 6;
              } else if (max === g2) {
                hue = 2 + (b2 - r4) / chroma;
              } else {
                hue = 4 + (r4 - g2) / chroma + 4;
              }
              hue /= 6;
              hue %= 1;
              return [hue * 360, chroma * 100, grayscale * 100];
            };
            convert2.hsl.hcg = function(hsl) {
              var s5 = hsl[1] / 100;
              var l5 = hsl[2] / 100;
              var c3 = 1;
              var f2 = 0;
              if (l5 < 0.5) {
                c3 = 2 * s5 * l5;
              } else {
                c3 = 2 * s5 * (1 - l5);
              }
              if (c3 < 1) {
                f2 = (l5 - 0.5 * c3) / (1 - c3);
              }
              return [hsl[0], c3 * 100, f2 * 100];
            };
            convert2.hsv.hcg = function(hsv) {
              var s5 = hsv[1] / 100;
              var v2 = hsv[2] / 100;
              var c3 = s5 * v2;
              var f2 = 0;
              if (c3 < 1) {
                f2 = (v2 - c3) / (1 - c3);
              }
              return [hsv[0], c3 * 100, f2 * 100];
            };
            convert2.hcg.rgb = function(hcg) {
              var h3 = hcg[0] / 360;
              var c3 = hcg[1] / 100;
              var g2 = hcg[2] / 100;
              if (c3 === 0) {
                return [g2 * 255, g2 * 255, g2 * 255];
              }
              var pure = [0, 0, 0];
              var hi = h3 % 1 * 6;
              var v2 = hi % 1;
              var w2 = 1 - v2;
              var mg = 0;
              switch (Math.floor(hi)) {
                case 0:
                  pure[0] = 1;
                  pure[1] = v2;
                  pure[2] = 0;
                  break;
                case 1:
                  pure[0] = w2;
                  pure[1] = 1;
                  pure[2] = 0;
                  break;
                case 2:
                  pure[0] = 0;
                  pure[1] = 1;
                  pure[2] = v2;
                  break;
                case 3:
                  pure[0] = 0;
                  pure[1] = w2;
                  pure[2] = 1;
                  break;
                case 4:
                  pure[0] = v2;
                  pure[1] = 0;
                  pure[2] = 1;
                  break;
                default:
                  pure[0] = 1;
                  pure[1] = 0;
                  pure[2] = w2;
              }
              mg = (1 - c3) * g2;
              return [
                (c3 * pure[0] + mg) * 255,
                (c3 * pure[1] + mg) * 255,
                (c3 * pure[2] + mg) * 255
              ];
            };
            convert2.hcg.hsv = function(hcg) {
              var c3 = hcg[1] / 100;
              var g2 = hcg[2] / 100;
              var v2 = c3 + g2 * (1 - c3);
              var f2 = 0;
              if (v2 > 0) {
                f2 = c3 / v2;
              }
              return [hcg[0], f2 * 100, v2 * 100];
            };
            convert2.hcg.hsl = function(hcg) {
              var c3 = hcg[1] / 100;
              var g2 = hcg[2] / 100;
              var l5 = g2 * (1 - c3) + 0.5 * c3;
              var s5 = 0;
              if (l5 > 0 && l5 < 0.5) {
                s5 = c3 / (2 * l5);
              } else if (l5 >= 0.5 && l5 < 1) {
                s5 = c3 / (2 * (1 - l5));
              }
              return [hcg[0], s5 * 100, l5 * 100];
            };
            convert2.hcg.hwb = function(hcg) {
              var c3 = hcg[1] / 100;
              var g2 = hcg[2] / 100;
              var v2 = c3 + g2 * (1 - c3);
              return [hcg[0], (v2 - c3) * 100, (1 - v2) * 100];
            };
            convert2.hwb.hcg = function(hwb) {
              var w2 = hwb[1] / 100;
              var b2 = hwb[2] / 100;
              var v2 = 1 - b2;
              var c3 = v2 - w2;
              var g2 = 0;
              if (c3 < 1) {
                g2 = (v2 - c3) / (1 - c3);
              }
              return [hwb[0], c3 * 100, g2 * 100];
            };
            convert2.apple.rgb = function(apple) {
              return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
            };
            convert2.rgb.apple = function(rgb) {
              return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
            };
            convert2.gray.rgb = function(args) {
              return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
            };
            convert2.gray.hsl = convert2.gray.hsv = function(args) {
              return [0, 0, args[0]];
            };
            convert2.gray.hwb = function(gray) {
              return [0, 100, gray[0]];
            };
            convert2.gray.cmyk = function(gray) {
              return [0, 0, 0, gray[0]];
            };
            convert2.gray.lab = function(gray) {
              return [gray[0], 0, 0];
            };
            convert2.gray.hex = function(gray) {
              var val = Math.round(gray[0] / 100 * 255) & 255;
              var integer = (val << 16) + (val << 8) + val;
              var string = integer.toString(16).toUpperCase();
              return "000000".substring(string.length) + string;
            };
            convert2.rgb.gray = function(rgb) {
              var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
              return [val / 255 * 100];
            };
          });
          var conversions_1 = conversions.rgb;
          var conversions_2 = conversions.hsl;
          var conversions_3 = conversions.hsv;
          var conversions_4 = conversions.hwb;
          var conversions_5 = conversions.cmyk;
          var conversions_6 = conversions.xyz;
          var conversions_7 = conversions.lab;
          var conversions_8 = conversions.lch;
          var conversions_9 = conversions.hex;
          var conversions_10 = conversions.keyword;
          var conversions_11 = conversions.ansi16;
          var conversions_12 = conversions.ansi256;
          var conversions_13 = conversions.hcg;
          var conversions_14 = conversions.apple;
          var conversions_15 = conversions.gray;
          function buildGraph() {
            var graph = {};
            var models2 = Object.keys(conversions);
            for (var len = models2.length, i7 = 0; i7 < len; i7++) {
              graph[models2[i7]] = {
                distance: -1,
                parent: null
              };
            }
            return graph;
          }
          function deriveBFS(fromModel) {
            var graph = buildGraph();
            var queue = [fromModel];
            graph[fromModel].distance = 0;
            while (queue.length) {
              var current = queue.pop();
              var adjacents = Object.keys(conversions[current]);
              for (var len = adjacents.length, i7 = 0; i7 < len; i7++) {
                var adjacent = adjacents[i7];
                var node = graph[adjacent];
                if (node.distance === -1) {
                  node.distance = graph[current].distance + 1;
                  node.parent = current;
                  queue.unshift(adjacent);
                }
              }
            }
            return graph;
          }
          function link(from, to) {
            return function(args) {
              return to(from(args));
            };
          }
          function wrapConversion(toModel, graph) {
            var path = [graph[toModel].parent, toModel];
            var fn = conversions[graph[toModel].parent][toModel];
            var cur = graph[toModel].parent;
            while (graph[cur].parent) {
              path.unshift(graph[cur].parent);
              fn = link(conversions[graph[cur].parent][cur], fn);
              cur = graph[cur].parent;
            }
            fn.conversion = path;
            return fn;
          }
          var route = function(fromModel) {
            var graph = deriveBFS(fromModel);
            var conversion = {};
            var models2 = Object.keys(graph);
            for (var len = models2.length, i7 = 0; i7 < len; i7++) {
              var toModel = models2[i7];
              var node = graph[toModel];
              if (node.parent === null) {
                continue;
              }
              conversion[toModel] = wrapConversion(toModel, graph);
            }
            return conversion;
          };
          var convert = {};
          var models = Object.keys(conversions);
          function wrapRaw(fn) {
            var wrappedFn = function(args) {
              if (args === void 0 || args === null) {
                return args;
              }
              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }
              return fn(args);
            };
            if ("conversion" in fn) {
              wrappedFn.conversion = fn.conversion;
            }
            return wrappedFn;
          }
          function wrapRounded(fn) {
            var wrappedFn = function(args) {
              if (args === void 0 || args === null) {
                return args;
              }
              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }
              var result = fn(args);
              if (typeof result === "object") {
                for (var len = result.length, i7 = 0; i7 < len; i7++) {
                  result[i7] = Math.round(result[i7]);
                }
              }
              return result;
            };
            if ("conversion" in fn) {
              wrappedFn.conversion = fn.conversion;
            }
            return wrappedFn;
          }
          models.forEach(function(fromModel) {
            convert[fromModel] = {};
            Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
            Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
            var routes = route(fromModel);
            var routeModels = Object.keys(routes);
            routeModels.forEach(function(toModel) {
              var fn = routes[toModel];
              convert[fromModel][toModel] = wrapRounded(fn);
              convert[fromModel][toModel].raw = wrapRaw(fn);
            });
          });
          var colorConvert = convert;
          var colorName$1 = {
            "aliceblue": [240, 248, 255],
            "antiquewhite": [250, 235, 215],
            "aqua": [0, 255, 255],
            "aquamarine": [127, 255, 212],
            "azure": [240, 255, 255],
            "beige": [245, 245, 220],
            "bisque": [255, 228, 196],
            "black": [0, 0, 0],
            "blanchedalmond": [255, 235, 205],
            "blue": [0, 0, 255],
            "blueviolet": [138, 43, 226],
            "brown": [165, 42, 42],
            "burlywood": [222, 184, 135],
            "cadetblue": [95, 158, 160],
            "chartreuse": [127, 255, 0],
            "chocolate": [210, 105, 30],
            "coral": [255, 127, 80],
            "cornflowerblue": [100, 149, 237],
            "cornsilk": [255, 248, 220],
            "crimson": [220, 20, 60],
            "cyan": [0, 255, 255],
            "darkblue": [0, 0, 139],
            "darkcyan": [0, 139, 139],
            "darkgoldenrod": [184, 134, 11],
            "darkgray": [169, 169, 169],
            "darkgreen": [0, 100, 0],
            "darkgrey": [169, 169, 169],
            "darkkhaki": [189, 183, 107],
            "darkmagenta": [139, 0, 139],
            "darkolivegreen": [85, 107, 47],
            "darkorange": [255, 140, 0],
            "darkorchid": [153, 50, 204],
            "darkred": [139, 0, 0],
            "darksalmon": [233, 150, 122],
            "darkseagreen": [143, 188, 143],
            "darkslateblue": [72, 61, 139],
            "darkslategray": [47, 79, 79],
            "darkslategrey": [47, 79, 79],
            "darkturquoise": [0, 206, 209],
            "darkviolet": [148, 0, 211],
            "deeppink": [255, 20, 147],
            "deepskyblue": [0, 191, 255],
            "dimgray": [105, 105, 105],
            "dimgrey": [105, 105, 105],
            "dodgerblue": [30, 144, 255],
            "firebrick": [178, 34, 34],
            "floralwhite": [255, 250, 240],
            "forestgreen": [34, 139, 34],
            "fuchsia": [255, 0, 255],
            "gainsboro": [220, 220, 220],
            "ghostwhite": [248, 248, 255],
            "gold": [255, 215, 0],
            "goldenrod": [218, 165, 32],
            "gray": [128, 128, 128],
            "green": [0, 128, 0],
            "greenyellow": [173, 255, 47],
            "grey": [128, 128, 128],
            "honeydew": [240, 255, 240],
            "hotpink": [255, 105, 180],
            "indianred": [205, 92, 92],
            "indigo": [75, 0, 130],
            "ivory": [255, 255, 240],
            "khaki": [240, 230, 140],
            "lavender": [230, 230, 250],
            "lavenderblush": [255, 240, 245],
            "lawngreen": [124, 252, 0],
            "lemonchiffon": [255, 250, 205],
            "lightblue": [173, 216, 230],
            "lightcoral": [240, 128, 128],
            "lightcyan": [224, 255, 255],
            "lightgoldenrodyellow": [250, 250, 210],
            "lightgray": [211, 211, 211],
            "lightgreen": [144, 238, 144],
            "lightgrey": [211, 211, 211],
            "lightpink": [255, 182, 193],
            "lightsalmon": [255, 160, 122],
            "lightseagreen": [32, 178, 170],
            "lightskyblue": [135, 206, 250],
            "lightslategray": [119, 136, 153],
            "lightslategrey": [119, 136, 153],
            "lightsteelblue": [176, 196, 222],
            "lightyellow": [255, 255, 224],
            "lime": [0, 255, 0],
            "limegreen": [50, 205, 50],
            "linen": [250, 240, 230],
            "magenta": [255, 0, 255],
            "maroon": [128, 0, 0],
            "mediumaquamarine": [102, 205, 170],
            "mediumblue": [0, 0, 205],
            "mediumorchid": [186, 85, 211],
            "mediumpurple": [147, 112, 219],
            "mediumseagreen": [60, 179, 113],
            "mediumslateblue": [123, 104, 238],
            "mediumspringgreen": [0, 250, 154],
            "mediumturquoise": [72, 209, 204],
            "mediumvioletred": [199, 21, 133],
            "midnightblue": [25, 25, 112],
            "mintcream": [245, 255, 250],
            "mistyrose": [255, 228, 225],
            "moccasin": [255, 228, 181],
            "navajowhite": [255, 222, 173],
            "navy": [0, 0, 128],
            "oldlace": [253, 245, 230],
            "olive": [128, 128, 0],
            "olivedrab": [107, 142, 35],
            "orange": [255, 165, 0],
            "orangered": [255, 69, 0],
            "orchid": [218, 112, 214],
            "palegoldenrod": [238, 232, 170],
            "palegreen": [152, 251, 152],
            "paleturquoise": [175, 238, 238],
            "palevioletred": [219, 112, 147],
            "papayawhip": [255, 239, 213],
            "peachpuff": [255, 218, 185],
            "peru": [205, 133, 63],
            "pink": [255, 192, 203],
            "plum": [221, 160, 221],
            "powderblue": [176, 224, 230],
            "purple": [128, 0, 128],
            "rebeccapurple": [102, 51, 153],
            "red": [255, 0, 0],
            "rosybrown": [188, 143, 143],
            "royalblue": [65, 105, 225],
            "saddlebrown": [139, 69, 19],
            "salmon": [250, 128, 114],
            "sandybrown": [244, 164, 96],
            "seagreen": [46, 139, 87],
            "seashell": [255, 245, 238],
            "sienna": [160, 82, 45],
            "silver": [192, 192, 192],
            "skyblue": [135, 206, 235],
            "slateblue": [106, 90, 205],
            "slategray": [112, 128, 144],
            "slategrey": [112, 128, 144],
            "snow": [255, 250, 250],
            "springgreen": [0, 255, 127],
            "steelblue": [70, 130, 180],
            "tan": [210, 180, 140],
            "teal": [0, 128, 128],
            "thistle": [216, 191, 216],
            "tomato": [255, 99, 71],
            "turquoise": [64, 224, 208],
            "violet": [238, 130, 238],
            "wheat": [245, 222, 179],
            "white": [255, 255, 255],
            "whitesmoke": [245, 245, 245],
            "yellow": [255, 255, 0],
            "yellowgreen": [154, 205, 50]
          };
          var colorString = {
            getRgba,
            getHsla,
            getRgb,
            getHsl,
            getHwb,
            getAlpha,
            hexString,
            rgbString,
            rgbaString,
            percentString,
            percentaString,
            hslString,
            hslaString,
            hwbString,
            keyword
          };
          function getRgba(string) {
            if (!string) {
              return;
            }
            var abbr = /^#([a-fA-F0-9]{3,4})$/i, hex = /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i, rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i, keyword2 = /(\w+)/;
            var rgb = [0, 0, 0], a3 = 1, match = string.match(abbr), hexAlpha = "";
            if (match) {
              match = match[1];
              hexAlpha = match[3];
              for (var i7 = 0; i7 < rgb.length; i7++) {
                rgb[i7] = parseInt(match[i7] + match[i7], 16);
              }
              if (hexAlpha) {
                a3 = Math.round(parseInt(hexAlpha + hexAlpha, 16) / 255 * 100) / 100;
              }
            } else if (match = string.match(hex)) {
              hexAlpha = match[2];
              match = match[1];
              for (var i7 = 0; i7 < rgb.length; i7++) {
                rgb[i7] = parseInt(match.slice(i7 * 2, i7 * 2 + 2), 16);
              }
              if (hexAlpha) {
                a3 = Math.round(parseInt(hexAlpha, 16) / 255 * 100) / 100;
              }
            } else if (match = string.match(rgba)) {
              for (var i7 = 0; i7 < rgb.length; i7++) {
                rgb[i7] = parseInt(match[i7 + 1]);
              }
              a3 = parseFloat(match[4]);
            } else if (match = string.match(per)) {
              for (var i7 = 0; i7 < rgb.length; i7++) {
                rgb[i7] = Math.round(parseFloat(match[i7 + 1]) * 2.55);
              }
              a3 = parseFloat(match[4]);
            } else if (match = string.match(keyword2)) {
              if (match[1] == "transparent") {
                return [0, 0, 0, 0];
              }
              rgb = colorName$1[match[1]];
              if (!rgb) {
                return;
              }
            }
            for (var i7 = 0; i7 < rgb.length; i7++) {
              rgb[i7] = scale(rgb[i7], 0, 255);
            }
            if (!a3 && a3 != 0) {
              a3 = 1;
            } else {
              a3 = scale(a3, 0, 1);
            }
            rgb[3] = a3;
            return rgb;
          }
          function getHsla(string) {
            if (!string) {
              return;
            }
            var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
            var match = string.match(hsl);
            if (match) {
              var alpha = parseFloat(match[4]);
              var h3 = scale(parseInt(match[1]), 0, 360), s5 = scale(parseFloat(match[2]), 0, 100), l5 = scale(parseFloat(match[3]), 0, 100), a3 = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
              return [h3, s5, l5, a3];
            }
          }
          function getHwb(string) {
            if (!string) {
              return;
            }
            var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
            var match = string.match(hwb);
            if (match) {
              var alpha = parseFloat(match[4]);
              var h3 = scale(parseInt(match[1]), 0, 360), w2 = scale(parseFloat(match[2]), 0, 100), b2 = scale(parseFloat(match[3]), 0, 100), a3 = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
              return [h3, w2, b2, a3];
            }
          }
          function getRgb(string) {
            var rgba = getRgba(string);
            return rgba && rgba.slice(0, 3);
          }
          function getHsl(string) {
            var hsla = getHsla(string);
            return hsla && hsla.slice(0, 3);
          }
          function getAlpha(string) {
            var vals = getRgba(string);
            if (vals) {
              return vals[3];
            } else if (vals = getHsla(string)) {
              return vals[3];
            } else if (vals = getHwb(string)) {
              return vals[3];
            }
          }
          function hexString(rgba, a3) {
            var a3 = a3 !== void 0 && rgba.length === 3 ? a3 : rgba[3];
            return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (a3 >= 0 && a3 < 1 ? hexDouble(Math.round(a3 * 255)) : "");
          }
          function rgbString(rgba, alpha) {
            if (alpha < 1 || rgba[3] && rgba[3] < 1) {
              return rgbaString(rgba, alpha);
            }
            return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
          }
          function rgbaString(rgba, alpha) {
            if (alpha === void 0) {
              alpha = rgba[3] !== void 0 ? rgba[3] : 1;
            }
            return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ", " + alpha + ")";
          }
          function percentString(rgba, alpha) {
            if (alpha < 1 || rgba[3] && rgba[3] < 1) {
              return percentaString(rgba, alpha);
            }
            var r4 = Math.round(rgba[0] / 255 * 100), g2 = Math.round(rgba[1] / 255 * 100), b2 = Math.round(rgba[2] / 255 * 100);
            return "rgb(" + r4 + "%, " + g2 + "%, " + b2 + "%)";
          }
          function percentaString(rgba, alpha) {
            var r4 = Math.round(rgba[0] / 255 * 100), g2 = Math.round(rgba[1] / 255 * 100), b2 = Math.round(rgba[2] / 255 * 100);
            return "rgba(" + r4 + "%, " + g2 + "%, " + b2 + "%, " + (alpha || rgba[3] || 1) + ")";
          }
          function hslString(hsla, alpha) {
            if (alpha < 1 || hsla[3] && hsla[3] < 1) {
              return hslaString(hsla, alpha);
            }
            return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
          }
          function hslaString(hsla, alpha) {
            if (alpha === void 0) {
              alpha = hsla[3] !== void 0 ? hsla[3] : 1;
            }
            return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + alpha + ")";
          }
          function hwbString(hwb, alpha) {
            if (alpha === void 0) {
              alpha = hwb[3] !== void 0 ? hwb[3] : 1;
            }
            return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%" + (alpha !== void 0 && alpha !== 1 ? ", " + alpha : "") + ")";
          }
          function keyword(rgb) {
            return reverseNames[rgb.slice(0, 3)];
          }
          function scale(num, min, max) {
            return Math.min(Math.max(min, num), max);
          }
          function hexDouble(num) {
            var str = num.toString(16).toUpperCase();
            return str.length < 2 ? "0" + str : str;
          }
          var reverseNames = {};
          for (var name in colorName$1) {
            reverseNames[colorName$1[name]] = name;
          }
          var Color = function(obj) {
            if (obj instanceof Color) {
              return obj;
            }
            if (!(this instanceof Color)) {
              return new Color(obj);
            }
            this.valid = false;
            this.values = {
              rgb: [0, 0, 0],
              hsl: [0, 0, 0],
              hsv: [0, 0, 0],
              hwb: [0, 0, 0],
              cmyk: [0, 0, 0, 0],
              alpha: 1
            };
            var vals;
            if (typeof obj === "string") {
              vals = colorString.getRgba(obj);
              if (vals) {
                this.setValues("rgb", vals);
              } else if (vals = colorString.getHsla(obj)) {
                this.setValues("hsl", vals);
              } else if (vals = colorString.getHwb(obj)) {
                this.setValues("hwb", vals);
              }
            } else if (typeof obj === "object") {
              vals = obj;
              if (vals.r !== void 0 || vals.red !== void 0) {
                this.setValues("rgb", vals);
              } else if (vals.l !== void 0 || vals.lightness !== void 0) {
                this.setValues("hsl", vals);
              } else if (vals.v !== void 0 || vals.value !== void 0) {
                this.setValues("hsv", vals);
              } else if (vals.w !== void 0 || vals.whiteness !== void 0) {
                this.setValues("hwb", vals);
              } else if (vals.c !== void 0 || vals.cyan !== void 0) {
                this.setValues("cmyk", vals);
              }
            }
          };
          Color.prototype = {
            isValid: function() {
              return this.valid;
            },
            rgb: function() {
              return this.setSpace("rgb", arguments);
            },
            hsl: function() {
              return this.setSpace("hsl", arguments);
            },
            hsv: function() {
              return this.setSpace("hsv", arguments);
            },
            hwb: function() {
              return this.setSpace("hwb", arguments);
            },
            cmyk: function() {
              return this.setSpace("cmyk", arguments);
            },
            rgbArray: function() {
              return this.values.rgb;
            },
            hslArray: function() {
              return this.values.hsl;
            },
            hsvArray: function() {
              return this.values.hsv;
            },
            hwbArray: function() {
              var values = this.values;
              if (values.alpha !== 1) {
                return values.hwb.concat([values.alpha]);
              }
              return values.hwb;
            },
            cmykArray: function() {
              return this.values.cmyk;
            },
            rgbaArray: function() {
              var values = this.values;
              return values.rgb.concat([values.alpha]);
            },
            hslaArray: function() {
              var values = this.values;
              return values.hsl.concat([values.alpha]);
            },
            alpha: function(val) {
              if (val === void 0) {
                return this.values.alpha;
              }
              this.setValues("alpha", val);
              return this;
            },
            red: function(val) {
              return this.setChannel("rgb", 0, val);
            },
            green: function(val) {
              return this.setChannel("rgb", 1, val);
            },
            blue: function(val) {
              return this.setChannel("rgb", 2, val);
            },
            hue: function(val) {
              if (val) {
                val %= 360;
                val = val < 0 ? 360 + val : val;
              }
              return this.setChannel("hsl", 0, val);
            },
            saturation: function(val) {
              return this.setChannel("hsl", 1, val);
            },
            lightness: function(val) {
              return this.setChannel("hsl", 2, val);
            },
            saturationv: function(val) {
              return this.setChannel("hsv", 1, val);
            },
            whiteness: function(val) {
              return this.setChannel("hwb", 1, val);
            },
            blackness: function(val) {
              return this.setChannel("hwb", 2, val);
            },
            value: function(val) {
              return this.setChannel("hsv", 2, val);
            },
            cyan: function(val) {
              return this.setChannel("cmyk", 0, val);
            },
            magenta: function(val) {
              return this.setChannel("cmyk", 1, val);
            },
            yellow: function(val) {
              return this.setChannel("cmyk", 2, val);
            },
            black: function(val) {
              return this.setChannel("cmyk", 3, val);
            },
            hexString: function() {
              return colorString.hexString(this.values.rgb);
            },
            rgbString: function() {
              return colorString.rgbString(this.values.rgb, this.values.alpha);
            },
            rgbaString: function() {
              return colorString.rgbaString(this.values.rgb, this.values.alpha);
            },
            percentString: function() {
              return colorString.percentString(this.values.rgb, this.values.alpha);
            },
            hslString: function() {
              return colorString.hslString(this.values.hsl, this.values.alpha);
            },
            hslaString: function() {
              return colorString.hslaString(this.values.hsl, this.values.alpha);
            },
            hwbString: function() {
              return colorString.hwbString(this.values.hwb, this.values.alpha);
            },
            keyword: function() {
              return colorString.keyword(this.values.rgb, this.values.alpha);
            },
            rgbNumber: function() {
              var rgb = this.values.rgb;
              return rgb[0] << 16 | rgb[1] << 8 | rgb[2];
            },
            luminosity: function() {
              var rgb = this.values.rgb;
              var lum = [];
              for (var i7 = 0; i7 < rgb.length; i7++) {
                var chan = rgb[i7] / 255;
                lum[i7] = chan <= 0.03928 ? chan / 12.92 : Math.pow((chan + 0.055) / 1.055, 2.4);
              }
              return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
            },
            contrast: function(color2) {
              var lum1 = this.luminosity();
              var lum2 = color2.luminosity();
              if (lum1 > lum2) {
                return (lum1 + 0.05) / (lum2 + 0.05);
              }
              return (lum2 + 0.05) / (lum1 + 0.05);
            },
            level: function(color2) {
              var contrastRatio = this.contrast(color2);
              if (contrastRatio >= 7.1) {
                return "AAA";
              }
              return contrastRatio >= 4.5 ? "AA" : "";
            },
            dark: function() {
              var rgb = this.values.rgb;
              var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
              return yiq < 128;
            },
            light: function() {
              return !this.dark();
            },
            negate: function() {
              var rgb = [];
              for (var i7 = 0; i7 < 3; i7++) {
                rgb[i7] = 255 - this.values.rgb[i7];
              }
              this.setValues("rgb", rgb);
              return this;
            },
            lighten: function(ratio) {
              var hsl = this.values.hsl;
              hsl[2] += hsl[2] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },
            darken: function(ratio) {
              var hsl = this.values.hsl;
              hsl[2] -= hsl[2] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },
            saturate: function(ratio) {
              var hsl = this.values.hsl;
              hsl[1] += hsl[1] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },
            desaturate: function(ratio) {
              var hsl = this.values.hsl;
              hsl[1] -= hsl[1] * ratio;
              this.setValues("hsl", hsl);
              return this;
            },
            whiten: function(ratio) {
              var hwb = this.values.hwb;
              hwb[1] += hwb[1] * ratio;
              this.setValues("hwb", hwb);
              return this;
            },
            blacken: function(ratio) {
              var hwb = this.values.hwb;
              hwb[2] += hwb[2] * ratio;
              this.setValues("hwb", hwb);
              return this;
            },
            greyscale: function() {
              var rgb = this.values.rgb;
              var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
              this.setValues("rgb", [val, val, val]);
              return this;
            },
            clearer: function(ratio) {
              var alpha = this.values.alpha;
              this.setValues("alpha", alpha - alpha * ratio);
              return this;
            },
            opaquer: function(ratio) {
              var alpha = this.values.alpha;
              this.setValues("alpha", alpha + alpha * ratio);
              return this;
            },
            rotate: function(degrees) {
              var hsl = this.values.hsl;
              var hue = (hsl[0] + degrees) % 360;
              hsl[0] = hue < 0 ? 360 + hue : hue;
              this.setValues("hsl", hsl);
              return this;
            },
            mix: function(mixinColor, weight) {
              var color1 = this;
              var color2 = mixinColor;
              var p3 = weight === void 0 ? 0.5 : weight;
              var w2 = 2 * p3 - 1;
              var a3 = color1.alpha() - color2.alpha();
              var w1 = ((w2 * a3 === -1 ? w2 : (w2 + a3) / (1 + w2 * a3)) + 1) / 2;
              var w22 = 1 - w1;
              return this.rgb(w1 * color1.red() + w22 * color2.red(), w1 * color1.green() + w22 * color2.green(), w1 * color1.blue() + w22 * color2.blue()).alpha(color1.alpha() * p3 + color2.alpha() * (1 - p3));
            },
            toJSON: function() {
              return this.rgb();
            },
            clone: function() {
              var result = new Color();
              var source = this.values;
              var target = result.values;
              var value, type;
              for (var prop in source) {
                if (source.hasOwnProperty(prop)) {
                  value = source[prop];
                  type = {}.toString.call(value);
                  if (type === "[object Array]") {
                    target[prop] = value.slice(0);
                  } else if (type === "[object Number]") {
                    target[prop] = value;
                  } else {
                    console.error("unexpected color value:", value);
                  }
                }
              }
              return result;
            }
          };
          Color.prototype.spaces = {
            rgb: ["red", "green", "blue"],
            hsl: ["hue", "saturation", "lightness"],
            hsv: ["hue", "saturation", "value"],
            hwb: ["hue", "whiteness", "blackness"],
            cmyk: ["cyan", "magenta", "yellow", "black"]
          };
          Color.prototype.maxes = {
            rgb: [255, 255, 255],
            hsl: [360, 100, 100],
            hsv: [360, 100, 100],
            hwb: [360, 100, 100],
            cmyk: [100, 100, 100, 100]
          };
          Color.prototype.getValues = function(space) {
            var values = this.values;
            var vals = {};
            for (var i7 = 0; i7 < space.length; i7++) {
              vals[space.charAt(i7)] = values[space][i7];
            }
            if (values.alpha !== 1) {
              vals.a = values.alpha;
            }
            return vals;
          };
          Color.prototype.setValues = function(space, vals) {
            var values = this.values;
            var spaces = this.spaces;
            var maxes = this.maxes;
            var alpha = 1;
            var i7;
            this.valid = true;
            if (space === "alpha") {
              alpha = vals;
            } else if (vals.length) {
              values[space] = vals.slice(0, space.length);
              alpha = vals[space.length];
            } else if (vals[space.charAt(0)] !== void 0) {
              for (i7 = 0; i7 < space.length; i7++) {
                values[space][i7] = vals[space.charAt(i7)];
              }
              alpha = vals.a;
            } else if (vals[spaces[space][0]] !== void 0) {
              var chans = spaces[space];
              for (i7 = 0; i7 < space.length; i7++) {
                values[space][i7] = vals[chans[i7]];
              }
              alpha = vals.alpha;
            }
            values.alpha = Math.max(0, Math.min(1, alpha === void 0 ? values.alpha : alpha));
            if (space === "alpha") {
              return false;
            }
            var capped;
            for (i7 = 0; i7 < space.length; i7++) {
              capped = Math.max(0, Math.min(maxes[space][i7], values[space][i7]));
              values[space][i7] = Math.round(capped);
            }
            for (var sname in spaces) {
              if (sname !== space) {
                values[sname] = colorConvert[space][sname](values[space]);
              }
            }
            return true;
          };
          Color.prototype.setSpace = function(space, args) {
            var vals = args[0];
            if (vals === void 0) {
              return this.getValues(space);
            }
            if (typeof vals === "number") {
              vals = Array.prototype.slice.call(args);
            }
            this.setValues(space, vals);
            return this;
          };
          Color.prototype.setChannel = function(space, index, val) {
            var svalues = this.values[space];
            if (val === void 0) {
              return svalues[index];
            } else if (val === svalues[index]) {
              return this;
            }
            svalues[index] = val;
            this.setValues(space, svalues);
            return this;
          };
          if (typeof window !== "undefined") {
            window.Color = Color;
          }
          var chartjsColor = Color;
          function isValidKey(key) {
            return ["__proto__", "prototype", "constructor"].indexOf(key) === -1;
          }
          var helpers = {
            noop: function() {
            },
            uid: function() {
              var id = 0;
              return function() {
                return id++;
              };
            }(),
            isNullOrUndef: function(value) {
              return value === null || typeof value === "undefined";
            },
            isArray: function(value) {
              if (Array.isArray && Array.isArray(value)) {
                return true;
              }
              var type = Object.prototype.toString.call(value);
              if (type.substr(0, 7) === "[object" && type.substr(-6) === "Array]") {
                return true;
              }
              return false;
            },
            isObject: function(value) {
              return value !== null && Object.prototype.toString.call(value) === "[object Object]";
            },
            isFinite: function(value) {
              return (typeof value === "number" || value instanceof Number) && isFinite(value);
            },
            valueOrDefault: function(value, defaultValue) {
              return typeof value === "undefined" ? defaultValue : value;
            },
            valueAtIndexOrDefault: function(value, index, defaultValue) {
              return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
            },
            callback: function(fn, args, thisArg) {
              if (fn && typeof fn.call === "function") {
                return fn.apply(thisArg, args);
              }
            },
            each: function(loopable, fn, thisArg, reverse) {
              var i7, len, keys;
              if (helpers.isArray(loopable)) {
                len = loopable.length;
                if (reverse) {
                  for (i7 = len - 1; i7 >= 0; i7--) {
                    fn.call(thisArg, loopable[i7], i7);
                  }
                } else {
                  for (i7 = 0; i7 < len; i7++) {
                    fn.call(thisArg, loopable[i7], i7);
                  }
                }
              } else if (helpers.isObject(loopable)) {
                keys = Object.keys(loopable);
                len = keys.length;
                for (i7 = 0; i7 < len; i7++) {
                  fn.call(thisArg, loopable[keys[i7]], keys[i7]);
                }
              }
            },
            arrayEquals: function(a0, a1) {
              var i7, ilen, v0, v1;
              if (!a0 || !a1 || a0.length !== a1.length) {
                return false;
              }
              for (i7 = 0, ilen = a0.length; i7 < ilen; ++i7) {
                v0 = a0[i7];
                v1 = a1[i7];
                if (v0 instanceof Array && v1 instanceof Array) {
                  if (!helpers.arrayEquals(v0, v1)) {
                    return false;
                  }
                } else if (v0 !== v1) {
                  return false;
                }
              }
              return true;
            },
            clone: function(source) {
              if (helpers.isArray(source)) {
                return source.map(helpers.clone);
              }
              if (helpers.isObject(source)) {
                var target = Object.create(source);
                var keys = Object.keys(source);
                var klen = keys.length;
                var k22 = 0;
                for (; k22 < klen; ++k22) {
                  target[keys[k22]] = helpers.clone(source[keys[k22]]);
                }
                return target;
              }
              return source;
            },
            _merger: function(key, target, source, options2) {
              if (!isValidKey(key)) {
                return;
              }
              var tval = target[key];
              var sval = source[key];
              if (helpers.isObject(tval) && helpers.isObject(sval)) {
                helpers.merge(tval, sval, options2);
              } else {
                target[key] = helpers.clone(sval);
              }
            },
            _mergerIf: function(key, target, source) {
              if (!isValidKey(key)) {
                return;
              }
              var tval = target[key];
              var sval = source[key];
              if (helpers.isObject(tval) && helpers.isObject(sval)) {
                helpers.mergeIf(tval, sval);
              } else if (!target.hasOwnProperty(key)) {
                target[key] = helpers.clone(sval);
              }
            },
            merge: function(target, source, options2) {
              var sources = helpers.isArray(source) ? source : [source];
              var ilen = sources.length;
              var merge, i7, keys, klen, k22;
              if (!helpers.isObject(target)) {
                return target;
              }
              options2 = options2 || {};
              merge = options2.merger || helpers._merger;
              for (i7 = 0; i7 < ilen; ++i7) {
                source = sources[i7];
                if (!helpers.isObject(source)) {
                  continue;
                }
                keys = Object.keys(source);
                for (k22 = 0, klen = keys.length; k22 < klen; ++k22) {
                  merge(keys[k22], target, source, options2);
                }
              }
              return target;
            },
            mergeIf: function(target, source) {
              return helpers.merge(target, source, { merger: helpers._mergerIf });
            },
            extend: Object.assign || function(target) {
              return helpers.merge(target, [].slice.call(arguments, 1), {
                merger: function(key, dst, src2) {
                  dst[key] = src2[key];
                }
              });
            },
            inherits: function(extensions) {
              var me = this;
              var ChartElement = extensions && extensions.hasOwnProperty("constructor") ? extensions.constructor : function() {
                return me.apply(this, arguments);
              };
              var Surrogate = function() {
                this.constructor = ChartElement;
              };
              Surrogate.prototype = me.prototype;
              ChartElement.prototype = new Surrogate();
              ChartElement.extend = helpers.inherits;
              if (extensions) {
                helpers.extend(ChartElement.prototype, extensions);
              }
              ChartElement.__super__ = me.prototype;
              return ChartElement;
            },
            _deprecated: function(scope, value, previous, current) {
              if (value !== void 0) {
                console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
              }
            }
          };
          var helpers_core = helpers;
          helpers.callCallback = helpers.callback;
          helpers.indexOf = function(array, item, fromIndex) {
            return Array.prototype.indexOf.call(array, item, fromIndex);
          };
          helpers.getValueOrDefault = helpers.valueOrDefault;
          helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;
          var effects = {
            linear: function(t5) {
              return t5;
            },
            easeInQuad: function(t5) {
              return t5 * t5;
            },
            easeOutQuad: function(t5) {
              return -t5 * (t5 - 2);
            },
            easeInOutQuad: function(t5) {
              if ((t5 /= 0.5) < 1) {
                return 0.5 * t5 * t5;
              }
              return -0.5 * (--t5 * (t5 - 2) - 1);
            },
            easeInCubic: function(t5) {
              return t5 * t5 * t5;
            },
            easeOutCubic: function(t5) {
              return (t5 = t5 - 1) * t5 * t5 + 1;
            },
            easeInOutCubic: function(t5) {
              if ((t5 /= 0.5) < 1) {
                return 0.5 * t5 * t5 * t5;
              }
              return 0.5 * ((t5 -= 2) * t5 * t5 + 2);
            },
            easeInQuart: function(t5) {
              return t5 * t5 * t5 * t5;
            },
            easeOutQuart: function(t5) {
              return -((t5 = t5 - 1) * t5 * t5 * t5 - 1);
            },
            easeInOutQuart: function(t5) {
              if ((t5 /= 0.5) < 1) {
                return 0.5 * t5 * t5 * t5 * t5;
              }
              return -0.5 * ((t5 -= 2) * t5 * t5 * t5 - 2);
            },
            easeInQuint: function(t5) {
              return t5 * t5 * t5 * t5 * t5;
            },
            easeOutQuint: function(t5) {
              return (t5 = t5 - 1) * t5 * t5 * t5 * t5 + 1;
            },
            easeInOutQuint: function(t5) {
              if ((t5 /= 0.5) < 1) {
                return 0.5 * t5 * t5 * t5 * t5 * t5;
              }
              return 0.5 * ((t5 -= 2) * t5 * t5 * t5 * t5 + 2);
            },
            easeInSine: function(t5) {
              return -Math.cos(t5 * (Math.PI / 2)) + 1;
            },
            easeOutSine: function(t5) {
              return Math.sin(t5 * (Math.PI / 2));
            },
            easeInOutSine: function(t5) {
              return -0.5 * (Math.cos(Math.PI * t5) - 1);
            },
            easeInExpo: function(t5) {
              return t5 === 0 ? 0 : Math.pow(2, 10 * (t5 - 1));
            },
            easeOutExpo: function(t5) {
              return t5 === 1 ? 1 : -Math.pow(2, -10 * t5) + 1;
            },
            easeInOutExpo: function(t5) {
              if (t5 === 0) {
                return 0;
              }
              if (t5 === 1) {
                return 1;
              }
              if ((t5 /= 0.5) < 1) {
                return 0.5 * Math.pow(2, 10 * (t5 - 1));
              }
              return 0.5 * (-Math.pow(2, -10 * --t5) + 2);
            },
            easeInCirc: function(t5) {
              if (t5 >= 1) {
                return t5;
              }
              return -(Math.sqrt(1 - t5 * t5) - 1);
            },
            easeOutCirc: function(t5) {
              return Math.sqrt(1 - (t5 = t5 - 1) * t5);
            },
            easeInOutCirc: function(t5) {
              if ((t5 /= 0.5) < 1) {
                return -0.5 * (Math.sqrt(1 - t5 * t5) - 1);
              }
              return 0.5 * (Math.sqrt(1 - (t5 -= 2) * t5) + 1);
            },
            easeInElastic: function(t5) {
              var s5 = 1.70158;
              var p3 = 0;
              var a3 = 1;
              if (t5 === 0) {
                return 0;
              }
              if (t5 === 1) {
                return 1;
              }
              if (!p3) {
                p3 = 0.3;
              }
              if (a3 < 1) {
                a3 = 1;
                s5 = p3 / 4;
              } else {
                s5 = p3 / (2 * Math.PI) * Math.asin(1 / a3);
              }
              return -(a3 * Math.pow(2, 10 * (t5 -= 1)) * Math.sin((t5 - s5) * (2 * Math.PI) / p3));
            },
            easeOutElastic: function(t5) {
              var s5 = 1.70158;
              var p3 = 0;
              var a3 = 1;
              if (t5 === 0) {
                return 0;
              }
              if (t5 === 1) {
                return 1;
              }
              if (!p3) {
                p3 = 0.3;
              }
              if (a3 < 1) {
                a3 = 1;
                s5 = p3 / 4;
              } else {
                s5 = p3 / (2 * Math.PI) * Math.asin(1 / a3);
              }
              return a3 * Math.pow(2, -10 * t5) * Math.sin((t5 - s5) * (2 * Math.PI) / p3) + 1;
            },
            easeInOutElastic: function(t5) {
              var s5 = 1.70158;
              var p3 = 0;
              var a3 = 1;
              if (t5 === 0) {
                return 0;
              }
              if ((t5 /= 0.5) === 2) {
                return 1;
              }
              if (!p3) {
                p3 = 0.45;
              }
              if (a3 < 1) {
                a3 = 1;
                s5 = p3 / 4;
              } else {
                s5 = p3 / (2 * Math.PI) * Math.asin(1 / a3);
              }
              if (t5 < 1) {
                return -0.5 * (a3 * Math.pow(2, 10 * (t5 -= 1)) * Math.sin((t5 - s5) * (2 * Math.PI) / p3));
              }
              return a3 * Math.pow(2, -10 * (t5 -= 1)) * Math.sin((t5 - s5) * (2 * Math.PI) / p3) * 0.5 + 1;
            },
            easeInBack: function(t5) {
              var s5 = 1.70158;
              return t5 * t5 * ((s5 + 1) * t5 - s5);
            },
            easeOutBack: function(t5) {
              var s5 = 1.70158;
              return (t5 = t5 - 1) * t5 * ((s5 + 1) * t5 + s5) + 1;
            },
            easeInOutBack: function(t5) {
              var s5 = 1.70158;
              if ((t5 /= 0.5) < 1) {
                return 0.5 * (t5 * t5 * (((s5 *= 1.525) + 1) * t5 - s5));
              }
              return 0.5 * ((t5 -= 2) * t5 * (((s5 *= 1.525) + 1) * t5 + s5) + 2);
            },
            easeInBounce: function(t5) {
              return 1 - effects.easeOutBounce(1 - t5);
            },
            easeOutBounce: function(t5) {
              if (t5 < 1 / 2.75) {
                return 7.5625 * t5 * t5;
              }
              if (t5 < 2 / 2.75) {
                return 7.5625 * (t5 -= 1.5 / 2.75) * t5 + 0.75;
              }
              if (t5 < 2.5 / 2.75) {
                return 7.5625 * (t5 -= 2.25 / 2.75) * t5 + 0.9375;
              }
              return 7.5625 * (t5 -= 2.625 / 2.75) * t5 + 0.984375;
            },
            easeInOutBounce: function(t5) {
              if (t5 < 0.5) {
                return effects.easeInBounce(t5 * 2) * 0.5;
              }
              return effects.easeOutBounce(t5 * 2 - 1) * 0.5 + 0.5;
            }
          };
          var helpers_easing = {
            effects
          };
          helpers_core.easingEffects = effects;
          var PI = Math.PI;
          var RAD_PER_DEG = PI / 180;
          var DOUBLE_PI = PI * 2;
          var HALF_PI = PI / 2;
          var QUARTER_PI = PI / 4;
          var TWO_THIRDS_PI = PI * 2 / 3;
          var exports$1 = {
            clear: function(chart) {
              chart.ctx.clearRect(0, 0, chart.width, chart.height);
            },
            roundedRect: function(ctx, x2, y2, width, height, radius) {
              if (radius) {
                var r4 = Math.min(radius, height / 2, width / 2);
                var left = x2 + r4;
                var top = y2 + r4;
                var right = x2 + width - r4;
                var bottom = y2 + height - r4;
                ctx.moveTo(x2, top);
                if (left < right && top < bottom) {
                  ctx.arc(left, top, r4, -PI, -HALF_PI);
                  ctx.arc(right, top, r4, -HALF_PI, 0);
                  ctx.arc(right, bottom, r4, 0, HALF_PI);
                  ctx.arc(left, bottom, r4, HALF_PI, PI);
                } else if (left < right) {
                  ctx.moveTo(left, y2);
                  ctx.arc(right, top, r4, -HALF_PI, HALF_PI);
                  ctx.arc(left, top, r4, HALF_PI, PI + HALF_PI);
                } else if (top < bottom) {
                  ctx.arc(left, top, r4, -PI, 0);
                  ctx.arc(left, bottom, r4, 0, PI);
                } else {
                  ctx.arc(left, top, r4, -PI, PI);
                }
                ctx.closePath();
                ctx.moveTo(x2, y2);
              } else {
                ctx.rect(x2, y2, width, height);
              }
            },
            drawPoint: function(ctx, style, radius, x2, y2, rotation) {
              var type, xOffset, yOffset, size, cornerRadius;
              var rad = (rotation || 0) * RAD_PER_DEG;
              if (style && typeof style === "object") {
                type = style.toString();
                if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
                  ctx.save();
                  ctx.translate(x2, y2);
                  ctx.rotate(rad);
                  ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
                  ctx.restore();
                  return;
                }
              }
              if (isNaN(radius) || radius <= 0) {
                return;
              }
              ctx.beginPath();
              switch (style) {
                default:
                  ctx.arc(x2, y2, radius, 0, DOUBLE_PI);
                  ctx.closePath();
                  break;
                case "triangle":
                  ctx.moveTo(x2 + Math.sin(rad) * radius, y2 - Math.cos(rad) * radius);
                  rad += TWO_THIRDS_PI;
                  ctx.lineTo(x2 + Math.sin(rad) * radius, y2 - Math.cos(rad) * radius);
                  rad += TWO_THIRDS_PI;
                  ctx.lineTo(x2 + Math.sin(rad) * radius, y2 - Math.cos(rad) * radius);
                  ctx.closePath();
                  break;
                case "rectRounded":
                  cornerRadius = radius * 0.516;
                  size = radius - cornerRadius;
                  xOffset = Math.cos(rad + QUARTER_PI) * size;
                  yOffset = Math.sin(rad + QUARTER_PI) * size;
                  ctx.arc(x2 - xOffset, y2 - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
                  ctx.arc(x2 + yOffset, y2 - xOffset, cornerRadius, rad - HALF_PI, rad);
                  ctx.arc(x2 + xOffset, y2 + yOffset, cornerRadius, rad, rad + HALF_PI);
                  ctx.arc(x2 - yOffset, y2 + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
                  ctx.closePath();
                  break;
                case "rect":
                  if (!rotation) {
                    size = Math.SQRT1_2 * radius;
                    ctx.rect(x2 - size, y2 - size, 2 * size, 2 * size);
                    break;
                  }
                  rad += QUARTER_PI;
                case "rectRot":
                  xOffset = Math.cos(rad) * radius;
                  yOffset = Math.sin(rad) * radius;
                  ctx.moveTo(x2 - xOffset, y2 - yOffset);
                  ctx.lineTo(x2 + yOffset, y2 - xOffset);
                  ctx.lineTo(x2 + xOffset, y2 + yOffset);
                  ctx.lineTo(x2 - yOffset, y2 + xOffset);
                  ctx.closePath();
                  break;
                case "crossRot":
                  rad += QUARTER_PI;
                case "cross":
                  xOffset = Math.cos(rad) * radius;
                  yOffset = Math.sin(rad) * radius;
                  ctx.moveTo(x2 - xOffset, y2 - yOffset);
                  ctx.lineTo(x2 + xOffset, y2 + yOffset);
                  ctx.moveTo(x2 + yOffset, y2 - xOffset);
                  ctx.lineTo(x2 - yOffset, y2 + xOffset);
                  break;
                case "star":
                  xOffset = Math.cos(rad) * radius;
                  yOffset = Math.sin(rad) * radius;
                  ctx.moveTo(x2 - xOffset, y2 - yOffset);
                  ctx.lineTo(x2 + xOffset, y2 + yOffset);
                  ctx.moveTo(x2 + yOffset, y2 - xOffset);
                  ctx.lineTo(x2 - yOffset, y2 + xOffset);
                  rad += QUARTER_PI;
                  xOffset = Math.cos(rad) * radius;
                  yOffset = Math.sin(rad) * radius;
                  ctx.moveTo(x2 - xOffset, y2 - yOffset);
                  ctx.lineTo(x2 + xOffset, y2 + yOffset);
                  ctx.moveTo(x2 + yOffset, y2 - xOffset);
                  ctx.lineTo(x2 - yOffset, y2 + xOffset);
                  break;
                case "line":
                  xOffset = Math.cos(rad) * radius;
                  yOffset = Math.sin(rad) * radius;
                  ctx.moveTo(x2 - xOffset, y2 - yOffset);
                  ctx.lineTo(x2 + xOffset, y2 + yOffset);
                  break;
                case "dash":
                  ctx.moveTo(x2, y2);
                  ctx.lineTo(x2 + Math.cos(rad) * radius, y2 + Math.sin(rad) * radius);
                  break;
              }
              ctx.fill();
              ctx.stroke();
            },
            _isPointInArea: function(point, area) {
              var epsilon = 1e-6;
              return point.x > area.left - epsilon && point.x < area.right + epsilon && point.y > area.top - epsilon && point.y < area.bottom + epsilon;
            },
            clipArea: function(ctx, area) {
              ctx.save();
              ctx.beginPath();
              ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
              ctx.clip();
            },
            unclipArea: function(ctx) {
              ctx.restore();
            },
            lineTo: function(ctx, previous, target, flip) {
              var stepped = target.steppedLine;
              if (stepped) {
                if (stepped === "middle") {
                  var midpoint = (previous.x + target.x) / 2;
                  ctx.lineTo(midpoint, flip ? target.y : previous.y);
                  ctx.lineTo(midpoint, flip ? previous.y : target.y);
                } else if (stepped === "after" && !flip || stepped !== "after" && flip) {
                  ctx.lineTo(previous.x, target.y);
                } else {
                  ctx.lineTo(target.x, previous.y);
                }
                ctx.lineTo(target.x, target.y);
                return;
              }
              if (!target.tension) {
                ctx.lineTo(target.x, target.y);
                return;
              }
              ctx.bezierCurveTo(flip ? previous.controlPointPreviousX : previous.controlPointNextX, flip ? previous.controlPointPreviousY : previous.controlPointNextY, flip ? target.controlPointNextX : target.controlPointPreviousX, flip ? target.controlPointNextY : target.controlPointPreviousY, target.x, target.y);
            }
          };
          var helpers_canvas = exports$1;
          helpers_core.clear = exports$1.clear;
          helpers_core.drawRoundedRectangle = function(ctx) {
            ctx.beginPath();
            exports$1.roundedRect.apply(exports$1, arguments);
          };
          var defaults = {
            _set: function(scope, values) {
              return helpers_core.merge(this[scope] || (this[scope] = {}), values);
            }
          };
          defaults._set("global", {
            defaultColor: "rgba(0,0,0,0.1)",
            defaultFontColor: "#666",
            defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            defaultFontSize: 12,
            defaultFontStyle: "normal",
            defaultLineHeight: 1.2,
            showLines: true
          });
          var core_defaults = defaults;
          var valueOrDefault = helpers_core.valueOrDefault;
          function toFontString(font) {
            if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
              return null;
            }
            return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
          }
          var helpers_options = {
            toLineHeight: function(value, size) {
              var matches2 = ("" + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
              if (!matches2 || matches2[1] === "normal") {
                return size * 1.2;
              }
              value = +matches2[2];
              switch (matches2[3]) {
                case "px":
                  return value;
                case "%":
                  value /= 100;
                  break;
              }
              return size * value;
            },
            toPadding: function(value) {
              var t5, r4, b2, l5;
              if (helpers_core.isObject(value)) {
                t5 = +value.top || 0;
                r4 = +value.right || 0;
                b2 = +value.bottom || 0;
                l5 = +value.left || 0;
              } else {
                t5 = r4 = b2 = l5 = +value || 0;
              }
              return {
                top: t5,
                right: r4,
                bottom: b2,
                left: l5,
                height: t5 + b2,
                width: l5 + r4
              };
            },
            _parseFont: function(options2) {
              var globalDefaults = core_defaults.global;
              var size = valueOrDefault(options2.fontSize, globalDefaults.defaultFontSize);
              var font = {
                family: valueOrDefault(options2.fontFamily, globalDefaults.defaultFontFamily),
                lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options2.lineHeight, globalDefaults.defaultLineHeight), size),
                size,
                style: valueOrDefault(options2.fontStyle, globalDefaults.defaultFontStyle),
                weight: null,
                string: ""
              };
              font.string = toFontString(font);
              return font;
            },
            resolve: function(inputs, context, index, info) {
              var cacheable = true;
              var i7, ilen, value;
              for (i7 = 0, ilen = inputs.length; i7 < ilen; ++i7) {
                value = inputs[i7];
                if (value === void 0) {
                  continue;
                }
                if (context !== void 0 && typeof value === "function") {
                  value = value(context);
                  cacheable = false;
                }
                if (index !== void 0 && helpers_core.isArray(value)) {
                  value = value[index];
                  cacheable = false;
                }
                if (value !== void 0) {
                  if (info && !cacheable) {
                    info.cacheable = false;
                  }
                  return value;
                }
              }
            }
          };
          var exports$2 = {
            _factorize: function(value) {
              var result = [];
              var sqrt = Math.sqrt(value);
              var i7;
              for (i7 = 1; i7 < sqrt; i7++) {
                if (value % i7 === 0) {
                  result.push(i7);
                  result.push(value / i7);
                }
              }
              if (sqrt === (sqrt | 0)) {
                result.push(sqrt);
              }
              result.sort(function(a3, b2) {
                return a3 - b2;
              }).pop();
              return result;
            },
            log10: Math.log10 || function(x2) {
              var exponent = Math.log(x2) * Math.LOG10E;
              var powerOf10 = Math.round(exponent);
              var isPowerOf10 = x2 === Math.pow(10, powerOf10);
              return isPowerOf10 ? powerOf10 : exponent;
            }
          };
          var helpers_math = exports$2;
          helpers_core.log10 = exports$2.log10;
          var getRtlAdapter = function(rectX, width) {
            return {
              x: function(x2) {
                return rectX + rectX + width - x2;
              },
              setWidth: function(w2) {
                width = w2;
              },
              textAlign: function(align) {
                if (align === "center") {
                  return align;
                }
                return align === "right" ? "left" : "right";
              },
              xPlus: function(x2, value) {
                return x2 - value;
              },
              leftForLtr: function(x2, itemWidth) {
                return x2 - itemWidth;
              }
            };
          };
          var getLtrAdapter = function() {
            return {
              x: function(x2) {
                return x2;
              },
              setWidth: function(w2) {
              },
              textAlign: function(align) {
                return align;
              },
              xPlus: function(x2, value) {
                return x2 + value;
              },
              leftForLtr: function(x2, _itemWidth) {
                return x2;
              }
            };
          };
          var getAdapter = function(rtl2, rectX, width) {
            return rtl2 ? getRtlAdapter(rectX, width) : getLtrAdapter();
          };
          var overrideTextDirection = function(ctx, direction) {
            var style, original;
            if (direction === "ltr" || direction === "rtl") {
              style = ctx.canvas.style;
              original = [
                style.getPropertyValue("direction"),
                style.getPropertyPriority("direction")
              ];
              style.setProperty("direction", direction, "important");
              ctx.prevTextDirection = original;
            }
          };
          var restoreTextDirection = function(ctx) {
            var original = ctx.prevTextDirection;
            if (original !== void 0) {
              delete ctx.prevTextDirection;
              ctx.canvas.style.setProperty("direction", original[0], original[1]);
            }
          };
          var helpers_rtl = {
            getRtlAdapter: getAdapter,
            overrideTextDirection,
            restoreTextDirection
          };
          var helpers$1 = helpers_core;
          var easing = helpers_easing;
          var canvas = helpers_canvas;
          var options = helpers_options;
          var math = helpers_math;
          var rtl = helpers_rtl;
          helpers$1.easing = easing;
          helpers$1.canvas = canvas;
          helpers$1.options = options;
          helpers$1.math = math;
          helpers$1.rtl = rtl;
          function interpolate(start, view, model, ease) {
            var keys = Object.keys(model);
            var i7, ilen, key, actual, origin, target, type, c0, c1;
            for (i7 = 0, ilen = keys.length; i7 < ilen; ++i7) {
              key = keys[i7];
              target = model[key];
              if (!view.hasOwnProperty(key)) {
                view[key] = target;
              }
              actual = view[key];
              if (actual === target || key[0] === "_") {
                continue;
              }
              if (!start.hasOwnProperty(key)) {
                start[key] = actual;
              }
              origin = start[key];
              type = typeof target;
              if (type === typeof origin) {
                if (type === "string") {
                  c0 = chartjsColor(origin);
                  if (c0.valid) {
                    c1 = chartjsColor(target);
                    if (c1.valid) {
                      view[key] = c1.mix(c0, ease).rgbString();
                      continue;
                    }
                  }
                } else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
                  view[key] = origin + (target - origin) * ease;
                  continue;
                }
              }
              view[key] = target;
            }
          }
          var Element2 = function(configuration) {
            helpers$1.extend(this, configuration);
            this.initialize.apply(this, arguments);
          };
          helpers$1.extend(Element2.prototype, {
            _type: void 0,
            initialize: function() {
              this.hidden = false;
            },
            pivot: function() {
              var me = this;
              if (!me._view) {
                me._view = helpers$1.extend({}, me._model);
              }
              me._start = {};
              return me;
            },
            transition: function(ease) {
              var me = this;
              var model = me._model;
              var start = me._start;
              var view = me._view;
              if (!model || ease === 1) {
                me._view = helpers$1.extend({}, model);
                me._start = null;
                return me;
              }
              if (!view) {
                view = me._view = {};
              }
              if (!start) {
                start = me._start = {};
              }
              interpolate(start, view, model, ease);
              return me;
            },
            tooltipPosition: function() {
              return {
                x: this._model.x,
                y: this._model.y
              };
            },
            hasValue: function() {
              return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
            }
          });
          Element2.extend = helpers$1.inherits;
          var core_element = Element2;
          var exports$3 = core_element.extend({
            chart: null,
            currentStep: 0,
            numSteps: 60,
            easing: "",
            render: null,
            onAnimationProgress: null,
            onAnimationComplete: null
          });
          var core_animation = exports$3;
          Object.defineProperty(exports$3.prototype, "animationObject", {
            get: function() {
              return this;
            }
          });
          Object.defineProperty(exports$3.prototype, "chartInstance", {
            get: function() {
              return this.chart;
            },
            set: function(value) {
              this.chart = value;
            }
          });
          core_defaults._set("global", {
            animation: {
              duration: 1e3,
              easing: "easeOutQuart",
              onProgress: helpers$1.noop,
              onComplete: helpers$1.noop
            }
          });
          var core_animations = {
            animations: [],
            request: null,
            addAnimation: function(chart, animation, duration, lazy) {
              var animations = this.animations;
              var i7, ilen;
              animation.chart = chart;
              animation.startTime = Date.now();
              animation.duration = duration;
              if (!lazy) {
                chart.animating = true;
              }
              for (i7 = 0, ilen = animations.length; i7 < ilen; ++i7) {
                if (animations[i7].chart === chart) {
                  animations[i7] = animation;
                  return;
                }
              }
              animations.push(animation);
              if (animations.length === 1) {
                this.requestAnimationFrame();
              }
            },
            cancelAnimation: function(chart) {
              var index = helpers$1.findIndex(this.animations, function(animation) {
                return animation.chart === chart;
              });
              if (index !== -1) {
                this.animations.splice(index, 1);
                chart.animating = false;
              }
            },
            requestAnimationFrame: function() {
              var me = this;
              if (me.request === null) {
                me.request = helpers$1.requestAnimFrame.call(window, function() {
                  me.request = null;
                  me.startDigest();
                });
              }
            },
            startDigest: function() {
              var me = this;
              me.advance();
              if (me.animations.length > 0) {
                me.requestAnimationFrame();
              }
            },
            advance: function() {
              var animations = this.animations;
              var animation, chart, numSteps, nextStep;
              var i7 = 0;
              while (i7 < animations.length) {
                animation = animations[i7];
                chart = animation.chart;
                numSteps = animation.numSteps;
                nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
                animation.currentStep = Math.min(nextStep, numSteps);
                helpers$1.callback(animation.render, [chart, animation], chart);
                helpers$1.callback(animation.onAnimationProgress, [animation], chart);
                if (animation.currentStep >= numSteps) {
                  helpers$1.callback(animation.onAnimationComplete, [animation], chart);
                  chart.animating = false;
                  animations.splice(i7, 1);
                } else {
                  ++i7;
                }
              }
            }
          };
          var resolve = helpers$1.options.resolve;
          var arrayEvents = ["push", "pop", "shift", "splice", "unshift"];
          function listenArrayEvents(array, listener) {
            if (array._chartjs) {
              array._chartjs.listeners.push(listener);
              return;
            }
            Object.defineProperty(array, "_chartjs", {
              configurable: true,
              enumerable: false,
              value: {
                listeners: [listener]
              }
            });
            arrayEvents.forEach(function(key) {
              var method = "onData" + key.charAt(0).toUpperCase() + key.slice(1);
              var base = array[key];
              Object.defineProperty(array, key, {
                configurable: true,
                enumerable: false,
                value: function() {
                  var args = Array.prototype.slice.call(arguments);
                  var res = base.apply(this, args);
                  helpers$1.each(array._chartjs.listeners, function(object) {
                    if (typeof object[method] === "function") {
                      object[method].apply(object, args);
                    }
                  });
                  return res;
                }
              });
            });
          }
          function unlistenArrayEvents(array, listener) {
            var stub = array._chartjs;
            if (!stub) {
              return;
            }
            var listeners = stub.listeners;
            var index = listeners.indexOf(listener);
            if (index !== -1) {
              listeners.splice(index, 1);
            }
            if (listeners.length > 0) {
              return;
            }
            arrayEvents.forEach(function(key) {
              delete array[key];
            });
            delete array._chartjs;
          }
          var DatasetController = function(chart, datasetIndex) {
            this.initialize(chart, datasetIndex);
          };
          helpers$1.extend(DatasetController.prototype, {
            datasetElementType: null,
            dataElementType: null,
            _datasetElementOptions: [
              "backgroundColor",
              "borderCapStyle",
              "borderColor",
              "borderDash",
              "borderDashOffset",
              "borderJoinStyle",
              "borderWidth"
            ],
            _dataElementOptions: [
              "backgroundColor",
              "borderColor",
              "borderWidth",
              "pointStyle"
            ],
            initialize: function(chart, datasetIndex) {
              var me = this;
              me.chart = chart;
              me.index = datasetIndex;
              me.linkScales();
              me.addElements();
              me._type = me.getMeta().type;
            },
            updateIndex: function(datasetIndex) {
              this.index = datasetIndex;
            },
            linkScales: function() {
              var me = this;
              var meta = me.getMeta();
              var chart = me.chart;
              var scales2 = chart.scales;
              var dataset = me.getDataset();
              var scalesOpts = chart.options.scales;
              if (meta.xAxisID === null || !(meta.xAxisID in scales2) || dataset.xAxisID) {
                meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
              }
              if (meta.yAxisID === null || !(meta.yAxisID in scales2) || dataset.yAxisID) {
                meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
              }
            },
            getDataset: function() {
              return this.chart.data.datasets[this.index];
            },
            getMeta: function() {
              return this.chart.getDatasetMeta(this.index);
            },
            getScaleForId: function(scaleID) {
              return this.chart.scales[scaleID];
            },
            _getValueScaleId: function() {
              return this.getMeta().yAxisID;
            },
            _getIndexScaleId: function() {
              return this.getMeta().xAxisID;
            },
            _getValueScale: function() {
              return this.getScaleForId(this._getValueScaleId());
            },
            _getIndexScale: function() {
              return this.getScaleForId(this._getIndexScaleId());
            },
            reset: function() {
              this._update(true);
            },
            destroy: function() {
              if (this._data) {
                unlistenArrayEvents(this._data, this);
              }
            },
            createMetaDataset: function() {
              var me = this;
              var type = me.datasetElementType;
              return type && new type({
                _chart: me.chart,
                _datasetIndex: me.index
              });
            },
            createMetaData: function(index) {
              var me = this;
              var type = me.dataElementType;
              return type && new type({
                _chart: me.chart,
                _datasetIndex: me.index,
                _index: index
              });
            },
            addElements: function() {
              var me = this;
              var meta = me.getMeta();
              var data = me.getDataset().data || [];
              var metaData = meta.data;
              var i7, ilen;
              for (i7 = 0, ilen = data.length; i7 < ilen; ++i7) {
                metaData[i7] = metaData[i7] || me.createMetaData(i7);
              }
              meta.dataset = meta.dataset || me.createMetaDataset();
            },
            addElementAndReset: function(index) {
              var element = this.createMetaData(index);
              this.getMeta().data.splice(index, 0, element);
              this.updateElement(element, index, true);
            },
            buildOrUpdateElements: function() {
              var me = this;
              var dataset = me.getDataset();
              var data = dataset.data || (dataset.data = []);
              if (me._data !== data) {
                if (me._data) {
                  unlistenArrayEvents(me._data, me);
                }
                if (data && Object.isExtensible(data)) {
                  listenArrayEvents(data, me);
                }
                me._data = data;
              }
              me.resyncElements();
            },
            _configure: function() {
              var me = this;
              me._config = helpers$1.merge(Object.create(null), [
                me.chart.options.datasets[me._type],
                me.getDataset()
              ], {
                merger: function(key, target, source) {
                  if (key !== "_meta" && key !== "data") {
                    helpers$1._merger(key, target, source);
                  }
                }
              });
            },
            _update: function(reset) {
              var me = this;
              me._configure();
              me._cachedDataOpts = null;
              me.update(reset);
            },
            update: helpers$1.noop,
            transition: function(easingValue) {
              var meta = this.getMeta();
              var elements2 = meta.data || [];
              var ilen = elements2.length;
              var i7 = 0;
              for (; i7 < ilen; ++i7) {
                elements2[i7].transition(easingValue);
              }
              if (meta.dataset) {
                meta.dataset.transition(easingValue);
              }
            },
            draw: function() {
              var meta = this.getMeta();
              var elements2 = meta.data || [];
              var ilen = elements2.length;
              var i7 = 0;
              if (meta.dataset) {
                meta.dataset.draw();
              }
              for (; i7 < ilen; ++i7) {
                elements2[i7].draw();
              }
            },
            getStyle: function(index) {
              var me = this;
              var meta = me.getMeta();
              var dataset = meta.dataset;
              var style;
              me._configure();
              if (dataset && index === void 0) {
                style = me._resolveDatasetElementOptions(dataset || {});
              } else {
                index = index || 0;
                style = me._resolveDataElementOptions(meta.data[index] || {}, index);
              }
              if (style.fill === false || style.fill === null) {
                style.backgroundColor = style.borderColor;
              }
              return style;
            },
            _resolveDatasetElementOptions: function(element, hover) {
              var me = this;
              var chart = me.chart;
              var datasetOpts = me._config;
              var custom = element.custom || {};
              var options2 = chart.options.elements[me.datasetElementType.prototype._type] || {};
              var elementOptions = me._datasetElementOptions;
              var values = {};
              var i7, ilen, key, readKey;
              var context = {
                chart,
                dataset: me.getDataset(),
                datasetIndex: me.index,
                hover
              };
              for (i7 = 0, ilen = elementOptions.length; i7 < ilen; ++i7) {
                key = elementOptions[i7];
                readKey = hover ? "hover" + key.charAt(0).toUpperCase() + key.slice(1) : key;
                values[key] = resolve([
                  custom[readKey],
                  datasetOpts[readKey],
                  options2[readKey]
                ], context);
              }
              return values;
            },
            _resolveDataElementOptions: function(element, index) {
              var me = this;
              var custom = element && element.custom;
              var cached = me._cachedDataOpts;
              if (cached && !custom) {
                return cached;
              }
              var chart = me.chart;
              var datasetOpts = me._config;
              var options2 = chart.options.elements[me.dataElementType.prototype._type] || {};
              var elementOptions = me._dataElementOptions;
              var values = {};
              var context = {
                chart,
                dataIndex: index,
                dataset: me.getDataset(),
                datasetIndex: me.index
              };
              var info = { cacheable: !custom };
              var keys, i7, ilen, key;
              custom = custom || {};
              if (helpers$1.isArray(elementOptions)) {
                for (i7 = 0, ilen = elementOptions.length; i7 < ilen; ++i7) {
                  key = elementOptions[i7];
                  values[key] = resolve([
                    custom[key],
                    datasetOpts[key],
                    options2[key]
                  ], context, index, info);
                }
              } else {
                keys = Object.keys(elementOptions);
                for (i7 = 0, ilen = keys.length; i7 < ilen; ++i7) {
                  key = keys[i7];
                  values[key] = resolve([
                    custom[key],
                    datasetOpts[elementOptions[key]],
                    datasetOpts[key],
                    options2[key]
                  ], context, index, info);
                }
              }
              if (info.cacheable) {
                me._cachedDataOpts = Object.freeze(values);
              }
              return values;
            },
            removeHoverStyle: function(element) {
              helpers$1.merge(element._model, element.$previousStyle || {});
              delete element.$previousStyle;
            },
            setHoverStyle: function(element) {
              var dataset = this.chart.data.datasets[element._datasetIndex];
              var index = element._index;
              var custom = element.custom || {};
              var model = element._model;
              var getHoverColor = helpers$1.getHoverColor;
              element.$previousStyle = {
                backgroundColor: model.backgroundColor,
                borderColor: model.borderColor,
                borderWidth: model.borderWidth
              };
              model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], void 0, index);
              model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], void 0, index);
              model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], void 0, index);
            },
            _removeDatasetHoverStyle: function() {
              var element = this.getMeta().dataset;
              if (element) {
                this.removeHoverStyle(element);
              }
            },
            _setDatasetHoverStyle: function() {
              var element = this.getMeta().dataset;
              var prev = {};
              var i7, ilen, key, keys, hoverOptions, model;
              if (!element) {
                return;
              }
              model = element._model;
              hoverOptions = this._resolveDatasetElementOptions(element, true);
              keys = Object.keys(hoverOptions);
              for (i7 = 0, ilen = keys.length; i7 < ilen; ++i7) {
                key = keys[i7];
                prev[key] = model[key];
                model[key] = hoverOptions[key];
              }
              element.$previousStyle = prev;
            },
            resyncElements: function() {
              var me = this;
              var meta = me.getMeta();
              var data = me.getDataset().data;
              var numMeta = meta.data.length;
              var numData = data.length;
              if (numData < numMeta) {
                meta.data.splice(numData, numMeta - numData);
              } else if (numData > numMeta) {
                me.insertElements(numMeta, numData - numMeta);
              }
            },
            insertElements: function(start, count) {
              for (var i7 = 0; i7 < count; ++i7) {
                this.addElementAndReset(start + i7);
              }
            },
            onDataPush: function() {
              var count = arguments.length;
              this.insertElements(this.getDataset().data.length - count, count);
            },
            onDataPop: function() {
              this.getMeta().data.pop();
            },
            onDataShift: function() {
              this.getMeta().data.shift();
            },
            onDataSplice: function(start, count) {
              this.getMeta().data.splice(start, count);
              this.insertElements(start, arguments.length - 2);
            },
            onDataUnshift: function() {
              this.insertElements(0, arguments.length);
            }
          });
          DatasetController.extend = helpers$1.inherits;
          var core_datasetController = DatasetController;
          var TAU = Math.PI * 2;
          core_defaults._set("global", {
            elements: {
              arc: {
                backgroundColor: core_defaults.global.defaultColor,
                borderColor: "#fff",
                borderWidth: 2,
                borderAlign: "center"
              }
            }
          });
          function clipArc(ctx, arc) {
            var startAngle = arc.startAngle;
            var endAngle = arc.endAngle;
            var pixelMargin = arc.pixelMargin;
            var angleMargin = pixelMargin / arc.outerRadius;
            var x2 = arc.x;
            var y2 = arc.y;
            ctx.beginPath();
            ctx.arc(x2, y2, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
            if (arc.innerRadius > pixelMargin) {
              angleMargin = pixelMargin / arc.innerRadius;
              ctx.arc(x2, y2, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
            } else {
              ctx.arc(x2, y2, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
            }
            ctx.closePath();
            ctx.clip();
          }
          function drawFullCircleBorders(ctx, vm, arc, inner) {
            var endAngle = arc.endAngle;
            var i7;
            if (inner) {
              arc.endAngle = arc.startAngle + TAU;
              clipArc(ctx, arc);
              arc.endAngle = endAngle;
              if (arc.endAngle === arc.startAngle && arc.fullCircles) {
                arc.endAngle += TAU;
                arc.fullCircles--;
              }
            }
            ctx.beginPath();
            ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
            for (i7 = 0; i7 < arc.fullCircles; ++i7) {
              ctx.stroke();
            }
            ctx.beginPath();
            ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
            for (i7 = 0; i7 < arc.fullCircles; ++i7) {
              ctx.stroke();
            }
          }
          function drawBorder(ctx, vm, arc) {
            var inner = vm.borderAlign === "inner";
            if (inner) {
              ctx.lineWidth = vm.borderWidth * 2;
              ctx.lineJoin = "round";
            } else {
              ctx.lineWidth = vm.borderWidth;
              ctx.lineJoin = "bevel";
            }
            if (arc.fullCircles) {
              drawFullCircleBorders(ctx, vm, arc, inner);
            }
            if (inner) {
              clipArc(ctx, arc);
            }
            ctx.beginPath();
            ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
            ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
            ctx.closePath();
            ctx.stroke();
          }
          var element_arc = core_element.extend({
            _type: "arc",
            inLabelRange: function(mouseX) {
              var vm = this._view;
              if (vm) {
                return Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2);
              }
              return false;
            },
            inRange: function(chartX, chartY) {
              var vm = this._view;
              if (vm) {
                var pointRelativePosition = helpers$1.getAngleFromPoint(vm, { x: chartX, y: chartY });
                var angle = pointRelativePosition.angle;
                var distance = pointRelativePosition.distance;
                var startAngle = vm.startAngle;
                var endAngle = vm.endAngle;
                while (endAngle < startAngle) {
                  endAngle += TAU;
                }
                while (angle > endAngle) {
                  angle -= TAU;
                }
                while (angle < startAngle) {
                  angle += TAU;
                }
                var betweenAngles = angle >= startAngle && angle <= endAngle;
                var withinRadius = distance >= vm.innerRadius && distance <= vm.outerRadius;
                return betweenAngles && withinRadius;
              }
              return false;
            },
            getCenterPoint: function() {
              var vm = this._view;
              var halfAngle = (vm.startAngle + vm.endAngle) / 2;
              var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
              return {
                x: vm.x + Math.cos(halfAngle) * halfRadius,
                y: vm.y + Math.sin(halfAngle) * halfRadius
              };
            },
            getArea: function() {
              var vm = this._view;
              return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
            },
            tooltipPosition: function() {
              var vm = this._view;
              var centreAngle = vm.startAngle + (vm.endAngle - vm.startAngle) / 2;
              var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;
              return {
                x: vm.x + Math.cos(centreAngle) * rangeFromCentre,
                y: vm.y + Math.sin(centreAngle) * rangeFromCentre
              };
            },
            draw: function() {
              var ctx = this._chart.ctx;
              var vm = this._view;
              var pixelMargin = vm.borderAlign === "inner" ? 0.33 : 0;
              var arc = {
                x: vm.x,
                y: vm.y,
                innerRadius: vm.innerRadius,
                outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
                pixelMargin,
                startAngle: vm.startAngle,
                endAngle: vm.endAngle,
                fullCircles: Math.floor(vm.circumference / TAU)
              };
              var i7;
              ctx.save();
              ctx.fillStyle = vm.backgroundColor;
              ctx.strokeStyle = vm.borderColor;
              if (arc.fullCircles) {
                arc.endAngle = arc.startAngle + TAU;
                ctx.beginPath();
                ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
                ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
                ctx.closePath();
                for (i7 = 0; i7 < arc.fullCircles; ++i7) {
                  ctx.fill();
                }
                arc.endAngle = arc.startAngle + vm.circumference % TAU;
              }
              ctx.beginPath();
              ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
              ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
              ctx.closePath();
              ctx.fill();
              if (vm.borderWidth) {
                drawBorder(ctx, vm, arc);
              }
              ctx.restore();
            }
          });
          var valueOrDefault$1 = helpers$1.valueOrDefault;
          var defaultColor = core_defaults.global.defaultColor;
          core_defaults._set("global", {
            elements: {
              line: {
                tension: 0.4,
                backgroundColor: defaultColor,
                borderWidth: 3,
                borderColor: defaultColor,
                borderCapStyle: "butt",
                borderDash: [],
                borderDashOffset: 0,
                borderJoinStyle: "miter",
                capBezierPoints: true,
                fill: true
              }
            }
          });
          var element_line = core_element.extend({
            _type: "line",
            draw: function() {
              var me = this;
              var vm = me._view;
              var ctx = me._chart.ctx;
              var spanGaps = vm.spanGaps;
              var points = me._children.slice();
              var globalDefaults = core_defaults.global;
              var globalOptionLineElements = globalDefaults.elements.line;
              var lastDrawnIndex = -1;
              var closePath = me._loop;
              var index, previous, currentVM;
              if (!points.length) {
                return;
              }
              if (me._loop) {
                for (index = 0; index < points.length; ++index) {
                  previous = helpers$1.previousItem(points, index);
                  if (!points[index]._view.skip && previous._view.skip) {
                    points = points.slice(index).concat(points.slice(0, index));
                    closePath = spanGaps;
                    break;
                  }
                }
                if (closePath) {
                  points.push(points[0]);
                }
              }
              ctx.save();
              ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;
              if (ctx.setLineDash) {
                ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
              }
              ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
              ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
              ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
              ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;
              ctx.beginPath();
              currentVM = points[0]._view;
              if (!currentVM.skip) {
                ctx.moveTo(currentVM.x, currentVM.y);
                lastDrawnIndex = 0;
              }
              for (index = 1; index < points.length; ++index) {
                currentVM = points[index]._view;
                previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];
                if (!currentVM.skip) {
                  if (lastDrawnIndex !== index - 1 && !spanGaps || lastDrawnIndex === -1) {
                    ctx.moveTo(currentVM.x, currentVM.y);
                  } else {
                    helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
                  }
                  lastDrawnIndex = index;
                }
              }
              if (closePath) {
                ctx.closePath();
              }
              ctx.stroke();
              ctx.restore();
            }
          });
          var valueOrDefault$2 = helpers$1.valueOrDefault;
          var defaultColor$1 = core_defaults.global.defaultColor;
          core_defaults._set("global", {
            elements: {
              point: {
                radius: 3,
                pointStyle: "circle",
                backgroundColor: defaultColor$1,
                borderColor: defaultColor$1,
                borderWidth: 1,
                hitRadius: 1,
                hoverRadius: 4,
                hoverBorderWidth: 1
              }
            }
          });
          function xRange(mouseX) {
            var vm = this._view;
            return vm ? Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius : false;
          }
          function yRange(mouseY) {
            var vm = this._view;
            return vm ? Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius : false;
          }
          var element_point = core_element.extend({
            _type: "point",
            inRange: function(mouseX, mouseY) {
              var vm = this._view;
              return vm ? Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2) < Math.pow(vm.hitRadius + vm.radius, 2) : false;
            },
            inLabelRange: xRange,
            inXRange: xRange,
            inYRange: yRange,
            getCenterPoint: function() {
              var vm = this._view;
              return {
                x: vm.x,
                y: vm.y
              };
            },
            getArea: function() {
              return Math.PI * Math.pow(this._view.radius, 2);
            },
            tooltipPosition: function() {
              var vm = this._view;
              return {
                x: vm.x,
                y: vm.y,
                padding: vm.radius + vm.borderWidth
              };
            },
            draw: function(chartArea) {
              var vm = this._view;
              var ctx = this._chart.ctx;
              var pointStyle = vm.pointStyle;
              var rotation = vm.rotation;
              var radius = vm.radius;
              var x2 = vm.x;
              var y2 = vm.y;
              var globalDefaults = core_defaults.global;
              var defaultColor2 = globalDefaults.defaultColor;
              if (vm.skip) {
                return;
              }
              if (chartArea === void 0 || helpers$1.canvas._isPointInArea(vm, chartArea)) {
                ctx.strokeStyle = vm.borderColor || defaultColor2;
                ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
                ctx.fillStyle = vm.backgroundColor || defaultColor2;
                helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x2, y2, rotation);
              }
            }
          });
          var defaultColor$2 = core_defaults.global.defaultColor;
          core_defaults._set("global", {
            elements: {
              rectangle: {
                backgroundColor: defaultColor$2,
                borderColor: defaultColor$2,
                borderSkipped: "bottom",
                borderWidth: 0
              }
            }
          });
          function isVertical(vm) {
            return vm && vm.width !== void 0;
          }
          function getBarBounds(vm) {
            var x1, x2, y1, y2, half;
            if (isVertical(vm)) {
              half = vm.width / 2;
              x1 = vm.x - half;
              x2 = vm.x + half;
              y1 = Math.min(vm.y, vm.base);
              y2 = Math.max(vm.y, vm.base);
            } else {
              half = vm.height / 2;
              x1 = Math.min(vm.x, vm.base);
              x2 = Math.max(vm.x, vm.base);
              y1 = vm.y - half;
              y2 = vm.y + half;
            }
            return {
              left: x1,
              top: y1,
              right: x2,
              bottom: y2
            };
          }
          function swap(orig, v1, v2) {
            return orig === v1 ? v2 : orig === v2 ? v1 : orig;
          }
          function parseBorderSkipped(vm) {
            var edge = vm.borderSkipped;
            var res = {};
            if (!edge) {
              return res;
            }
            if (vm.horizontal) {
              if (vm.base > vm.x) {
                edge = swap(edge, "left", "right");
              }
            } else if (vm.base < vm.y) {
              edge = swap(edge, "bottom", "top");
            }
            res[edge] = true;
            return res;
          }
          function parseBorderWidth(vm, maxW, maxH) {
            var value = vm.borderWidth;
            var skip2 = parseBorderSkipped(vm);
            var t5, r4, b2, l5;
            if (helpers$1.isObject(value)) {
              t5 = +value.top || 0;
              r4 = +value.right || 0;
              b2 = +value.bottom || 0;
              l5 = +value.left || 0;
            } else {
              t5 = r4 = b2 = l5 = +value || 0;
            }
            return {
              t: skip2.top || t5 < 0 ? 0 : t5 > maxH ? maxH : t5,
              r: skip2.right || r4 < 0 ? 0 : r4 > maxW ? maxW : r4,
              b: skip2.bottom || b2 < 0 ? 0 : b2 > maxH ? maxH : b2,
              l: skip2.left || l5 < 0 ? 0 : l5 > maxW ? maxW : l5
            };
          }
          function boundingRects(vm) {
            var bounds = getBarBounds(vm);
            var width = bounds.right - bounds.left;
            var height = bounds.bottom - bounds.top;
            var border = parseBorderWidth(vm, width / 2, height / 2);
            return {
              outer: {
                x: bounds.left,
                y: bounds.top,
                w: width,
                h: height
              },
              inner: {
                x: bounds.left + border.l,
                y: bounds.top + border.t,
                w: width - border.l - border.r,
                h: height - border.t - border.b
              }
            };
          }
          function inRange(vm, x2, y2) {
            var skipX = x2 === null;
            var skipY = y2 === null;
            var bounds = !vm || skipX && skipY ? false : getBarBounds(vm);
            return bounds && (skipX || x2 >= bounds.left && x2 <= bounds.right) && (skipY || y2 >= bounds.top && y2 <= bounds.bottom);
          }
          var element_rectangle = core_element.extend({
            _type: "rectangle",
            draw: function() {
              var ctx = this._chart.ctx;
              var vm = this._view;
              var rects = boundingRects(vm);
              var outer = rects.outer;
              var inner = rects.inner;
              ctx.fillStyle = vm.backgroundColor;
              ctx.fillRect(outer.x, outer.y, outer.w, outer.h);
              if (outer.w === inner.w && outer.h === inner.h) {
                return;
              }
              ctx.save();
              ctx.beginPath();
              ctx.rect(outer.x, outer.y, outer.w, outer.h);
              ctx.clip();
              ctx.fillStyle = vm.borderColor;
              ctx.rect(inner.x, inner.y, inner.w, inner.h);
              ctx.fill("evenodd");
              ctx.restore();
            },
            height: function() {
              var vm = this._view;
              return vm.base - vm.y;
            },
            inRange: function(mouseX, mouseY) {
              return inRange(this._view, mouseX, mouseY);
            },
            inLabelRange: function(mouseX, mouseY) {
              var vm = this._view;
              return isVertical(vm) ? inRange(vm, mouseX, null) : inRange(vm, null, mouseY);
            },
            inXRange: function(mouseX) {
              return inRange(this._view, mouseX, null);
            },
            inYRange: function(mouseY) {
              return inRange(this._view, null, mouseY);
            },
            getCenterPoint: function() {
              var vm = this._view;
              var x2, y2;
              if (isVertical(vm)) {
                x2 = vm.x;
                y2 = (vm.y + vm.base) / 2;
              } else {
                x2 = (vm.x + vm.base) / 2;
                y2 = vm.y;
              }
              return { x: x2, y: y2 };
            },
            getArea: function() {
              var vm = this._view;
              return isVertical(vm) ? vm.width * Math.abs(vm.y - vm.base) : vm.height * Math.abs(vm.x - vm.base);
            },
            tooltipPosition: function() {
              var vm = this._view;
              return {
                x: vm.x,
                y: vm.y
              };
            }
          });
          var elements = {};
          var Arc = element_arc;
          var Line = element_line;
          var Point2 = element_point;
          var Rectangle = element_rectangle;
          elements.Arc = Arc;
          elements.Line = Line;
          elements.Point = Point2;
          elements.Rectangle = Rectangle;
          var deprecated = helpers$1._deprecated;
          var valueOrDefault$3 = helpers$1.valueOrDefault;
          core_defaults._set("bar", {
            hover: {
              mode: "label"
            },
            scales: {
              xAxes: [{
                type: "category",
                offset: true,
                gridLines: {
                  offsetGridLines: true
                }
              }],
              yAxes: [{
                type: "linear"
              }]
            }
          });
          core_defaults._set("global", {
            datasets: {
              bar: {
                categoryPercentage: 0.8,
                barPercentage: 0.9
              }
            }
          });
          function computeMinSampleSize(scale2, pixels) {
            var min = scale2._length;
            var prev, curr, i7, ilen;
            for (i7 = 1, ilen = pixels.length; i7 < ilen; ++i7) {
              min = Math.min(min, Math.abs(pixels[i7] - pixels[i7 - 1]));
            }
            for (i7 = 0, ilen = scale2.getTicks().length; i7 < ilen; ++i7) {
              curr = scale2.getPixelForTick(i7);
              min = i7 > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
              prev = curr;
            }
            return min;
          }
          function computeFitCategoryTraits(index, ruler, options2) {
            var thickness = options2.barThickness;
            var count = ruler.stackCount;
            var curr = ruler.pixels[index];
            var min = helpers$1.isNullOrUndef(thickness) ? computeMinSampleSize(ruler.scale, ruler.pixels) : -1;
            var size, ratio;
            if (helpers$1.isNullOrUndef(thickness)) {
              size = min * options2.categoryPercentage;
              ratio = options2.barPercentage;
            } else {
              size = thickness * count;
              ratio = 1;
            }
            return {
              chunk: size / count,
              ratio,
              start: curr - size / 2
            };
          }
          function computeFlexCategoryTraits(index, ruler, options2) {
            var pixels = ruler.pixels;
            var curr = pixels[index];
            var prev = index > 0 ? pixels[index - 1] : null;
            var next = index < pixels.length - 1 ? pixels[index + 1] : null;
            var percent = options2.categoryPercentage;
            var start, size;
            if (prev === null) {
              prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
            }
            if (next === null) {
              next = curr + curr - prev;
            }
            start = curr - (curr - Math.min(prev, next)) / 2 * percent;
            size = Math.abs(next - prev) / 2 * percent;
            return {
              chunk: size / ruler.stackCount,
              ratio: options2.barPercentage,
              start
            };
          }
          var controller_bar = core_datasetController.extend({
            dataElementType: elements.Rectangle,
            _dataElementOptions: [
              "backgroundColor",
              "borderColor",
              "borderSkipped",
              "borderWidth",
              "barPercentage",
              "barThickness",
              "categoryPercentage",
              "maxBarThickness",
              "minBarLength"
            ],
            initialize: function() {
              var me = this;
              var meta, scaleOpts;
              core_datasetController.prototype.initialize.apply(me, arguments);
              meta = me.getMeta();
              meta.stack = me.getDataset().stack;
              meta.bar = true;
              scaleOpts = me._getIndexScale().options;
              deprecated("bar chart", scaleOpts.barPercentage, "scales.[x/y]Axes.barPercentage", "dataset.barPercentage");
              deprecated("bar chart", scaleOpts.barThickness, "scales.[x/y]Axes.barThickness", "dataset.barThickness");
              deprecated("bar chart", scaleOpts.categoryPercentage, "scales.[x/y]Axes.categoryPercentage", "dataset.categoryPercentage");
              deprecated("bar chart", me._getValueScale().options.minBarLength, "scales.[x/y]Axes.minBarLength", "dataset.minBarLength");
              deprecated("bar chart", scaleOpts.maxBarThickness, "scales.[x/y]Axes.maxBarThickness", "dataset.maxBarThickness");
            },
            update: function(reset) {
              var me = this;
              var rects = me.getMeta().data;
              var i7, ilen;
              me._ruler = me.getRuler();
              for (i7 = 0, ilen = rects.length; i7 < ilen; ++i7) {
                me.updateElement(rects[i7], i7, reset);
              }
            },
            updateElement: function(rectangle, index, reset) {
              var me = this;
              var meta = me.getMeta();
              var dataset = me.getDataset();
              var options2 = me._resolveDataElementOptions(rectangle, index);
              rectangle._xScale = me.getScaleForId(meta.xAxisID);
              rectangle._yScale = me.getScaleForId(meta.yAxisID);
              rectangle._datasetIndex = me.index;
              rectangle._index = index;
              rectangle._model = {
                backgroundColor: options2.backgroundColor,
                borderColor: options2.borderColor,
                borderSkipped: options2.borderSkipped,
                borderWidth: options2.borderWidth,
                datasetLabel: dataset.label,
                label: me.chart.data.labels[index]
              };
              if (helpers$1.isArray(dataset.data[index])) {
                rectangle._model.borderSkipped = null;
              }
              me._updateElementGeometry(rectangle, index, reset, options2);
              rectangle.pivot();
            },
            _updateElementGeometry: function(rectangle, index, reset, options2) {
              var me = this;
              var model = rectangle._model;
              var vscale = me._getValueScale();
              var base = vscale.getBasePixel();
              var horizontal = vscale.isHorizontal();
              var ruler = me._ruler || me.getRuler();
              var vpixels = me.calculateBarValuePixels(me.index, index, options2);
              var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options2);
              model.horizontal = horizontal;
              model.base = reset ? base : vpixels.base;
              model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
              model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
              model.height = horizontal ? ipixels.size : void 0;
              model.width = horizontal ? void 0 : ipixels.size;
            },
            _getStacks: function(last) {
              var me = this;
              var scale2 = me._getIndexScale();
              var metasets = scale2._getMatchingVisibleMetas(me._type);
              var stacked = scale2.options.stacked;
              var ilen = metasets.length;
              var stacks = [];
              var i7, meta;
              for (i7 = 0; i7 < ilen; ++i7) {
                meta = metasets[i7];
                if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === void 0 && meta.stack === void 0) {
                  stacks.push(meta.stack);
                }
                if (meta.index === last) {
                  break;
                }
              }
              return stacks;
            },
            getStackCount: function() {
              return this._getStacks().length;
            },
            getStackIndex: function(datasetIndex, name2) {
              var stacks = this._getStacks(datasetIndex);
              var index = name2 !== void 0 ? stacks.indexOf(name2) : -1;
              return index === -1 ? stacks.length - 1 : index;
            },
            getRuler: function() {
              var me = this;
              var scale2 = me._getIndexScale();
              var pixels = [];
              var i7, ilen;
              for (i7 = 0, ilen = me.getMeta().data.length; i7 < ilen; ++i7) {
                pixels.push(scale2.getPixelForValue(null, i7, me.index));
              }
              return {
                pixels,
                start: scale2._startPixel,
                end: scale2._endPixel,
                stackCount: me.getStackCount(),
                scale: scale2
              };
            },
            calculateBarValuePixels: function(datasetIndex, index, options2) {
              var me = this;
              var chart = me.chart;
              var scale2 = me._getValueScale();
              var isHorizontal = scale2.isHorizontal();
              var datasets = chart.data.datasets;
              var metasets = scale2._getMatchingVisibleMetas(me._type);
              var value = scale2._parseValue(datasets[datasetIndex].data[index]);
              var minBarLength = options2.minBarLength;
              var stacked = scale2.options.stacked;
              var stack = me.getMeta().stack;
              var start = value.start === void 0 ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
              var length = value.start === void 0 ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
              var ilen = metasets.length;
              var i7, imeta, ivalue, base, head, size, stackLength;
              if (stacked || stacked === void 0 && stack !== void 0) {
                for (i7 = 0; i7 < ilen; ++i7) {
                  imeta = metasets[i7];
                  if (imeta.index === datasetIndex) {
                    break;
                  }
                  if (imeta.stack === stack) {
                    stackLength = scale2._parseValue(datasets[imeta.index].data[index]);
                    ivalue = stackLength.start === void 0 ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;
                    if (value.min < 0 && ivalue < 0 || value.max >= 0 && ivalue > 0) {
                      start += ivalue;
                    }
                  }
                }
              }
              base = scale2.getPixelForValue(start);
              head = scale2.getPixelForValue(start + length);
              size = head - base;
              if (minBarLength !== void 0 && Math.abs(size) < minBarLength) {
                size = minBarLength;
                if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
                  head = base - minBarLength;
                } else {
                  head = base + minBarLength;
                }
              }
              return {
                size,
                base,
                head,
                center: head + size / 2
              };
            },
            calculateBarIndexPixels: function(datasetIndex, index, ruler, options2) {
              var me = this;
              var range = options2.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options2) : computeFitCategoryTraits(index, ruler, options2);
              var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
              var center = range.start + range.chunk * stackIndex + range.chunk / 2;
              var size = Math.min(valueOrDefault$3(options2.maxBarThickness, Infinity), range.chunk * range.ratio);
              return {
                base: center - size / 2,
                head: center + size / 2,
                center,
                size
              };
            },
            draw: function() {
              var me = this;
              var chart = me.chart;
              var scale2 = me._getValueScale();
              var rects = me.getMeta().data;
              var dataset = me.getDataset();
              var ilen = rects.length;
              var i7 = 0;
              helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);
              for (; i7 < ilen; ++i7) {
                var val = scale2._parseValue(dataset.data[i7]);
                if (!isNaN(val.min) && !isNaN(val.max)) {
                  rects[i7].draw();
                }
              }
              helpers$1.canvas.unclipArea(chart.ctx);
            },
            _resolveDataElementOptions: function() {
              var me = this;
              var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
              var indexOpts = me._getIndexScale().options;
              var valueOpts = me._getValueScale().options;
              values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
              values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
              values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
              values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
              values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);
              return values;
            }
          });
          var valueOrDefault$4 = helpers$1.valueOrDefault;
          var resolve$1 = helpers$1.options.resolve;
          core_defaults._set("bubble", {
            hover: {
              mode: "single"
            },
            scales: {
              xAxes: [{
                type: "linear",
                position: "bottom",
                id: "x-axis-0"
              }],
              yAxes: [{
                type: "linear",
                position: "left",
                id: "y-axis-0"
              }]
            },
            tooltips: {
              callbacks: {
                title: function() {
                  return "";
                },
                label: function(item, data) {
                  var datasetLabel = data.datasets[item.datasetIndex].label || "";
                  var dataPoint = data.datasets[item.datasetIndex].data[item.index];
                  return datasetLabel + ": (" + item.xLabel + ", " + item.yLabel + ", " + dataPoint.r + ")";
                }
              }
            }
          });
          var controller_bubble = core_datasetController.extend({
            dataElementType: elements.Point,
            _dataElementOptions: [
              "backgroundColor",
              "borderColor",
              "borderWidth",
              "hoverBackgroundColor",
              "hoverBorderColor",
              "hoverBorderWidth",
              "hoverRadius",
              "hitRadius",
              "pointStyle",
              "rotation"
            ],
            update: function(reset) {
              var me = this;
              var meta = me.getMeta();
              var points = meta.data;
              helpers$1.each(points, function(point, index) {
                me.updateElement(point, index, reset);
              });
            },
            updateElement: function(point, index, reset) {
              var me = this;
              var meta = me.getMeta();
              var custom = point.custom || {};
              var xScale = me.getScaleForId(meta.xAxisID);
              var yScale = me.getScaleForId(meta.yAxisID);
              var options2 = me._resolveDataElementOptions(point, index);
              var data = me.getDataset().data[index];
              var dsIndex = me.index;
              var x2 = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === "object" ? data : NaN, index, dsIndex);
              var y2 = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);
              point._xScale = xScale;
              point._yScale = yScale;
              point._options = options2;
              point._datasetIndex = dsIndex;
              point._index = index;
              point._model = {
                backgroundColor: options2.backgroundColor,
                borderColor: options2.borderColor,
                borderWidth: options2.borderWidth,
                hitRadius: options2.hitRadius,
                pointStyle: options2.pointStyle,
                rotation: options2.rotation,
                radius: reset ? 0 : options2.radius,
                skip: custom.skip || isNaN(x2) || isNaN(y2),
                x: x2,
                y: y2
              };
              point.pivot();
            },
            setHoverStyle: function(point) {
              var model = point._model;
              var options2 = point._options;
              var getHoverColor = helpers$1.getHoverColor;
              point.$previousStyle = {
                backgroundColor: model.backgroundColor,
                borderColor: model.borderColor,
                borderWidth: model.borderWidth,
                radius: model.radius
              };
              model.backgroundColor = valueOrDefault$4(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
              model.borderColor = valueOrDefault$4(options2.hoverBorderColor, getHoverColor(options2.borderColor));
              model.borderWidth = valueOrDefault$4(options2.hoverBorderWidth, options2.borderWidth);
              model.radius = options2.radius + options2.hoverRadius;
            },
            _resolveDataElementOptions: function(point, index) {
              var me = this;
              var chart = me.chart;
              var dataset = me.getDataset();
              var custom = point.custom || {};
              var data = dataset.data[index] || {};
              var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);
              var context = {
                chart,
                dataIndex: index,
                dataset,
                datasetIndex: me.index
              };
              if (me._cachedDataOpts === values) {
                values = helpers$1.extend({}, values);
              }
              values.radius = resolve$1([
                custom.radius,
                data.r,
                me._config.radius,
                chart.options.elements.point.radius
              ], context, index);
              return values;
            }
          });
          var valueOrDefault$5 = helpers$1.valueOrDefault;
          var PI$1 = Math.PI;
          var DOUBLE_PI$1 = PI$1 * 2;
          var HALF_PI$1 = PI$1 / 2;
          core_defaults._set("doughnut", {
            animation: {
              animateRotate: true,
              animateScale: false
            },
            hover: {
              mode: "single"
            },
            legendCallback: function(chart) {
              var list = document.createElement("ul");
              var data = chart.data;
              var datasets = data.datasets;
              var labels = data.labels;
              var i7, ilen, listItem, listItemSpan;
              list.setAttribute("class", chart.id + "-legend");
              if (datasets.length) {
                for (i7 = 0, ilen = datasets[0].data.length; i7 < ilen; ++i7) {
                  listItem = list.appendChild(document.createElement("li"));
                  listItemSpan = listItem.appendChild(document.createElement("span"));
                  listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i7];
                  if (labels[i7]) {
                    listItem.appendChild(document.createTextNode(labels[i7]));
                  }
                }
              }
              return list.outerHTML;
            },
            legend: {
              labels: {
                generateLabels: function(chart) {
                  var data = chart.data;
                  if (data.labels.length && data.datasets.length) {
                    return data.labels.map(function(label, i7) {
                      var meta = chart.getDatasetMeta(0);
                      var style = meta.controller.getStyle(i7);
                      return {
                        text: label,
                        fillStyle: style.backgroundColor,
                        strokeStyle: style.borderColor,
                        lineWidth: style.borderWidth,
                        hidden: isNaN(data.datasets[0].data[i7]) || meta.data[i7].hidden,
                        index: i7
                      };
                    });
                  }
                  return [];
                }
              },
              onClick: function(e8, legendItem) {
                var index = legendItem.index;
                var chart = this.chart;
                var i7, ilen, meta;
                for (i7 = 0, ilen = (chart.data.datasets || []).length; i7 < ilen; ++i7) {
                  meta = chart.getDatasetMeta(i7);
                  if (meta.data[index]) {
                    meta.data[index].hidden = !meta.data[index].hidden;
                  }
                }
                chart.update();
              }
            },
            cutoutPercentage: 50,
            rotation: -HALF_PI$1,
            circumference: DOUBLE_PI$1,
            tooltips: {
              callbacks: {
                title: function() {
                  return "";
                },
                label: function(tooltipItem, data) {
                  var dataLabel = data.labels[tooltipItem.index];
                  var value = ": " + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                  if (helpers$1.isArray(dataLabel)) {
                    dataLabel = dataLabel.slice();
                    dataLabel[0] += value;
                  } else {
                    dataLabel += value;
                  }
                  return dataLabel;
                }
              }
            }
          });
          var controller_doughnut = core_datasetController.extend({
            dataElementType: elements.Arc,
            linkScales: helpers$1.noop,
            _dataElementOptions: [
              "backgroundColor",
              "borderColor",
              "borderWidth",
              "borderAlign",
              "hoverBackgroundColor",
              "hoverBorderColor",
              "hoverBorderWidth"
            ],
            getRingIndex: function(datasetIndex) {
              var ringIndex = 0;
              for (var j = 0; j < datasetIndex; ++j) {
                if (this.chart.isDatasetVisible(j)) {
                  ++ringIndex;
                }
              }
              return ringIndex;
            },
            update: function(reset) {
              var me = this;
              var chart = me.chart;
              var chartArea = chart.chartArea;
              var opts = chart.options;
              var ratioX = 1;
              var ratioY = 1;
              var offsetX = 0;
              var offsetY = 0;
              var meta = me.getMeta();
              var arcs = meta.data;
              var cutout = opts.cutoutPercentage / 100 || 0;
              var circumference = opts.circumference;
              var chartWeight = me._getRingWeight(me.index);
              var maxWidth, maxHeight, i7, ilen;
              if (circumference < DOUBLE_PI$1) {
                var startAngle = opts.rotation % DOUBLE_PI$1;
                startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
                var endAngle = startAngle + circumference;
                var startX = Math.cos(startAngle);
                var startY = Math.sin(startAngle);
                var endX = Math.cos(endAngle);
                var endY = Math.sin(endAngle);
                var contains0 = startAngle <= 0 && endAngle >= 0 || endAngle >= DOUBLE_PI$1;
                var contains90 = startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1 || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
                var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
                var contains270 = startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1 || endAngle >= PI$1 + HALF_PI$1;
                var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
                var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
                var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
                var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
                ratioX = (maxX - minX) / 2;
                ratioY = (maxY - minY) / 2;
                offsetX = -(maxX + minX) / 2;
                offsetY = -(maxY + minY) / 2;
              }
              for (i7 = 0, ilen = arcs.length; i7 < ilen; ++i7) {
                arcs[i7]._options = me._resolveDataElementOptions(arcs[i7], i7);
              }
              chart.borderWidth = me.getMaxBorderWidth();
              maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
              maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
              chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
              chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
              chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
              chart.offsetX = offsetX * chart.outerRadius;
              chart.offsetY = offsetY * chart.outerRadius;
              meta.total = me.calculateTotal();
              me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
              me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);
              for (i7 = 0, ilen = arcs.length; i7 < ilen; ++i7) {
                me.updateElement(arcs[i7], i7, reset);
              }
            },
            updateElement: function(arc, index, reset) {
              var me = this;
              var chart = me.chart;
              var chartArea = chart.chartArea;
              var opts = chart.options;
              var animationOpts = opts.animation;
              var centerX = (chartArea.left + chartArea.right) / 2;
              var centerY = (chartArea.top + chartArea.bottom) / 2;
              var startAngle = opts.rotation;
              var endAngle = opts.rotation;
              var dataset = me.getDataset();
              var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
              var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
              var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
              var options2 = arc._options || {};
              helpers$1.extend(arc, {
                _datasetIndex: me.index,
                _index: index,
                _model: {
                  backgroundColor: options2.backgroundColor,
                  borderColor: options2.borderColor,
                  borderWidth: options2.borderWidth,
                  borderAlign: options2.borderAlign,
                  x: centerX + chart.offsetX,
                  y: centerY + chart.offsetY,
                  startAngle,
                  endAngle,
                  circumference,
                  outerRadius,
                  innerRadius,
                  label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
                }
              });
              var model = arc._model;
              if (!reset || !animationOpts.animateRotate) {
                if (index === 0) {
                  model.startAngle = opts.rotation;
                } else {
                  model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
                }
                model.endAngle = model.startAngle + model.circumference;
              }
              arc.pivot();
            },
            calculateTotal: function() {
              var dataset = this.getDataset();
              var meta = this.getMeta();
              var total = 0;
              var value;
              helpers$1.each(meta.data, function(element, index) {
                value = dataset.data[index];
                if (!isNaN(value) && !element.hidden) {
                  total += Math.abs(value);
                }
              });
              return total;
            },
            calculateCircumference: function(value) {
              var total = this.getMeta().total;
              if (total > 0 && !isNaN(value)) {
                return DOUBLE_PI$1 * (Math.abs(value) / total);
              }
              return 0;
            },
            getMaxBorderWidth: function(arcs) {
              var me = this;
              var max = 0;
              var chart = me.chart;
              var i7, ilen, meta, arc, controller, options2, borderWidth, hoverWidth;
              if (!arcs) {
                for (i7 = 0, ilen = chart.data.datasets.length; i7 < ilen; ++i7) {
                  if (chart.isDatasetVisible(i7)) {
                    meta = chart.getDatasetMeta(i7);
                    arcs = meta.data;
                    if (i7 !== me.index) {
                      controller = meta.controller;
                    }
                    break;
                  }
                }
              }
              if (!arcs) {
                return 0;
              }
              for (i7 = 0, ilen = arcs.length; i7 < ilen; ++i7) {
                arc = arcs[i7];
                if (controller) {
                  controller._configure();
                  options2 = controller._resolveDataElementOptions(arc, i7);
                } else {
                  options2 = arc._options;
                }
                if (options2.borderAlign !== "inner") {
                  borderWidth = options2.borderWidth;
                  hoverWidth = options2.hoverBorderWidth;
                  max = borderWidth > max ? borderWidth : max;
                  max = hoverWidth > max ? hoverWidth : max;
                }
              }
              return max;
            },
            setHoverStyle: function(arc) {
              var model = arc._model;
              var options2 = arc._options;
              var getHoverColor = helpers$1.getHoverColor;
              arc.$previousStyle = {
                backgroundColor: model.backgroundColor,
                borderColor: model.borderColor,
                borderWidth: model.borderWidth
              };
              model.backgroundColor = valueOrDefault$5(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
              model.borderColor = valueOrDefault$5(options2.hoverBorderColor, getHoverColor(options2.borderColor));
              model.borderWidth = valueOrDefault$5(options2.hoverBorderWidth, options2.borderWidth);
            },
            _getRingWeightOffset: function(datasetIndex) {
              var ringWeightOffset = 0;
              for (var i7 = 0; i7 < datasetIndex; ++i7) {
                if (this.chart.isDatasetVisible(i7)) {
                  ringWeightOffset += this._getRingWeight(i7);
                }
              }
              return ringWeightOffset;
            },
            _getRingWeight: function(dataSetIndex) {
              return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
            },
            _getVisibleDatasetWeightTotal: function() {
              return this._getRingWeightOffset(this.chart.data.datasets.length);
            }
          });
          core_defaults._set("horizontalBar", {
            hover: {
              mode: "index",
              axis: "y"
            },
            scales: {
              xAxes: [{
                type: "linear",
                position: "bottom"
              }],
              yAxes: [{
                type: "category",
                position: "left",
                offset: true,
                gridLines: {
                  offsetGridLines: true
                }
              }]
            },
            elements: {
              rectangle: {
                borderSkipped: "left"
              }
            },
            tooltips: {
              mode: "index",
              axis: "y"
            }
          });
          core_defaults._set("global", {
            datasets: {
              horizontalBar: {
                categoryPercentage: 0.8,
                barPercentage: 0.9
              }
            }
          });
          var controller_horizontalBar = controller_bar.extend({
            _getValueScaleId: function() {
              return this.getMeta().xAxisID;
            },
            _getIndexScaleId: function() {
              return this.getMeta().yAxisID;
            }
          });
          var valueOrDefault$6 = helpers$1.valueOrDefault;
          var resolve$2 = helpers$1.options.resolve;
          var isPointInArea = helpers$1.canvas._isPointInArea;
          core_defaults._set("line", {
            showLines: true,
            spanGaps: false,
            hover: {
              mode: "label"
            },
            scales: {
              xAxes: [{
                type: "category",
                id: "x-axis-0"
              }],
              yAxes: [{
                type: "linear",
                id: "y-axis-0"
              }]
            }
          });
          function scaleClip(scale2, halfBorderWidth) {
            var tickOpts = scale2 && scale2.options.ticks || {};
            var reverse = tickOpts.reverse;
            var min = tickOpts.min === void 0 ? halfBorderWidth : 0;
            var max = tickOpts.max === void 0 ? halfBorderWidth : 0;
            return {
              start: reverse ? max : min,
              end: reverse ? min : max
            };
          }
          function defaultClip(xScale, yScale, borderWidth) {
            var halfBorderWidth = borderWidth / 2;
            var x2 = scaleClip(xScale, halfBorderWidth);
            var y2 = scaleClip(yScale, halfBorderWidth);
            return {
              top: y2.end,
              right: x2.end,
              bottom: y2.start,
              left: x2.start
            };
          }
          function toClip(value) {
            var t5, r4, b2, l5;
            if (helpers$1.isObject(value)) {
              t5 = value.top;
              r4 = value.right;
              b2 = value.bottom;
              l5 = value.left;
            } else {
              t5 = r4 = b2 = l5 = value;
            }
            return {
              top: t5,
              right: r4,
              bottom: b2,
              left: l5
            };
          }
          var controller_line = core_datasetController.extend({
            datasetElementType: elements.Line,
            dataElementType: elements.Point,
            _datasetElementOptions: [
              "backgroundColor",
              "borderCapStyle",
              "borderColor",
              "borderDash",
              "borderDashOffset",
              "borderJoinStyle",
              "borderWidth",
              "cubicInterpolationMode",
              "fill"
            ],
            _dataElementOptions: {
              backgroundColor: "pointBackgroundColor",
              borderColor: "pointBorderColor",
              borderWidth: "pointBorderWidth",
              hitRadius: "pointHitRadius",
              hoverBackgroundColor: "pointHoverBackgroundColor",
              hoverBorderColor: "pointHoverBorderColor",
              hoverBorderWidth: "pointHoverBorderWidth",
              hoverRadius: "pointHoverRadius",
              pointStyle: "pointStyle",
              radius: "pointRadius",
              rotation: "pointRotation"
            },
            update: function(reset) {
              var me = this;
              var meta = me.getMeta();
              var line = meta.dataset;
              var points = meta.data || [];
              var options2 = me.chart.options;
              var config = me._config;
              var showLine = me._showLine = valueOrDefault$6(config.showLine, options2.showLines);
              var i7, ilen;
              me._xScale = me.getScaleForId(meta.xAxisID);
              me._yScale = me.getScaleForId(meta.yAxisID);
              if (showLine) {
                if (config.tension !== void 0 && config.lineTension === void 0) {
                  config.lineTension = config.tension;
                }
                line._scale = me._yScale;
                line._datasetIndex = me.index;
                line._children = points;
                line._model = me._resolveDatasetElementOptions(line);
                line.pivot();
              }
              for (i7 = 0, ilen = points.length; i7 < ilen; ++i7) {
                me.updateElement(points[i7], i7, reset);
              }
              if (showLine && line._model.tension !== 0) {
                me.updateBezierControlPoints();
              }
              for (i7 = 0, ilen = points.length; i7 < ilen; ++i7) {
                points[i7].pivot();
              }
            },
            updateElement: function(point, index, reset) {
              var me = this;
              var meta = me.getMeta();
              var custom = point.custom || {};
              var dataset = me.getDataset();
              var datasetIndex = me.index;
              var value = dataset.data[index];
              var xScale = me._xScale;
              var yScale = me._yScale;
              var lineModel = meta.dataset._model;
              var x2, y2;
              var options2 = me._resolveDataElementOptions(point, index);
              x2 = xScale.getPixelForValue(typeof value === "object" ? value : NaN, index, datasetIndex);
              y2 = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);
              point._xScale = xScale;
              point._yScale = yScale;
              point._options = options2;
              point._datasetIndex = datasetIndex;
              point._index = index;
              point._model = {
                x: x2,
                y: y2,
                skip: custom.skip || isNaN(x2) || isNaN(y2),
                radius: options2.radius,
                pointStyle: options2.pointStyle,
                rotation: options2.rotation,
                backgroundColor: options2.backgroundColor,
                borderColor: options2.borderColor,
                borderWidth: options2.borderWidth,
                tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
                steppedLine: lineModel ? lineModel.steppedLine : false,
                hitRadius: options2.hitRadius
              };
            },
            _resolveDatasetElementOptions: function(element) {
              var me = this;
              var config = me._config;
              var custom = element.custom || {};
              var options2 = me.chart.options;
              var lineOptions = options2.elements.line;
              var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
              values.spanGaps = valueOrDefault$6(config.spanGaps, options2.spanGaps);
              values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
              values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
              values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));
              return values;
            },
            calculatePointY: function(value, index, datasetIndex) {
              var me = this;
              var chart = me.chart;
              var yScale = me._yScale;
              var sumPos = 0;
              var sumNeg = 0;
              var i7, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;
              if (yScale.options.stacked) {
                rightValue = +yScale.getRightValue(value);
                metasets = chart._getSortedVisibleDatasetMetas();
                ilen = metasets.length;
                for (i7 = 0; i7 < ilen; ++i7) {
                  dsMeta = metasets[i7];
                  if (dsMeta.index === datasetIndex) {
                    break;
                  }
                  ds = chart.data.datasets[dsMeta.index];
                  if (dsMeta.type === "line" && dsMeta.yAxisID === yScale.id) {
                    stackedRightValue = +yScale.getRightValue(ds.data[index]);
                    if (stackedRightValue < 0) {
                      sumNeg += stackedRightValue || 0;
                    } else {
                      sumPos += stackedRightValue || 0;
                    }
                  }
                }
                if (rightValue < 0) {
                  return yScale.getPixelForValue(sumNeg + rightValue);
                }
                return yScale.getPixelForValue(sumPos + rightValue);
              }
              return yScale.getPixelForValue(value);
            },
            updateBezierControlPoints: function() {
              var me = this;
              var chart = me.chart;
              var meta = me.getMeta();
              var lineModel = meta.dataset._model;
              var area = chart.chartArea;
              var points = meta.data || [];
              var i7, ilen, model, controlPoints;
              if (lineModel.spanGaps) {
                points = points.filter(function(pt) {
                  return !pt._model.skip;
                });
              }
              function capControlPoint(pt, min, max) {
                return Math.max(Math.min(pt, max), min);
              }
              if (lineModel.cubicInterpolationMode === "monotone") {
                helpers$1.splineCurveMonotone(points);
              } else {
                for (i7 = 0, ilen = points.length; i7 < ilen; ++i7) {
                  model = points[i7]._model;
                  controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i7)._model, model, helpers$1.nextItem(points, i7)._model, lineModel.tension);
                  model.controlPointPreviousX = controlPoints.previous.x;
                  model.controlPointPreviousY = controlPoints.previous.y;
                  model.controlPointNextX = controlPoints.next.x;
                  model.controlPointNextY = controlPoints.next.y;
                }
              }
              if (chart.options.elements.line.capBezierPoints) {
                for (i7 = 0, ilen = points.length; i7 < ilen; ++i7) {
                  model = points[i7]._model;
                  if (isPointInArea(model, area)) {
                    if (i7 > 0 && isPointInArea(points[i7 - 1]._model, area)) {
                      model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
                      model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
                    }
                    if (i7 < points.length - 1 && isPointInArea(points[i7 + 1]._model, area)) {
                      model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
                      model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
                    }
                  }
                }
              }
            },
            draw: function() {
              var me = this;
              var chart = me.chart;
              var meta = me.getMeta();
              var points = meta.data || [];
              var area = chart.chartArea;
              var canvas2 = chart.canvas;
              var i7 = 0;
              var ilen = points.length;
              var clip;
              if (me._showLine) {
                clip = meta.dataset._model.clip;
                helpers$1.canvas.clipArea(chart.ctx, {
                  left: clip.left === false ? 0 : area.left - clip.left,
                  right: clip.right === false ? canvas2.width : area.right + clip.right,
                  top: clip.top === false ? 0 : area.top - clip.top,
                  bottom: clip.bottom === false ? canvas2.height : area.bottom + clip.bottom
                });
                meta.dataset.draw();
                helpers$1.canvas.unclipArea(chart.ctx);
              }
              for (; i7 < ilen; ++i7) {
                points[i7].draw(area);
              }
            },
            setHoverStyle: function(point) {
              var model = point._model;
              var options2 = point._options;
              var getHoverColor = helpers$1.getHoverColor;
              point.$previousStyle = {
                backgroundColor: model.backgroundColor,
                borderColor: model.borderColor,
                borderWidth: model.borderWidth,
                radius: model.radius
              };
              model.backgroundColor = valueOrDefault$6(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
              model.borderColor = valueOrDefault$6(options2.hoverBorderColor, getHoverColor(options2.borderColor));
              model.borderWidth = valueOrDefault$6(options2.hoverBorderWidth, options2.borderWidth);
              model.radius = valueOrDefault$6(options2.hoverRadius, options2.radius);
            }
          });
          var resolve$3 = helpers$1.options.resolve;
          core_defaults._set("polarArea", {
            scale: {
              type: "radialLinear",
              angleLines: {
                display: false
              },
              gridLines: {
                circular: true
              },
              pointLabels: {
                display: false
              },
              ticks: {
                beginAtZero: true
              }
            },
            animation: {
              animateRotate: true,
              animateScale: true
            },
            startAngle: -0.5 * Math.PI,
            legendCallback: function(chart) {
              var list = document.createElement("ul");
              var data = chart.data;
              var datasets = data.datasets;
              var labels = data.labels;
              var i7, ilen, listItem, listItemSpan;
              list.setAttribute("class", chart.id + "-legend");
              if (datasets.length) {
                for (i7 = 0, ilen = datasets[0].data.length; i7 < ilen; ++i7) {
                  listItem = list.appendChild(document.createElement("li"));
                  listItemSpan = listItem.appendChild(document.createElement("span"));
                  listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i7];
                  if (labels[i7]) {
                    listItem.appendChild(document.createTextNode(labels[i7]));
                  }
                }
              }
              return list.outerHTML;
            },
            legend: {
              labels: {
                generateLabels: function(chart) {
                  var data = chart.data;
                  if (data.labels.length && data.datasets.length) {
                    return data.labels.map(function(label, i7) {
                      var meta = chart.getDatasetMeta(0);
                      var style = meta.controller.getStyle(i7);
                      return {
                        text: label,
                        fillStyle: style.backgroundColor,
                        strokeStyle: style.borderColor,
                        lineWidth: style.borderWidth,
                        hidden: isNaN(data.datasets[0].data[i7]) || meta.data[i7].hidden,
                        index: i7
                      };
                    });
                  }
                  return [];
                }
              },
              onClick: function(e8, legendItem) {
                var index = legendItem.index;
                var chart = this.chart;
                var i7, ilen, meta;
                for (i7 = 0, ilen = (chart.data.datasets || []).length; i7 < ilen; ++i7) {
                  meta = chart.getDatasetMeta(i7);
                  meta.data[index].hidden = !meta.data[index].hidden;
                }
                chart.update();
              }
            },
            tooltips: {
              callbacks: {
                title: function() {
                  return "";
                },
                label: function(item, data) {
                  return data.labels[item.index] + ": " + item.yLabel;
                }
              }
            }
          });
          var controller_polarArea = core_datasetController.extend({
            dataElementType: elements.Arc,
            linkScales: helpers$1.noop,
            _dataElementOptions: [
              "backgroundColor",
              "borderColor",
              "borderWidth",
              "borderAlign",
              "hoverBackgroundColor",
              "hoverBorderColor",
              "hoverBorderWidth"
            ],
            _getIndexScaleId: function() {
              return this.chart.scale.id;
            },
            _getValueScaleId: function() {
              return this.chart.scale.id;
            },
            update: function(reset) {
              var me = this;
              var dataset = me.getDataset();
              var meta = me.getMeta();
              var start = me.chart.options.startAngle || 0;
              var starts = me._starts = [];
              var angles = me._angles = [];
              var arcs = meta.data;
              var i7, ilen, angle;
              me._updateRadius();
              meta.count = me.countVisibleElements();
              for (i7 = 0, ilen = dataset.data.length; i7 < ilen; i7++) {
                starts[i7] = start;
                angle = me._computeAngle(i7);
                angles[i7] = angle;
                start += angle;
              }
              for (i7 = 0, ilen = arcs.length; i7 < ilen; ++i7) {
                arcs[i7]._options = me._resolveDataElementOptions(arcs[i7], i7);
                me.updateElement(arcs[i7], i7, reset);
              }
            },
            _updateRadius: function() {
              var me = this;
              var chart = me.chart;
              var chartArea = chart.chartArea;
              var opts = chart.options;
              var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
              chart.outerRadius = Math.max(minSize / 2, 0);
              chart.innerRadius = Math.max(opts.cutoutPercentage ? chart.outerRadius / 100 * opts.cutoutPercentage : 1, 0);
              chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();
              me.outerRadius = chart.outerRadius - chart.radiusLength * me.index;
              me.innerRadius = me.outerRadius - chart.radiusLength;
            },
            updateElement: function(arc, index, reset) {
              var me = this;
              var chart = me.chart;
              var dataset = me.getDataset();
              var opts = chart.options;
              var animationOpts = opts.animation;
              var scale2 = chart.scale;
              var labels = chart.data.labels;
              var centerX = scale2.xCenter;
              var centerY = scale2.yCenter;
              var datasetStartAngle = opts.startAngle;
              var distance = arc.hidden ? 0 : scale2.getDistanceFromCenterForValue(dataset.data[index]);
              var startAngle = me._starts[index];
              var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);
              var resetRadius = animationOpts.animateScale ? 0 : scale2.getDistanceFromCenterForValue(dataset.data[index]);
              var options2 = arc._options || {};
              helpers$1.extend(arc, {
                _datasetIndex: me.index,
                _index: index,
                _scale: scale2,
                _model: {
                  backgroundColor: options2.backgroundColor,
                  borderColor: options2.borderColor,
                  borderWidth: options2.borderWidth,
                  borderAlign: options2.borderAlign,
                  x: centerX,
                  y: centerY,
                  innerRadius: 0,
                  outerRadius: reset ? resetRadius : distance,
                  startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
                  endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
                  label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
                }
              });
              arc.pivot();
            },
            countVisibleElements: function() {
              var dataset = this.getDataset();
              var meta = this.getMeta();
              var count = 0;
              helpers$1.each(meta.data, function(element, index) {
                if (!isNaN(dataset.data[index]) && !element.hidden) {
                  count++;
                }
              });
              return count;
            },
            setHoverStyle: function(arc) {
              var model = arc._model;
              var options2 = arc._options;
              var getHoverColor = helpers$1.getHoverColor;
              var valueOrDefault2 = helpers$1.valueOrDefault;
              arc.$previousStyle = {
                backgroundColor: model.backgroundColor,
                borderColor: model.borderColor,
                borderWidth: model.borderWidth
              };
              model.backgroundColor = valueOrDefault2(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
              model.borderColor = valueOrDefault2(options2.hoverBorderColor, getHoverColor(options2.borderColor));
              model.borderWidth = valueOrDefault2(options2.hoverBorderWidth, options2.borderWidth);
            },
            _computeAngle: function(index) {
              var me = this;
              var count = this.getMeta().count;
              var dataset = me.getDataset();
              var meta = me.getMeta();
              if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
                return 0;
              }
              var context = {
                chart: me.chart,
                dataIndex: index,
                dataset,
                datasetIndex: me.index
              };
              return resolve$3([
                me.chart.options.elements.arc.angle,
                2 * Math.PI / count
              ], context, index);
            }
          });
          core_defaults._set("pie", helpers$1.clone(core_defaults.doughnut));
          core_defaults._set("pie", {
            cutoutPercentage: 0
          });
          var controller_pie = controller_doughnut;
          var valueOrDefault$7 = helpers$1.valueOrDefault;
          core_defaults._set("radar", {
            spanGaps: false,
            scale: {
              type: "radialLinear"
            },
            elements: {
              line: {
                fill: "start",
                tension: 0
              }
            }
          });
          var controller_radar = core_datasetController.extend({
            datasetElementType: elements.Line,
            dataElementType: elements.Point,
            linkScales: helpers$1.noop,
            _datasetElementOptions: [
              "backgroundColor",
              "borderWidth",
              "borderColor",
              "borderCapStyle",
              "borderDash",
              "borderDashOffset",
              "borderJoinStyle",
              "fill"
            ],
            _dataElementOptions: {
              backgroundColor: "pointBackgroundColor",
              borderColor: "pointBorderColor",
              borderWidth: "pointBorderWidth",
              hitRadius: "pointHitRadius",
              hoverBackgroundColor: "pointHoverBackgroundColor",
              hoverBorderColor: "pointHoverBorderColor",
              hoverBorderWidth: "pointHoverBorderWidth",
              hoverRadius: "pointHoverRadius",
              pointStyle: "pointStyle",
              radius: "pointRadius",
              rotation: "pointRotation"
            },
            _getIndexScaleId: function() {
              return this.chart.scale.id;
            },
            _getValueScaleId: function() {
              return this.chart.scale.id;
            },
            update: function(reset) {
              var me = this;
              var meta = me.getMeta();
              var line = meta.dataset;
              var points = meta.data || [];
              var scale2 = me.chart.scale;
              var config = me._config;
              var i7, ilen;
              if (config.tension !== void 0 && config.lineTension === void 0) {
                config.lineTension = config.tension;
              }
              line._scale = scale2;
              line._datasetIndex = me.index;
              line._children = points;
              line._loop = true;
              line._model = me._resolveDatasetElementOptions(line);
              line.pivot();
              for (i7 = 0, ilen = points.length; i7 < ilen; ++i7) {
                me.updateElement(points[i7], i7, reset);
              }
              me.updateBezierControlPoints();
              for (i7 = 0, ilen = points.length; i7 < ilen; ++i7) {
                points[i7].pivot();
              }
            },
            updateElement: function(point, index, reset) {
              var me = this;
              var custom = point.custom || {};
              var dataset = me.getDataset();
              var scale2 = me.chart.scale;
              var pointPosition = scale2.getPointPositionForValue(index, dataset.data[index]);
              var options2 = me._resolveDataElementOptions(point, index);
              var lineModel = me.getMeta().dataset._model;
              var x2 = reset ? scale2.xCenter : pointPosition.x;
              var y2 = reset ? scale2.yCenter : pointPosition.y;
              point._scale = scale2;
              point._options = options2;
              point._datasetIndex = me.index;
              point._index = index;
              point._model = {
                x: x2,
                y: y2,
                skip: custom.skip || isNaN(x2) || isNaN(y2),
                radius: options2.radius,
                pointStyle: options2.pointStyle,
                rotation: options2.rotation,
                backgroundColor: options2.backgroundColor,
                borderColor: options2.borderColor,
                borderWidth: options2.borderWidth,
                tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),
                hitRadius: options2.hitRadius
              };
            },
            _resolveDatasetElementOptions: function() {
              var me = this;
              var config = me._config;
              var options2 = me.chart.options;
              var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);
              values.spanGaps = valueOrDefault$7(config.spanGaps, options2.spanGaps);
              values.tension = valueOrDefault$7(config.lineTension, options2.elements.line.tension);
              return values;
            },
            updateBezierControlPoints: function() {
              var me = this;
              var meta = me.getMeta();
              var area = me.chart.chartArea;
              var points = meta.data || [];
              var i7, ilen, model, controlPoints;
              if (meta.dataset._model.spanGaps) {
                points = points.filter(function(pt) {
                  return !pt._model.skip;
                });
              }
              function capControlPoint(pt, min, max) {
                return Math.max(Math.min(pt, max), min);
              }
              for (i7 = 0, ilen = points.length; i7 < ilen; ++i7) {
                model = points[i7]._model;
                controlPoints = helpers$1.splineCurve(helpers$1.previousItem(points, i7, true)._model, model, helpers$1.nextItem(points, i7, true)._model, model.tension);
                model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
                model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
                model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
                model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
              }
            },
            setHoverStyle: function(point) {
              var model = point._model;
              var options2 = point._options;
              var getHoverColor = helpers$1.getHoverColor;
              point.$previousStyle = {
                backgroundColor: model.backgroundColor,
                borderColor: model.borderColor,
                borderWidth: model.borderWidth,
                radius: model.radius
              };
              model.backgroundColor = valueOrDefault$7(options2.hoverBackgroundColor, getHoverColor(options2.backgroundColor));
              model.borderColor = valueOrDefault$7(options2.hoverBorderColor, getHoverColor(options2.borderColor));
              model.borderWidth = valueOrDefault$7(options2.hoverBorderWidth, options2.borderWidth);
              model.radius = valueOrDefault$7(options2.hoverRadius, options2.radius);
            }
          });
          core_defaults._set("scatter", {
            hover: {
              mode: "single"
            },
            scales: {
              xAxes: [{
                id: "x-axis-1",
                type: "linear",
                position: "bottom"
              }],
              yAxes: [{
                id: "y-axis-1",
                type: "linear",
                position: "left"
              }]
            },
            tooltips: {
              callbacks: {
                title: function() {
                  return "";
                },
                label: function(item) {
                  return "(" + item.xLabel + ", " + item.yLabel + ")";
                }
              }
            }
          });
          core_defaults._set("global", {
            datasets: {
              scatter: {
                showLine: false
              }
            }
          });
          var controller_scatter = controller_line;
          var controllers = {
            bar: controller_bar,
            bubble: controller_bubble,
            doughnut: controller_doughnut,
            horizontalBar: controller_horizontalBar,
            line: controller_line,
            polarArea: controller_polarArea,
            pie: controller_pie,
            radar: controller_radar,
            scatter: controller_scatter
          };
          function getRelativePosition(e8, chart) {
            if (e8.native) {
              return {
                x: e8.x,
                y: e8.y
              };
            }
            return helpers$1.getRelativePosition(e8, chart);
          }
          function parseVisibleItems(chart, handler) {
            var metasets = chart._getSortedVisibleDatasetMetas();
            var metadata, i7, j, ilen, jlen, element;
            for (i7 = 0, ilen = metasets.length; i7 < ilen; ++i7) {
              metadata = metasets[i7].data;
              for (j = 0, jlen = metadata.length; j < jlen; ++j) {
                element = metadata[j];
                if (!element._view.skip) {
                  handler(element);
                }
              }
            }
          }
          function getIntersectItems(chart, position) {
            var elements2 = [];
            parseVisibleItems(chart, function(element) {
              if (element.inRange(position.x, position.y)) {
                elements2.push(element);
              }
            });
            return elements2;
          }
          function getNearestItems(chart, position, intersect, distanceMetric) {
            var minDistance = Number.POSITIVE_INFINITY;
            var nearestItems = [];
            parseVisibleItems(chart, function(element) {
              if (intersect && !element.inRange(position.x, position.y)) {
                return;
              }
              var center = element.getCenterPoint();
              var distance = distanceMetric(position, center);
              if (distance < minDistance) {
                nearestItems = [element];
                minDistance = distance;
              } else if (distance === minDistance) {
                nearestItems.push(element);
              }
            });
            return nearestItems;
          }
          function getDistanceMetricForAxis(axis) {
            var useX = axis.indexOf("x") !== -1;
            var useY = axis.indexOf("y") !== -1;
            return function(pt1, pt2) {
              var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
              var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
              return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
            };
          }
          function indexMode(chart, e8, options2) {
            var position = getRelativePosition(e8, chart);
            options2.axis = options2.axis || "x";
            var distanceMetric = getDistanceMetricForAxis(options2.axis);
            var items = options2.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
            var elements2 = [];
            if (!items.length) {
              return [];
            }
            chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
              var element = meta.data[items[0]._index];
              if (element && !element._view.skip) {
                elements2.push(element);
              }
            });
            return elements2;
          }
          var core_interaction = {
            modes: {
              single: function(chart, e8) {
                var position = getRelativePosition(e8, chart);
                var elements2 = [];
                parseVisibleItems(chart, function(element) {
                  if (element.inRange(position.x, position.y)) {
                    elements2.push(element);
                    return elements2;
                  }
                });
                return elements2.slice(0, 1);
              },
              label: indexMode,
              index: indexMode,
              dataset: function(chart, e8, options2) {
                var position = getRelativePosition(e8, chart);
                options2.axis = options2.axis || "xy";
                var distanceMetric = getDistanceMetricForAxis(options2.axis);
                var items = options2.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
                if (items.length > 0) {
                  items = chart.getDatasetMeta(items[0]._datasetIndex).data;
                }
                return items;
              },
              "x-axis": function(chart, e8) {
                return indexMode(chart, e8, { intersect: false });
              },
              point: function(chart, e8) {
                var position = getRelativePosition(e8, chart);
                return getIntersectItems(chart, position);
              },
              nearest: function(chart, e8, options2) {
                var position = getRelativePosition(e8, chart);
                options2.axis = options2.axis || "xy";
                var distanceMetric = getDistanceMetricForAxis(options2.axis);
                return getNearestItems(chart, position, options2.intersect, distanceMetric);
              },
              x: function(chart, e8, options2) {
                var position = getRelativePosition(e8, chart);
                var items = [];
                var intersectsItem = false;
                parseVisibleItems(chart, function(element) {
                  if (element.inXRange(position.x)) {
                    items.push(element);
                  }
                  if (element.inRange(position.x, position.y)) {
                    intersectsItem = true;
                  }
                });
                if (options2.intersect && !intersectsItem) {
                  items = [];
                }
                return items;
              },
              y: function(chart, e8, options2) {
                var position = getRelativePosition(e8, chart);
                var items = [];
                var intersectsItem = false;
                parseVisibleItems(chart, function(element) {
                  if (element.inYRange(position.y)) {
                    items.push(element);
                  }
                  if (element.inRange(position.x, position.y)) {
                    intersectsItem = true;
                  }
                });
                if (options2.intersect && !intersectsItem) {
                  items = [];
                }
                return items;
              }
            }
          };
          var extend = helpers$1.extend;
          function filterByPosition(array, position) {
            return helpers$1.where(array, function(v2) {
              return v2.pos === position;
            });
          }
          function sortByWeight(array, reverse) {
            return array.sort(function(a3, b2) {
              var v0 = reverse ? b2 : a3;
              var v1 = reverse ? a3 : b2;
              return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
            });
          }
          function wrapBoxes(boxes) {
            var layoutBoxes = [];
            var i7, ilen, box;
            for (i7 = 0, ilen = (boxes || []).length; i7 < ilen; ++i7) {
              box = boxes[i7];
              layoutBoxes.push({
                index: i7,
                box,
                pos: box.position,
                horizontal: box.isHorizontal(),
                weight: box.weight
              });
            }
            return layoutBoxes;
          }
          function setLayoutDims(layouts, params) {
            var i7, ilen, layout;
            for (i7 = 0, ilen = layouts.length; i7 < ilen; ++i7) {
              layout = layouts[i7];
              layout.width = layout.horizontal ? layout.box.fullWidth && params.availableWidth : params.vBoxMaxWidth;
              layout.height = layout.horizontal && params.hBoxMaxHeight;
            }
          }
          function buildLayoutBoxes(boxes) {
            var layoutBoxes = wrapBoxes(boxes);
            var left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
            var right = sortByWeight(filterByPosition(layoutBoxes, "right"));
            var top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
            var bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
            return {
              leftAndTop: left.concat(top),
              rightAndBottom: right.concat(bottom),
              chartArea: filterByPosition(layoutBoxes, "chartArea"),
              vertical: left.concat(right),
              horizontal: top.concat(bottom)
            };
          }
          function getCombinedMax(maxPadding, chartArea, a3, b2) {
            return Math.max(maxPadding[a3], chartArea[a3]) + Math.max(maxPadding[b2], chartArea[b2]);
          }
          function updateDims(chartArea, params, layout) {
            var box = layout.box;
            var maxPadding = chartArea.maxPadding;
            var newWidth, newHeight;
            if (layout.size) {
              chartArea[layout.pos] -= layout.size;
            }
            layout.size = layout.horizontal ? box.height : box.width;
            chartArea[layout.pos] += layout.size;
            if (box.getPadding) {
              var boxPadding = box.getPadding();
              maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
              maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
              maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
              maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
            }
            newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right");
            newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom");
            if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
              chartArea.w = newWidth;
              chartArea.h = newHeight;
              var sizes = layout.horizontal ? [newWidth, chartArea.w] : [newHeight, chartArea.h];
              return sizes[0] !== sizes[1] && (!isNaN(sizes[0]) || !isNaN(sizes[1]));
            }
          }
          function handleMaxPadding(chartArea) {
            var maxPadding = chartArea.maxPadding;
            function updatePos(pos) {
              var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
              chartArea[pos] += change;
              return change;
            }
            chartArea.y += updatePos("top");
            chartArea.x += updatePos("left");
            updatePos("right");
            updatePos("bottom");
          }
          function getMargins(horizontal, chartArea) {
            var maxPadding = chartArea.maxPadding;
            function marginForPositions(positions) {
              var margin = { left: 0, top: 0, right: 0, bottom: 0 };
              positions.forEach(function(pos) {
                margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
              });
              return margin;
            }
            return horizontal ? marginForPositions(["left", "right"]) : marginForPositions(["top", "bottom"]);
          }
          function fitBoxes(boxes, chartArea, params) {
            var refitBoxes = [];
            var i7, ilen, layout, box, refit, changed;
            for (i7 = 0, ilen = boxes.length; i7 < ilen; ++i7) {
              layout = boxes[i7];
              box = layout.box;
              box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
              if (updateDims(chartArea, params, layout)) {
                changed = true;
                if (refitBoxes.length) {
                  refit = true;
                }
              }
              if (!box.fullWidth) {
                refitBoxes.push(layout);
              }
            }
            return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
          }
          function placeBoxes(boxes, chartArea, params) {
            var userPadding = params.padding;
            var x2 = chartArea.x;
            var y2 = chartArea.y;
            var i7, ilen, layout, box;
            for (i7 = 0, ilen = boxes.length; i7 < ilen; ++i7) {
              layout = boxes[i7];
              box = layout.box;
              if (layout.horizontal) {
                box.left = box.fullWidth ? userPadding.left : chartArea.left;
                box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
                box.top = y2;
                box.bottom = y2 + box.height;
                box.width = box.right - box.left;
                y2 = box.bottom;
              } else {
                box.left = x2;
                box.right = x2 + box.width;
                box.top = chartArea.top;
                box.bottom = chartArea.top + chartArea.h;
                box.height = box.bottom - box.top;
                x2 = box.right;
              }
            }
            chartArea.x = x2;
            chartArea.y = y2;
          }
          core_defaults._set("global", {
            layout: {
              padding: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
              }
            }
          });
          var core_layouts = {
            defaults: {},
            addBox: function(chart, item) {
              if (!chart.boxes) {
                chart.boxes = [];
              }
              item.fullWidth = item.fullWidth || false;
              item.position = item.position || "top";
              item.weight = item.weight || 0;
              item._layers = item._layers || function() {
                return [{
                  z: 0,
                  draw: function() {
                    item.draw.apply(item, arguments);
                  }
                }];
              };
              chart.boxes.push(item);
            },
            removeBox: function(chart, layoutItem) {
              var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
              if (index !== -1) {
                chart.boxes.splice(index, 1);
              }
            },
            configure: function(chart, item, options2) {
              var props = ["fullWidth", "position", "weight"];
              var ilen = props.length;
              var i7 = 0;
              var prop;
              for (; i7 < ilen; ++i7) {
                prop = props[i7];
                if (options2.hasOwnProperty(prop)) {
                  item[prop] = options2[prop];
                }
              }
            },
            update: function(chart, width, height) {
              if (!chart) {
                return;
              }
              var layoutOptions = chart.options.layout || {};
              var padding = helpers$1.options.toPadding(layoutOptions.padding);
              var availableWidth = width - padding.width;
              var availableHeight = height - padding.height;
              var boxes = buildLayoutBoxes(chart.boxes);
              var verticalBoxes = boxes.vertical;
              var horizontalBoxes = boxes.horizontal;
              var params = Object.freeze({
                outerWidth: width,
                outerHeight: height,
                padding,
                availableWidth,
                vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
                hBoxMaxHeight: availableHeight / 2
              });
              var chartArea = extend({
                maxPadding: extend({}, padding),
                w: availableWidth,
                h: availableHeight,
                x: padding.left,
                y: padding.top
              }, padding);
              setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
              fitBoxes(verticalBoxes, chartArea, params);
              if (fitBoxes(horizontalBoxes, chartArea, params)) {
                fitBoxes(verticalBoxes, chartArea, params);
              }
              handleMaxPadding(chartArea);
              placeBoxes(boxes.leftAndTop, chartArea, params);
              chartArea.x += chartArea.w;
              chartArea.y += chartArea.h;
              placeBoxes(boxes.rightAndBottom, chartArea, params);
              chart.chartArea = {
                left: chartArea.left,
                top: chartArea.top,
                right: chartArea.left + chartArea.w,
                bottom: chartArea.top + chartArea.h
              };
              helpers$1.each(boxes.chartArea, function(layout) {
                var box = layout.box;
                extend(box, chart.chartArea);
                box.update(chartArea.w, chartArea.h);
              });
            }
          };
          var platform_basic = {
            acquireContext: function(item) {
              if (item && item.canvas) {
                item = item.canvas;
              }
              return item && item.getContext("2d") || null;
            }
          };
          var platform_dom = "/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n	from { opacity: 0.99; }\r\n	to { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n	animation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n	position: absolute;\r\n	direction: ltr;\r\n	left: 0;\r\n	top: 0;\r\n	right: 0;\r\n	bottom: 0;\r\n	overflow: hidden;\r\n	pointer-events: none;\r\n	visibility: hidden;\r\n	z-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n	position: absolute;\r\n	width: 1000000px;\r\n	height: 1000000px;\r\n	left: 0;\r\n	top: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n	position: absolute;\r\n	width: 200%;\r\n	height: 200%;\r\n	left: 0;\r\n	top: 0;\r\n}\r\n";
          var platform_dom$1 = /* @__PURE__ */ Object.freeze({
            __proto__: null,
            "default": platform_dom
          });
          var stylesheet = getCjsExportFromNamespace(platform_dom$1);
          var EXPANDO_KEY = "$chartjs";
          var CSS_PREFIX = "chartjs-";
          var CSS_SIZE_MONITOR = CSS_PREFIX + "size-monitor";
          var CSS_RENDER_MONITOR = CSS_PREFIX + "render-monitor";
          var CSS_RENDER_ANIMATION = CSS_PREFIX + "render-animation";
          var ANIMATION_START_EVENTS = ["animationstart", "webkitAnimationStart"];
          var EVENT_TYPES = {
            touchstart: "mousedown",
            touchmove: "mousemove",
            touchend: "mouseup",
            pointerenter: "mouseenter",
            pointerdown: "mousedown",
            pointermove: "mousemove",
            pointerup: "mouseup",
            pointerleave: "mouseout",
            pointerout: "mouseout"
          };
          function readUsedSize(element, property) {
            var value = helpers$1.getStyle(element, property);
            var matches2 = value && value.match(/^(\d+)(\.\d+)?px$/);
            return matches2 ? Number(matches2[1]) : void 0;
          }
          function initCanvas(canvas2, config) {
            var style = canvas2.style;
            var renderHeight = canvas2.getAttribute("height");
            var renderWidth = canvas2.getAttribute("width");
            canvas2[EXPANDO_KEY] = {
              initial: {
                height: renderHeight,
                width: renderWidth,
                style: {
                  display: style.display,
                  height: style.height,
                  width: style.width
                }
              }
            };
            style.display = style.display || "block";
            if (renderWidth === null || renderWidth === "") {
              var displayWidth = readUsedSize(canvas2, "width");
              if (displayWidth !== void 0) {
                canvas2.width = displayWidth;
              }
            }
            if (renderHeight === null || renderHeight === "") {
              if (canvas2.style.height === "") {
                canvas2.height = canvas2.width / (config.options.aspectRatio || 2);
              } else {
                var displayHeight = readUsedSize(canvas2, "height");
                if (displayWidth !== void 0) {
                  canvas2.height = displayHeight;
                }
              }
            }
            return canvas2;
          }
          var supportsEventListenerOptions = function() {
            var supports = false;
            try {
              var options2 = Object.defineProperty({}, "passive", {
                get: function() {
                  supports = true;
                }
              });
              window.addEventListener("e", null, options2);
            } catch (e8) {
            }
            return supports;
          }();
          var eventListenerOptions = supportsEventListenerOptions ? { passive: true } : false;
          function addListener(node, type, listener) {
            node.addEventListener(type, listener, eventListenerOptions);
          }
          function removeListener(node, type, listener) {
            node.removeEventListener(type, listener, eventListenerOptions);
          }
          function createEvent(type, chart, x2, y2, nativeEvent) {
            return {
              type,
              chart,
              native: nativeEvent || null,
              x: x2 !== void 0 ? x2 : null,
              y: y2 !== void 0 ? y2 : null
            };
          }
          function fromNativeEvent(event, chart) {
            var type = EVENT_TYPES[event.type] || event.type;
            var pos = helpers$1.getRelativePosition(event, chart);
            return createEvent(type, chart, pos.x, pos.y, event);
          }
          function throttled(fn, thisArg) {
            var ticking = false;
            var args = [];
            return function() {
              args = Array.prototype.slice.call(arguments);
              thisArg = thisArg || this;
              if (!ticking) {
                ticking = true;
                helpers$1.requestAnimFrame.call(window, function() {
                  ticking = false;
                  fn.apply(thisArg, args);
                });
              }
            };
          }
          function createDiv(cls) {
            var el = document.createElement("div");
            el.className = cls || "";
            return el;
          }
          function createResizer(handler) {
            var maxSize = 1e6;
            var resizer = createDiv(CSS_SIZE_MONITOR);
            var expand = createDiv(CSS_SIZE_MONITOR + "-expand");
            var shrink = createDiv(CSS_SIZE_MONITOR + "-shrink");
            expand.appendChild(createDiv());
            shrink.appendChild(createDiv());
            resizer.appendChild(expand);
            resizer.appendChild(shrink);
            resizer._reset = function() {
              expand.scrollLeft = maxSize;
              expand.scrollTop = maxSize;
              shrink.scrollLeft = maxSize;
              shrink.scrollTop = maxSize;
            };
            var onScroll = function() {
              resizer._reset();
              handler();
            };
            addListener(expand, "scroll", onScroll.bind(expand, "expand"));
            addListener(shrink, "scroll", onScroll.bind(shrink, "shrink"));
            return resizer;
          }
          function watchForRender(node, handler) {
            var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
            var proxy = expando.renderProxy = function(e8) {
              if (e8.animationName === CSS_RENDER_ANIMATION) {
                handler();
              }
            };
            helpers$1.each(ANIMATION_START_EVENTS, function(type) {
              addListener(node, type, proxy);
            });
            expando.reflow = !!node.offsetParent;
            node.classList.add(CSS_RENDER_MONITOR);
          }
          function unwatchForRender(node) {
            var expando = node[EXPANDO_KEY] || {};
            var proxy = expando.renderProxy;
            if (proxy) {
              helpers$1.each(ANIMATION_START_EVENTS, function(type) {
                removeListener(node, type, proxy);
              });
              delete expando.renderProxy;
            }
            node.classList.remove(CSS_RENDER_MONITOR);
          }
          function addResizeListener(node, listener, chart) {
            var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
            var resizer = expando.resizer = createResizer(throttled(function() {
              if (expando.resizer) {
                var container = chart.options.maintainAspectRatio && node.parentNode;
                var w2 = container ? container.clientWidth : 0;
                listener(createEvent("resize", chart));
                if (container && container.clientWidth < w2 && chart.canvas) {
                  listener(createEvent("resize", chart));
                }
              }
            }));
            watchForRender(node, function() {
              if (expando.resizer) {
                var container = node.parentNode;
                if (container && container !== resizer.parentNode) {
                  container.insertBefore(resizer, container.firstChild);
                }
                resizer._reset();
              }
            });
          }
          function removeResizeListener(node) {
            var expando = node[EXPANDO_KEY] || {};
            var resizer = expando.resizer;
            delete expando.resizer;
            unwatchForRender(node);
            if (resizer && resizer.parentNode) {
              resizer.parentNode.removeChild(resizer);
            }
          }
          function injectCSS(rootNode, css2) {
            var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
            if (!expando.containsStyles) {
              expando.containsStyles = true;
              css2 = "/* Chart.js */\n" + css2;
              var style = document.createElement("style");
              style.setAttribute("type", "text/css");
              style.appendChild(document.createTextNode(css2));
              rootNode.appendChild(style);
            }
          }
          var platform_dom$2 = {
            disableCSSInjection: false,
            _enabled: typeof window !== "undefined" && typeof document !== "undefined",
            _ensureLoaded: function(canvas2) {
              if (!this.disableCSSInjection) {
                var root = canvas2.getRootNode ? canvas2.getRootNode() : document;
                var targetNode = root.host ? root : document.head;
                injectCSS(targetNode, stylesheet);
              }
            },
            acquireContext: function(item, config) {
              if (typeof item === "string") {
                item = document.getElementById(item);
              } else if (item.length) {
                item = item[0];
              }
              if (item && item.canvas) {
                item = item.canvas;
              }
              var context = item && item.getContext && item.getContext("2d");
              if (context && context.canvas === item) {
                this._ensureLoaded(item);
                initCanvas(item, config);
                return context;
              }
              return null;
            },
            releaseContext: function(context) {
              var canvas2 = context.canvas;
              if (!canvas2[EXPANDO_KEY]) {
                return;
              }
              var initial = canvas2[EXPANDO_KEY].initial;
              ["height", "width"].forEach(function(prop) {
                var value = initial[prop];
                if (helpers$1.isNullOrUndef(value)) {
                  canvas2.removeAttribute(prop);
                } else {
                  canvas2.setAttribute(prop, value);
                }
              });
              helpers$1.each(initial.style || {}, function(value, key) {
                canvas2.style[key] = value;
              });
              canvas2.width = canvas2.width;
              delete canvas2[EXPANDO_KEY];
            },
            addEventListener: function(chart, type, listener) {
              var canvas2 = chart.canvas;
              if (type === "resize") {
                addResizeListener(canvas2, listener, chart);
                return;
              }
              var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
              var proxies = expando.proxies || (expando.proxies = {});
              var proxy = proxies[chart.id + "_" + type] = function(event) {
                listener(fromNativeEvent(event, chart));
              };
              addListener(canvas2, type, proxy);
            },
            removeEventListener: function(chart, type, listener) {
              var canvas2 = chart.canvas;
              if (type === "resize") {
                removeResizeListener(canvas2);
                return;
              }
              var expando = listener[EXPANDO_KEY] || {};
              var proxies = expando.proxies || {};
              var proxy = proxies[chart.id + "_" + type];
              if (!proxy) {
                return;
              }
              removeListener(canvas2, type, proxy);
            }
          };
          helpers$1.addEvent = addListener;
          helpers$1.removeEvent = removeListener;
          var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;
          var platform = helpers$1.extend({
            initialize: function() {
            },
            acquireContext: function() {
            },
            releaseContext: function() {
            },
            addEventListener: function() {
            },
            removeEventListener: function() {
            }
          }, implementation);
          core_defaults._set("global", {
            plugins: {}
          });
          var core_plugins = {
            _plugins: [],
            _cacheId: 0,
            register: function(plugins2) {
              var p3 = this._plugins;
              [].concat(plugins2).forEach(function(plugin) {
                if (p3.indexOf(plugin) === -1) {
                  p3.push(plugin);
                }
              });
              this._cacheId++;
            },
            unregister: function(plugins2) {
              var p3 = this._plugins;
              [].concat(plugins2).forEach(function(plugin) {
                var idx = p3.indexOf(plugin);
                if (idx !== -1) {
                  p3.splice(idx, 1);
                }
              });
              this._cacheId++;
            },
            clear: function() {
              this._plugins = [];
              this._cacheId++;
            },
            count: function() {
              return this._plugins.length;
            },
            getAll: function() {
              return this._plugins;
            },
            notify: function(chart, hook, args) {
              var descriptors = this.descriptors(chart);
              var ilen = descriptors.length;
              var i7, descriptor, plugin, params, method;
              for (i7 = 0; i7 < ilen; ++i7) {
                descriptor = descriptors[i7];
                plugin = descriptor.plugin;
                method = plugin[hook];
                if (typeof method === "function") {
                  params = [chart].concat(args || []);
                  params.push(descriptor.options);
                  if (method.apply(plugin, params) === false) {
                    return false;
                  }
                }
              }
              return true;
            },
            descriptors: function(chart) {
              var cache = chart.$plugins || (chart.$plugins = {});
              if (cache.id === this._cacheId) {
                return cache.descriptors;
              }
              var plugins2 = [];
              var descriptors = [];
              var config = chart && chart.config || {};
              var options2 = config.options && config.options.plugins || {};
              this._plugins.concat(config.plugins || []).forEach(function(plugin) {
                var idx = plugins2.indexOf(plugin);
                if (idx !== -1) {
                  return;
                }
                var id = plugin.id;
                var opts = options2[id];
                if (opts === false) {
                  return;
                }
                if (opts === true) {
                  opts = helpers$1.clone(core_defaults.global.plugins[id]);
                }
                plugins2.push(plugin);
                descriptors.push({
                  plugin,
                  options: opts || {}
                });
              });
              cache.descriptors = descriptors;
              cache.id = this._cacheId;
              return descriptors;
            },
            _invalidate: function(chart) {
              delete chart.$plugins;
            }
          };
          var core_scaleService = {
            constructors: {},
            defaults: {},
            registerScaleType: function(type, scaleConstructor, scaleDefaults) {
              this.constructors[type] = scaleConstructor;
              this.defaults[type] = helpers$1.clone(scaleDefaults);
            },
            getScaleConstructor: function(type) {
              return this.constructors.hasOwnProperty(type) ? this.constructors[type] : void 0;
            },
            getScaleDefaults: function(type) {
              return this.defaults.hasOwnProperty(type) ? helpers$1.merge(Object.create(null), [core_defaults.scale, this.defaults[type]]) : {};
            },
            updateScaleDefaults: function(type, additions) {
              var me = this;
              if (me.defaults.hasOwnProperty(type)) {
                me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
              }
            },
            addScalesToLayout: function(chart) {
              helpers$1.each(chart.scales, function(scale2) {
                scale2.fullWidth = scale2.options.fullWidth;
                scale2.position = scale2.options.position;
                scale2.weight = scale2.options.weight;
                core_layouts.addBox(chart, scale2);
              });
            }
          };
          var valueOrDefault$8 = helpers$1.valueOrDefault;
          var getRtlHelper = helpers$1.rtl.getRtlAdapter;
          core_defaults._set("global", {
            tooltips: {
              enabled: true,
              custom: null,
              mode: "nearest",
              position: "average",
              intersect: true,
              backgroundColor: "rgba(0,0,0,0.8)",
              titleFontStyle: "bold",
              titleSpacing: 2,
              titleMarginBottom: 6,
              titleFontColor: "#fff",
              titleAlign: "left",
              bodySpacing: 2,
              bodyFontColor: "#fff",
              bodyAlign: "left",
              footerFontStyle: "bold",
              footerSpacing: 2,
              footerMarginTop: 6,
              footerFontColor: "#fff",
              footerAlign: "left",
              yPadding: 6,
              xPadding: 6,
              caretPadding: 2,
              caretSize: 5,
              cornerRadius: 6,
              multiKeyBackground: "#fff",
              displayColors: true,
              borderColor: "rgba(0,0,0,0)",
              borderWidth: 0,
              callbacks: {
                beforeTitle: helpers$1.noop,
                title: function(tooltipItems, data) {
                  var title2 = "";
                  var labels = data.labels;
                  var labelCount = labels ? labels.length : 0;
                  if (tooltipItems.length > 0) {
                    var item = tooltipItems[0];
                    if (item.label) {
                      title2 = item.label;
                    } else if (item.xLabel) {
                      title2 = item.xLabel;
                    } else if (labelCount > 0 && item.index < labelCount) {
                      title2 = labels[item.index];
                    }
                  }
                  return title2;
                },
                afterTitle: helpers$1.noop,
                beforeBody: helpers$1.noop,
                beforeLabel: helpers$1.noop,
                label: function(tooltipItem, data) {
                  var label = data.datasets[tooltipItem.datasetIndex].label || "";
                  if (label) {
                    label += ": ";
                  }
                  if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
                    label += tooltipItem.value;
                  } else {
                    label += tooltipItem.yLabel;
                  }
                  return label;
                },
                labelColor: function(tooltipItem, chart) {
                  var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
                  var activeElement = meta.data[tooltipItem.index];
                  var view = activeElement._view;
                  return {
                    borderColor: view.borderColor,
                    backgroundColor: view.backgroundColor
                  };
                },
                labelTextColor: function() {
                  return this._options.bodyFontColor;
                },
                afterLabel: helpers$1.noop,
                afterBody: helpers$1.noop,
                beforeFooter: helpers$1.noop,
                footer: helpers$1.noop,
                afterFooter: helpers$1.noop
              }
            }
          });
          var positioners = {
            average: function(elements2) {
              if (!elements2.length) {
                return false;
              }
              var i7, len;
              var x2 = 0;
              var y2 = 0;
              var count = 0;
              for (i7 = 0, len = elements2.length; i7 < len; ++i7) {
                var el = elements2[i7];
                if (el && el.hasValue()) {
                  var pos = el.tooltipPosition();
                  x2 += pos.x;
                  y2 += pos.y;
                  ++count;
                }
              }
              return {
                x: x2 / count,
                y: y2 / count
              };
            },
            nearest: function(elements2, eventPosition) {
              var x2 = eventPosition.x;
              var y2 = eventPosition.y;
              var minDistance = Number.POSITIVE_INFINITY;
              var i7, len, nearestElement;
              for (i7 = 0, len = elements2.length; i7 < len; ++i7) {
                var el = elements2[i7];
                if (el && el.hasValue()) {
                  var center = el.getCenterPoint();
                  var d3 = helpers$1.distanceBetweenPoints(eventPosition, center);
                  if (d3 < minDistance) {
                    minDistance = d3;
                    nearestElement = el;
                  }
                }
              }
              if (nearestElement) {
                var tp = nearestElement.tooltipPosition();
                x2 = tp.x;
                y2 = tp.y;
              }
              return {
                x: x2,
                y: y2
              };
            }
          };
          function pushOrConcat(base, toPush) {
            if (toPush) {
              if (helpers$1.isArray(toPush)) {
                Array.prototype.push.apply(base, toPush);
              } else {
                base.push(toPush);
              }
            }
            return base;
          }
          function splitNewlines(str) {
            if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) {
              return str.split("\n");
            }
            return str;
          }
          function createTooltipItem(element) {
            var xScale = element._xScale;
            var yScale = element._yScale || element._scale;
            var index = element._index;
            var datasetIndex = element._datasetIndex;
            var controller = element._chart.getDatasetMeta(datasetIndex).controller;
            var indexScale = controller._getIndexScale();
            var valueScale = controller._getValueScale();
            return {
              xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : "",
              yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : "",
              label: indexScale ? "" + indexScale.getLabelForIndex(index, datasetIndex) : "",
              value: valueScale ? "" + valueScale.getLabelForIndex(index, datasetIndex) : "",
              index,
              datasetIndex,
              x: element._model.x,
              y: element._model.y
            };
          }
          function getBaseModel(tooltipOpts) {
            var globalDefaults = core_defaults.global;
            return {
              xPadding: tooltipOpts.xPadding,
              yPadding: tooltipOpts.yPadding,
              xAlign: tooltipOpts.xAlign,
              yAlign: tooltipOpts.yAlign,
              rtl: tooltipOpts.rtl,
              textDirection: tooltipOpts.textDirection,
              bodyFontColor: tooltipOpts.bodyFontColor,
              _bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
              _bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
              _bodyAlign: tooltipOpts.bodyAlign,
              bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
              bodySpacing: tooltipOpts.bodySpacing,
              titleFontColor: tooltipOpts.titleFontColor,
              _titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
              _titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
              titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
              _titleAlign: tooltipOpts.titleAlign,
              titleSpacing: tooltipOpts.titleSpacing,
              titleMarginBottom: tooltipOpts.titleMarginBottom,
              footerFontColor: tooltipOpts.footerFontColor,
              _footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
              _footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
              footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
              _footerAlign: tooltipOpts.footerAlign,
              footerSpacing: tooltipOpts.footerSpacing,
              footerMarginTop: tooltipOpts.footerMarginTop,
              caretSize: tooltipOpts.caretSize,
              cornerRadius: tooltipOpts.cornerRadius,
              backgroundColor: tooltipOpts.backgroundColor,
              opacity: 0,
              legendColorBackground: tooltipOpts.multiKeyBackground,
              displayColors: tooltipOpts.displayColors,
              borderColor: tooltipOpts.borderColor,
              borderWidth: tooltipOpts.borderWidth
            };
          }
          function getTooltipSize(tooltip, model) {
            var ctx = tooltip._chart.ctx;
            var height = model.yPadding * 2;
            var width = 0;
            var body = model.body;
            var combinedBodyLength = body.reduce(function(count, bodyItem) {
              return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
            }, 0);
            combinedBodyLength += model.beforeBody.length + model.afterBody.length;
            var titleLineCount = model.title.length;
            var footerLineCount = model.footer.length;
            var titleFontSize = model.titleFontSize;
            var bodyFontSize = model.bodyFontSize;
            var footerFontSize = model.footerFontSize;
            height += titleLineCount * titleFontSize;
            height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0;
            height += titleLineCount ? model.titleMarginBottom : 0;
            height += combinedBodyLength * bodyFontSize;
            height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0;
            height += footerLineCount ? model.footerMarginTop : 0;
            height += footerLineCount * footerFontSize;
            height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0;
            var widthPadding = 0;
            var maxLineWidth = function(line) {
              width = Math.max(width, ctx.measureText(line).width + widthPadding);
            };
            ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
            helpers$1.each(model.title, maxLineWidth);
            ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
            helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);
            widthPadding = model.displayColors ? bodyFontSize + 2 : 0;
            helpers$1.each(body, function(bodyItem) {
              helpers$1.each(bodyItem.before, maxLineWidth);
              helpers$1.each(bodyItem.lines, maxLineWidth);
              helpers$1.each(bodyItem.after, maxLineWidth);
            });
            widthPadding = 0;
            ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
            helpers$1.each(model.footer, maxLineWidth);
            width += 2 * model.xPadding;
            return {
              width,
              height
            };
          }
          function determineAlignment(tooltip, size) {
            var model = tooltip._model;
            var chart = tooltip._chart;
            var chartArea = tooltip._chart.chartArea;
            var xAlign = "center";
            var yAlign = "center";
            if (model.y < size.height) {
              yAlign = "top";
            } else if (model.y > chart.height - size.height) {
              yAlign = "bottom";
            }
            var lf, rf;
            var olf, orf;
            var yf;
            var midX = (chartArea.left + chartArea.right) / 2;
            var midY = (chartArea.top + chartArea.bottom) / 2;
            if (yAlign === "center") {
              lf = function(x2) {
                return x2 <= midX;
              };
              rf = function(x2) {
                return x2 > midX;
              };
            } else {
              lf = function(x2) {
                return x2 <= size.width / 2;
              };
              rf = function(x2) {
                return x2 >= chart.width - size.width / 2;
              };
            }
            olf = function(x2) {
              return x2 + size.width + model.caretSize + model.caretPadding > chart.width;
            };
            orf = function(x2) {
              return x2 - size.width - model.caretSize - model.caretPadding < 0;
            };
            yf = function(y2) {
              return y2 <= midY ? "top" : "bottom";
            };
            if (lf(model.x)) {
              xAlign = "left";
              if (olf(model.x)) {
                xAlign = "center";
                yAlign = yf(model.y);
              }
            } else if (rf(model.x)) {
              xAlign = "right";
              if (orf(model.x)) {
                xAlign = "center";
                yAlign = yf(model.y);
              }
            }
            var opts = tooltip._options;
            return {
              xAlign: opts.xAlign ? opts.xAlign : xAlign,
              yAlign: opts.yAlign ? opts.yAlign : yAlign
            };
          }
          function getBackgroundPoint(vm, size, alignment, chart) {
            var x2 = vm.x;
            var y2 = vm.y;
            var caretSize = vm.caretSize;
            var caretPadding = vm.caretPadding;
            var cornerRadius = vm.cornerRadius;
            var xAlign = alignment.xAlign;
            var yAlign = alignment.yAlign;
            var paddingAndSize = caretSize + caretPadding;
            var radiusAndPadding = cornerRadius + caretPadding;
            if (xAlign === "right") {
              x2 -= size.width;
            } else if (xAlign === "center") {
              x2 -= size.width / 2;
              if (x2 + size.width > chart.width) {
                x2 = chart.width - size.width;
              }
              if (x2 < 0) {
                x2 = 0;
              }
            }
            if (yAlign === "top") {
              y2 += paddingAndSize;
            } else if (yAlign === "bottom") {
              y2 -= size.height + paddingAndSize;
            } else {
              y2 -= size.height / 2;
            }
            if (yAlign === "center") {
              if (xAlign === "left") {
                x2 += paddingAndSize;
              } else if (xAlign === "right") {
                x2 -= paddingAndSize;
              }
            } else if (xAlign === "left") {
              x2 -= radiusAndPadding;
            } else if (xAlign === "right") {
              x2 += radiusAndPadding;
            }
            return {
              x: x2,
              y: y2
            };
          }
          function getAlignedX(vm, align) {
            return align === "center" ? vm.x + vm.width / 2 : align === "right" ? vm.x + vm.width - vm.xPadding : vm.x + vm.xPadding;
          }
          function getBeforeAfterBodyLines(callback) {
            return pushOrConcat([], splitNewlines(callback));
          }
          var exports$4 = core_element.extend({
            initialize: function() {
              this._model = getBaseModel(this._options);
              this._lastActive = [];
            },
            getTitle: function() {
              var me = this;
              var opts = me._options;
              var callbacks = opts.callbacks;
              var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
              var title2 = callbacks.title.apply(me, arguments);
              var afterTitle = callbacks.afterTitle.apply(me, arguments);
              var lines = [];
              lines = pushOrConcat(lines, splitNewlines(beforeTitle));
              lines = pushOrConcat(lines, splitNewlines(title2));
              lines = pushOrConcat(lines, splitNewlines(afterTitle));
              return lines;
            },
            getBeforeBody: function() {
              return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
            },
            getBody: function(tooltipItems, data) {
              var me = this;
              var callbacks = me._options.callbacks;
              var bodyItems = [];
              helpers$1.each(tooltipItems, function(tooltipItem) {
                var bodyItem = {
                  before: [],
                  lines: [],
                  after: []
                };
                pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
                pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
                pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));
                bodyItems.push(bodyItem);
              });
              return bodyItems;
            },
            getAfterBody: function() {
              return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
            },
            getFooter: function() {
              var me = this;
              var callbacks = me._options.callbacks;
              var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
              var footer = callbacks.footer.apply(me, arguments);
              var afterFooter = callbacks.afterFooter.apply(me, arguments);
              var lines = [];
              lines = pushOrConcat(lines, splitNewlines(beforeFooter));
              lines = pushOrConcat(lines, splitNewlines(footer));
              lines = pushOrConcat(lines, splitNewlines(afterFooter));
              return lines;
            },
            update: function(changed) {
              var me = this;
              var opts = me._options;
              var existingModel = me._model;
              var model = me._model = getBaseModel(opts);
              var active = me._active;
              var data = me._data;
              var alignment = {
                xAlign: existingModel.xAlign,
                yAlign: existingModel.yAlign
              };
              var backgroundPoint = {
                x: existingModel.x,
                y: existingModel.y
              };
              var tooltipSize = {
                width: existingModel.width,
                height: existingModel.height
              };
              var tooltipPosition = {
                x: existingModel.caretX,
                y: existingModel.caretY
              };
              var i7, len;
              if (active.length) {
                model.opacity = 1;
                var labelColors = [];
                var labelTextColors = [];
                tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);
                var tooltipItems = [];
                for (i7 = 0, len = active.length; i7 < len; ++i7) {
                  tooltipItems.push(createTooltipItem(active[i7]));
                }
                if (opts.filter) {
                  tooltipItems = tooltipItems.filter(function(a3) {
                    return opts.filter(a3, data);
                  });
                }
                if (opts.itemSort) {
                  tooltipItems = tooltipItems.sort(function(a3, b2) {
                    return opts.itemSort(a3, b2, data);
                  });
                }
                helpers$1.each(tooltipItems, function(tooltipItem) {
                  labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
                  labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
                });
                model.title = me.getTitle(tooltipItems, data);
                model.beforeBody = me.getBeforeBody(tooltipItems, data);
                model.body = me.getBody(tooltipItems, data);
                model.afterBody = me.getAfterBody(tooltipItems, data);
                model.footer = me.getFooter(tooltipItems, data);
                model.x = tooltipPosition.x;
                model.y = tooltipPosition.y;
                model.caretPadding = opts.caretPadding;
                model.labelColors = labelColors;
                model.labelTextColors = labelTextColors;
                model.dataPoints = tooltipItems;
                tooltipSize = getTooltipSize(this, model);
                alignment = determineAlignment(this, tooltipSize);
                backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
              } else {
                model.opacity = 0;
              }
              model.xAlign = alignment.xAlign;
              model.yAlign = alignment.yAlign;
              model.x = backgroundPoint.x;
              model.y = backgroundPoint.y;
              model.width = tooltipSize.width;
              model.height = tooltipSize.height;
              model.caretX = tooltipPosition.x;
              model.caretY = tooltipPosition.y;
              me._model = model;
              if (changed && opts.custom) {
                opts.custom.call(me, model);
              }
              return me;
            },
            drawCaret: function(tooltipPoint, size) {
              var ctx = this._chart.ctx;
              var vm = this._view;
              var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);
              ctx.lineTo(caretPosition.x1, caretPosition.y1);
              ctx.lineTo(caretPosition.x2, caretPosition.y2);
              ctx.lineTo(caretPosition.x3, caretPosition.y3);
            },
            getCaretPosition: function(tooltipPoint, size, vm) {
              var x1, x2, x3, y1, y2, y3;
              var caretSize = vm.caretSize;
              var cornerRadius = vm.cornerRadius;
              var xAlign = vm.xAlign;
              var yAlign = vm.yAlign;
              var ptX = tooltipPoint.x;
              var ptY = tooltipPoint.y;
              var width = size.width;
              var height = size.height;
              if (yAlign === "center") {
                y2 = ptY + height / 2;
                if (xAlign === "left") {
                  x1 = ptX;
                  x2 = x1 - caretSize;
                  x3 = x1;
                  y1 = y2 + caretSize;
                  y3 = y2 - caretSize;
                } else {
                  x1 = ptX + width;
                  x2 = x1 + caretSize;
                  x3 = x1;
                  y1 = y2 - caretSize;
                  y3 = y2 + caretSize;
                }
              } else {
                if (xAlign === "left") {
                  x2 = ptX + cornerRadius + caretSize;
                  x1 = x2 - caretSize;
                  x3 = x2 + caretSize;
                } else if (xAlign === "right") {
                  x2 = ptX + width - cornerRadius - caretSize;
                  x1 = x2 - caretSize;
                  x3 = x2 + caretSize;
                } else {
                  x2 = vm.caretX;
                  x1 = x2 - caretSize;
                  x3 = x2 + caretSize;
                }
                if (yAlign === "top") {
                  y1 = ptY;
                  y2 = y1 - caretSize;
                  y3 = y1;
                } else {
                  y1 = ptY + height;
                  y2 = y1 + caretSize;
                  y3 = y1;
                  var tmp = x3;
                  x3 = x1;
                  x1 = tmp;
                }
              }
              return { x1, x2, x3, y1, y2, y3 };
            },
            drawTitle: function(pt, vm, ctx) {
              var title2 = vm.title;
              var length = title2.length;
              var titleFontSize, titleSpacing, i7;
              if (length) {
                var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
                pt.x = getAlignedX(vm, vm._titleAlign);
                ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
                ctx.textBaseline = "middle";
                titleFontSize = vm.titleFontSize;
                titleSpacing = vm.titleSpacing;
                ctx.fillStyle = vm.titleFontColor;
                ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);
                for (i7 = 0; i7 < length; ++i7) {
                  ctx.fillText(title2[i7], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
                  pt.y += titleFontSize + titleSpacing;
                  if (i7 + 1 === length) {
                    pt.y += vm.titleMarginBottom - titleSpacing;
                  }
                }
              }
            },
            drawBody: function(pt, vm, ctx) {
              var bodyFontSize = vm.bodyFontSize;
              var bodySpacing = vm.bodySpacing;
              var bodyAlign = vm._bodyAlign;
              var body = vm.body;
              var drawColorBoxes = vm.displayColors;
              var xLinePadding = 0;
              var colorX = drawColorBoxes ? getAlignedX(vm, "left") : 0;
              var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
              var fillLineOfText = function(line) {
                ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
                pt.y += bodyFontSize + bodySpacing;
              };
              var bodyItem, textColor, labelColors, lines, i7, j, ilen, jlen;
              var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
              ctx.textAlign = bodyAlign;
              ctx.textBaseline = "middle";
              ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);
              pt.x = getAlignedX(vm, bodyAlignForCalculation);
              ctx.fillStyle = vm.bodyFontColor;
              helpers$1.each(vm.beforeBody, fillLineOfText);
              xLinePadding = drawColorBoxes && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? bodyFontSize / 2 + 1 : bodyFontSize + 2 : 0;
              for (i7 = 0, ilen = body.length; i7 < ilen; ++i7) {
                bodyItem = body[i7];
                textColor = vm.labelTextColors[i7];
                labelColors = vm.labelColors[i7];
                ctx.fillStyle = textColor;
                helpers$1.each(bodyItem.before, fillLineOfText);
                lines = bodyItem.lines;
                for (j = 0, jlen = lines.length; j < jlen; ++j) {
                  if (drawColorBoxes) {
                    var rtlColorX = rtlHelper.x(colorX);
                    ctx.fillStyle = vm.legendColorBackground;
                    ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
                    ctx.lineWidth = 1;
                    ctx.strokeStyle = labelColors.borderColor;
                    ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);
                    ctx.fillStyle = labelColors.backgroundColor;
                    ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
                    ctx.fillStyle = textColor;
                  }
                  fillLineOfText(lines[j]);
                }
                helpers$1.each(bodyItem.after, fillLineOfText);
              }
              xLinePadding = 0;
              helpers$1.each(vm.afterBody, fillLineOfText);
              pt.y -= bodySpacing;
            },
            drawFooter: function(pt, vm, ctx) {
              var footer = vm.footer;
              var length = footer.length;
              var footerFontSize, i7;
              if (length) {
                var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);
                pt.x = getAlignedX(vm, vm._footerAlign);
                pt.y += vm.footerMarginTop;
                ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
                ctx.textBaseline = "middle";
                footerFontSize = vm.footerFontSize;
                ctx.fillStyle = vm.footerFontColor;
                ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);
                for (i7 = 0; i7 < length; ++i7) {
                  ctx.fillText(footer[i7], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
                  pt.y += footerFontSize + vm.footerSpacing;
                }
              }
            },
            drawBackground: function(pt, vm, ctx, tooltipSize) {
              ctx.fillStyle = vm.backgroundColor;
              ctx.strokeStyle = vm.borderColor;
              ctx.lineWidth = vm.borderWidth;
              var xAlign = vm.xAlign;
              var yAlign = vm.yAlign;
              var x2 = pt.x;
              var y2 = pt.y;
              var width = tooltipSize.width;
              var height = tooltipSize.height;
              var radius = vm.cornerRadius;
              ctx.beginPath();
              ctx.moveTo(x2 + radius, y2);
              if (yAlign === "top") {
                this.drawCaret(pt, tooltipSize);
              }
              ctx.lineTo(x2 + width - radius, y2);
              ctx.quadraticCurveTo(x2 + width, y2, x2 + width, y2 + radius);
              if (yAlign === "center" && xAlign === "right") {
                this.drawCaret(pt, tooltipSize);
              }
              ctx.lineTo(x2 + width, y2 + height - radius);
              ctx.quadraticCurveTo(x2 + width, y2 + height, x2 + width - radius, y2 + height);
              if (yAlign === "bottom") {
                this.drawCaret(pt, tooltipSize);
              }
              ctx.lineTo(x2 + radius, y2 + height);
              ctx.quadraticCurveTo(x2, y2 + height, x2, y2 + height - radius);
              if (yAlign === "center" && xAlign === "left") {
                this.drawCaret(pt, tooltipSize);
              }
              ctx.lineTo(x2, y2 + radius);
              ctx.quadraticCurveTo(x2, y2, x2 + radius, y2);
              ctx.closePath();
              ctx.fill();
              if (vm.borderWidth > 0) {
                ctx.stroke();
              }
            },
            draw: function() {
              var ctx = this._chart.ctx;
              var vm = this._view;
              if (vm.opacity === 0) {
                return;
              }
              var tooltipSize = {
                width: vm.width,
                height: vm.height
              };
              var pt = {
                x: vm.x,
                y: vm.y
              };
              var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;
              var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;
              if (this._options.enabled && hasTooltipContent) {
                ctx.save();
                ctx.globalAlpha = opacity;
                this.drawBackground(pt, vm, ctx, tooltipSize);
                pt.y += vm.yPadding;
                helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);
                this.drawTitle(pt, vm, ctx);
                this.drawBody(pt, vm, ctx);
                this.drawFooter(pt, vm, ctx);
                helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);
                ctx.restore();
              }
            },
            handleEvent: function(e8) {
              var me = this;
              var options2 = me._options;
              var changed = false;
              me._lastActive = me._lastActive || [];
              if (e8.type === "mouseout") {
                me._active = [];
              } else {
                me._active = me._chart.getElementsAtEventForMode(e8, options2.mode, options2);
                if (options2.reverse) {
                  me._active.reverse();
                }
              }
              changed = !helpers$1.arrayEquals(me._active, me._lastActive);
              if (changed) {
                me._lastActive = me._active;
                if (options2.enabled || options2.custom) {
                  me._eventPosition = {
                    x: e8.x,
                    y: e8.y
                  };
                  me.update(true);
                  me.pivot();
                }
              }
              return changed;
            }
          });
          var positioners_1 = positioners;
          var core_tooltip = exports$4;
          core_tooltip.positioners = positioners_1;
          var valueOrDefault$9 = helpers$1.valueOrDefault;
          core_defaults._set("global", {
            elements: {},
            events: [
              "mousemove",
              "mouseout",
              "click",
              "touchstart",
              "touchmove"
            ],
            hover: {
              onHover: null,
              mode: "nearest",
              intersect: true,
              animationDuration: 400
            },
            onClick: null,
            maintainAspectRatio: true,
            responsive: true,
            responsiveAnimationDuration: 0
          });
          function mergeScaleConfig() {
            return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
              merger: function(key, target, source, options2) {
                if (key === "xAxes" || key === "yAxes") {
                  var slen = source[key].length;
                  var i7, type, scale2;
                  if (!target[key]) {
                    target[key] = [];
                  }
                  for (i7 = 0; i7 < slen; ++i7) {
                    scale2 = source[key][i7];
                    type = valueOrDefault$9(scale2.type, key === "xAxes" ? "category" : "linear");
                    if (i7 >= target[key].length) {
                      target[key].push({});
                    }
                    if (!target[key][i7].type || scale2.type && scale2.type !== target[key][i7].type) {
                      helpers$1.merge(target[key][i7], [core_scaleService.getScaleDefaults(type), scale2]);
                    } else {
                      helpers$1.merge(target[key][i7], scale2);
                    }
                  }
                } else {
                  helpers$1._merger(key, target, source, options2);
                }
              }
            });
          }
          function mergeConfig() {
            return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
              merger: function(key, target, source, options2) {
                var tval = target[key] || Object.create(null);
                var sval = source[key];
                if (key === "scales") {
                  target[key] = mergeScaleConfig(tval, sval);
                } else if (key === "scale") {
                  target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
                } else {
                  helpers$1._merger(key, target, source, options2);
                }
              }
            });
          }
          function initConfig(config) {
            config = config || Object.create(null);
            var data = config.data = config.data || {};
            data.datasets = data.datasets || [];
            data.labels = data.labels || [];
            config.options = mergeConfig(core_defaults.global, core_defaults[config.type], config.options || {});
            return config;
          }
          function updateConfig(chart) {
            var newOptions = chart.options;
            helpers$1.each(chart.scales, function(scale2) {
              core_layouts.removeBox(chart, scale2);
            });
            newOptions = mergeConfig(core_defaults.global, core_defaults[chart.config.type], newOptions);
            chart.options = chart.config.options = newOptions;
            chart.ensureScalesHaveIDs();
            chart.buildOrUpdateScales();
            chart.tooltip._options = newOptions.tooltips;
            chart.tooltip.initialize();
          }
          function nextAvailableScaleId(axesOpts, prefix, index) {
            var id;
            var hasId = function(obj) {
              return obj.id === id;
            };
            do {
              id = prefix + index++;
            } while (helpers$1.findIndex(axesOpts, hasId) >= 0);
            return id;
          }
          function positionIsHorizontal(position) {
            return position === "top" || position === "bottom";
          }
          function compare2Level(l1, l22) {
            return function(a3, b2) {
              return a3[l1] === b2[l1] ? a3[l22] - b2[l22] : a3[l1] - b2[l1];
            };
          }
          var Chart2 = function(item, config) {
            this.construct(item, config);
            return this;
          };
          helpers$1.extend(Chart2.prototype, {
            construct: function(item, config) {
              var me = this;
              config = initConfig(config);
              var context = platform.acquireContext(item, config);
              var canvas2 = context && context.canvas;
              var height = canvas2 && canvas2.height;
              var width = canvas2 && canvas2.width;
              me.id = helpers$1.uid();
              me.ctx = context;
              me.canvas = canvas2;
              me.config = config;
              me.width = width;
              me.height = height;
              me.aspectRatio = height ? width / height : null;
              me.options = config.options;
              me._bufferedRender = false;
              me._layers = [];
              me.chart = me;
              me.controller = me;
              Chart2.instances[me.id] = me;
              Object.defineProperty(me, "data", {
                get: function() {
                  return me.config.data;
                },
                set: function(value) {
                  me.config.data = value;
                }
              });
              if (!context || !canvas2) {
                console.error("Failed to create chart: can't acquire context from the given item");
                return;
              }
              me.initialize();
              me.update();
            },
            initialize: function() {
              var me = this;
              core_plugins.notify(me, "beforeInit");
              helpers$1.retinaScale(me, me.options.devicePixelRatio);
              me.bindEvents();
              if (me.options.responsive) {
                me.resize(true);
              }
              me.initToolTip();
              core_plugins.notify(me, "afterInit");
              return me;
            },
            clear: function() {
              helpers$1.canvas.clear(this);
              return this;
            },
            stop: function() {
              core_animations.cancelAnimation(this);
              return this;
            },
            resize: function(silent) {
              var me = this;
              var options2 = me.options;
              var canvas2 = me.canvas;
              var aspectRatio = options2.maintainAspectRatio && me.aspectRatio || null;
              var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas2)));
              var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas2)));
              if (me.width === newWidth && me.height === newHeight) {
                return;
              }
              canvas2.width = me.width = newWidth;
              canvas2.height = me.height = newHeight;
              canvas2.style.width = newWidth + "px";
              canvas2.style.height = newHeight + "px";
              helpers$1.retinaScale(me, options2.devicePixelRatio);
              if (!silent) {
                var newSize = { width: newWidth, height: newHeight };
                core_plugins.notify(me, "resize", [newSize]);
                if (options2.onResize) {
                  options2.onResize(me, newSize);
                }
                me.stop();
                me.update({
                  duration: options2.responsiveAnimationDuration
                });
              }
            },
            ensureScalesHaveIDs: function() {
              var options2 = this.options;
              var scalesOptions = options2.scales || {};
              var scaleOptions = options2.scale;
              helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
                if (!xAxisOptions.id) {
                  xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, "x-axis-", index);
                }
              });
              helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
                if (!yAxisOptions.id) {
                  yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, "y-axis-", index);
                }
              });
              if (scaleOptions) {
                scaleOptions.id = scaleOptions.id || "scale";
              }
            },
            buildOrUpdateScales: function() {
              var me = this;
              var options2 = me.options;
              var scales2 = me.scales || {};
              var items = [];
              var updated = Object.keys(scales2).reduce(function(obj, id) {
                obj[id] = false;
                return obj;
              }, {});
              if (options2.scales) {
                items = items.concat((options2.scales.xAxes || []).map(function(xAxisOptions) {
                  return { options: xAxisOptions, dtype: "category", dposition: "bottom" };
                }), (options2.scales.yAxes || []).map(function(yAxisOptions) {
                  return { options: yAxisOptions, dtype: "linear", dposition: "left" };
                }));
              }
              if (options2.scale) {
                items.push({
                  options: options2.scale,
                  dtype: "radialLinear",
                  isDefault: true,
                  dposition: "chartArea"
                });
              }
              helpers$1.each(items, function(item) {
                var scaleOptions = item.options;
                var id = scaleOptions.id;
                var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);
                if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
                  scaleOptions.position = item.dposition;
                }
                updated[id] = true;
                var scale2 = null;
                if (id in scales2 && scales2[id].type === scaleType) {
                  scale2 = scales2[id];
                  scale2.options = scaleOptions;
                  scale2.ctx = me.ctx;
                  scale2.chart = me;
                } else {
                  var scaleClass = core_scaleService.getScaleConstructor(scaleType);
                  if (!scaleClass) {
                    return;
                  }
                  scale2 = new scaleClass({
                    id,
                    type: scaleType,
                    options: scaleOptions,
                    ctx: me.ctx,
                    chart: me
                  });
                  scales2[scale2.id] = scale2;
                }
                scale2.mergeTicksOptions();
                if (item.isDefault) {
                  me.scale = scale2;
                }
              });
              helpers$1.each(updated, function(hasUpdated, id) {
                if (!hasUpdated) {
                  delete scales2[id];
                }
              });
              me.scales = scales2;
              core_scaleService.addScalesToLayout(this);
            },
            buildOrUpdateControllers: function() {
              var me = this;
              var newControllers = [];
              var datasets = me.data.datasets;
              var i7, ilen;
              for (i7 = 0, ilen = datasets.length; i7 < ilen; i7++) {
                var dataset = datasets[i7];
                var meta = me.getDatasetMeta(i7);
                var type = dataset.type || me.config.type;
                if (meta.type && meta.type !== type) {
                  me.destroyDatasetMeta(i7);
                  meta = me.getDatasetMeta(i7);
                }
                meta.type = type;
                meta.order = dataset.order || 0;
                meta.index = i7;
                if (meta.controller) {
                  meta.controller.updateIndex(i7);
                  meta.controller.linkScales();
                } else {
                  var ControllerClass = controllers[meta.type];
                  if (ControllerClass === void 0) {
                    throw new Error('"' + meta.type + '" is not a chart type.');
                  }
                  meta.controller = new ControllerClass(me, i7);
                  newControllers.push(meta.controller);
                }
              }
              return newControllers;
            },
            resetElements: function() {
              var me = this;
              helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
                me.getDatasetMeta(datasetIndex).controller.reset();
              }, me);
            },
            reset: function() {
              this.resetElements();
              this.tooltip.initialize();
            },
            update: function(config) {
              var me = this;
              var i7, ilen;
              if (!config || typeof config !== "object") {
                config = {
                  duration: config,
                  lazy: arguments[1]
                };
              }
              updateConfig(me);
              core_plugins._invalidate(me);
              if (core_plugins.notify(me, "beforeUpdate") === false) {
                return;
              }
              me.tooltip._data = me.data;
              var newControllers = me.buildOrUpdateControllers();
              for (i7 = 0, ilen = me.data.datasets.length; i7 < ilen; i7++) {
                me.getDatasetMeta(i7).controller.buildOrUpdateElements();
              }
              me.updateLayout();
              if (me.options.animation && me.options.animation.duration) {
                helpers$1.each(newControllers, function(controller) {
                  controller.reset();
                });
              }
              me.updateDatasets();
              me.tooltip.initialize();
              me.lastActive = [];
              core_plugins.notify(me, "afterUpdate");
              me._layers.sort(compare2Level("z", "_idx"));
              if (me._bufferedRender) {
                me._bufferedRequest = {
                  duration: config.duration,
                  easing: config.easing,
                  lazy: config.lazy
                };
              } else {
                me.render(config);
              }
            },
            updateLayout: function() {
              var me = this;
              if (core_plugins.notify(me, "beforeLayout") === false) {
                return;
              }
              core_layouts.update(this, this.width, this.height);
              me._layers = [];
              helpers$1.each(me.boxes, function(box) {
                if (box._configure) {
                  box._configure();
                }
                me._layers.push.apply(me._layers, box._layers());
              }, me);
              me._layers.forEach(function(item, index) {
                item._idx = index;
              });
              core_plugins.notify(me, "afterScaleUpdate");
              core_plugins.notify(me, "afterLayout");
            },
            updateDatasets: function() {
              var me = this;
              if (core_plugins.notify(me, "beforeDatasetsUpdate") === false) {
                return;
              }
              for (var i7 = 0, ilen = me.data.datasets.length; i7 < ilen; ++i7) {
                me.updateDataset(i7);
              }
              core_plugins.notify(me, "afterDatasetsUpdate");
            },
            updateDataset: function(index) {
              var me = this;
              var meta = me.getDatasetMeta(index);
              var args = {
                meta,
                index
              };
              if (core_plugins.notify(me, "beforeDatasetUpdate", [args]) === false) {
                return;
              }
              meta.controller._update();
              core_plugins.notify(me, "afterDatasetUpdate", [args]);
            },
            render: function(config) {
              var me = this;
              if (!config || typeof config !== "object") {
                config = {
                  duration: config,
                  lazy: arguments[1]
                };
              }
              var animationOptions = me.options.animation;
              var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
              var lazy = config.lazy;
              if (core_plugins.notify(me, "beforeRender") === false) {
                return;
              }
              var onComplete = function(animation2) {
                core_plugins.notify(me, "afterRender");
                helpers$1.callback(animationOptions && animationOptions.onComplete, [animation2], me);
              };
              if (animationOptions && duration) {
                var animation = new core_animation({
                  numSteps: duration / 16.66,
                  easing: config.easing || animationOptions.easing,
                  render: function(chart, animationObject) {
                    var easingFunction = helpers$1.easing.effects[animationObject.easing];
                    var currentStep = animationObject.currentStep;
                    var stepDecimal = currentStep / animationObject.numSteps;
                    chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
                  },
                  onAnimationProgress: animationOptions.onProgress,
                  onAnimationComplete: onComplete
                });
                core_animations.addAnimation(me, animation, duration, lazy);
              } else {
                me.draw();
                onComplete(new core_animation({ numSteps: 0, chart: me }));
              }
              return me;
            },
            draw: function(easingValue) {
              var me = this;
              var i7, layers;
              me.clear();
              if (helpers$1.isNullOrUndef(easingValue)) {
                easingValue = 1;
              }
              me.transition(easingValue);
              if (me.width <= 0 || me.height <= 0) {
                return;
              }
              if (core_plugins.notify(me, "beforeDraw", [easingValue]) === false) {
                return;
              }
              layers = me._layers;
              for (i7 = 0; i7 < layers.length && layers[i7].z <= 0; ++i7) {
                layers[i7].draw(me.chartArea);
              }
              me.drawDatasets(easingValue);
              for (; i7 < layers.length; ++i7) {
                layers[i7].draw(me.chartArea);
              }
              me._drawTooltip(easingValue);
              core_plugins.notify(me, "afterDraw", [easingValue]);
            },
            transition: function(easingValue) {
              var me = this;
              for (var i7 = 0, ilen = (me.data.datasets || []).length; i7 < ilen; ++i7) {
                if (me.isDatasetVisible(i7)) {
                  me.getDatasetMeta(i7).controller.transition(easingValue);
                }
              }
              me.tooltip.transition(easingValue);
            },
            _getSortedDatasetMetas: function(filterVisible) {
              var me = this;
              var datasets = me.data.datasets || [];
              var result = [];
              var i7, ilen;
              for (i7 = 0, ilen = datasets.length; i7 < ilen; ++i7) {
                if (!filterVisible || me.isDatasetVisible(i7)) {
                  result.push(me.getDatasetMeta(i7));
                }
              }
              result.sort(compare2Level("order", "index"));
              return result;
            },
            _getSortedVisibleDatasetMetas: function() {
              return this._getSortedDatasetMetas(true);
            },
            drawDatasets: function(easingValue) {
              var me = this;
              var metasets, i7;
              if (core_plugins.notify(me, "beforeDatasetsDraw", [easingValue]) === false) {
                return;
              }
              metasets = me._getSortedVisibleDatasetMetas();
              for (i7 = metasets.length - 1; i7 >= 0; --i7) {
                me.drawDataset(metasets[i7], easingValue);
              }
              core_plugins.notify(me, "afterDatasetsDraw", [easingValue]);
            },
            drawDataset: function(meta, easingValue) {
              var me = this;
              var args = {
                meta,
                index: meta.index,
                easingValue
              };
              if (core_plugins.notify(me, "beforeDatasetDraw", [args]) === false) {
                return;
              }
              meta.controller.draw(easingValue);
              core_plugins.notify(me, "afterDatasetDraw", [args]);
            },
            _drawTooltip: function(easingValue) {
              var me = this;
              var tooltip = me.tooltip;
              var args = {
                tooltip,
                easingValue
              };
              if (core_plugins.notify(me, "beforeTooltipDraw", [args]) === false) {
                return;
              }
              tooltip.draw();
              core_plugins.notify(me, "afterTooltipDraw", [args]);
            },
            getElementAtEvent: function(e8) {
              return core_interaction.modes.single(this, e8);
            },
            getElementsAtEvent: function(e8) {
              return core_interaction.modes.label(this, e8, { intersect: true });
            },
            getElementsAtXAxis: function(e8) {
              return core_interaction.modes["x-axis"](this, e8, { intersect: true });
            },
            getElementsAtEventForMode: function(e8, mode, options2) {
              var method = core_interaction.modes[mode];
              if (typeof method === "function") {
                return method(this, e8, options2);
              }
              return [];
            },
            getDatasetAtEvent: function(e8) {
              return core_interaction.modes.dataset(this, e8, { intersect: true });
            },
            getDatasetMeta: function(datasetIndex) {
              var me = this;
              var dataset = me.data.datasets[datasetIndex];
              if (!dataset._meta) {
                dataset._meta = {};
              }
              var meta = dataset._meta[me.id];
              if (!meta) {
                meta = dataset._meta[me.id] = {
                  type: null,
                  data: [],
                  dataset: null,
                  controller: null,
                  hidden: null,
                  xAxisID: null,
                  yAxisID: null,
                  order: dataset.order || 0,
                  index: datasetIndex
                };
              }
              return meta;
            },
            getVisibleDatasetCount: function() {
              var count = 0;
              for (var i7 = 0, ilen = this.data.datasets.length; i7 < ilen; ++i7) {
                if (this.isDatasetVisible(i7)) {
                  count++;
                }
              }
              return count;
            },
            isDatasetVisible: function(datasetIndex) {
              var meta = this.getDatasetMeta(datasetIndex);
              return typeof meta.hidden === "boolean" ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
            },
            generateLegend: function() {
              return this.options.legendCallback(this);
            },
            destroyDatasetMeta: function(datasetIndex) {
              var id = this.id;
              var dataset = this.data.datasets[datasetIndex];
              var meta = dataset._meta && dataset._meta[id];
              if (meta) {
                meta.controller.destroy();
                delete dataset._meta[id];
              }
            },
            destroy: function() {
              var me = this;
              var canvas2 = me.canvas;
              var i7, ilen;
              me.stop();
              for (i7 = 0, ilen = me.data.datasets.length; i7 < ilen; ++i7) {
                me.destroyDatasetMeta(i7);
              }
              if (canvas2) {
                me.unbindEvents();
                helpers$1.canvas.clear(me);
                platform.releaseContext(me.ctx);
                me.canvas = null;
                me.ctx = null;
              }
              core_plugins.notify(me, "destroy");
              delete Chart2.instances[me.id];
            },
            toBase64Image: function() {
              return this.canvas.toDataURL.apply(this.canvas, arguments);
            },
            initToolTip: function() {
              var me = this;
              me.tooltip = new core_tooltip({
                _chart: me,
                _chartInstance: me,
                _data: me.data,
                _options: me.options.tooltips
              }, me);
            },
            bindEvents: function() {
              var me = this;
              var listeners = me._listeners = {};
              var listener = function() {
                me.eventHandler.apply(me, arguments);
              };
              helpers$1.each(me.options.events, function(type) {
                platform.addEventListener(me, type, listener);
                listeners[type] = listener;
              });
              if (me.options.responsive) {
                listener = function() {
                  me.resize();
                };
                platform.addEventListener(me, "resize", listener);
                listeners.resize = listener;
              }
            },
            unbindEvents: function() {
              var me = this;
              var listeners = me._listeners;
              if (!listeners) {
                return;
              }
              delete me._listeners;
              helpers$1.each(listeners, function(listener, type) {
                platform.removeEventListener(me, type, listener);
              });
            },
            updateHoverStyle: function(elements2, mode, enabled) {
              var prefix = enabled ? "set" : "remove";
              var element, i7, ilen;
              for (i7 = 0, ilen = elements2.length; i7 < ilen; ++i7) {
                element = elements2[i7];
                if (element) {
                  this.getDatasetMeta(element._datasetIndex).controller[prefix + "HoverStyle"](element);
                }
              }
              if (mode === "dataset") {
                this.getDatasetMeta(elements2[0]._datasetIndex).controller["_" + prefix + "DatasetHoverStyle"]();
              }
            },
            eventHandler: function(e8) {
              var me = this;
              var tooltip = me.tooltip;
              if (core_plugins.notify(me, "beforeEvent", [e8]) === false) {
                return;
              }
              me._bufferedRender = true;
              me._bufferedRequest = null;
              var changed = me.handleEvent(e8);
              if (tooltip) {
                changed = tooltip._start ? tooltip.handleEvent(e8) : changed | tooltip.handleEvent(e8);
              }
              core_plugins.notify(me, "afterEvent", [e8]);
              var bufferedRequest = me._bufferedRequest;
              if (bufferedRequest) {
                me.render(bufferedRequest);
              } else if (changed && !me.animating) {
                me.stop();
                me.render({
                  duration: me.options.hover.animationDuration,
                  lazy: true
                });
              }
              me._bufferedRender = false;
              me._bufferedRequest = null;
              return me;
            },
            handleEvent: function(e8) {
              var me = this;
              var options2 = me.options || {};
              var hoverOptions = options2.hover;
              var changed = false;
              me.lastActive = me.lastActive || [];
              if (e8.type === "mouseout") {
                me.active = [];
              } else {
                me.active = me.getElementsAtEventForMode(e8, hoverOptions.mode, hoverOptions);
              }
              helpers$1.callback(options2.onHover || options2.hover.onHover, [e8.native, me.active], me);
              if (e8.type === "mouseup" || e8.type === "click") {
                if (options2.onClick) {
                  options2.onClick.call(me, e8.native, me.active);
                }
              }
              if (me.lastActive.length) {
                me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
              }
              if (me.active.length && hoverOptions.mode) {
                me.updateHoverStyle(me.active, hoverOptions.mode, true);
              }
              changed = !helpers$1.arrayEquals(me.active, me.lastActive);
              me.lastActive = me.active;
              return changed;
            }
          });
          Chart2.instances = {};
          var core_controller = Chart2;
          Chart2.Controller = Chart2;
          Chart2.types = {};
          helpers$1.configMerge = mergeConfig;
          helpers$1.scaleMerge = mergeScaleConfig;
          var core_helpers = function() {
            helpers$1.where = function(collection, filterCallback) {
              if (helpers$1.isArray(collection) && Array.prototype.filter) {
                return collection.filter(filterCallback);
              }
              var filtered = [];
              helpers$1.each(collection, function(item) {
                if (filterCallback(item)) {
                  filtered.push(item);
                }
              });
              return filtered;
            };
            helpers$1.findIndex = Array.prototype.findIndex ? function(array, callback, scope) {
              return array.findIndex(callback, scope);
            } : function(array, callback, scope) {
              scope = scope === void 0 ? array : scope;
              for (var i7 = 0, ilen = array.length; i7 < ilen; ++i7) {
                if (callback.call(scope, array[i7], i7, array)) {
                  return i7;
                }
              }
              return -1;
            };
            helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
              if (helpers$1.isNullOrUndef(startIndex)) {
                startIndex = -1;
              }
              for (var i7 = startIndex + 1; i7 < arrayToSearch.length; i7++) {
                var currentItem = arrayToSearch[i7];
                if (filterCallback(currentItem)) {
                  return currentItem;
                }
              }
            };
            helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
              if (helpers$1.isNullOrUndef(startIndex)) {
                startIndex = arrayToSearch.length;
              }
              for (var i7 = startIndex - 1; i7 >= 0; i7--) {
                var currentItem = arrayToSearch[i7];
                if (filterCallback(currentItem)) {
                  return currentItem;
                }
              }
            };
            helpers$1.isNumber = function(n8) {
              return !isNaN(parseFloat(n8)) && isFinite(n8);
            };
            helpers$1.almostEquals = function(x2, y2, epsilon) {
              return Math.abs(x2 - y2) < epsilon;
            };
            helpers$1.almostWhole = function(x2, epsilon) {
              var rounded = Math.round(x2);
              return rounded - epsilon <= x2 && rounded + epsilon >= x2;
            };
            helpers$1.max = function(array) {
              return array.reduce(function(max, value) {
                if (!isNaN(value)) {
                  return Math.max(max, value);
                }
                return max;
              }, Number.NEGATIVE_INFINITY);
            };
            helpers$1.min = function(array) {
              return array.reduce(function(min, value) {
                if (!isNaN(value)) {
                  return Math.min(min, value);
                }
                return min;
              }, Number.POSITIVE_INFINITY);
            };
            helpers$1.sign = Math.sign ? function(x2) {
              return Math.sign(x2);
            } : function(x2) {
              x2 = +x2;
              if (x2 === 0 || isNaN(x2)) {
                return x2;
              }
              return x2 > 0 ? 1 : -1;
            };
            helpers$1.toRadians = function(degrees) {
              return degrees * (Math.PI / 180);
            };
            helpers$1.toDegrees = function(radians) {
              return radians * (180 / Math.PI);
            };
            helpers$1._decimalPlaces = function(x2) {
              if (!helpers$1.isFinite(x2)) {
                return;
              }
              var e8 = 1;
              var p3 = 0;
              while (Math.round(x2 * e8) / e8 !== x2) {
                e8 *= 10;
                p3++;
              }
              return p3;
            };
            helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
              var distanceFromXCenter = anglePoint.x - centrePoint.x;
              var distanceFromYCenter = anglePoint.y - centrePoint.y;
              var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
              var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
              if (angle < -0.5 * Math.PI) {
                angle += 2 * Math.PI;
              }
              return {
                angle,
                distance: radialDistanceFromCenter
              };
            };
            helpers$1.distanceBetweenPoints = function(pt1, pt2) {
              return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
            };
            helpers$1.aliasPixel = function(pixelWidth) {
              return pixelWidth % 2 === 0 ? 0 : 0.5;
            };
            helpers$1._alignPixel = function(chart, pixel, width) {
              var devicePixelRatio = chart.currentDevicePixelRatio;
              var halfWidth = width / 2;
              return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
            };
            helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t5) {
              var previous = firstPoint.skip ? middlePoint : firstPoint;
              var current = middlePoint;
              var next = afterPoint.skip ? middlePoint : afterPoint;
              var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
              var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));
              var s01 = d01 / (d01 + d12);
              var s12 = d12 / (d01 + d12);
              s01 = isNaN(s01) ? 0 : s01;
              s12 = isNaN(s12) ? 0 : s12;
              var fa = t5 * s01;
              var fb = t5 * s12;
              return {
                previous: {
                  x: current.x - fa * (next.x - previous.x),
                  y: current.y - fa * (next.y - previous.y)
                },
                next: {
                  x: current.x + fb * (next.x - previous.x),
                  y: current.y + fb * (next.y - previous.y)
                }
              };
            };
            helpers$1.EPSILON = Number.EPSILON || 1e-14;
            helpers$1.splineCurveMonotone = function(points) {
              var pointsWithTangents = (points || []).map(function(point) {
                return {
                  model: point._model,
                  deltaK: 0,
                  mK: 0
                };
              });
              var pointsLen = pointsWithTangents.length;
              var i7, pointBefore, pointCurrent, pointAfter;
              for (i7 = 0; i7 < pointsLen; ++i7) {
                pointCurrent = pointsWithTangents[i7];
                if (pointCurrent.model.skip) {
                  continue;
                }
                pointBefore = i7 > 0 ? pointsWithTangents[i7 - 1] : null;
                pointAfter = i7 < pointsLen - 1 ? pointsWithTangents[i7 + 1] : null;
                if (pointAfter && !pointAfter.model.skip) {
                  var slopeDeltaX = pointAfter.model.x - pointCurrent.model.x;
                  pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
                }
                if (!pointBefore || pointBefore.model.skip) {
                  pointCurrent.mK = pointCurrent.deltaK;
                } else if (!pointAfter || pointAfter.model.skip) {
                  pointCurrent.mK = pointBefore.deltaK;
                } else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
                  pointCurrent.mK = 0;
                } else {
                  pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
                }
              }
              var alphaK, betaK, tauK, squaredMagnitude;
              for (i7 = 0; i7 < pointsLen - 1; ++i7) {
                pointCurrent = pointsWithTangents[i7];
                pointAfter = pointsWithTangents[i7 + 1];
                if (pointCurrent.model.skip || pointAfter.model.skip) {
                  continue;
                }
                if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
                  pointCurrent.mK = pointAfter.mK = 0;
                  continue;
                }
                alphaK = pointCurrent.mK / pointCurrent.deltaK;
                betaK = pointAfter.mK / pointCurrent.deltaK;
                squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
                if (squaredMagnitude <= 9) {
                  continue;
                }
                tauK = 3 / Math.sqrt(squaredMagnitude);
                pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
                pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
              }
              var deltaX;
              for (i7 = 0; i7 < pointsLen; ++i7) {
                pointCurrent = pointsWithTangents[i7];
                if (pointCurrent.model.skip) {
                  continue;
                }
                pointBefore = i7 > 0 ? pointsWithTangents[i7 - 1] : null;
                pointAfter = i7 < pointsLen - 1 ? pointsWithTangents[i7 + 1] : null;
                if (pointBefore && !pointBefore.model.skip) {
                  deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
                  pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
                  pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
                }
                if (pointAfter && !pointAfter.model.skip) {
                  deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
                  pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
                  pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
                }
              }
            };
            helpers$1.nextItem = function(collection, index, loop) {
              if (loop) {
                return index >= collection.length - 1 ? collection[0] : collection[index + 1];
              }
              return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
            };
            helpers$1.previousItem = function(collection, index, loop) {
              if (loop) {
                return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
              }
              return index <= 0 ? collection[0] : collection[index - 1];
            };
            helpers$1.niceNum = function(range, round) {
              var exponent = Math.floor(helpers$1.log10(range));
              var fraction = range / Math.pow(10, exponent);
              var niceFraction;
              if (round) {
                if (fraction < 1.5) {
                  niceFraction = 1;
                } else if (fraction < 3) {
                  niceFraction = 2;
                } else if (fraction < 7) {
                  niceFraction = 5;
                } else {
                  niceFraction = 10;
                }
              } else if (fraction <= 1) {
                niceFraction = 1;
              } else if (fraction <= 2) {
                niceFraction = 2;
              } else if (fraction <= 5) {
                niceFraction = 5;
              } else {
                niceFraction = 10;
              }
              return niceFraction * Math.pow(10, exponent);
            };
            helpers$1.requestAnimFrame = function() {
              if (typeof window === "undefined") {
                return function(callback) {
                  callback();
                };
              }
              return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
                return window.setTimeout(callback, 1e3 / 60);
              };
            }();
            helpers$1.getRelativePosition = function(evt, chart) {
              var mouseX, mouseY;
              var e8 = evt.originalEvent || evt;
              var canvas2 = evt.target || evt.srcElement;
              var boundingRect = canvas2.getBoundingClientRect();
              var touches = e8.touches;
              if (touches && touches.length > 0) {
                mouseX = touches[0].clientX;
                mouseY = touches[0].clientY;
              } else {
                mouseX = e8.clientX;
                mouseY = e8.clientY;
              }
              var paddingLeft = parseFloat(helpers$1.getStyle(canvas2, "padding-left"));
              var paddingTop = parseFloat(helpers$1.getStyle(canvas2, "padding-top"));
              var paddingRight = parseFloat(helpers$1.getStyle(canvas2, "padding-right"));
              var paddingBottom = parseFloat(helpers$1.getStyle(canvas2, "padding-bottom"));
              var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
              var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;
              mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / width * canvas2.width / chart.currentDevicePixelRatio);
              mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / height * canvas2.height / chart.currentDevicePixelRatio);
              return {
                x: mouseX,
                y: mouseY
              };
            };
            function parseMaxStyle(styleValue, node, parentProperty) {
              var valueInPixels;
              if (typeof styleValue === "string") {
                valueInPixels = parseInt(styleValue, 10);
                if (styleValue.indexOf("%") !== -1) {
                  valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
                }
              } else {
                valueInPixels = styleValue;
              }
              return valueInPixels;
            }
            function isConstrainedValue(value) {
              return value !== void 0 && value !== null && value !== "none";
            }
            function getConstraintDimension(domNode, maxStyle, percentageProperty) {
              var view = document.defaultView;
              var parentNode = helpers$1._getParentNode(domNode);
              var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
              var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
              var hasCNode = isConstrainedValue(constrainedNode);
              var hasCContainer = isConstrainedValue(constrainedContainer);
              var infinity = Number.POSITIVE_INFINITY;
              if (hasCNode || hasCContainer) {
                return Math.min(hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity, hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
              }
              return "none";
            }
            helpers$1.getConstraintWidth = function(domNode) {
              return getConstraintDimension(domNode, "max-width", "clientWidth");
            };
            helpers$1.getConstraintHeight = function(domNode) {
              return getConstraintDimension(domNode, "max-height", "clientHeight");
            };
            helpers$1._calculatePadding = function(container, padding, parentDimension) {
              padding = helpers$1.getStyle(container, padding);
              return padding.indexOf("%") > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
            };
            helpers$1._getParentNode = function(domNode) {
              var parent = domNode.parentNode;
              if (parent && parent.toString() === "[object ShadowRoot]") {
                parent = parent.host;
              }
              return parent;
            };
            helpers$1.getMaximumWidth = function(domNode) {
              var container = helpers$1._getParentNode(domNode);
              if (!container) {
                return domNode.clientWidth;
              }
              var clientWidth = container.clientWidth;
              var paddingLeft = helpers$1._calculatePadding(container, "padding-left", clientWidth);
              var paddingRight = helpers$1._calculatePadding(container, "padding-right", clientWidth);
              var w2 = clientWidth - paddingLeft - paddingRight;
              var cw = helpers$1.getConstraintWidth(domNode);
              return isNaN(cw) ? w2 : Math.min(w2, cw);
            };
            helpers$1.getMaximumHeight = function(domNode) {
              var container = helpers$1._getParentNode(domNode);
              if (!container) {
                return domNode.clientHeight;
              }
              var clientHeight = container.clientHeight;
              var paddingTop = helpers$1._calculatePadding(container, "padding-top", clientHeight);
              var paddingBottom = helpers$1._calculatePadding(container, "padding-bottom", clientHeight);
              var h3 = clientHeight - paddingTop - paddingBottom;
              var ch = helpers$1.getConstraintHeight(domNode);
              return isNaN(ch) ? h3 : Math.min(h3, ch);
            };
            helpers$1.getStyle = function(el, property) {
              return el.currentStyle ? el.currentStyle[property] : document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
            };
            helpers$1.retinaScale = function(chart, forceRatio) {
              var pixelRatio = chart.currentDevicePixelRatio = forceRatio || typeof window !== "undefined" && window.devicePixelRatio || 1;
              if (pixelRatio === 1) {
                return;
              }
              var canvas2 = chart.canvas;
              var height = chart.height;
              var width = chart.width;
              canvas2.height = height * pixelRatio;
              canvas2.width = width * pixelRatio;
              chart.ctx.scale(pixelRatio, pixelRatio);
              if (!canvas2.style.height && !canvas2.style.width) {
                canvas2.style.height = height + "px";
                canvas2.style.width = width + "px";
              }
            };
            helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
              return fontStyle + " " + pixelSize + "px " + fontFamily;
            };
            helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
              cache = cache || {};
              var data = cache.data = cache.data || {};
              var gc = cache.garbageCollect = cache.garbageCollect || [];
              if (cache.font !== font) {
                data = cache.data = {};
                gc = cache.garbageCollect = [];
                cache.font = font;
              }
              ctx.font = font;
              var longest = 0;
              var ilen = arrayOfThings.length;
              var i7, j, jlen, thing, nestedThing;
              for (i7 = 0; i7 < ilen; i7++) {
                thing = arrayOfThings[i7];
                if (thing !== void 0 && thing !== null && helpers$1.isArray(thing) !== true) {
                  longest = helpers$1.measureText(ctx, data, gc, longest, thing);
                } else if (helpers$1.isArray(thing)) {
                  for (j = 0, jlen = thing.length; j < jlen; j++) {
                    nestedThing = thing[j];
                    if (nestedThing !== void 0 && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
                      longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
                    }
                  }
                }
              }
              var gcLen = gc.length / 2;
              if (gcLen > arrayOfThings.length) {
                for (i7 = 0; i7 < gcLen; i7++) {
                  delete data[gc[i7]];
                }
                gc.splice(0, gcLen);
              }
              return longest;
            };
            helpers$1.measureText = function(ctx, data, gc, longest, string) {
              var textWidth = data[string];
              if (!textWidth) {
                textWidth = data[string] = ctx.measureText(string).width;
                gc.push(string);
              }
              if (textWidth > longest) {
                longest = textWidth;
              }
              return longest;
            };
            helpers$1.numberOfLabelLines = function(arrayOfThings) {
              var numberOfLines = 1;
              helpers$1.each(arrayOfThings, function(thing) {
                if (helpers$1.isArray(thing)) {
                  if (thing.length > numberOfLines) {
                    numberOfLines = thing.length;
                  }
                }
              });
              return numberOfLines;
            };
            helpers$1.color = !chartjsColor ? function(value) {
              console.error("Color.js not found!");
              return value;
            } : function(value) {
              if (value instanceof CanvasGradient) {
                value = core_defaults.global.defaultColor;
              }
              return chartjsColor(value);
            };
            helpers$1.getHoverColor = function(colorValue) {
              return colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient ? colorValue : helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
            };
          };
          function abstract() {
            throw new Error("This method is not implemented: either no adapter can be found or an incomplete integration was provided.");
          }
          function DateAdapter(options2) {
            this.options = options2 || {};
          }
          helpers$1.extend(DateAdapter.prototype, {
            formats: abstract,
            parse: abstract,
            format: abstract,
            add: abstract,
            diff: abstract,
            startOf: abstract,
            endOf: abstract,
            _create: function(value) {
              return value;
            }
          });
          DateAdapter.override = function(members) {
            helpers$1.extend(DateAdapter.prototype, members);
          };
          var _date = DateAdapter;
          var core_adapters = {
            _date
          };
          var core_ticks = {
            formatters: {
              values: function(value) {
                return helpers$1.isArray(value) ? value : "" + value;
              },
              linear: function(tickValue, index, ticks) {
                var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];
                if (Math.abs(delta) > 1) {
                  if (tickValue !== Math.floor(tickValue)) {
                    delta = tickValue - Math.floor(tickValue);
                  }
                }
                var logDelta = helpers$1.log10(Math.abs(delta));
                var tickString = "";
                if (tickValue !== 0) {
                  var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
                  if (maxTick < 1e-4) {
                    var logTick = helpers$1.log10(Math.abs(tickValue));
                    var numExponential = Math.floor(logTick) - Math.floor(logDelta);
                    numExponential = Math.max(Math.min(numExponential, 20), 0);
                    tickString = tickValue.toExponential(numExponential);
                  } else {
                    var numDecimal = -1 * Math.floor(logDelta);
                    numDecimal = Math.max(Math.min(numDecimal, 20), 0);
                    tickString = tickValue.toFixed(numDecimal);
                  }
                } else {
                  tickString = "0";
                }
                return tickString;
              },
              logarithmic: function(tickValue, index, ticks) {
                var remain = tickValue / Math.pow(10, Math.floor(helpers$1.log10(tickValue)));
                if (tickValue === 0) {
                  return "0";
                } else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
                  return tickValue.toExponential();
                }
                return "";
              }
            }
          };
          var isArray = helpers$1.isArray;
          var isNullOrUndef = helpers$1.isNullOrUndef;
          var valueOrDefault$a = helpers$1.valueOrDefault;
          var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;
          core_defaults._set("scale", {
            display: true,
            position: "left",
            offset: false,
            gridLines: {
              display: true,
              color: "rgba(0,0,0,0.1)",
              lineWidth: 1,
              drawBorder: true,
              drawOnChartArea: true,
              drawTicks: true,
              tickMarkLength: 10,
              zeroLineWidth: 1,
              zeroLineColor: "rgba(0,0,0,0.25)",
              zeroLineBorderDash: [],
              zeroLineBorderDashOffset: 0,
              offsetGridLines: false,
              borderDash: [],
              borderDashOffset: 0
            },
            scaleLabel: {
              display: false,
              labelString: "",
              padding: {
                top: 4,
                bottom: 4
              }
            },
            ticks: {
              beginAtZero: false,
              minRotation: 0,
              maxRotation: 50,
              mirror: false,
              padding: 0,
              reverse: false,
              display: true,
              autoSkip: true,
              autoSkipPadding: 0,
              labelOffset: 0,
              callback: core_ticks.formatters.values,
              minor: {},
              major: {}
            }
          });
          function sample(arr, numItems) {
            var result = [];
            var increment = arr.length / numItems;
            var i7 = 0;
            var len = arr.length;
            for (; i7 < len; i7 += increment) {
              result.push(arr[Math.floor(i7)]);
            }
            return result;
          }
          function getPixelForGridLine(scale2, index, offsetGridLines) {
            var length = scale2.getTicks().length;
            var validIndex = Math.min(index, length - 1);
            var lineValue = scale2.getPixelForTick(validIndex);
            var start = scale2._startPixel;
            var end = scale2._endPixel;
            var epsilon = 1e-6;
            var offset;
            if (offsetGridLines) {
              if (length === 1) {
                offset = Math.max(lineValue - start, end - lineValue);
              } else if (index === 0) {
                offset = (scale2.getPixelForTick(1) - lineValue) / 2;
              } else {
                offset = (lineValue - scale2.getPixelForTick(validIndex - 1)) / 2;
              }
              lineValue += validIndex < index ? offset : -offset;
              if (lineValue < start - epsilon || lineValue > end + epsilon) {
                return;
              }
            }
            return lineValue;
          }
          function garbageCollect(caches, length) {
            helpers$1.each(caches, function(cache) {
              var gc = cache.gc;
              var gcLen = gc.length / 2;
              var i7;
              if (gcLen > length) {
                for (i7 = 0; i7 < gcLen; ++i7) {
                  delete cache.data[gc[i7]];
                }
                gc.splice(0, gcLen);
              }
            });
          }
          function computeLabelSizes(ctx, tickFonts, ticks, caches) {
            var length = ticks.length;
            var widths = [];
            var heights = [];
            var offsets = [];
            var widestLabelSize = 0;
            var highestLabelSize = 0;
            var i7, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;
            for (i7 = 0; i7 < length; ++i7) {
              label = ticks[i7].label;
              tickFont = ticks[i7].major ? tickFonts.major : tickFonts.minor;
              ctx.font = fontString = tickFont.string;
              cache = caches[fontString] = caches[fontString] || { data: {}, gc: [] };
              lineHeight = tickFont.lineHeight;
              width = height = 0;
              if (!isNullOrUndef(label) && !isArray(label)) {
                width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
                height = lineHeight;
              } else if (isArray(label)) {
                for (j = 0, jlen = label.length; j < jlen; ++j) {
                  nestedLabel = label[j];
                  if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
                    width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
                    height += lineHeight;
                  }
                }
              }
              widths.push(width);
              heights.push(height);
              offsets.push(lineHeight / 2);
              widestLabelSize = Math.max(width, widestLabelSize);
              highestLabelSize = Math.max(height, highestLabelSize);
            }
            garbageCollect(caches, length);
            widest = widths.indexOf(widestLabelSize);
            highest = heights.indexOf(highestLabelSize);
            function valueAt(idx) {
              return {
                width: widths[idx] || 0,
                height: heights[idx] || 0,
                offset: offsets[idx] || 0
              };
            }
            return {
              first: valueAt(0),
              last: valueAt(length - 1),
              widest: valueAt(widest),
              highest: valueAt(highest)
            };
          }
          function getTickMarkLength(options2) {
            return options2.drawTicks ? options2.tickMarkLength : 0;
          }
          function getScaleLabelHeight(options2) {
            var font, padding;
            if (!options2.display) {
              return 0;
            }
            font = helpers$1.options._parseFont(options2);
            padding = helpers$1.options.toPadding(options2.padding);
            return font.lineHeight + padding.height;
          }
          function parseFontOptions(options2, nestedOpts) {
            return helpers$1.extend(helpers$1.options._parseFont({
              fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options2.fontFamily),
              fontSize: valueOrDefault$a(nestedOpts.fontSize, options2.fontSize),
              fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options2.fontStyle),
              lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options2.lineHeight)
            }), {
              color: helpers$1.options.resolve([nestedOpts.fontColor, options2.fontColor, core_defaults.global.defaultFontColor])
            });
          }
          function parseTickFontOptions(options2) {
            var minor = parseFontOptions(options2, options2.minor);
            var major = options2.major.enabled ? parseFontOptions(options2, options2.major) : minor;
            return { minor, major };
          }
          function nonSkipped(ticksToFilter) {
            var filtered = [];
            var item, index, len;
            for (index = 0, len = ticksToFilter.length; index < len; ++index) {
              item = ticksToFilter[index];
              if (typeof item._index !== "undefined") {
                filtered.push(item);
              }
            }
            return filtered;
          }
          function getEvenSpacing(arr) {
            var len = arr.length;
            var i7, diff;
            if (len < 2) {
              return false;
            }
            for (diff = arr[0], i7 = 1; i7 < len; ++i7) {
              if (arr[i7] - arr[i7 - 1] !== diff) {
                return false;
              }
            }
            return diff;
          }
          function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
            var evenMajorSpacing = getEvenSpacing(majorIndices);
            var spacing = (ticks.length - 1) / ticksLimit;
            var factors, factor, i7, ilen;
            if (!evenMajorSpacing) {
              return Math.max(spacing, 1);
            }
            factors = helpers$1.math._factorize(evenMajorSpacing);
            for (i7 = 0, ilen = factors.length - 1; i7 < ilen; i7++) {
              factor = factors[i7];
              if (factor > spacing) {
                return factor;
              }
            }
            return Math.max(spacing, 1);
          }
          function getMajorIndices(ticks) {
            var result = [];
            var i7, ilen;
            for (i7 = 0, ilen = ticks.length; i7 < ilen; i7++) {
              if (ticks[i7].major) {
                result.push(i7);
              }
            }
            return result;
          }
          function skipMajors(ticks, majorIndices, spacing) {
            var count = 0;
            var next = majorIndices[0];
            var i7, tick;
            spacing = Math.ceil(spacing);
            for (i7 = 0; i7 < ticks.length; i7++) {
              tick = ticks[i7];
              if (i7 === next) {
                tick._index = i7;
                count++;
                next = majorIndices[count * spacing];
              } else {
                delete tick.label;
              }
            }
          }
          function skip(ticks, spacing, majorStart, majorEnd) {
            var start = valueOrDefault$a(majorStart, 0);
            var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
            var count = 0;
            var length, i7, tick, next;
            spacing = Math.ceil(spacing);
            if (majorEnd) {
              length = majorEnd - majorStart;
              spacing = length / Math.floor(length / spacing);
            }
            next = start;
            while (next < 0) {
              count++;
              next = Math.round(start + count * spacing);
            }
            for (i7 = Math.max(start, 0); i7 < end; i7++) {
              tick = ticks[i7];
              if (i7 === next) {
                tick._index = i7;
                count++;
                next = Math.round(start + count * spacing);
              } else {
                delete tick.label;
              }
            }
          }
          var Scale = core_element.extend({
            zeroLineIndex: 0,
            getPadding: function() {
              var me = this;
              return {
                left: me.paddingLeft || 0,
                top: me.paddingTop || 0,
                right: me.paddingRight || 0,
                bottom: me.paddingBottom || 0
              };
            },
            getTicks: function() {
              return this._ticks;
            },
            _getLabels: function() {
              var data = this.chart.data;
              return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
            },
            mergeTicksOptions: function() {
            },
            beforeUpdate: function() {
              helpers$1.callback(this.options.beforeUpdate, [this]);
            },
            update: function(maxWidth, maxHeight, margins) {
              var me = this;
              var tickOpts = me.options.ticks;
              var sampleSize = tickOpts.sampleSize;
              var i7, ilen, labels, ticks, samplingEnabled;
              me.beforeUpdate();
              me.maxWidth = maxWidth;
              me.maxHeight = maxHeight;
              me.margins = helpers$1.extend({
                left: 0,
                right: 0,
                top: 0,
                bottom: 0
              }, margins);
              me._ticks = null;
              me.ticks = null;
              me._labelSizes = null;
              me._maxLabelLines = 0;
              me.longestLabelWidth = 0;
              me.longestTextCache = me.longestTextCache || {};
              me._gridLineItems = null;
              me._labelItems = null;
              me.beforeSetDimensions();
              me.setDimensions();
              me.afterSetDimensions();
              me.beforeDataLimits();
              me.determineDataLimits();
              me.afterDataLimits();
              me.beforeBuildTicks();
              ticks = me.buildTicks() || [];
              ticks = me.afterBuildTicks(ticks) || ticks;
              if ((!ticks || !ticks.length) && me.ticks) {
                ticks = [];
                for (i7 = 0, ilen = me.ticks.length; i7 < ilen; ++i7) {
                  ticks.push({
                    value: me.ticks[i7],
                    major: false
                  });
                }
              }
              me._ticks = ticks;
              samplingEnabled = sampleSize < ticks.length;
              labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);
              me._configure();
              me.beforeCalculateTickRotation();
              me.calculateTickRotation();
              me.afterCalculateTickRotation();
              me.beforeFit();
              me.fit();
              me.afterFit();
              me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto") ? me._autoSkip(ticks) : ticks;
              if (samplingEnabled) {
                labels = me._convertTicksToLabels(me._ticksToDraw);
              }
              me.ticks = labels;
              me.afterUpdate();
              return me.minSize;
            },
            _configure: function() {
              var me = this;
              var reversePixels = me.options.ticks.reverse;
              var startPixel, endPixel;
              if (me.isHorizontal()) {
                startPixel = me.left;
                endPixel = me.right;
              } else {
                startPixel = me.top;
                endPixel = me.bottom;
                reversePixels = !reversePixels;
              }
              me._startPixel = startPixel;
              me._endPixel = endPixel;
              me._reversePixels = reversePixels;
              me._length = endPixel - startPixel;
            },
            afterUpdate: function() {
              helpers$1.callback(this.options.afterUpdate, [this]);
            },
            beforeSetDimensions: function() {
              helpers$1.callback(this.options.beforeSetDimensions, [this]);
            },
            setDimensions: function() {
              var me = this;
              if (me.isHorizontal()) {
                me.width = me.maxWidth;
                me.left = 0;
                me.right = me.width;
              } else {
                me.height = me.maxHeight;
                me.top = 0;
                me.bottom = me.height;
              }
              me.paddingLeft = 0;
              me.paddingTop = 0;
              me.paddingRight = 0;
              me.paddingBottom = 0;
            },
            afterSetDimensions: function() {
              helpers$1.callback(this.options.afterSetDimensions, [this]);
            },
            beforeDataLimits: function() {
              helpers$1.callback(this.options.beforeDataLimits, [this]);
            },
            determineDataLimits: helpers$1.noop,
            afterDataLimits: function() {
              helpers$1.callback(this.options.afterDataLimits, [this]);
            },
            beforeBuildTicks: function() {
              helpers$1.callback(this.options.beforeBuildTicks, [this]);
            },
            buildTicks: helpers$1.noop,
            afterBuildTicks: function(ticks) {
              var me = this;
              if (isArray(ticks) && ticks.length) {
                return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
              }
              me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
              return ticks;
            },
            beforeTickToLabelConversion: function() {
              helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
            },
            convertTicksToLabels: function() {
              var me = this;
              var tickOpts = me.options.ticks;
              me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
            },
            afterTickToLabelConversion: function() {
              helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
            },
            beforeCalculateTickRotation: function() {
              helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
            },
            calculateTickRotation: function() {
              var me = this;
              var options2 = me.options;
              var tickOpts = options2.ticks;
              var numTicks = me.getTicks().length;
              var minRotation = tickOpts.minRotation || 0;
              var maxRotation = tickOpts.maxRotation;
              var labelRotation = minRotation;
              var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;
              if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
                me.labelRotation = minRotation;
                return;
              }
              labelSizes = me._getLabelSizes();
              maxLabelWidth = labelSizes.widest.width;
              maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;
              maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
              tickWidth = options2.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);
              if (maxLabelWidth + 6 > tickWidth) {
                tickWidth = maxWidth / (numTicks - (options2.offset ? 0.5 : 1));
                maxHeight = me.maxHeight - getTickMarkLength(options2.gridLines) - tickOpts.padding - getScaleLabelHeight(options2.scaleLabel);
                maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
                labelRotation = helpers$1.toDegrees(Math.min(Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)), Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)));
                labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
              }
              me.labelRotation = labelRotation;
            },
            afterCalculateTickRotation: function() {
              helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
            },
            beforeFit: function() {
              helpers$1.callback(this.options.beforeFit, [this]);
            },
            fit: function() {
              var me = this;
              var minSize = me.minSize = {
                width: 0,
                height: 0
              };
              var chart = me.chart;
              var opts = me.options;
              var tickOpts = opts.ticks;
              var scaleLabelOpts = opts.scaleLabel;
              var gridLineOpts = opts.gridLines;
              var display = me._isVisible();
              var isBottom = opts.position === "bottom";
              var isHorizontal = me.isHorizontal();
              if (isHorizontal) {
                minSize.width = me.maxWidth;
              } else if (display) {
                minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
              }
              if (!isHorizontal) {
                minSize.height = me.maxHeight;
              } else if (display) {
                minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
              }
              if (tickOpts.display && display) {
                var tickFonts = parseTickFontOptions(tickOpts);
                var labelSizes = me._getLabelSizes();
                var firstLabelSize = labelSizes.first;
                var lastLabelSize = labelSizes.last;
                var widestLabelSize = labelSizes.widest;
                var highestLabelSize = labelSizes.highest;
                var lineSpace = tickFonts.minor.lineHeight * 0.4;
                var tickPadding = tickOpts.padding;
                if (isHorizontal) {
                  var isRotated = me.labelRotation !== 0;
                  var angleRadians = helpers$1.toRadians(me.labelRotation);
                  var cosRotation = Math.cos(angleRadians);
                  var sinRotation = Math.sin(angleRadians);
                  var labelHeight = sinRotation * widestLabelSize.width + cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0)) + (isRotated ? 0 : lineSpace);
                  minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);
                  var offsetLeft = me.getPixelForTick(0) - me.left;
                  var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
                  var paddingLeft, paddingRight;
                  if (isRotated) {
                    paddingLeft = isBottom ? cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset : sinRotation * (firstLabelSize.height - firstLabelSize.offset);
                    paddingRight = isBottom ? sinRotation * (lastLabelSize.height - lastLabelSize.offset) : cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
                  } else {
                    paddingLeft = firstLabelSize.width / 2;
                    paddingRight = lastLabelSize.width / 2;
                  }
                  me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
                  me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
                } else {
                  var labelWidth = tickOpts.mirror ? 0 : widestLabelSize.width + tickPadding + lineSpace;
                  minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);
                  me.paddingTop = firstLabelSize.height / 2;
                  me.paddingBottom = lastLabelSize.height / 2;
                }
              }
              me.handleMargins();
              if (isHorizontal) {
                me.width = me._length = chart.width - me.margins.left - me.margins.right;
                me.height = minSize.height;
              } else {
                me.width = minSize.width;
                me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
              }
            },
            handleMargins: function() {
              var me = this;
              if (me.margins) {
                me.margins.left = Math.max(me.paddingLeft, me.margins.left);
                me.margins.top = Math.max(me.paddingTop, me.margins.top);
                me.margins.right = Math.max(me.paddingRight, me.margins.right);
                me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
              }
            },
            afterFit: function() {
              helpers$1.callback(this.options.afterFit, [this]);
            },
            isHorizontal: function() {
              var pos = this.options.position;
              return pos === "top" || pos === "bottom";
            },
            isFullWidth: function() {
              return this.options.fullWidth;
            },
            getRightValue: function(rawValue) {
              if (isNullOrUndef(rawValue)) {
                return NaN;
              }
              if ((typeof rawValue === "number" || rawValue instanceof Number) && !isFinite(rawValue)) {
                return NaN;
              }
              if (rawValue) {
                if (this.isHorizontal()) {
                  if (rawValue.x !== void 0) {
                    return this.getRightValue(rawValue.x);
                  }
                } else if (rawValue.y !== void 0) {
                  return this.getRightValue(rawValue.y);
                }
              }
              return rawValue;
            },
            _convertTicksToLabels: function(ticks) {
              var me = this;
              var labels, i7, ilen;
              me.ticks = ticks.map(function(tick) {
                return tick.value;
              });
              me.beforeTickToLabelConversion();
              labels = me.convertTicksToLabels(ticks) || me.ticks;
              me.afterTickToLabelConversion();
              for (i7 = 0, ilen = ticks.length; i7 < ilen; ++i7) {
                ticks[i7].label = labels[i7];
              }
              return labels;
            },
            _getLabelSizes: function() {
              var me = this;
              var labelSizes = me._labelSizes;
              if (!labelSizes) {
                me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
                me.longestLabelWidth = labelSizes.widest.width;
              }
              return labelSizes;
            },
            _parseValue: function(value) {
              var start, end, min, max;
              if (isArray(value)) {
                start = +this.getRightValue(value[0]);
                end = +this.getRightValue(value[1]);
                min = Math.min(start, end);
                max = Math.max(start, end);
              } else {
                value = +this.getRightValue(value);
                start = void 0;
                end = value;
                min = value;
                max = value;
              }
              return {
                min,
                max,
                start,
                end
              };
            },
            _getScaleLabel: function(rawValue) {
              var v2 = this._parseValue(rawValue);
              if (v2.start !== void 0) {
                return "[" + v2.start + ", " + v2.end + "]";
              }
              return +this.getRightValue(rawValue);
            },
            getLabelForIndex: helpers$1.noop,
            getPixelForValue: helpers$1.noop,
            getValueForPixel: helpers$1.noop,
            getPixelForTick: function(index) {
              var me = this;
              var offset = me.options.offset;
              var numTicks = me._ticks.length;
              var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);
              return index < 0 || index > numTicks - 1 ? null : me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
            },
            getPixelForDecimal: function(decimal) {
              var me = this;
              if (me._reversePixels) {
                decimal = 1 - decimal;
              }
              return me._startPixel + decimal * me._length;
            },
            getDecimalForPixel: function(pixel) {
              var decimal = (pixel - this._startPixel) / this._length;
              return this._reversePixels ? 1 - decimal : decimal;
            },
            getBasePixel: function() {
              return this.getPixelForValue(this.getBaseValue());
            },
            getBaseValue: function() {
              var me = this;
              var min = me.min;
              var max = me.max;
              return me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
            },
            _autoSkip: function(ticks) {
              var me = this;
              var tickOpts = me.options.ticks;
              var axisLength = me._length;
              var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
              var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
              var numMajorIndices = majorIndices.length;
              var first = majorIndices[0];
              var last = majorIndices[numMajorIndices - 1];
              var i7, ilen, spacing, avgMajorSpacing;
              if (numMajorIndices > ticksLimit) {
                skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
                return nonSkipped(ticks);
              }
              spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);
              if (numMajorIndices > 0) {
                for (i7 = 0, ilen = numMajorIndices - 1; i7 < ilen; i7++) {
                  skip(ticks, spacing, majorIndices[i7], majorIndices[i7 + 1]);
                }
                avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
                skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
                skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
                return nonSkipped(ticks);
              }
              skip(ticks, spacing);
              return nonSkipped(ticks);
            },
            _tickSize: function() {
              var me = this;
              var optionTicks = me.options.ticks;
              var rot = helpers$1.toRadians(me.labelRotation);
              var cos = Math.abs(Math.cos(rot));
              var sin = Math.abs(Math.sin(rot));
              var labelSizes = me._getLabelSizes();
              var padding = optionTicks.autoSkipPadding || 0;
              var w2 = labelSizes ? labelSizes.widest.width + padding : 0;
              var h3 = labelSizes ? labelSizes.highest.height + padding : 0;
              return me.isHorizontal() ? h3 * cos > w2 * sin ? w2 / cos : h3 / sin : h3 * sin < w2 * cos ? h3 / cos : w2 / sin;
            },
            _isVisible: function() {
              var me = this;
              var chart = me.chart;
              var display = me.options.display;
              var i7, ilen, meta;
              if (display !== "auto") {
                return !!display;
              }
              for (i7 = 0, ilen = chart.data.datasets.length; i7 < ilen; ++i7) {
                if (chart.isDatasetVisible(i7)) {
                  meta = chart.getDatasetMeta(i7);
                  if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
                    return true;
                  }
                }
              }
              return false;
            },
            _computeGridLineItems: function(chartArea) {
              var me = this;
              var chart = me.chart;
              var options2 = me.options;
              var gridLines = options2.gridLines;
              var position = options2.position;
              var offsetGridLines = gridLines.offsetGridLines;
              var isHorizontal = me.isHorizontal();
              var ticks = me._ticksToDraw;
              var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);
              var tl = getTickMarkLength(gridLines);
              var items = [];
              var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
              var axisHalfWidth = axisWidth / 2;
              var alignPixel = helpers$1._alignPixel;
              var alignBorderValue = function(pixel) {
                return alignPixel(chart, pixel, axisWidth);
              };
              var borderValue, i7, tick, lineValue, alignedLineValue;
              var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;
              if (position === "top") {
                borderValue = alignBorderValue(me.bottom);
                ty1 = me.bottom - tl;
                ty2 = borderValue - axisHalfWidth;
                y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
                y2 = chartArea.bottom;
              } else if (position === "bottom") {
                borderValue = alignBorderValue(me.top);
                y1 = chartArea.top;
                y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
                ty1 = borderValue + axisHalfWidth;
                ty2 = me.top + tl;
              } else if (position === "left") {
                borderValue = alignBorderValue(me.right);
                tx1 = me.right - tl;
                tx2 = borderValue - axisHalfWidth;
                x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
                x2 = chartArea.right;
              } else {
                borderValue = alignBorderValue(me.left);
                x1 = chartArea.left;
                x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
                tx1 = borderValue + axisHalfWidth;
                tx2 = me.left + tl;
              }
              for (i7 = 0; i7 < ticksLength; ++i7) {
                tick = ticks[i7] || {};
                if (isNullOrUndef(tick.label) && i7 < ticks.length) {
                  continue;
                }
                if (i7 === me.zeroLineIndex && options2.offset === offsetGridLines) {
                  lineWidth = gridLines.zeroLineWidth;
                  lineColor = gridLines.zeroLineColor;
                  borderDash = gridLines.zeroLineBorderDash || [];
                  borderDashOffset = gridLines.zeroLineBorderDashOffset || 0;
                } else {
                  lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i7, 1);
                  lineColor = valueAtIndexOrDefault(gridLines.color, i7, "rgba(0,0,0,0.1)");
                  borderDash = gridLines.borderDash || [];
                  borderDashOffset = gridLines.borderDashOffset || 0;
                }
                lineValue = getPixelForGridLine(me, tick._index || i7, offsetGridLines);
                if (lineValue === void 0) {
                  continue;
                }
                alignedLineValue = alignPixel(chart, lineValue, lineWidth);
                if (isHorizontal) {
                  tx1 = tx2 = x1 = x2 = alignedLineValue;
                } else {
                  ty1 = ty2 = y1 = y2 = alignedLineValue;
                }
                items.push({
                  tx1,
                  ty1,
                  tx2,
                  ty2,
                  x1,
                  y1,
                  x2,
                  y2,
                  width: lineWidth,
                  color: lineColor,
                  borderDash,
                  borderDashOffset
                });
              }
              items.ticksLength = ticksLength;
              items.borderValue = borderValue;
              return items;
            },
            _computeLabelItems: function() {
              var me = this;
              var options2 = me.options;
              var optionTicks = options2.ticks;
              var position = options2.position;
              var isMirrored = optionTicks.mirror;
              var isHorizontal = me.isHorizontal();
              var ticks = me._ticksToDraw;
              var fonts = parseTickFontOptions(optionTicks);
              var tickPadding = optionTicks.padding;
              var tl = getTickMarkLength(options2.gridLines);
              var rotation = -helpers$1.toRadians(me.labelRotation);
              var items = [];
              var i7, ilen, tick, label, x2, y2, textAlign, pixel, font, lineHeight, lineCount, textOffset;
              if (position === "top") {
                y2 = me.bottom - tl - tickPadding;
                textAlign = !rotation ? "center" : "left";
              } else if (position === "bottom") {
                y2 = me.top + tl + tickPadding;
                textAlign = !rotation ? "center" : "right";
              } else if (position === "left") {
                x2 = me.right - (isMirrored ? 0 : tl) - tickPadding;
                textAlign = isMirrored ? "left" : "right";
              } else {
                x2 = me.left + (isMirrored ? 0 : tl) + tickPadding;
                textAlign = isMirrored ? "right" : "left";
              }
              for (i7 = 0, ilen = ticks.length; i7 < ilen; ++i7) {
                tick = ticks[i7];
                label = tick.label;
                if (isNullOrUndef(label)) {
                  continue;
                }
                pixel = me.getPixelForTick(tick._index || i7) + optionTicks.labelOffset;
                font = tick.major ? fonts.major : fonts.minor;
                lineHeight = font.lineHeight;
                lineCount = isArray(label) ? label.length : 1;
                if (isHorizontal) {
                  x2 = pixel;
                  textOffset = position === "top" ? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight : (!rotation ? 0.5 : 0) * lineHeight;
                } else {
                  y2 = pixel;
                  textOffset = (1 - lineCount) * lineHeight / 2;
                }
                items.push({
                  x: x2,
                  y: y2,
                  rotation,
                  label,
                  font,
                  textOffset,
                  textAlign
                });
              }
              return items;
            },
            _drawGrid: function(chartArea) {
              var me = this;
              var gridLines = me.options.gridLines;
              if (!gridLines.display) {
                return;
              }
              var ctx = me.ctx;
              var chart = me.chart;
              var alignPixel = helpers$1._alignPixel;
              var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
              var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
              var width, color, i7, ilen, item;
              for (i7 = 0, ilen = items.length; i7 < ilen; ++i7) {
                item = items[i7];
                width = item.width;
                color = item.color;
                if (width && color) {
                  ctx.save();
                  ctx.lineWidth = width;
                  ctx.strokeStyle = color;
                  if (ctx.setLineDash) {
                    ctx.setLineDash(item.borderDash);
                    ctx.lineDashOffset = item.borderDashOffset;
                  }
                  ctx.beginPath();
                  if (gridLines.drawTicks) {
                    ctx.moveTo(item.tx1, item.ty1);
                    ctx.lineTo(item.tx2, item.ty2);
                  }
                  if (gridLines.drawOnChartArea) {
                    ctx.moveTo(item.x1, item.y1);
                    ctx.lineTo(item.x2, item.y2);
                  }
                  ctx.stroke();
                  ctx.restore();
                }
              }
              if (axisWidth) {
                var firstLineWidth = axisWidth;
                var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
                var borderValue = items.borderValue;
                var x1, x2, y1, y2;
                if (me.isHorizontal()) {
                  x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
                  x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
                  y1 = y2 = borderValue;
                } else {
                  y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
                  y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
                  x1 = x2 = borderValue;
                }
                ctx.lineWidth = axisWidth;
                ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y2);
                ctx.stroke();
              }
            },
            _drawLabels: function() {
              var me = this;
              var optionTicks = me.options.ticks;
              if (!optionTicks.display) {
                return;
              }
              var ctx = me.ctx;
              var items = me._labelItems || (me._labelItems = me._computeLabelItems());
              var i7, j, ilen, jlen, item, tickFont, label, y2;
              for (i7 = 0, ilen = items.length; i7 < ilen; ++i7) {
                item = items[i7];
                tickFont = item.font;
                ctx.save();
                ctx.translate(item.x, item.y);
                ctx.rotate(item.rotation);
                ctx.font = tickFont.string;
                ctx.fillStyle = tickFont.color;
                ctx.textBaseline = "middle";
                ctx.textAlign = item.textAlign;
                label = item.label;
                y2 = item.textOffset;
                if (isArray(label)) {
                  for (j = 0, jlen = label.length; j < jlen; ++j) {
                    ctx.fillText("" + label[j], 0, y2);
                    y2 += tickFont.lineHeight;
                  }
                } else {
                  ctx.fillText(label, 0, y2);
                }
                ctx.restore();
              }
            },
            _drawTitle: function() {
              var me = this;
              var ctx = me.ctx;
              var options2 = me.options;
              var scaleLabel = options2.scaleLabel;
              if (!scaleLabel.display) {
                return;
              }
              var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
              var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
              var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
              var halfLineHeight = scaleLabelFont.lineHeight / 2;
              var position = options2.position;
              var rotation = 0;
              var scaleLabelX, scaleLabelY;
              if (me.isHorizontal()) {
                scaleLabelX = me.left + me.width / 2;
                scaleLabelY = position === "bottom" ? me.bottom - halfLineHeight - scaleLabelPadding.bottom : me.top + halfLineHeight + scaleLabelPadding.top;
              } else {
                var isLeft = position === "left";
                scaleLabelX = isLeft ? me.left + halfLineHeight + scaleLabelPadding.top : me.right - halfLineHeight - scaleLabelPadding.top;
                scaleLabelY = me.top + me.height / 2;
                rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
              }
              ctx.save();
              ctx.translate(scaleLabelX, scaleLabelY);
              ctx.rotate(rotation);
              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              ctx.fillStyle = scaleLabelFontColor;
              ctx.font = scaleLabelFont.string;
              ctx.fillText(scaleLabel.labelString, 0, 0);
              ctx.restore();
            },
            draw: function(chartArea) {
              var me = this;
              if (!me._isVisible()) {
                return;
              }
              me._drawGrid(chartArea);
              me._drawTitle();
              me._drawLabels();
            },
            _layers: function() {
              var me = this;
              var opts = me.options;
              var tz = opts.ticks && opts.ticks.z || 0;
              var gz = opts.gridLines && opts.gridLines.z || 0;
              if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
                return [{
                  z: tz,
                  draw: function() {
                    me.draw.apply(me, arguments);
                  }
                }];
              }
              return [{
                z: gz,
                draw: function() {
                  me._drawGrid.apply(me, arguments);
                  me._drawTitle.apply(me, arguments);
                }
              }, {
                z: tz,
                draw: function() {
                  me._drawLabels.apply(me, arguments);
                }
              }];
            },
            _getMatchingVisibleMetas: function(type) {
              var me = this;
              var isHorizontal = me.isHorizontal();
              return me.chart._getSortedVisibleDatasetMetas().filter(function(meta) {
                return (!type || meta.type === type) && (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
              });
            }
          });
          Scale.prototype._draw = Scale.prototype.draw;
          var core_scale = Scale;
          var isNullOrUndef$1 = helpers$1.isNullOrUndef;
          var defaultConfig = {
            position: "bottom"
          };
          var scale_category = core_scale.extend({
            determineDataLimits: function() {
              var me = this;
              var labels = me._getLabels();
              var ticksOpts = me.options.ticks;
              var min = ticksOpts.min;
              var max = ticksOpts.max;
              var minIndex = 0;
              var maxIndex = labels.length - 1;
              var findIndex;
              if (min !== void 0) {
                findIndex = labels.indexOf(min);
                if (findIndex >= 0) {
                  minIndex = findIndex;
                }
              }
              if (max !== void 0) {
                findIndex = labels.indexOf(max);
                if (findIndex >= 0) {
                  maxIndex = findIndex;
                }
              }
              me.minIndex = minIndex;
              me.maxIndex = maxIndex;
              me.min = labels[minIndex];
              me.max = labels[maxIndex];
            },
            buildTicks: function() {
              var me = this;
              var labels = me._getLabels();
              var minIndex = me.minIndex;
              var maxIndex = me.maxIndex;
              me.ticks = minIndex === 0 && maxIndex === labels.length - 1 ? labels : labels.slice(minIndex, maxIndex + 1);
            },
            getLabelForIndex: function(index, datasetIndex) {
              var me = this;
              var chart = me.chart;
              if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
                return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
              }
              return me._getLabels()[index];
            },
            _configure: function() {
              var me = this;
              var offset = me.options.offset;
              var ticks = me.ticks;
              core_scale.prototype._configure.call(me);
              if (!me.isHorizontal()) {
                me._reversePixels = !me._reversePixels;
              }
              if (!ticks) {
                return;
              }
              me._startValue = me.minIndex - (offset ? 0.5 : 0);
              me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
            },
            getPixelForValue: function(value, index, datasetIndex) {
              var me = this;
              var valueCategory, labels, idx;
              if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
                value = me.chart.data.datasets[datasetIndex].data[index];
              }
              if (!isNullOrUndef$1(value)) {
                valueCategory = me.isHorizontal() ? value.x : value.y;
              }
              if (valueCategory !== void 0 || value !== void 0 && isNaN(index)) {
                labels = me._getLabels();
                value = helpers$1.valueOrDefault(valueCategory, value);
                idx = labels.indexOf(value);
                index = idx !== -1 ? idx : index;
                if (isNaN(index)) {
                  index = value;
                }
              }
              return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
            },
            getPixelForTick: function(index) {
              var ticks = this.ticks;
              return index < 0 || index > ticks.length - 1 ? null : this.getPixelForValue(ticks[index], index + this.minIndex);
            },
            getValueForPixel: function(pixel) {
              var me = this;
              var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
              return Math.min(Math.max(value, 0), me.ticks.length - 1);
            },
            getBasePixel: function() {
              return this.bottom;
            }
          });
          var _defaults = defaultConfig;
          scale_category._defaults = _defaults;
          var noop = helpers$1.noop;
          var isNullOrUndef$2 = helpers$1.isNullOrUndef;
          function generateTicks(generationOptions, dataRange) {
            var ticks = [];
            var MIN_SPACING = 1e-14;
            var stepSize = generationOptions.stepSize;
            var unit = stepSize || 1;
            var maxNumSpaces = generationOptions.maxTicks - 1;
            var min = generationOptions.min;
            var max = generationOptions.max;
            var precision = generationOptions.precision;
            var rmin = dataRange.min;
            var rmax = dataRange.max;
            var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
            var factor, niceMin, niceMax, numSpaces;
            if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
              return [rmin, rmax];
            }
            numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
            if (numSpaces > maxNumSpaces) {
              spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
            }
            if (stepSize || isNullOrUndef$2(precision)) {
              factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
            } else {
              factor = Math.pow(10, precision);
              spacing = Math.ceil(spacing * factor) / factor;
            }
            niceMin = Math.floor(rmin / spacing) * spacing;
            niceMax = Math.ceil(rmax / spacing) * spacing;
            if (stepSize) {
              if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1e3)) {
                niceMin = min;
              }
              if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1e3)) {
                niceMax = max;
              }
            }
            numSpaces = (niceMax - niceMin) / spacing;
            if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1e3)) {
              numSpaces = Math.round(numSpaces);
            } else {
              numSpaces = Math.ceil(numSpaces);
            }
            niceMin = Math.round(niceMin * factor) / factor;
            niceMax = Math.round(niceMax * factor) / factor;
            ticks.push(isNullOrUndef$2(min) ? niceMin : min);
            for (var j = 1; j < numSpaces; ++j) {
              ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
            }
            ticks.push(isNullOrUndef$2(max) ? niceMax : max);
            return ticks;
          }
          var scale_linearbase = core_scale.extend({
            getRightValue: function(value) {
              if (typeof value === "string") {
                return +value;
              }
              return core_scale.prototype.getRightValue.call(this, value);
            },
            handleTickRangeOptions: function() {
              var me = this;
              var opts = me.options;
              var tickOpts = opts.ticks;
              if (tickOpts.beginAtZero) {
                var minSign = helpers$1.sign(me.min);
                var maxSign = helpers$1.sign(me.max);
                if (minSign < 0 && maxSign < 0) {
                  me.max = 0;
                } else if (minSign > 0 && maxSign > 0) {
                  me.min = 0;
                }
              }
              var setMin = tickOpts.min !== void 0 || tickOpts.suggestedMin !== void 0;
              var setMax = tickOpts.max !== void 0 || tickOpts.suggestedMax !== void 0;
              if (tickOpts.min !== void 0) {
                me.min = tickOpts.min;
              } else if (tickOpts.suggestedMin !== void 0) {
                if (me.min === null) {
                  me.min = tickOpts.suggestedMin;
                } else {
                  me.min = Math.min(me.min, tickOpts.suggestedMin);
                }
              }
              if (tickOpts.max !== void 0) {
                me.max = tickOpts.max;
              } else if (tickOpts.suggestedMax !== void 0) {
                if (me.max === null) {
                  me.max = tickOpts.suggestedMax;
                } else {
                  me.max = Math.max(me.max, tickOpts.suggestedMax);
                }
              }
              if (setMin !== setMax) {
                if (me.min >= me.max) {
                  if (setMin) {
                    me.max = me.min + 1;
                  } else {
                    me.min = me.max - 1;
                  }
                }
              }
              if (me.min === me.max) {
                me.max++;
                if (!tickOpts.beginAtZero) {
                  me.min--;
                }
              }
            },
            getTickLimit: function() {
              var me = this;
              var tickOpts = me.options.ticks;
              var stepSize = tickOpts.stepSize;
              var maxTicksLimit = tickOpts.maxTicksLimit;
              var maxTicks;
              if (stepSize) {
                maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
              } else {
                maxTicks = me._computeTickLimit();
                maxTicksLimit = maxTicksLimit || 11;
              }
              if (maxTicksLimit) {
                maxTicks = Math.min(maxTicksLimit, maxTicks);
              }
              return maxTicks;
            },
            _computeTickLimit: function() {
              return Number.POSITIVE_INFINITY;
            },
            handleDirectionalChanges: noop,
            buildTicks: function() {
              var me = this;
              var opts = me.options;
              var tickOpts = opts.ticks;
              var maxTicks = me.getTickLimit();
              maxTicks = Math.max(2, maxTicks);
              var numericGeneratorOptions = {
                maxTicks,
                min: tickOpts.min,
                max: tickOpts.max,
                precision: tickOpts.precision,
                stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
              };
              var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);
              me.handleDirectionalChanges();
              me.max = helpers$1.max(ticks);
              me.min = helpers$1.min(ticks);
              if (tickOpts.reverse) {
                ticks.reverse();
                me.start = me.max;
                me.end = me.min;
              } else {
                me.start = me.min;
                me.end = me.max;
              }
            },
            convertTicksToLabels: function() {
              var me = this;
              me.ticksAsNumbers = me.ticks.slice();
              me.zeroLineIndex = me.ticks.indexOf(0);
              core_scale.prototype.convertTicksToLabels.call(me);
            },
            _configure: function() {
              var me = this;
              var ticks = me.getTicks();
              var start = me.min;
              var end = me.max;
              var offset;
              core_scale.prototype._configure.call(me);
              if (me.options.offset && ticks.length) {
                offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
                start -= offset;
                end += offset;
              }
              me._startValue = start;
              me._endValue = end;
              me._valueRange = end - start;
            }
          });
          var defaultConfig$1 = {
            position: "left",
            ticks: {
              callback: core_ticks.formatters.linear
            }
          };
          var DEFAULT_MIN = 0;
          var DEFAULT_MAX = 1;
          function getOrCreateStack(stacks, stacked, meta) {
            var key = [
              meta.type,
              stacked === void 0 && meta.stack === void 0 ? meta.index : "",
              meta.stack
            ].join(".");
            if (stacks[key] === void 0) {
              stacks[key] = {
                pos: [],
                neg: []
              };
            }
            return stacks[key];
          }
          function stackData(scale2, stacks, meta, data) {
            var opts = scale2.options;
            var stacked = opts.stacked;
            var stack = getOrCreateStack(stacks, stacked, meta);
            var pos = stack.pos;
            var neg = stack.neg;
            var ilen = data.length;
            var i7, value;
            for (i7 = 0; i7 < ilen; ++i7) {
              value = scale2._parseValue(data[i7]);
              if (isNaN(value.min) || isNaN(value.max) || meta.data[i7].hidden) {
                continue;
              }
              pos[i7] = pos[i7] || 0;
              neg[i7] = neg[i7] || 0;
              if (opts.relativePoints) {
                pos[i7] = 100;
              } else if (value.min < 0 || value.max < 0) {
                neg[i7] += value.min;
              } else {
                pos[i7] += value.max;
              }
            }
          }
          function updateMinMax(scale2, meta, data) {
            var ilen = data.length;
            var i7, value;
            for (i7 = 0; i7 < ilen; ++i7) {
              value = scale2._parseValue(data[i7]);
              if (isNaN(value.min) || isNaN(value.max) || meta.data[i7].hidden) {
                continue;
              }
              scale2.min = Math.min(scale2.min, value.min);
              scale2.max = Math.max(scale2.max, value.max);
            }
          }
          var scale_linear = scale_linearbase.extend({
            determineDataLimits: function() {
              var me = this;
              var opts = me.options;
              var chart = me.chart;
              var datasets = chart.data.datasets;
              var metasets = me._getMatchingVisibleMetas();
              var hasStacks = opts.stacked;
              var stacks = {};
              var ilen = metasets.length;
              var i7, meta, data, values;
              me.min = Number.POSITIVE_INFINITY;
              me.max = Number.NEGATIVE_INFINITY;
              if (hasStacks === void 0) {
                for (i7 = 0; !hasStacks && i7 < ilen; ++i7) {
                  meta = metasets[i7];
                  hasStacks = meta.stack !== void 0;
                }
              }
              for (i7 = 0; i7 < ilen; ++i7) {
                meta = metasets[i7];
                data = datasets[meta.index].data;
                if (hasStacks) {
                  stackData(me, stacks, meta, data);
                } else {
                  updateMinMax(me, meta, data);
                }
              }
              helpers$1.each(stacks, function(stackValues) {
                values = stackValues.pos.concat(stackValues.neg);
                me.min = Math.min(me.min, helpers$1.min(values));
                me.max = Math.max(me.max, helpers$1.max(values));
              });
              me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
              me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;
              me.handleTickRangeOptions();
            },
            _computeTickLimit: function() {
              var me = this;
              var tickFont;
              if (me.isHorizontal()) {
                return Math.ceil(me.width / 40);
              }
              tickFont = helpers$1.options._parseFont(me.options.ticks);
              return Math.ceil(me.height / tickFont.lineHeight);
            },
            handleDirectionalChanges: function() {
              if (!this.isHorizontal()) {
                this.ticks.reverse();
              }
            },
            getLabelForIndex: function(index, datasetIndex) {
              return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
            },
            getPixelForValue: function(value) {
              var me = this;
              return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
            },
            getValueForPixel: function(pixel) {
              return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
            },
            getPixelForTick: function(index) {
              var ticks = this.ticksAsNumbers;
              if (index < 0 || index > ticks.length - 1) {
                return null;
              }
              return this.getPixelForValue(ticks[index]);
            }
          });
          var _defaults$1 = defaultConfig$1;
          scale_linear._defaults = _defaults$1;
          var valueOrDefault$b = helpers$1.valueOrDefault;
          var log10 = helpers$1.math.log10;
          function generateTicks$1(generationOptions, dataRange) {
            var ticks = [];
            var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));
            var endExp = Math.floor(log10(dataRange.max));
            var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
            var exp, significand;
            if (tickVal === 0) {
              exp = Math.floor(log10(dataRange.minNotZero));
              significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));
              ticks.push(tickVal);
              tickVal = significand * Math.pow(10, exp);
            } else {
              exp = Math.floor(log10(tickVal));
              significand = Math.floor(tickVal / Math.pow(10, exp));
            }
            var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
            do {
              ticks.push(tickVal);
              ++significand;
              if (significand === 10) {
                significand = 1;
                ++exp;
                precision = exp >= 0 ? 1 : precision;
              }
              tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
            } while (exp < endExp || exp === endExp && significand < endSignificand);
            var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
            ticks.push(lastTick);
            return ticks;
          }
          var defaultConfig$2 = {
            position: "left",
            ticks: {
              callback: core_ticks.formatters.logarithmic
            }
          };
          function nonNegativeOrDefault(value, defaultValue) {
            return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
          }
          var scale_logarithmic = core_scale.extend({
            determineDataLimits: function() {
              var me = this;
              var opts = me.options;
              var chart = me.chart;
              var datasets = chart.data.datasets;
              var isHorizontal = me.isHorizontal();
              function IDMatches(meta2) {
                return isHorizontal ? meta2.xAxisID === me.id : meta2.yAxisID === me.id;
              }
              var datasetIndex, meta, value, data, i7, ilen;
              me.min = Number.POSITIVE_INFINITY;
              me.max = Number.NEGATIVE_INFINITY;
              me.minNotZero = Number.POSITIVE_INFINITY;
              var hasStacks = opts.stacked;
              if (hasStacks === void 0) {
                for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
                  meta = chart.getDatasetMeta(datasetIndex);
                  if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) && meta.stack !== void 0) {
                    hasStacks = true;
                    break;
                  }
                }
              }
              if (opts.stacked || hasStacks) {
                var valuesPerStack = {};
                for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
                  meta = chart.getDatasetMeta(datasetIndex);
                  var key = [
                    meta.type,
                    opts.stacked === void 0 && meta.stack === void 0 ? datasetIndex : "",
                    meta.stack
                  ].join(".");
                  if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                    if (valuesPerStack[key] === void 0) {
                      valuesPerStack[key] = [];
                    }
                    data = datasets[datasetIndex].data;
                    for (i7 = 0, ilen = data.length; i7 < ilen; i7++) {
                      var values = valuesPerStack[key];
                      value = me._parseValue(data[i7]);
                      if (isNaN(value.min) || isNaN(value.max) || meta.data[i7].hidden || value.min < 0 || value.max < 0) {
                        continue;
                      }
                      values[i7] = values[i7] || 0;
                      values[i7] += value.max;
                    }
                  }
                }
                helpers$1.each(valuesPerStack, function(valuesForType) {
                  if (valuesForType.length > 0) {
                    var minVal = helpers$1.min(valuesForType);
                    var maxVal = helpers$1.max(valuesForType);
                    me.min = Math.min(me.min, minVal);
                    me.max = Math.max(me.max, maxVal);
                  }
                });
              } else {
                for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
                  meta = chart.getDatasetMeta(datasetIndex);
                  if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
                    data = datasets[datasetIndex].data;
                    for (i7 = 0, ilen = data.length; i7 < ilen; i7++) {
                      value = me._parseValue(data[i7]);
                      if (isNaN(value.min) || isNaN(value.max) || meta.data[i7].hidden || value.min < 0 || value.max < 0) {
                        continue;
                      }
                      me.min = Math.min(value.min, me.min);
                      me.max = Math.max(value.max, me.max);
                      if (value.min !== 0) {
                        me.minNotZero = Math.min(value.min, me.minNotZero);
                      }
                    }
                  }
                }
              }
              me.min = helpers$1.isFinite(me.min) ? me.min : null;
              me.max = helpers$1.isFinite(me.max) ? me.max : null;
              me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;
              this.handleTickRangeOptions();
            },
            handleTickRangeOptions: function() {
              var me = this;
              var tickOpts = me.options.ticks;
              var DEFAULT_MIN2 = 1;
              var DEFAULT_MAX2 = 10;
              me.min = nonNegativeOrDefault(tickOpts.min, me.min);
              me.max = nonNegativeOrDefault(tickOpts.max, me.max);
              if (me.min === me.max) {
                if (me.min !== 0 && me.min !== null) {
                  me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
                  me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
                } else {
                  me.min = DEFAULT_MIN2;
                  me.max = DEFAULT_MAX2;
                }
              }
              if (me.min === null) {
                me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
              }
              if (me.max === null) {
                me.max = me.min !== 0 ? Math.pow(10, Math.floor(log10(me.min)) + 1) : DEFAULT_MAX2;
              }
              if (me.minNotZero === null) {
                if (me.min > 0) {
                  me.minNotZero = me.min;
                } else if (me.max < 1) {
                  me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
                } else {
                  me.minNotZero = DEFAULT_MIN2;
                }
              }
            },
            buildTicks: function() {
              var me = this;
              var tickOpts = me.options.ticks;
              var reverse = !me.isHorizontal();
              var generationOptions = {
                min: nonNegativeOrDefault(tickOpts.min),
                max: nonNegativeOrDefault(tickOpts.max)
              };
              var ticks = me.ticks = generateTicks$1(generationOptions, me);
              me.max = helpers$1.max(ticks);
              me.min = helpers$1.min(ticks);
              if (tickOpts.reverse) {
                reverse = !reverse;
                me.start = me.max;
                me.end = me.min;
              } else {
                me.start = me.min;
                me.end = me.max;
              }
              if (reverse) {
                ticks.reverse();
              }
            },
            convertTicksToLabels: function() {
              this.tickValues = this.ticks.slice();
              core_scale.prototype.convertTicksToLabels.call(this);
            },
            getLabelForIndex: function(index, datasetIndex) {
              return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
            },
            getPixelForTick: function(index) {
              var ticks = this.tickValues;
              if (index < 0 || index > ticks.length - 1) {
                return null;
              }
              return this.getPixelForValue(ticks[index]);
            },
            _getFirstTickValue: function(value) {
              var exp = Math.floor(log10(value));
              var significand = Math.floor(value / Math.pow(10, exp));
              return significand * Math.pow(10, exp);
            },
            _configure: function() {
              var me = this;
              var start = me.min;
              var offset = 0;
              core_scale.prototype._configure.call(me);
              if (start === 0) {
                start = me._getFirstTickValue(me.minNotZero);
                offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
              }
              me._startValue = log10(start);
              me._valueOffset = offset;
              me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
            },
            getPixelForValue: function(value) {
              var me = this;
              var decimal = 0;
              value = +me.getRightValue(value);
              if (value > me.min && value > 0) {
                decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
              }
              return me.getPixelForDecimal(decimal);
            },
            getValueForPixel: function(pixel) {
              var me = this;
              var decimal = me.getDecimalForPixel(pixel);
              return decimal === 0 && me.min === 0 ? 0 : Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
            }
          });
          var _defaults$2 = defaultConfig$2;
          scale_logarithmic._defaults = _defaults$2;
          var valueOrDefault$c = helpers$1.valueOrDefault;
          var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
          var resolve$4 = helpers$1.options.resolve;
          var defaultConfig$3 = {
            display: true,
            animate: true,
            position: "chartArea",
            angleLines: {
              display: true,
              color: "rgba(0,0,0,0.1)",
              lineWidth: 1,
              borderDash: [],
              borderDashOffset: 0
            },
            gridLines: {
              circular: false
            },
            ticks: {
              showLabelBackdrop: true,
              backdropColor: "rgba(255,255,255,0.75)",
              backdropPaddingY: 2,
              backdropPaddingX: 2,
              callback: core_ticks.formatters.linear
            },
            pointLabels: {
              display: true,
              fontSize: 10,
              callback: function(label) {
                return label;
              }
            }
          };
          function getTickBackdropHeight(opts) {
            var tickOpts = opts.ticks;
            if (tickOpts.display && opts.display) {
              return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
            }
            return 0;
          }
          function measureLabelSize(ctx, lineHeight, label) {
            if (helpers$1.isArray(label)) {
              return {
                w: helpers$1.longestText(ctx, ctx.font, label),
                h: label.length * lineHeight
              };
            }
            return {
              w: ctx.measureText(label).width,
              h: lineHeight
            };
          }
          function determineLimits(angle, pos, size, min, max) {
            if (angle === min || angle === max) {
              return {
                start: pos - size / 2,
                end: pos + size / 2
              };
            } else if (angle < min || angle > max) {
              return {
                start: pos - size,
                end: pos
              };
            }
            return {
              start: pos,
              end: pos + size
            };
          }
          function fitWithPointLabels(scale2) {
            var plFont = helpers$1.options._parseFont(scale2.options.pointLabels);
            var furthestLimits = {
              l: 0,
              r: scale2.width,
              t: 0,
              b: scale2.height - scale2.paddingTop
            };
            var furthestAngles = {};
            var i7, textSize, pointPosition;
            scale2.ctx.font = plFont.string;
            scale2._pointLabelSizes = [];
            var valueCount = scale2.chart.data.labels.length;
            for (i7 = 0; i7 < valueCount; i7++) {
              pointPosition = scale2.getPointPosition(i7, scale2.drawingArea + 5);
              textSize = measureLabelSize(scale2.ctx, plFont.lineHeight, scale2.pointLabels[i7]);
              scale2._pointLabelSizes[i7] = textSize;
              var angleRadians = scale2.getIndexAngle(i7);
              var angle = helpers$1.toDegrees(angleRadians) % 360;
              var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
              var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
              if (hLimits.start < furthestLimits.l) {
                furthestLimits.l = hLimits.start;
                furthestAngles.l = angleRadians;
              }
              if (hLimits.end > furthestLimits.r) {
                furthestLimits.r = hLimits.end;
                furthestAngles.r = angleRadians;
              }
              if (vLimits.start < furthestLimits.t) {
                furthestLimits.t = vLimits.start;
                furthestAngles.t = angleRadians;
              }
              if (vLimits.end > furthestLimits.b) {
                furthestLimits.b = vLimits.end;
                furthestAngles.b = angleRadians;
              }
            }
            scale2.setReductions(scale2.drawingArea, furthestLimits, furthestAngles);
          }
          function getTextAlignForAngle(angle) {
            if (angle === 0 || angle === 180) {
              return "center";
            } else if (angle < 180) {
              return "left";
            }
            return "right";
          }
          function fillText(ctx, text, position, lineHeight) {
            var y2 = position.y + lineHeight / 2;
            var i7, ilen;
            if (helpers$1.isArray(text)) {
              for (i7 = 0, ilen = text.length; i7 < ilen; ++i7) {
                ctx.fillText(text[i7], position.x, y2);
                y2 += lineHeight;
              }
            } else {
              ctx.fillText(text, position.x, y2);
            }
          }
          function adjustPointPositionForLabelHeight(angle, textSize, position) {
            if (angle === 90 || angle === 270) {
              position.y -= textSize.h / 2;
            } else if (angle > 270 || angle < 90) {
              position.y -= textSize.h;
            }
          }
          function drawPointLabels(scale2) {
            var ctx = scale2.ctx;
            var opts = scale2.options;
            var pointLabelOpts = opts.pointLabels;
            var tickBackdropHeight = getTickBackdropHeight(opts);
            var outerDistance = scale2.getDistanceFromCenterForValue(opts.ticks.reverse ? scale2.min : scale2.max);
            var plFont = helpers$1.options._parseFont(pointLabelOpts);
            ctx.save();
            ctx.font = plFont.string;
            ctx.textBaseline = "middle";
            for (var i7 = scale2.chart.data.labels.length - 1; i7 >= 0; i7--) {
              var extra = i7 === 0 ? tickBackdropHeight / 2 : 0;
              var pointLabelPosition = scale2.getPointPosition(i7, outerDistance + extra + 5);
              var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i7, core_defaults.global.defaultFontColor);
              ctx.fillStyle = pointLabelFontColor;
              var angleRadians = scale2.getIndexAngle(i7);
              var angle = helpers$1.toDegrees(angleRadians);
              ctx.textAlign = getTextAlignForAngle(angle);
              adjustPointPositionForLabelHeight(angle, scale2._pointLabelSizes[i7], pointLabelPosition);
              fillText(ctx, scale2.pointLabels[i7], pointLabelPosition, plFont.lineHeight);
            }
            ctx.restore();
          }
          function drawRadiusLine(scale2, gridLineOpts, radius, index) {
            var ctx = scale2.ctx;
            var circular = gridLineOpts.circular;
            var valueCount = scale2.chart.data.labels.length;
            var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
            var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
            var pointPosition;
            if (!circular && !valueCount || !lineColor || !lineWidth) {
              return;
            }
            ctx.save();
            ctx.strokeStyle = lineColor;
            ctx.lineWidth = lineWidth;
            if (ctx.setLineDash) {
              ctx.setLineDash(gridLineOpts.borderDash || []);
              ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0;
            }
            ctx.beginPath();
            if (circular) {
              ctx.arc(scale2.xCenter, scale2.yCenter, radius, 0, Math.PI * 2);
            } else {
              pointPosition = scale2.getPointPosition(0, radius);
              ctx.moveTo(pointPosition.x, pointPosition.y);
              for (var i7 = 1; i7 < valueCount; i7++) {
                pointPosition = scale2.getPointPosition(i7, radius);
                ctx.lineTo(pointPosition.x, pointPosition.y);
              }
            }
            ctx.closePath();
            ctx.stroke();
            ctx.restore();
          }
          function numberOrZero(param) {
            return helpers$1.isNumber(param) ? param : 0;
          }
          var scale_radialLinear = scale_linearbase.extend({
            setDimensions: function() {
              var me = this;
              me.width = me.maxWidth;
              me.height = me.maxHeight;
              me.paddingTop = getTickBackdropHeight(me.options) / 2;
              me.xCenter = Math.floor(me.width / 2);
              me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
              me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
            },
            determineDataLimits: function() {
              var me = this;
              var chart = me.chart;
              var min = Number.POSITIVE_INFINITY;
              var max = Number.NEGATIVE_INFINITY;
              helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
                if (chart.isDatasetVisible(datasetIndex)) {
                  var meta = chart.getDatasetMeta(datasetIndex);
                  helpers$1.each(dataset.data, function(rawValue, index) {
                    var value = +me.getRightValue(rawValue);
                    if (isNaN(value) || meta.data[index].hidden) {
                      return;
                    }
                    min = Math.min(value, min);
                    max = Math.max(value, max);
                  });
                }
              });
              me.min = min === Number.POSITIVE_INFINITY ? 0 : min;
              me.max = max === Number.NEGATIVE_INFINITY ? 0 : max;
              me.handleTickRangeOptions();
            },
            _computeTickLimit: function() {
              return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
            },
            convertTicksToLabels: function() {
              var me = this;
              scale_linearbase.prototype.convertTicksToLabels.call(me);
              me.pointLabels = me.chart.data.labels.map(function() {
                var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
                return label || label === 0 ? label : "";
              });
            },
            getLabelForIndex: function(index, datasetIndex) {
              return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
            },
            fit: function() {
              var me = this;
              var opts = me.options;
              if (opts.display && opts.pointLabels.display) {
                fitWithPointLabels(me);
              } else {
                me.setCenterPoint(0, 0, 0, 0);
              }
            },
            setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
              var me = this;
              var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
              var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
              var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
              var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);
              radiusReductionLeft = numberOrZero(radiusReductionLeft);
              radiusReductionRight = numberOrZero(radiusReductionRight);
              radiusReductionTop = numberOrZero(radiusReductionTop);
              radiusReductionBottom = numberOrZero(radiusReductionBottom);
              me.drawingArea = Math.min(Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2), Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
              me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
            },
            setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
              var me = this;
              var maxRight = me.width - rightMovement - me.drawingArea;
              var maxLeft = leftMovement + me.drawingArea;
              var maxTop = topMovement + me.drawingArea;
              var maxBottom = me.height - me.paddingTop - bottomMovement - me.drawingArea;
              me.xCenter = Math.floor((maxLeft + maxRight) / 2 + me.left);
              me.yCenter = Math.floor((maxTop + maxBottom) / 2 + me.top + me.paddingTop);
            },
            getIndexAngle: function(index) {
              var chart = this.chart;
              var angleMultiplier = 360 / chart.data.labels.length;
              var options2 = chart.options || {};
              var startAngle = options2.startAngle || 0;
              var angle = (index * angleMultiplier + startAngle) % 360;
              return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
            },
            getDistanceFromCenterForValue: function(value) {
              var me = this;
              if (helpers$1.isNullOrUndef(value)) {
                return NaN;
              }
              var scalingFactor = me.drawingArea / (me.max - me.min);
              if (me.options.ticks.reverse) {
                return (me.max - value) * scalingFactor;
              }
              return (value - me.min) * scalingFactor;
            },
            getPointPosition: function(index, distanceFromCenter) {
              var me = this;
              var thisAngle = me.getIndexAngle(index) - Math.PI / 2;
              return {
                x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
                y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
              };
            },
            getPointPositionForValue: function(index, value) {
              return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
            },
            getBasePosition: function(index) {
              var me = this;
              var min = me.min;
              var max = me.max;
              return me.getPointPositionForValue(index || 0, me.beginAtZero ? 0 : min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0);
            },
            _drawGrid: function() {
              var me = this;
              var ctx = me.ctx;
              var opts = me.options;
              var gridLineOpts = opts.gridLines;
              var angleLineOpts = opts.angleLines;
              var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
              var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
              var i7, offset, position;
              if (opts.pointLabels.display) {
                drawPointLabels(me);
              }
              if (gridLineOpts.display) {
                helpers$1.each(me.ticks, function(label, index) {
                  if (index !== 0) {
                    offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                    drawRadiusLine(me, gridLineOpts, offset, index);
                  }
                });
              }
              if (angleLineOpts.display && lineWidth && lineColor) {
                ctx.save();
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = lineColor;
                if (ctx.setLineDash) {
                  ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
                  ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0]);
                }
                for (i7 = me.chart.data.labels.length - 1; i7 >= 0; i7--) {
                  offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
                  position = me.getPointPosition(i7, offset);
                  ctx.beginPath();
                  ctx.moveTo(me.xCenter, me.yCenter);
                  ctx.lineTo(position.x, position.y);
                  ctx.stroke();
                }
                ctx.restore();
              }
            },
            _drawLabels: function() {
              var me = this;
              var ctx = me.ctx;
              var opts = me.options;
              var tickOpts = opts.ticks;
              if (!tickOpts.display) {
                return;
              }
              var startAngle = me.getIndexAngle(0);
              var tickFont = helpers$1.options._parseFont(tickOpts);
              var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
              var offset, width;
              ctx.save();
              ctx.font = tickFont.string;
              ctx.translate(me.xCenter, me.yCenter);
              ctx.rotate(startAngle);
              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              helpers$1.each(me.ticks, function(label, index) {
                if (index === 0 && !tickOpts.reverse) {
                  return;
                }
                offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
                if (tickOpts.showLabelBackdrop) {
                  width = ctx.measureText(label).width;
                  ctx.fillStyle = tickOpts.backdropColor;
                  ctx.fillRect(-width / 2 - tickOpts.backdropPaddingX, -offset - tickFont.size / 2 - tickOpts.backdropPaddingY, width + tickOpts.backdropPaddingX * 2, tickFont.size + tickOpts.backdropPaddingY * 2);
                }
                ctx.fillStyle = tickFontColor;
                ctx.fillText(label, 0, -offset);
              });
              ctx.restore();
            },
            _drawTitle: helpers$1.noop
          });
          var _defaults$3 = defaultConfig$3;
          scale_radialLinear._defaults = _defaults$3;
          var deprecated$1 = helpers$1._deprecated;
          var resolve$5 = helpers$1.options.resolve;
          var valueOrDefault$d = helpers$1.valueOrDefault;
          var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
          var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
          var INTERVALS = {
            millisecond: {
              common: true,
              size: 1,
              steps: 1e3
            },
            second: {
              common: true,
              size: 1e3,
              steps: 60
            },
            minute: {
              common: true,
              size: 6e4,
              steps: 60
            },
            hour: {
              common: true,
              size: 36e5,
              steps: 24
            },
            day: {
              common: true,
              size: 864e5,
              steps: 30
            },
            week: {
              common: false,
              size: 6048e5,
              steps: 4
            },
            month: {
              common: true,
              size: 2628e6,
              steps: 12
            },
            quarter: {
              common: false,
              size: 7884e6,
              steps: 4
            },
            year: {
              common: true,
              size: 3154e7
            }
          };
          var UNITS = Object.keys(INTERVALS);
          function sorter(a3, b2) {
            return a3 - b2;
          }
          function arrayUnique(items) {
            var hash = {};
            var out = [];
            var i7, ilen, item;
            for (i7 = 0, ilen = items.length; i7 < ilen; ++i7) {
              item = items[i7];
              if (!hash[item]) {
                hash[item] = true;
                out.push(item);
              }
            }
            return out;
          }
          function getMin(options2) {
            return helpers$1.valueOrDefault(options2.time.min, options2.ticks.min);
          }
          function getMax(options2) {
            return helpers$1.valueOrDefault(options2.time.max, options2.ticks.max);
          }
          function buildLookupTable(timestamps, min, max, distribution) {
            if (distribution === "linear" || !timestamps.length) {
              return [
                { time: min, pos: 0 },
                { time: max, pos: 1 }
              ];
            }
            var table = [];
            var items = [min];
            var i7, ilen, prev, curr, next;
            for (i7 = 0, ilen = timestamps.length; i7 < ilen; ++i7) {
              curr = timestamps[i7];
              if (curr > min && curr < max) {
                items.push(curr);
              }
            }
            items.push(max);
            for (i7 = 0, ilen = items.length; i7 < ilen; ++i7) {
              next = items[i7 + 1];
              prev = items[i7 - 1];
              curr = items[i7];
              if (prev === void 0 || next === void 0 || Math.round((next + prev) / 2) !== curr) {
                table.push({ time: curr, pos: i7 / (ilen - 1) });
              }
            }
            return table;
          }
          function lookup(table, key, value) {
            var lo = 0;
            var hi = table.length - 1;
            var mid, i0, i1;
            while (lo >= 0 && lo <= hi) {
              mid = lo + hi >> 1;
              i0 = table[mid - 1] || null;
              i1 = table[mid];
              if (!i0) {
                return { lo: null, hi: i1 };
              } else if (i1[key] < value) {
                lo = mid + 1;
              } else if (i0[key] > value) {
                hi = mid - 1;
              } else {
                return { lo: i0, hi: i1 };
              }
            }
            return { lo: i1, hi: null };
          }
          function interpolate$1(table, skey, sval, tkey) {
            var range = lookup(table, skey, sval);
            var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
            var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;
            var span = next[skey] - prev[skey];
            var ratio = span ? (sval - prev[skey]) / span : 0;
            var offset = (next[tkey] - prev[tkey]) * ratio;
            return prev[tkey] + offset;
          }
          function toTimestamp(scale2, input) {
            var adapter = scale2._adapter;
            var options2 = scale2.options.time;
            var parser = options2.parser;
            var format = parser || options2.format;
            var value = input;
            if (typeof parser === "function") {
              value = parser(value);
            }
            if (!helpers$1.isFinite(value)) {
              value = typeof format === "string" ? adapter.parse(value, format) : adapter.parse(value);
            }
            if (value !== null) {
              return +value;
            }
            if (!parser && typeof format === "function") {
              value = format(input);
              if (!helpers$1.isFinite(value)) {
                value = adapter.parse(value);
              }
            }
            return value;
          }
          function parse(scale2, input) {
            if (helpers$1.isNullOrUndef(input)) {
              return null;
            }
            var options2 = scale2.options.time;
            var value = toTimestamp(scale2, scale2.getRightValue(input));
            if (value === null) {
              return value;
            }
            if (options2.round) {
              value = +scale2._adapter.startOf(value, options2.round);
            }
            return value;
          }
          function determineUnitForAutoTicks(minUnit, min, max, capacity) {
            var ilen = UNITS.length;
            var i7, interval, factor;
            for (i7 = UNITS.indexOf(minUnit); i7 < ilen - 1; ++i7) {
              interval = INTERVALS[UNITS[i7]];
              factor = interval.steps ? interval.steps : MAX_INTEGER;
              if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
                return UNITS[i7];
              }
            }
            return UNITS[ilen - 1];
          }
          function determineUnitForFormatting(scale2, numTicks, minUnit, min, max) {
            var i7, unit;
            for (i7 = UNITS.length - 1; i7 >= UNITS.indexOf(minUnit); i7--) {
              unit = UNITS[i7];
              if (INTERVALS[unit].common && scale2._adapter.diff(max, min, unit) >= numTicks - 1) {
                return unit;
              }
            }
            return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
          }
          function determineMajorUnit(unit) {
            for (var i7 = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i7 < ilen; ++i7) {
              if (INTERVALS[UNITS[i7]].common) {
                return UNITS[i7];
              }
            }
          }
          function generate(scale2, min, max, capacity) {
            var adapter = scale2._adapter;
            var options2 = scale2.options;
            var timeOpts = options2.time;
            var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
            var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
            var weekday = minor === "week" ? timeOpts.isoWeekday : false;
            var first = min;
            var ticks = [];
            var time;
            if (weekday) {
              first = +adapter.startOf(first, "isoWeek", weekday);
            }
            first = +adapter.startOf(first, weekday ? "day" : minor);
            if (adapter.diff(max, min, minor) > 1e5 * stepSize) {
              throw min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor;
            }
            for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
              ticks.push(time);
            }
            if (time === max || options2.bounds === "ticks") {
              ticks.push(time);
            }
            return ticks;
          }
          function computeOffsets(table, ticks, min, max, options2) {
            var start = 0;
            var end = 0;
            var first, last;
            if (options2.offset && ticks.length) {
              first = interpolate$1(table, "time", ticks[0], "pos");
              if (ticks.length === 1) {
                start = 1 - first;
              } else {
                start = (interpolate$1(table, "time", ticks[1], "pos") - first) / 2;
              }
              last = interpolate$1(table, "time", ticks[ticks.length - 1], "pos");
              if (ticks.length === 1) {
                end = last;
              } else {
                end = (last - interpolate$1(table, "time", ticks[ticks.length - 2], "pos")) / 2;
              }
            }
            return { start, end, factor: 1 / (start + 1 + end) };
          }
          function setMajorTicks(scale2, ticks, map, majorUnit) {
            var adapter = scale2._adapter;
            var first = +adapter.startOf(ticks[0].value, majorUnit);
            var last = ticks[ticks.length - 1].value;
            var major, index;
            for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
              index = map[major];
              if (index >= 0) {
                ticks[index].major = true;
              }
            }
            return ticks;
          }
          function ticksFromTimestamps(scale2, values, majorUnit) {
            var ticks = [];
            var map = {};
            var ilen = values.length;
            var i7, value;
            for (i7 = 0; i7 < ilen; ++i7) {
              value = values[i7];
              map[value] = i7;
              ticks.push({
                value,
                major: false
              });
            }
            return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale2, ticks, map, majorUnit);
          }
          var defaultConfig$4 = {
            position: "bottom",
            distribution: "linear",
            bounds: "data",
            adapters: {},
            time: {
              parser: false,
              unit: false,
              round: false,
              displayFormat: false,
              isoWeekday: false,
              minUnit: "millisecond",
              displayFormats: {}
            },
            ticks: {
              autoSkip: false,
              source: "auto",
              major: {
                enabled: false
              }
            }
          };
          var scale_time = core_scale.extend({
            initialize: function() {
              this.mergeTicksOptions();
              core_scale.prototype.initialize.call(this);
            },
            update: function() {
              var me = this;
              var options2 = me.options;
              var time = options2.time || (options2.time = {});
              var adapter = me._adapter = new core_adapters._date(options2.adapters.date);
              deprecated$1("time scale", time.format, "time.format", "time.parser");
              deprecated$1("time scale", time.min, "time.min", "ticks.min");
              deprecated$1("time scale", time.max, "time.max", "ticks.max");
              helpers$1.mergeIf(time.displayFormats, adapter.formats());
              return core_scale.prototype.update.apply(me, arguments);
            },
            getRightValue: function(rawValue) {
              if (rawValue && rawValue.t !== void 0) {
                rawValue = rawValue.t;
              }
              return core_scale.prototype.getRightValue.call(this, rawValue);
            },
            determineDataLimits: function() {
              var me = this;
              var chart = me.chart;
              var adapter = me._adapter;
              var options2 = me.options;
              var unit = options2.time.unit || "day";
              var min = MAX_INTEGER;
              var max = MIN_INTEGER;
              var timestamps = [];
              var datasets = [];
              var labels = [];
              var i7, j, ilen, jlen, data, timestamp, labelsAdded;
              var dataLabels = me._getLabels();
              for (i7 = 0, ilen = dataLabels.length; i7 < ilen; ++i7) {
                labels.push(parse(me, dataLabels[i7]));
              }
              for (i7 = 0, ilen = (chart.data.datasets || []).length; i7 < ilen; ++i7) {
                if (chart.isDatasetVisible(i7)) {
                  data = chart.data.datasets[i7].data;
                  if (helpers$1.isObject(data[0])) {
                    datasets[i7] = [];
                    for (j = 0, jlen = data.length; j < jlen; ++j) {
                      timestamp = parse(me, data[j]);
                      timestamps.push(timestamp);
                      datasets[i7][j] = timestamp;
                    }
                  } else {
                    datasets[i7] = labels.slice(0);
                    if (!labelsAdded) {
                      timestamps = timestamps.concat(labels);
                      labelsAdded = true;
                    }
                  }
                } else {
                  datasets[i7] = [];
                }
              }
              if (labels.length) {
                min = Math.min(min, labels[0]);
                max = Math.max(max, labels[labels.length - 1]);
              }
              if (timestamps.length) {
                timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
                min = Math.min(min, timestamps[0]);
                max = Math.max(max, timestamps[timestamps.length - 1]);
              }
              min = parse(me, getMin(options2)) || min;
              max = parse(me, getMax(options2)) || max;
              min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
              max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;
              me.min = Math.min(min, max);
              me.max = Math.max(min + 1, max);
              me._table = [];
              me._timestamps = {
                data: timestamps,
                datasets,
                labels
              };
            },
            buildTicks: function() {
              var me = this;
              var min = me.min;
              var max = me.max;
              var options2 = me.options;
              var tickOpts = options2.ticks;
              var timeOpts = options2.time;
              var timestamps = me._timestamps;
              var ticks = [];
              var capacity = me.getLabelCapacity(min);
              var source = tickOpts.source;
              var distribution = options2.distribution;
              var i7, ilen, timestamp;
              if (source === "data" || source === "auto" && distribution === "series") {
                timestamps = timestamps.data;
              } else if (source === "labels") {
                timestamps = timestamps.labels;
              } else {
                timestamps = generate(me, min, max, capacity);
              }
              if (options2.bounds === "ticks" && timestamps.length) {
                min = timestamps[0];
                max = timestamps[timestamps.length - 1];
              }
              min = parse(me, getMin(options2)) || min;
              max = parse(me, getMax(options2)) || max;
              for (i7 = 0, ilen = timestamps.length; i7 < ilen; ++i7) {
                timestamp = timestamps[i7];
                if (timestamp >= min && timestamp <= max) {
                  ticks.push(timestamp);
                }
              }
              me.min = min;
              me.max = max;
              me._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity) : determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
              me._majorUnit = !tickOpts.major.enabled || me._unit === "year" ? void 0 : determineMajorUnit(me._unit);
              me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
              me._offsets = computeOffsets(me._table, ticks, min, max, options2);
              if (tickOpts.reverse) {
                ticks.reverse();
              }
              return ticksFromTimestamps(me, ticks, me._majorUnit);
            },
            getLabelForIndex: function(index, datasetIndex) {
              var me = this;
              var adapter = me._adapter;
              var data = me.chart.data;
              var timeOpts = me.options.time;
              var label = data.labels && index < data.labels.length ? data.labels[index] : "";
              var value = data.datasets[datasetIndex].data[index];
              if (helpers$1.isObject(value)) {
                label = me.getRightValue(value);
              }
              if (timeOpts.tooltipFormat) {
                return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
              }
              if (typeof label === "string") {
                return label;
              }
              return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
            },
            tickFormatFunction: function(time, index, ticks, format) {
              var me = this;
              var adapter = me._adapter;
              var options2 = me.options;
              var formats = options2.time.displayFormats;
              var minorFormat = formats[me._unit];
              var majorUnit = me._majorUnit;
              var majorFormat = formats[majorUnit];
              var tick = ticks[index];
              var tickOpts = options2.ticks;
              var major = majorUnit && majorFormat && tick && tick.major;
              var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
              var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
              var formatter = resolve$5([
                nestedTickOpts.callback,
                nestedTickOpts.userCallback,
                tickOpts.callback,
                tickOpts.userCallback
              ]);
              return formatter ? formatter(label, index, ticks) : label;
            },
            convertTicksToLabels: function(ticks) {
              var labels = [];
              var i7, ilen;
              for (i7 = 0, ilen = ticks.length; i7 < ilen; ++i7) {
                labels.push(this.tickFormatFunction(ticks[i7].value, i7, ticks));
              }
              return labels;
            },
            getPixelForOffset: function(time) {
              var me = this;
              var offsets = me._offsets;
              var pos = interpolate$1(me._table, "time", time, "pos");
              return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
            },
            getPixelForValue: function(value, index, datasetIndex) {
              var me = this;
              var time = null;
              if (index !== void 0 && datasetIndex !== void 0) {
                time = me._timestamps.datasets[datasetIndex][index];
              }
              if (time === null) {
                time = parse(me, value);
              }
              if (time !== null) {
                return me.getPixelForOffset(time);
              }
            },
            getPixelForTick: function(index) {
              var ticks = this.getTicks();
              return index >= 0 && index < ticks.length ? this.getPixelForOffset(ticks[index].value) : null;
            },
            getValueForPixel: function(pixel) {
              var me = this;
              var offsets = me._offsets;
              var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
              var time = interpolate$1(me._table, "pos", pos, "time");
              return me._adapter._create(time);
            },
            _getLabelSize: function(label) {
              var me = this;
              var ticksOpts = me.options.ticks;
              var tickLabelWidth = me.ctx.measureText(label).width;
              var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
              var cosRotation = Math.cos(angle);
              var sinRotation = Math.sin(angle);
              var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);
              return {
                w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
                h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
              };
            },
            getLabelWidth: function(label) {
              return this._getLabelSize(label).w;
            },
            getLabelCapacity: function(exampleTime) {
              var me = this;
              var timeOpts = me.options.time;
              var displayFormats = timeOpts.displayFormats;
              var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
              var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
              var size = me._getLabelSize(exampleLabel);
              var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);
              if (me.options.offset) {
                capacity--;
              }
              return capacity > 0 ? capacity : 1;
            }
          });
          var _defaults$4 = defaultConfig$4;
          scale_time._defaults = _defaults$4;
          var scales = {
            category: scale_category,
            linear: scale_linear,
            logarithmic: scale_logarithmic,
            radialLinear: scale_radialLinear,
            time: scale_time
          };
          var FORMATS = {
            datetime: "MMM D, YYYY, h:mm:ss a",
            millisecond: "h:mm:ss.SSS a",
            second: "h:mm:ss a",
            minute: "h:mm a",
            hour: "hA",
            day: "MMM D",
            week: "ll",
            month: "MMM YYYY",
            quarter: "[Q]Q - YYYY",
            year: "YYYY"
          };
          core_adapters._date.override(typeof moment === "function" ? {
            _id: "moment",
            formats: function() {
              return FORMATS;
            },
            parse: function(value, format) {
              if (typeof value === "string" && typeof format === "string") {
                value = moment(value, format);
              } else if (!(value instanceof moment)) {
                value = moment(value);
              }
              return value.isValid() ? value.valueOf() : null;
            },
            format: function(time, format) {
              return moment(time).format(format);
            },
            add: function(time, amount, unit) {
              return moment(time).add(amount, unit).valueOf();
            },
            diff: function(max, min, unit) {
              return moment(max).diff(moment(min), unit);
            },
            startOf: function(time, unit, weekday) {
              time = moment(time);
              if (unit === "isoWeek") {
                return time.isoWeekday(weekday).valueOf();
              }
              return time.startOf(unit).valueOf();
            },
            endOf: function(time, unit) {
              return moment(time).endOf(unit).valueOf();
            },
            _create: function(time) {
              return moment(time);
            }
          } : {});
          core_defaults._set("global", {
            plugins: {
              filler: {
                propagate: true
              }
            }
          });
          var mappers = {
            dataset: function(source) {
              var index = source.fill;
              var chart = source.chart;
              var meta = chart.getDatasetMeta(index);
              var visible = meta && chart.isDatasetVisible(index);
              var points = visible && meta.dataset._children || [];
              var length = points.length || 0;
              return !length ? null : function(point, i7) {
                return i7 < length && points[i7]._view || null;
              };
            },
            boundary: function(source) {
              var boundary = source.boundary;
              var x2 = boundary ? boundary.x : null;
              var y2 = boundary ? boundary.y : null;
              if (helpers$1.isArray(boundary)) {
                return function(point, i7) {
                  return boundary[i7];
                };
              }
              return function(point) {
                return {
                  x: x2 === null ? point.x : x2,
                  y: y2 === null ? point.y : y2
                };
              };
            }
          };
          function decodeFill(el, index, count) {
            var model = el._model || {};
            var fill = model.fill;
            var target;
            if (fill === void 0) {
              fill = !!model.backgroundColor;
            }
            if (fill === false || fill === null) {
              return false;
            }
            if (fill === true) {
              return "origin";
            }
            target = parseFloat(fill, 10);
            if (isFinite(target) && Math.floor(target) === target) {
              if (fill[0] === "-" || fill[0] === "+") {
                target = index + target;
              }
              if (target === index || target < 0 || target >= count) {
                return false;
              }
              return target;
            }
            switch (fill) {
              case "bottom":
                return "start";
              case "top":
                return "end";
              case "zero":
                return "origin";
              case "origin":
              case "start":
              case "end":
                return fill;
              default:
                return false;
            }
          }
          function computeLinearBoundary(source) {
            var model = source.el._model || {};
            var scale2 = source.el._scale || {};
            var fill = source.fill;
            var target = null;
            var horizontal;
            if (isFinite(fill)) {
              return null;
            }
            if (fill === "start") {
              target = model.scaleBottom === void 0 ? scale2.bottom : model.scaleBottom;
            } else if (fill === "end") {
              target = model.scaleTop === void 0 ? scale2.top : model.scaleTop;
            } else if (model.scaleZero !== void 0) {
              target = model.scaleZero;
            } else if (scale2.getBasePixel) {
              target = scale2.getBasePixel();
            }
            if (target !== void 0 && target !== null) {
              if (target.x !== void 0 && target.y !== void 0) {
                return target;
              }
              if (helpers$1.isFinite(target)) {
                horizontal = scale2.isHorizontal();
                return {
                  x: horizontal ? target : null,
                  y: horizontal ? null : target
                };
              }
            }
            return null;
          }
          function computeCircularBoundary(source) {
            var scale2 = source.el._scale;
            var options2 = scale2.options;
            var length = scale2.chart.data.labels.length;
            var fill = source.fill;
            var target = [];
            var start, end, center, i7, point;
            if (!length) {
              return null;
            }
            start = options2.ticks.reverse ? scale2.max : scale2.min;
            end = options2.ticks.reverse ? scale2.min : scale2.max;
            center = scale2.getPointPositionForValue(0, start);
            for (i7 = 0; i7 < length; ++i7) {
              point = fill === "start" || fill === "end" ? scale2.getPointPositionForValue(i7, fill === "start" ? start : end) : scale2.getBasePosition(i7);
              if (options2.gridLines.circular) {
                point.cx = center.x;
                point.cy = center.y;
                point.angle = scale2.getIndexAngle(i7) - Math.PI / 2;
              }
              target.push(point);
            }
            return target;
          }
          function computeBoundary(source) {
            var scale2 = source.el._scale || {};
            if (scale2.getPointPositionForValue) {
              return computeCircularBoundary(source);
            }
            return computeLinearBoundary(source);
          }
          function resolveTarget(sources, index, propagate) {
            var source = sources[index];
            var fill = source.fill;
            var visited = [index];
            var target;
            if (!propagate) {
              return fill;
            }
            while (fill !== false && visited.indexOf(fill) === -1) {
              if (!isFinite(fill)) {
                return fill;
              }
              target = sources[fill];
              if (!target) {
                return false;
              }
              if (target.visible) {
                return fill;
              }
              visited.push(fill);
              fill = target.fill;
            }
            return false;
          }
          function createMapper(source) {
            var fill = source.fill;
            var type = "dataset";
            if (fill === false) {
              return null;
            }
            if (!isFinite(fill)) {
              type = "boundary";
            }
            return mappers[type](source);
          }
          function isDrawable(point) {
            return point && !point.skip;
          }
          function drawArea(ctx, curve0, curve1, len0, len1) {
            var i7, cx, cy, r4;
            if (!len0 || !len1) {
              return;
            }
            ctx.moveTo(curve0[0].x, curve0[0].y);
            for (i7 = 1; i7 < len0; ++i7) {
              helpers$1.canvas.lineTo(ctx, curve0[i7 - 1], curve0[i7]);
            }
            if (curve1[0].angle !== void 0) {
              cx = curve1[0].cx;
              cy = curve1[0].cy;
              r4 = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
              for (i7 = len1 - 1; i7 > 0; --i7) {
                ctx.arc(cx, cy, r4, curve1[i7].angle, curve1[i7 - 1].angle, true);
              }
              return;
            }
            ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);
            for (i7 = len1 - 1; i7 > 0; --i7) {
              helpers$1.canvas.lineTo(ctx, curve1[i7], curve1[i7 - 1], true);
            }
          }
          function doFill(ctx, points, mapper, view, color, loop) {
            var count = points.length;
            var span = view.spanGaps;
            var curve0 = [];
            var curve1 = [];
            var len0 = 0;
            var len1 = 0;
            var i7, ilen, index, p0, p1, d0, d1, loopOffset;
            ctx.beginPath();
            for (i7 = 0, ilen = count; i7 < ilen; ++i7) {
              index = i7 % count;
              p0 = points[index]._view;
              p1 = mapper(p0, index, view);
              d0 = isDrawable(p0);
              d1 = isDrawable(p1);
              if (loop && loopOffset === void 0 && d0) {
                loopOffset = i7 + 1;
                ilen = count + loopOffset;
              }
              if (d0 && d1) {
                len0 = curve0.push(p0);
                len1 = curve1.push(p1);
              } else if (len0 && len1) {
                if (!span) {
                  drawArea(ctx, curve0, curve1, len0, len1);
                  len0 = len1 = 0;
                  curve0 = [];
                  curve1 = [];
                } else {
                  if (d0) {
                    curve0.push(p0);
                  }
                  if (d1) {
                    curve1.push(p1);
                  }
                }
              }
            }
            drawArea(ctx, curve0, curve1, len0, len1);
            ctx.closePath();
            ctx.fillStyle = color;
            ctx.fill();
          }
          var plugin_filler = {
            id: "filler",
            afterDatasetsUpdate: function(chart, options2) {
              var count = (chart.data.datasets || []).length;
              var propagate = options2.propagate;
              var sources = [];
              var meta, i7, el, source;
              for (i7 = 0; i7 < count; ++i7) {
                meta = chart.getDatasetMeta(i7);
                el = meta.dataset;
                source = null;
                if (el && el._model && el instanceof elements.Line) {
                  source = {
                    visible: chart.isDatasetVisible(i7),
                    fill: decodeFill(el, i7, count),
                    chart,
                    el
                  };
                }
                meta.$filler = source;
                sources.push(source);
              }
              for (i7 = 0; i7 < count; ++i7) {
                source = sources[i7];
                if (!source) {
                  continue;
                }
                source.fill = resolveTarget(sources, i7, propagate);
                source.boundary = computeBoundary(source);
                source.mapper = createMapper(source);
              }
            },
            beforeDatasetsDraw: function(chart) {
              var metasets = chart._getSortedVisibleDatasetMetas();
              var ctx = chart.ctx;
              var meta, i7, el, view, points, mapper, color;
              for (i7 = metasets.length - 1; i7 >= 0; --i7) {
                meta = metasets[i7].$filler;
                if (!meta || !meta.visible) {
                  continue;
                }
                el = meta.el;
                view = el._view;
                points = el._children || [];
                mapper = meta.mapper;
                color = view.backgroundColor || core_defaults.global.defaultColor;
                if (mapper && color && points.length) {
                  helpers$1.canvas.clipArea(ctx, chart.chartArea);
                  doFill(ctx, points, mapper, view, color, el._loop);
                  helpers$1.canvas.unclipArea(ctx);
                }
              }
            }
          };
          var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
          var noop$1 = helpers$1.noop;
          var valueOrDefault$e = helpers$1.valueOrDefault;
          core_defaults._set("global", {
            legend: {
              display: true,
              position: "top",
              align: "center",
              fullWidth: true,
              reverse: false,
              weight: 1e3,
              onClick: function(e8, legendItem) {
                var index = legendItem.datasetIndex;
                var ci = this.chart;
                var meta = ci.getDatasetMeta(index);
                meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
                ci.update();
              },
              onHover: null,
              onLeave: null,
              labels: {
                boxWidth: 40,
                padding: 10,
                generateLabels: function(chart) {
                  var datasets = chart.data.datasets;
                  var options2 = chart.options.legend || {};
                  var usePointStyle = options2.labels && options2.labels.usePointStyle;
                  return chart._getSortedDatasetMetas().map(function(meta) {
                    var style = meta.controller.getStyle(usePointStyle ? 0 : void 0);
                    return {
                      text: datasets[meta.index].label,
                      fillStyle: style.backgroundColor,
                      hidden: !chart.isDatasetVisible(meta.index),
                      lineCap: style.borderCapStyle,
                      lineDash: style.borderDash,
                      lineDashOffset: style.borderDashOffset,
                      lineJoin: style.borderJoinStyle,
                      lineWidth: style.borderWidth,
                      strokeStyle: style.borderColor,
                      pointStyle: style.pointStyle,
                      rotation: style.rotation,
                      datasetIndex: meta.index
                    };
                  }, this);
                }
              }
            },
            legendCallback: function(chart) {
              var list = document.createElement("ul");
              var datasets = chart.data.datasets;
              var i7, ilen, listItem, listItemSpan;
              list.setAttribute("class", chart.id + "-legend");
              for (i7 = 0, ilen = datasets.length; i7 < ilen; i7++) {
                listItem = list.appendChild(document.createElement("li"));
                listItemSpan = listItem.appendChild(document.createElement("span"));
                listItemSpan.style.backgroundColor = datasets[i7].backgroundColor;
                if (datasets[i7].label) {
                  listItem.appendChild(document.createTextNode(datasets[i7].label));
                }
              }
              return list.outerHTML;
            }
          });
          function getBoxWidth(labelOpts, fontSize) {
            return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ? fontSize : labelOpts.boxWidth;
          }
          var Legend = core_element.extend({
            initialize: function(config) {
              var me = this;
              helpers$1.extend(me, config);
              me.legendHitBoxes = [];
              me._hoveredItem = null;
              me.doughnutMode = false;
            },
            beforeUpdate: noop$1,
            update: function(maxWidth, maxHeight, margins) {
              var me = this;
              me.beforeUpdate();
              me.maxWidth = maxWidth;
              me.maxHeight = maxHeight;
              me.margins = margins;
              me.beforeSetDimensions();
              me.setDimensions();
              me.afterSetDimensions();
              me.beforeBuildLabels();
              me.buildLabels();
              me.afterBuildLabels();
              me.beforeFit();
              me.fit();
              me.afterFit();
              me.afterUpdate();
              return me.minSize;
            },
            afterUpdate: noop$1,
            beforeSetDimensions: noop$1,
            setDimensions: function() {
              var me = this;
              if (me.isHorizontal()) {
                me.width = me.maxWidth;
                me.left = 0;
                me.right = me.width;
              } else {
                me.height = me.maxHeight;
                me.top = 0;
                me.bottom = me.height;
              }
              me.paddingLeft = 0;
              me.paddingTop = 0;
              me.paddingRight = 0;
              me.paddingBottom = 0;
              me.minSize = {
                width: 0,
                height: 0
              };
            },
            afterSetDimensions: noop$1,
            beforeBuildLabels: noop$1,
            buildLabels: function() {
              var me = this;
              var labelOpts = me.options.labels || {};
              var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];
              if (labelOpts.filter) {
                legendItems = legendItems.filter(function(item) {
                  return labelOpts.filter(item, me.chart.data);
                });
              }
              if (me.options.reverse) {
                legendItems.reverse();
              }
              me.legendItems = legendItems;
            },
            afterBuildLabels: noop$1,
            beforeFit: noop$1,
            fit: function() {
              var me = this;
              var opts = me.options;
              var labelOpts = opts.labels;
              var display = opts.display;
              var ctx = me.ctx;
              var labelFont = helpers$1.options._parseFont(labelOpts);
              var fontSize = labelFont.size;
              var hitboxes = me.legendHitBoxes = [];
              var minSize = me.minSize;
              var isHorizontal = me.isHorizontal();
              if (isHorizontal) {
                minSize.width = me.maxWidth;
                minSize.height = display ? 10 : 0;
              } else {
                minSize.width = display ? 10 : 0;
                minSize.height = me.maxHeight;
              }
              if (!display) {
                me.width = minSize.width = me.height = minSize.height = 0;
                return;
              }
              ctx.font = labelFont.string;
              if (isHorizontal) {
                var lineWidths = me.lineWidths = [0];
                var totalHeight = 0;
                ctx.textAlign = "left";
                ctx.textBaseline = "middle";
                helpers$1.each(me.legendItems, function(legendItem, i7) {
                  var boxWidth = getBoxWidth(labelOpts, fontSize);
                  var width = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                  if (i7 === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
                    totalHeight += fontSize + labelOpts.padding;
                    lineWidths[lineWidths.length - (i7 > 0 ? 0 : 1)] = 0;
                  }
                  hitboxes[i7] = {
                    left: 0,
                    top: 0,
                    width,
                    height: fontSize
                  };
                  lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
                });
                minSize.height += totalHeight;
              } else {
                var vPadding = labelOpts.padding;
                var columnWidths = me.columnWidths = [];
                var columnHeights = me.columnHeights = [];
                var totalWidth = labelOpts.padding;
                var currentColWidth = 0;
                var currentColHeight = 0;
                helpers$1.each(me.legendItems, function(legendItem, i7) {
                  var boxWidth = getBoxWidth(labelOpts, fontSize);
                  var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
                  if (i7 > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
                    totalWidth += currentColWidth + labelOpts.padding;
                    columnWidths.push(currentColWidth);
                    columnHeights.push(currentColHeight);
                    currentColWidth = 0;
                    currentColHeight = 0;
                  }
                  currentColWidth = Math.max(currentColWidth, itemWidth);
                  currentColHeight += fontSize + vPadding;
                  hitboxes[i7] = {
                    left: 0,
                    top: 0,
                    width: itemWidth,
                    height: fontSize
                  };
                });
                totalWidth += currentColWidth;
                columnWidths.push(currentColWidth);
                columnHeights.push(currentColHeight);
                minSize.width += totalWidth;
              }
              me.width = minSize.width;
              me.height = minSize.height;
            },
            afterFit: noop$1,
            isHorizontal: function() {
              return this.options.position === "top" || this.options.position === "bottom";
            },
            draw: function() {
              var me = this;
              var opts = me.options;
              var labelOpts = opts.labels;
              var globalDefaults = core_defaults.global;
              var defaultColor2 = globalDefaults.defaultColor;
              var lineDefault = globalDefaults.elements.line;
              var legendHeight = me.height;
              var columnHeights = me.columnHeights;
              var legendWidth = me.width;
              var lineWidths = me.lineWidths;
              if (!opts.display) {
                return;
              }
              var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
              var ctx = me.ctx;
              var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
              var labelFont = helpers$1.options._parseFont(labelOpts);
              var fontSize = labelFont.size;
              var cursor;
              ctx.textAlign = rtlHelper.textAlign("left");
              ctx.textBaseline = "middle";
              ctx.lineWidth = 0.5;
              ctx.strokeStyle = fontColor;
              ctx.fillStyle = fontColor;
              ctx.font = labelFont.string;
              var boxWidth = getBoxWidth(labelOpts, fontSize);
              var hitboxes = me.legendHitBoxes;
              var drawLegendBox = function(x2, y2, legendItem) {
                if (isNaN(boxWidth) || boxWidth <= 0) {
                  return;
                }
                ctx.save();
                var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
                ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor2);
                ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
                ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
                ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor2);
                if (ctx.setLineDash) {
                  ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
                }
                if (labelOpts && labelOpts.usePointStyle) {
                  var radius = boxWidth * Math.SQRT2 / 2;
                  var centerX = rtlHelper.xPlus(x2, boxWidth / 2);
                  var centerY = y2 + fontSize / 2;
                  helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
                } else {
                  ctx.fillRect(rtlHelper.leftForLtr(x2, boxWidth), y2, boxWidth, fontSize);
                  if (lineWidth !== 0) {
                    ctx.strokeRect(rtlHelper.leftForLtr(x2, boxWidth), y2, boxWidth, fontSize);
                  }
                }
                ctx.restore();
              };
              var fillText2 = function(x2, y2, legendItem, textWidth) {
                var halfFontSize = fontSize / 2;
                var xLeft = rtlHelper.xPlus(x2, boxWidth + halfFontSize);
                var yMiddle = y2 + halfFontSize;
                ctx.fillText(legendItem.text, xLeft, yMiddle);
                if (legendItem.hidden) {
                  ctx.beginPath();
                  ctx.lineWidth = 2;
                  ctx.moveTo(xLeft, yMiddle);
                  ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
                  ctx.stroke();
                }
              };
              var alignmentOffset = function(dimension, blockSize) {
                switch (opts.align) {
                  case "start":
                    return labelOpts.padding;
                  case "end":
                    return dimension - blockSize;
                  default:
                    return (dimension - blockSize + labelOpts.padding) / 2;
                }
              };
              var isHorizontal = me.isHorizontal();
              if (isHorizontal) {
                cursor = {
                  x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
                  y: me.top + labelOpts.padding,
                  line: 0
                };
              } else {
                cursor = {
                  x: me.left + labelOpts.padding,
                  y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
                  line: 0
                };
              }
              helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);
              var itemHeight = fontSize + labelOpts.padding;
              helpers$1.each(me.legendItems, function(legendItem, i7) {
                var textWidth = ctx.measureText(legendItem.text).width;
                var width = boxWidth + fontSize / 2 + textWidth;
                var x2 = cursor.x;
                var y2 = cursor.y;
                rtlHelper.setWidth(me.minSize.width);
                if (isHorizontal) {
                  if (i7 > 0 && x2 + width + labelOpts.padding > me.left + me.minSize.width) {
                    y2 = cursor.y += itemHeight;
                    cursor.line++;
                    x2 = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
                  }
                } else if (i7 > 0 && y2 + itemHeight > me.top + me.minSize.height) {
                  x2 = cursor.x = x2 + me.columnWidths[cursor.line] + labelOpts.padding;
                  cursor.line++;
                  y2 = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
                }
                var realX = rtlHelper.x(x2);
                drawLegendBox(realX, y2, legendItem);
                hitboxes[i7].left = rtlHelper.leftForLtr(realX, hitboxes[i7].width);
                hitboxes[i7].top = y2;
                fillText2(realX, y2, legendItem, textWidth);
                if (isHorizontal) {
                  cursor.x += width + labelOpts.padding;
                } else {
                  cursor.y += itemHeight;
                }
              });
              helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
            },
            _getLegendItemAt: function(x2, y2) {
              var me = this;
              var i7, hitBox, lh;
              if (x2 >= me.left && x2 <= me.right && y2 >= me.top && y2 <= me.bottom) {
                lh = me.legendHitBoxes;
                for (i7 = 0; i7 < lh.length; ++i7) {
                  hitBox = lh[i7];
                  if (x2 >= hitBox.left && x2 <= hitBox.left + hitBox.width && y2 >= hitBox.top && y2 <= hitBox.top + hitBox.height) {
                    return me.legendItems[i7];
                  }
                }
              }
              return null;
            },
            handleEvent: function(e8) {
              var me = this;
              var opts = me.options;
              var type = e8.type === "mouseup" ? "click" : e8.type;
              var hoveredItem;
              if (type === "mousemove") {
                if (!opts.onHover && !opts.onLeave) {
                  return;
                }
              } else if (type === "click") {
                if (!opts.onClick) {
                  return;
                }
              } else {
                return;
              }
              hoveredItem = me._getLegendItemAt(e8.x, e8.y);
              if (type === "click") {
                if (hoveredItem && opts.onClick) {
                  opts.onClick.call(me, e8.native, hoveredItem);
                }
              } else {
                if (opts.onLeave && hoveredItem !== me._hoveredItem) {
                  if (me._hoveredItem) {
                    opts.onLeave.call(me, e8.native, me._hoveredItem);
                  }
                  me._hoveredItem = hoveredItem;
                }
                if (opts.onHover && hoveredItem) {
                  opts.onHover.call(me, e8.native, hoveredItem);
                }
              }
            }
          });
          function createNewLegendAndAttach(chart, legendOpts) {
            var legend2 = new Legend({
              ctx: chart.ctx,
              options: legendOpts,
              chart
            });
            core_layouts.configure(chart, legend2, legendOpts);
            core_layouts.addBox(chart, legend2);
            chart.legend = legend2;
          }
          var plugin_legend = {
            id: "legend",
            _element: Legend,
            beforeInit: function(chart) {
              var legendOpts = chart.options.legend;
              if (legendOpts) {
                createNewLegendAndAttach(chart, legendOpts);
              }
            },
            beforeUpdate: function(chart) {
              var legendOpts = chart.options.legend;
              var legend2 = chart.legend;
              if (legendOpts) {
                helpers$1.mergeIf(legendOpts, core_defaults.global.legend);
                if (legend2) {
                  core_layouts.configure(chart, legend2, legendOpts);
                  legend2.options = legendOpts;
                } else {
                  createNewLegendAndAttach(chart, legendOpts);
                }
              } else if (legend2) {
                core_layouts.removeBox(chart, legend2);
                delete chart.legend;
              }
            },
            afterEvent: function(chart, e8) {
              var legend2 = chart.legend;
              if (legend2) {
                legend2.handleEvent(e8);
              }
            }
          };
          var noop$2 = helpers$1.noop;
          core_defaults._set("global", {
            title: {
              display: false,
              fontStyle: "bold",
              fullWidth: true,
              padding: 10,
              position: "top",
              text: "",
              weight: 2e3
            }
          });
          var Title = core_element.extend({
            initialize: function(config) {
              var me = this;
              helpers$1.extend(me, config);
              me.legendHitBoxes = [];
            },
            beforeUpdate: noop$2,
            update: function(maxWidth, maxHeight, margins) {
              var me = this;
              me.beforeUpdate();
              me.maxWidth = maxWidth;
              me.maxHeight = maxHeight;
              me.margins = margins;
              me.beforeSetDimensions();
              me.setDimensions();
              me.afterSetDimensions();
              me.beforeBuildLabels();
              me.buildLabels();
              me.afterBuildLabels();
              me.beforeFit();
              me.fit();
              me.afterFit();
              me.afterUpdate();
              return me.minSize;
            },
            afterUpdate: noop$2,
            beforeSetDimensions: noop$2,
            setDimensions: function() {
              var me = this;
              if (me.isHorizontal()) {
                me.width = me.maxWidth;
                me.left = 0;
                me.right = me.width;
              } else {
                me.height = me.maxHeight;
                me.top = 0;
                me.bottom = me.height;
              }
              me.paddingLeft = 0;
              me.paddingTop = 0;
              me.paddingRight = 0;
              me.paddingBottom = 0;
              me.minSize = {
                width: 0,
                height: 0
              };
            },
            afterSetDimensions: noop$2,
            beforeBuildLabels: noop$2,
            buildLabels: noop$2,
            afterBuildLabels: noop$2,
            beforeFit: noop$2,
            fit: function() {
              var me = this;
              var opts = me.options;
              var minSize = me.minSize = {};
              var isHorizontal = me.isHorizontal();
              var lineCount, textSize;
              if (!opts.display) {
                me.width = minSize.width = me.height = minSize.height = 0;
                return;
              }
              lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
              textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;
              me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
              me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
            },
            afterFit: noop$2,
            isHorizontal: function() {
              var pos = this.options.position;
              return pos === "top" || pos === "bottom";
            },
            draw: function() {
              var me = this;
              var ctx = me.ctx;
              var opts = me.options;
              if (!opts.display) {
                return;
              }
              var fontOpts = helpers$1.options._parseFont(opts);
              var lineHeight = fontOpts.lineHeight;
              var offset = lineHeight / 2 + opts.padding;
              var rotation = 0;
              var top = me.top;
              var left = me.left;
              var bottom = me.bottom;
              var right = me.right;
              var maxWidth, titleX, titleY;
              ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor);
              ctx.font = fontOpts.string;
              if (me.isHorizontal()) {
                titleX = left + (right - left) / 2;
                titleY = top + offset;
                maxWidth = right - left;
              } else {
                titleX = opts.position === "left" ? left + offset : right - offset;
                titleY = top + (bottom - top) / 2;
                maxWidth = bottom - top;
                rotation = Math.PI * (opts.position === "left" ? -0.5 : 0.5);
              }
              ctx.save();
              ctx.translate(titleX, titleY);
              ctx.rotate(rotation);
              ctx.textAlign = "center";
              ctx.textBaseline = "middle";
              var text = opts.text;
              if (helpers$1.isArray(text)) {
                var y2 = 0;
                for (var i7 = 0; i7 < text.length; ++i7) {
                  ctx.fillText(text[i7], 0, y2, maxWidth);
                  y2 += lineHeight;
                }
              } else {
                ctx.fillText(text, 0, 0, maxWidth);
              }
              ctx.restore();
            }
          });
          function createNewTitleBlockAndAttach(chart, titleOpts) {
            var title2 = new Title({
              ctx: chart.ctx,
              options: titleOpts,
              chart
            });
            core_layouts.configure(chart, title2, titleOpts);
            core_layouts.addBox(chart, title2);
            chart.titleBlock = title2;
          }
          var plugin_title = {
            id: "title",
            _element: Title,
            beforeInit: function(chart) {
              var titleOpts = chart.options.title;
              if (titleOpts) {
                createNewTitleBlockAndAttach(chart, titleOpts);
              }
            },
            beforeUpdate: function(chart) {
              var titleOpts = chart.options.title;
              var titleBlock = chart.titleBlock;
              if (titleOpts) {
                helpers$1.mergeIf(titleOpts, core_defaults.global.title);
                if (titleBlock) {
                  core_layouts.configure(chart, titleBlock, titleOpts);
                  titleBlock.options = titleOpts;
                } else {
                  createNewTitleBlockAndAttach(chart, titleOpts);
                }
              } else if (titleBlock) {
                core_layouts.removeBox(chart, titleBlock);
                delete chart.titleBlock;
              }
            }
          };
          var plugins = {};
          var filler = plugin_filler;
          var legend = plugin_legend;
          var title = plugin_title;
          plugins.filler = filler;
          plugins.legend = legend;
          plugins.title = title;
          core_controller.helpers = helpers$1;
          core_helpers();
          core_controller._adapters = core_adapters;
          core_controller.Animation = core_animation;
          core_controller.animationService = core_animations;
          core_controller.controllers = controllers;
          core_controller.DatasetController = core_datasetController;
          core_controller.defaults = core_defaults;
          core_controller.Element = core_element;
          core_controller.elements = elements;
          core_controller.Interaction = core_interaction;
          core_controller.layouts = core_layouts;
          core_controller.platform = platform;
          core_controller.plugins = core_plugins;
          core_controller.Scale = core_scale;
          core_controller.scaleService = core_scaleService;
          core_controller.Ticks = core_ticks;
          core_controller.Tooltip = core_tooltip;
          core_controller.helpers.each(scales, function(scale2, type) {
            core_controller.scaleService.registerScaleType(type, scale2, scale2._defaults);
          });
          for (var k2 in plugins) {
            if (plugins.hasOwnProperty(k2)) {
              core_controller.plugins.register(plugins[k2]);
            }
          }
          core_controller.platform.initialize();
          var src = core_controller;
          if (typeof window !== "undefined") {
            window.Chart = core_controller;
          }
          core_controller.Chart = core_controller;
          core_controller.Legend = plugins.legend._element;
          core_controller.Title = plugins.title._element;
          core_controller.pluginService = core_controller.plugins;
          core_controller.PluginBase = core_controller.Element.extend({});
          core_controller.canvasHelpers = core_controller.helpers.canvas;
          core_controller.layoutService = core_controller.layouts;
          core_controller.LinearScaleBase = scale_linearbase;
          core_controller.helpers.each([
            "Bar",
            "Bubble",
            "Doughnut",
            "Line",
            "PolarArea",
            "Radar",
            "Scatter"
          ], function(klass) {
            core_controller[klass] = function(ctx, cfg) {
              return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
                type: klass.charAt(0).toLowerCase() + klass.slice(1)
              }));
            };
          });
          return src;
        });
      }
    });
    var require_element = __commonJS2({
      "node_modules/chartjs-plugin-annotation/src/element.js"(exports, module) {
        module.exports = function(Chart2) {
          var chartHelpers = Chart2.helpers;
          var AnnotationElement = Chart2.Element.extend({
            initialize: function() {
              this.hidden = false;
              this.hovering = false;
              this._model = chartHelpers.clone(this._model) || {};
              this.setDataLimits();
            },
            destroy: function() {
            },
            setDataLimits: function() {
            },
            configure: function() {
            },
            inRange: function() {
            },
            getCenterPoint: function() {
            },
            getWidth: function() {
            },
            getHeight: function() {
            },
            getArea: function() {
            },
            draw: function() {
            }
          });
          return AnnotationElement;
        };
      }
    });
    var require_helpers = __commonJS2({
      "node_modules/chartjs-plugin-annotation/src/helpers.js"(exports, module) {
        function noop() {
        }
        function elements(chartInstance) {
          var elements2 = chartInstance.annotation.elements;
          return Object.keys(elements2).map(function(id) {
            return elements2[id];
          });
        }
        function objectId() {
          return Math.random().toString(36).substr(2, 6);
        }
        function isValid(rawValue) {
          if (rawValue === null || typeof rawValue === "undefined") {
            return false;
          } else if (typeof rawValue === "number") {
            return isFinite(rawValue);
          } else {
            return !!rawValue;
          }
        }
        function decorate(obj, prop, func) {
          var prefix = "$";
          if (!obj[prefix + prop]) {
            if (obj[prop]) {
              obj[prefix + prop] = obj[prop].bind(obj);
              obj[prop] = function() {
                var args = [obj[prefix + prop]].concat(Array.prototype.slice.call(arguments));
                return func.apply(obj, args);
              };
            } else {
              obj[prop] = function() {
                var args = [void 0].concat(Array.prototype.slice.call(arguments));
                return func.apply(obj, args);
              };
            }
          }
        }
        function callEach(fns, method) {
          fns.forEach(function(fn) {
            (method ? fn[method] : fn)();
          });
        }
        function getEventHandlerName(eventName) {
          return "on" + eventName[0].toUpperCase() + eventName.substring(1);
        }
        function createMouseEvent(type, previousEvent) {
          try {
            return new MouseEvent(type, previousEvent);
          } catch (exception) {
            try {
              var m2 = document.createEvent("MouseEvent");
              m2.initMouseEvent(type, previousEvent.canBubble, previousEvent.cancelable, previousEvent.view, previousEvent.detail, previousEvent.screenX, previousEvent.screenY, previousEvent.clientX, previousEvent.clientY, previousEvent.ctrlKey, previousEvent.altKey, previousEvent.shiftKey, previousEvent.metaKey, previousEvent.button, previousEvent.relatedTarget);
              return m2;
            } catch (exception2) {
              var e8 = document.createEvent("Event");
              e8.initEvent(type, previousEvent.canBubble, previousEvent.cancelable);
              return e8;
            }
          }
        }
        module.exports = function(Chart2) {
          var chartHelpers = Chart2.helpers;
          function initConfig(config) {
            config = chartHelpers.configMerge(Chart2.Annotation.defaults, config);
            if (chartHelpers.isArray(config.annotations)) {
              config.annotations.forEach(function(annotation) {
                annotation.label = chartHelpers.configMerge(Chart2.Annotation.labelDefaults, annotation.label);
              });
            }
            return config;
          }
          function getScaleLimits(scaleId, annotations, scaleMin, scaleMax) {
            var ranges = annotations.filter(function(annotation) {
              return !!annotation._model.ranges[scaleId];
            }).map(function(annotation) {
              return annotation._model.ranges[scaleId];
            });
            var min = ranges.map(function(range) {
              return Number(range.min);
            }).reduce(function(a3, b2) {
              return isFinite(b2) && !isNaN(b2) && b2 < a3 ? b2 : a3;
            }, scaleMin);
            var max = ranges.map(function(range) {
              return Number(range.max);
            }).reduce(function(a3, b2) {
              return isFinite(b2) && !isNaN(b2) && b2 > a3 ? b2 : a3;
            }, scaleMax);
            return {
              min,
              max
            };
          }
          function adjustScaleRange(scale) {
            var range = getScaleLimits(scale.id, elements(scale.chart), scale.min, scale.max);
            if (typeof scale.options.ticks.min === "undefined" && typeof scale.options.ticks.suggestedMin === "undefined") {
              scale.min = range.min;
            }
            if (typeof scale.options.ticks.max === "undefined" && typeof scale.options.ticks.suggestedMax === "undefined") {
              scale.max = range.max;
            }
            if (scale.handleTickRangeOptions) {
              scale.handleTickRangeOptions();
            }
          }
          function getNearestItems(annotations, position) {
            var minDistance = Number.POSITIVE_INFINITY;
            return annotations.filter(function(element) {
              return element.inRange(position.x, position.y);
            }).reduce(function(nearestItems, element) {
              var center = element.getCenterPoint();
              var distance = chartHelpers.distanceBetweenPoints(position, center);
              if (distance < minDistance) {
                nearestItems = [element];
                minDistance = distance;
              } else if (distance === minDistance) {
                nearestItems.push(element);
              }
              return nearestItems;
            }, []).sort(function(a3, b2) {
              var sizeA = a3.getArea(), sizeB = b2.getArea();
              return sizeA > sizeB || sizeA < sizeB ? sizeA - sizeB : a3._index - b2._index;
            }).slice(0, 1)[0];
          }
          return {
            initConfig,
            elements,
            callEach,
            noop,
            objectId,
            isValid,
            decorate,
            adjustScaleRange,
            getNearestItems,
            getEventHandlerName,
            createMouseEvent
          };
        };
      }
    });
    var require_line = __commonJS2({
      "node_modules/chartjs-plugin-annotation/src/types/line.js"(exports, module) {
        module.exports = function(Chart2) {
          var chartHelpers = Chart2.helpers;
          var helpers = require_helpers()(Chart2);
          var horizontalKeyword = "horizontal";
          var verticalKeyword = "vertical";
          var LineAnnotation = Chart2.Annotation.Element.extend({
            setDataLimits: function() {
              var model = this._model;
              var options = this.options;
              model.ranges = {};
              model.ranges[options.scaleID] = {
                min: options.value,
                max: options.endValue || options.value
              };
            },
            configure: function() {
              var model = this._model;
              var options = this.options;
              var chartInstance = this.chartInstance;
              var ctx = chartInstance.chart.ctx;
              var scale = chartInstance.scales[options.scaleID];
              var pixel, endPixel;
              if (scale) {
                pixel = helpers.isValid(options.value) ? scale.getPixelForValue(options.value) : NaN;
                endPixel = helpers.isValid(options.endValue) ? scale.getPixelForValue(options.endValue) : pixel;
              }
              if (isNaN(pixel)) {
                return;
              }
              var chartArea = chartInstance.chartArea;
              model.clip = {
                x1: chartArea.left,
                x2: chartArea.right,
                y1: chartArea.top,
                y2: chartArea.bottom
              };
              if (this.options.mode == horizontalKeyword) {
                model.x1 = chartArea.left;
                model.x2 = chartArea.right;
                model.y1 = pixel;
                model.y2 = endPixel;
              } else {
                model.y1 = chartArea.top;
                model.y2 = chartArea.bottom;
                model.x1 = pixel;
                model.x2 = endPixel;
              }
              model.line = new LineFunction(model);
              model.mode = options.mode;
              model.labelBackgroundColor = options.label.backgroundColor;
              model.labelFontFamily = options.label.fontFamily;
              model.labelFontSize = options.label.fontSize;
              model.labelFontStyle = options.label.fontStyle;
              model.labelFontColor = options.label.fontColor;
              model.labelXPadding = options.label.xPadding;
              model.labelYPadding = options.label.yPadding;
              model.labelCornerRadius = options.label.cornerRadius;
              model.labelPosition = options.label.position;
              model.labelXAdjust = options.label.xAdjust;
              model.labelYAdjust = options.label.yAdjust;
              model.labelEnabled = options.label.enabled;
              model.labelContent = options.label.content;
              ctx.font = chartHelpers.fontString(model.labelFontSize, model.labelFontStyle, model.labelFontFamily);
              var textWidth = ctx.measureText(model.labelContent).width;
              var textHeight = ctx.measureText("M").width;
              var labelPosition = calculateLabelPosition(model, textWidth, textHeight, model.labelXPadding, model.labelYPadding);
              model.labelX = labelPosition.x - model.labelXPadding;
              model.labelY = labelPosition.y - model.labelYPadding;
              model.labelWidth = textWidth + 2 * model.labelXPadding;
              model.labelHeight = textHeight + 2 * model.labelYPadding;
              model.borderColor = options.borderColor;
              model.borderWidth = options.borderWidth;
              model.borderDash = options.borderDash || [];
              model.borderDashOffset = options.borderDashOffset || 0;
            },
            inRange: function(mouseX, mouseY) {
              var model = this._model;
              return model.line && model.line.intersects(mouseX, mouseY, this.getHeight()) || model.labelEnabled && model.labelContent && mouseX >= model.labelX && mouseX <= model.labelX + model.labelWidth && mouseY >= model.labelY && mouseY <= model.labelY + model.labelHeight;
            },
            getCenterPoint: function() {
              return {
                x: (this._model.x2 + this._model.x1) / 2,
                y: (this._model.y2 + this._model.y1) / 2
              };
            },
            getWidth: function() {
              return Math.abs(this._model.right - this._model.left);
            },
            getHeight: function() {
              return this._model.borderWidth || 1;
            },
            getArea: function() {
              return Math.sqrt(Math.pow(this.getWidth(), 2) + Math.pow(this.getHeight(), 2));
            },
            draw: function() {
              var view = this._view;
              var ctx = this.chartInstance.chart.ctx;
              if (!view.clip) {
                return;
              }
              ctx.save();
              ctx.beginPath();
              ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
              ctx.clip();
              ctx.lineWidth = view.borderWidth;
              ctx.strokeStyle = view.borderColor;
              if (ctx.setLineDash) {
                ctx.setLineDash(view.borderDash);
              }
              ctx.lineDashOffset = view.borderDashOffset;
              ctx.beginPath();
              ctx.moveTo(view.x1, view.y1);
              ctx.lineTo(view.x2, view.y2);
              ctx.stroke();
              if (view.labelEnabled && view.labelContent) {
                ctx.beginPath();
                ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
                ctx.clip();
                ctx.fillStyle = view.labelBackgroundColor;
                chartHelpers.drawRoundedRectangle(ctx, view.labelX, view.labelY, view.labelWidth, view.labelHeight, view.labelCornerRadius);
                ctx.fill();
                ctx.font = chartHelpers.fontString(view.labelFontSize, view.labelFontStyle, view.labelFontFamily);
                ctx.fillStyle = view.labelFontColor;
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";
                ctx.fillText(view.labelContent, view.labelX + view.labelWidth / 2, view.labelY + view.labelHeight / 2);
              }
              ctx.restore();
            }
          });
          function LineFunction(view) {
            var m2 = (view.x2 - view.x1) / (view.y2 - view.y1);
            var b2 = view.x1 || 0;
            this.m = m2;
            this.b = b2;
            this.getX = function(y2) {
              return m2 * (y2 - view.y1) + b2;
            };
            this.getY = function(x2) {
              return (x2 - b2) / m2 + view.y1;
            };
            this.intersects = function(x2, y2, epsilon) {
              epsilon = epsilon || 1e-3;
              var dy = this.getY(x2), dx = this.getX(y2);
              return (!isFinite(dy) || Math.abs(y2 - dy) < epsilon) && (!isFinite(dx) || Math.abs(x2 - dx) < epsilon);
            };
          }
          function calculateLabelPosition(view, width, height, padWidth, padHeight) {
            var line = view.line;
            var ret = {}, xa = 0, ya = 0;
            switch (true) {
              case (view.mode == verticalKeyword && view.labelPosition == "top"):
                ya = padHeight + view.labelYAdjust;
                xa = width / 2 + view.labelXAdjust;
                ret.y = view.y1 + ya;
                ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;
                break;
              case (view.mode == verticalKeyword && view.labelPosition == "bottom"):
                ya = height + padHeight + view.labelYAdjust;
                xa = width / 2 + view.labelXAdjust;
                ret.y = view.y2 - ya;
                ret.x = (isFinite(line.m) ? line.getX(ret.y) : view.x1) - xa;
                break;
              case (view.mode == horizontalKeyword && view.labelPosition == "left"):
                xa = padWidth + view.labelXAdjust;
                ya = -(height / 2) + view.labelYAdjust;
                ret.x = view.x1 + xa;
                ret.y = line.getY(ret.x) + ya;
                break;
              case (view.mode == horizontalKeyword && view.labelPosition == "right"):
                xa = width + padWidth + view.labelXAdjust;
                ya = -(height / 2) + view.labelYAdjust;
                ret.x = view.x2 - xa;
                ret.y = line.getY(ret.x) + ya;
                break;
              default:
                ret.x = (view.x1 + view.x2 - width) / 2 + view.labelXAdjust;
                ret.y = (view.y1 + view.y2 - height) / 2 + view.labelYAdjust;
            }
            return ret;
          }
          return LineAnnotation;
        };
      }
    });
    var require_box = __commonJS2({
      "node_modules/chartjs-plugin-annotation/src/types/box.js"(exports, module) {
        module.exports = function(Chart2) {
          var helpers = require_helpers()(Chart2);
          var BoxAnnotation = Chart2.Annotation.Element.extend({
            setDataLimits: function() {
              var model = this._model;
              var options = this.options;
              var chartInstance = this.chartInstance;
              var xScale = chartInstance.scales[options.xScaleID];
              var yScale = chartInstance.scales[options.yScaleID];
              var chartArea = chartInstance.chartArea;
              model.ranges = {};
              if (!chartArea) {
                return;
              }
              var min = 0;
              var max = 0;
              if (xScale) {
                min = helpers.isValid(options.xMin) ? options.xMin : xScale.getPixelForValue(chartArea.left);
                max = helpers.isValid(options.xMax) ? options.xMax : xScale.getPixelForValue(chartArea.right);
                model.ranges[options.xScaleID] = {
                  min: Math.min(min, max),
                  max: Math.max(min, max)
                };
              }
              if (yScale) {
                min = helpers.isValid(options.yMin) ? options.yMin : yScale.getPixelForValue(chartArea.bottom);
                max = helpers.isValid(options.yMax) ? options.yMax : yScale.getPixelForValue(chartArea.top);
                model.ranges[options.yScaleID] = {
                  min: Math.min(min, max),
                  max: Math.max(min, max)
                };
              }
            },
            configure: function() {
              var model = this._model;
              var options = this.options;
              var chartInstance = this.chartInstance;
              var xScale = chartInstance.scales[options.xScaleID];
              var yScale = chartInstance.scales[options.yScaleID];
              var chartArea = chartInstance.chartArea;
              model.clip = {
                x1: chartArea.left,
                x2: chartArea.right,
                y1: chartArea.top,
                y2: chartArea.bottom
              };
              var left = chartArea.left, top = chartArea.top, right = chartArea.right, bottom = chartArea.bottom;
              var min, max;
              if (xScale) {
                min = helpers.isValid(options.xMin) ? xScale.getPixelForValue(options.xMin) : chartArea.left;
                max = helpers.isValid(options.xMax) ? xScale.getPixelForValue(options.xMax) : chartArea.right;
                left = Math.min(min, max);
                right = Math.max(min, max);
              }
              if (yScale) {
                min = helpers.isValid(options.yMin) ? yScale.getPixelForValue(options.yMin) : chartArea.bottom;
                max = helpers.isValid(options.yMax) ? yScale.getPixelForValue(options.yMax) : chartArea.top;
                top = Math.min(min, max);
                bottom = Math.max(min, max);
              }
              model.left = left;
              model.top = top;
              model.right = right;
              model.bottom = bottom;
              model.borderColor = options.borderColor;
              model.borderWidth = options.borderWidth;
              model.backgroundColor = options.backgroundColor;
            },
            inRange: function(mouseX, mouseY) {
              var model = this._model;
              return model && mouseX >= model.left && mouseX <= model.right && mouseY >= model.top && mouseY <= model.bottom;
            },
            getCenterPoint: function() {
              var model = this._model;
              return {
                x: (model.right + model.left) / 2,
                y: (model.bottom + model.top) / 2
              };
            },
            getWidth: function() {
              var model = this._model;
              return Math.abs(model.right - model.left);
            },
            getHeight: function() {
              var model = this._model;
              return Math.abs(model.bottom - model.top);
            },
            getArea: function() {
              return this.getWidth() * this.getHeight();
            },
            draw: function() {
              var view = this._view;
              var ctx = this.chartInstance.chart.ctx;
              ctx.save();
              ctx.beginPath();
              ctx.rect(view.clip.x1, view.clip.y1, view.clip.x2 - view.clip.x1, view.clip.y2 - view.clip.y1);
              ctx.clip();
              ctx.lineWidth = view.borderWidth;
              ctx.strokeStyle = view.borderColor;
              ctx.fillStyle = view.backgroundColor;
              var width = view.right - view.left, height = view.bottom - view.top;
              ctx.fillRect(view.left, view.top, width, height);
              ctx.strokeRect(view.left, view.top, width, height);
              ctx.restore();
            }
          });
          return BoxAnnotation;
        };
      }
    });
    var require_events = __commonJS2({
      "node_modules/chartjs-plugin-annotation/src/events.js"(exports, module) {
        module.exports = function(Chart2) {
          var chartHelpers = Chart2.helpers;
          var helpers = require_helpers()(Chart2);
          function collapseHoverEvents(events) {
            var hover = false;
            var filteredEvents = events.filter(function(eventName) {
              switch (eventName) {
                case "mouseenter":
                case "mouseover":
                case "mouseout":
                case "mouseleave":
                  hover = true;
                  return false;
                default:
                  return true;
              }
            });
            if (hover && filteredEvents.indexOf("mousemove") === -1) {
              filteredEvents.push("mousemove");
            }
            return filteredEvents;
          }
          function dispatcher(e8) {
            var ns = this.annotation;
            var elements = helpers.elements(this);
            var position = chartHelpers.getRelativePosition(e8, this.chart);
            var element = helpers.getNearestItems(elements, position);
            var events = collapseHoverEvents(ns.options.events);
            var dblClickSpeed = ns.options.dblClickSpeed;
            var eventHandlers = [];
            var eventHandlerName = helpers.getEventHandlerName(e8.type);
            var options = (element || {}).options;
            if (e8.type === "mousemove") {
              if (element && !element.hovering) {
                ["mouseenter", "mouseover"].forEach(function(eventName) {
                  var eventHandlerName2 = helpers.getEventHandlerName(eventName);
                  var hoverEvent = helpers.createMouseEvent(eventName, e8);
                  element.hovering = true;
                  if (typeof options[eventHandlerName2] === "function") {
                    eventHandlers.push([options[eventHandlerName2], hoverEvent, element]);
                  }
                });
              } else if (!element) {
                elements.forEach(function(element2) {
                  if (element2.hovering) {
                    element2.hovering = false;
                    var options2 = element2.options;
                    ["mouseout", "mouseleave"].forEach(function(eventName) {
                      var eventHandlerName2 = helpers.getEventHandlerName(eventName);
                      var hoverEvent = helpers.createMouseEvent(eventName, e8);
                      if (typeof options2[eventHandlerName2] === "function") {
                        eventHandlers.push([options2[eventHandlerName2], hoverEvent, element2]);
                      }
                    });
                  }
                });
              }
            }
            if (element && events.indexOf("dblclick") > -1 && typeof options.onDblclick === "function") {
              if (e8.type === "click" && typeof options.onClick === "function") {
                clearTimeout(element.clickTimeout);
                element.clickTimeout = setTimeout(function() {
                  delete element.clickTimeout;
                  options.onClick.call(element, e8);
                }, dblClickSpeed);
                e8.stopImmediatePropagation();
                e8.preventDefault();
                return;
              } else if (e8.type === "dblclick" && element.clickTimeout) {
                clearTimeout(element.clickTimeout);
                delete element.clickTimeout;
              }
            }
            if (element && typeof options[eventHandlerName] === "function" && eventHandlers.length === 0) {
              eventHandlers.push([options[eventHandlerName], e8, element]);
            }
            if (eventHandlers.length > 0) {
              e8.stopImmediatePropagation();
              e8.preventDefault();
              eventHandlers.forEach(function(eventHandler) {
                eventHandler[0].call(eventHandler[2], eventHandler[1]);
              });
            }
          }
          return {
            dispatcher,
            collapseHoverEvents
          };
        };
      }
    });
    var require_annotation = __commonJS2({
      "node_modules/chartjs-plugin-annotation/src/annotation.js"(exports, module) {
        module.exports = function(Chart2) {
          var chartHelpers = Chart2.helpers;
          var helpers = require_helpers()(Chart2);
          var events = require_events()(Chart2);
          var annotationTypes = Chart2.Annotation.types;
          function setAfterDataLimitsHook(axisOptions) {
            helpers.decorate(axisOptions, "afterDataLimits", function(previous, scale) {
              if (previous)
                previous(scale);
              helpers.adjustScaleRange(scale);
            });
          }
          function draw(drawTime) {
            return function(chartInstance, easingDecimal) {
              var defaultDrawTime = chartInstance.annotation.options.drawTime;
              helpers.elements(chartInstance).filter(function(element) {
                return drawTime === (element.options.drawTime || defaultDrawTime);
              }).forEach(function(element) {
                element.transition(easingDecimal).draw();
              });
            };
          }
          return {
            beforeInit: function(chartInstance) {
              var chartOptions = chartInstance.options;
              var ns = chartInstance.annotation = {
                elements: {},
                options: helpers.initConfig(chartOptions.annotation || {}),
                onDestroy: [],
                firstRun: true,
                supported: false
              };
              chartInstance.ensureScalesHaveIDs();
              if (chartOptions.scales) {
                ns.supported = true;
                chartHelpers.each(chartOptions.scales.xAxes, setAfterDataLimitsHook);
                chartHelpers.each(chartOptions.scales.yAxes, setAfterDataLimitsHook);
              }
            },
            beforeUpdate: function(chartInstance) {
              var ns = chartInstance.annotation;
              if (!ns.supported) {
                return;
              }
              if (!ns.firstRun) {
                ns.options = helpers.initConfig(chartInstance.options.annotation || {});
              } else {
                ns.firstRun = false;
              }
              var elementIds = [];
              ns.options.annotations.forEach(function(annotation) {
                var id = annotation.id || helpers.objectId();
                if (!ns.elements[id] && annotationTypes[annotation.type]) {
                  var cls = annotationTypes[annotation.type];
                  var element = new cls({
                    id,
                    options: annotation,
                    chartInstance
                  });
                  element.initialize();
                  ns.elements[id] = element;
                  annotation.id = id;
                  elementIds.push(id);
                } else if (ns.elements[id]) {
                  elementIds.push(id);
                }
              });
              Object.keys(ns.elements).forEach(function(id) {
                if (elementIds.indexOf(id) === -1) {
                  ns.elements[id].destroy();
                  delete ns.elements[id];
                }
              });
            },
            afterScaleUpdate: function(chartInstance) {
              helpers.elements(chartInstance).forEach(function(element) {
                element.configure();
              });
            },
            beforeDatasetsDraw: draw("beforeDatasetsDraw"),
            afterDatasetsDraw: draw("afterDatasetsDraw"),
            afterDraw: draw("afterDraw"),
            afterInit: function(chartInstance) {
              var watchFor = chartInstance.annotation.options.events;
              if (chartHelpers.isArray(watchFor) && watchFor.length > 0) {
                var canvas = chartInstance.chart.canvas;
                var eventHandler = events.dispatcher.bind(chartInstance);
                events.collapseHoverEvents(watchFor).forEach(function(eventName) {
                  chartHelpers.addEvent(canvas, eventName, eventHandler);
                  chartInstance.annotation.onDestroy.push(function() {
                    chartHelpers.removeEvent(canvas, eventName, eventHandler);
                  });
                });
              }
            },
            destroy: function(chartInstance) {
              var deregisterers = chartInstance.annotation.onDestroy;
              while (deregisterers.length > 0) {
                deregisterers.pop()();
              }
            }
          };
        };
      }
    });
    var require_src = __commonJS2({
      "node_modules/chartjs-plugin-annotation/src/index.js"(exports, module) {
        var Chart2 = require_Chart();
        Chart2 = typeof Chart2 === "function" ? Chart2 : window.Chart;
        Chart2.Annotation = Chart2.Annotation || {};
        Chart2.Annotation.drawTimeOptions = {
          afterDraw: "afterDraw",
          afterDatasetsDraw: "afterDatasetsDraw",
          beforeDatasetsDraw: "beforeDatasetsDraw"
        };
        Chart2.Annotation.defaults = {
          drawTime: "afterDatasetsDraw",
          dblClickSpeed: 350,
          events: [],
          annotations: []
        };
        Chart2.Annotation.labelDefaults = {
          backgroundColor: "rgba(0,0,0,0.8)",
          fontFamily: Chart2.defaults.global.defaultFontFamily,
          fontSize: Chart2.defaults.global.defaultFontSize,
          fontStyle: "bold",
          fontColor: "#fff",
          xPadding: 6,
          yPadding: 6,
          cornerRadius: 6,
          position: "center",
          xAdjust: 0,
          yAdjust: 0,
          enabled: false,
          content: null
        };
        Chart2.Annotation.Element = require_element()(Chart2);
        Chart2.Annotation.types = {
          line: require_line()(Chart2),
          box: require_box()(Chart2)
        };
        var annotationPlugin = require_annotation()(Chart2);
        module.exports = annotationPlugin;
        Chart2.pluginService.register(annotationPlugin);
      }
    });
    var require_chartjs_plugin_datalabels = __commonJS2({
      "node_modules/chartjs-plugin-datalabels/dist/chartjs-plugin-datalabels.js"(exports, module) {
        (function(global2, factory) {
          typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory(require_Chart()) : typeof define === "function" && define.amd ? define(["chart.js"], factory) : (global2 = global2 || self, global2.ChartDataLabels = factory(global2.Chart));
        })(exports, function(Chart2) {
          "use strict";
          Chart2 = Chart2 && Chart2.hasOwnProperty("default") ? Chart2["default"] : Chart2;
          var helpers = Chart2.helpers;
          var devicePixelRatio = function() {
            if (typeof window !== "undefined") {
              if (window.devicePixelRatio) {
                return window.devicePixelRatio;
              }
              var screen = window.screen;
              if (screen) {
                return (screen.deviceXDPI || 1) / (screen.logicalXDPI || 1);
              }
            }
            return 1;
          }();
          var utils = {
            toTextLines: function(inputs) {
              var lines = [];
              var input;
              inputs = [].concat(inputs);
              while (inputs.length) {
                input = inputs.pop();
                if (typeof input === "string") {
                  lines.unshift.apply(lines, input.split("\n"));
                } else if (Array.isArray(input)) {
                  inputs.push.apply(inputs, input);
                } else if (!helpers.isNullOrUndef(inputs)) {
                  lines.unshift("" + input);
                }
              }
              return lines;
            },
            toFontString: function(font) {
              if (!font || helpers.isNullOrUndef(font.size) || helpers.isNullOrUndef(font.family)) {
                return null;
              }
              return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
            },
            textSize: function(ctx, lines, font) {
              var items = [].concat(lines);
              var ilen = items.length;
              var prev = ctx.font;
              var width = 0;
              var i7;
              ctx.font = font.string;
              for (i7 = 0; i7 < ilen; ++i7) {
                width = Math.max(ctx.measureText(items[i7]).width, width);
              }
              ctx.font = prev;
              return {
                height: ilen * font.lineHeight,
                width
              };
            },
            parseFont: function(value) {
              var global2 = Chart2.defaults.global;
              var size = helpers.valueOrDefault(value.size, global2.defaultFontSize);
              var font = {
                family: helpers.valueOrDefault(value.family, global2.defaultFontFamily),
                lineHeight: helpers.options.toLineHeight(value.lineHeight, size),
                size,
                style: helpers.valueOrDefault(value.style, global2.defaultFontStyle),
                weight: helpers.valueOrDefault(value.weight, null),
                string: ""
              };
              font.string = utils.toFontString(font);
              return font;
            },
            bound: function(min, value, max) {
              return Math.max(min, Math.min(value, max));
            },
            arrayDiff: function(a0, a1) {
              var prev = a0.slice();
              var updates = [];
              var i7, j, ilen, v2;
              for (i7 = 0, ilen = a1.length; i7 < ilen; ++i7) {
                v2 = a1[i7];
                j = prev.indexOf(v2);
                if (j === -1) {
                  updates.push([v2, 1]);
                } else {
                  prev.splice(j, 1);
                }
              }
              for (i7 = 0, ilen = prev.length; i7 < ilen; ++i7) {
                updates.push([prev[i7], -1]);
              }
              return updates;
            },
            rasterize: function(v2) {
              return Math.round(v2 * devicePixelRatio) / devicePixelRatio;
            }
          };
          function orient(point, origin) {
            var x0 = origin.x;
            var y0 = origin.y;
            if (x0 === null) {
              return { x: 0, y: -1 };
            }
            if (y0 === null) {
              return { x: 1, y: 0 };
            }
            var dx = point.x - x0;
            var dy = point.y - y0;
            var ln = Math.sqrt(dx * dx + dy * dy);
            return {
              x: ln ? dx / ln : 0,
              y: ln ? dy / ln : -1
            };
          }
          function aligned(x2, y2, vx, vy, align) {
            switch (align) {
              case "center":
                vx = vy = 0;
                break;
              case "bottom":
                vx = 0;
                vy = 1;
                break;
              case "right":
                vx = 1;
                vy = 0;
                break;
              case "left":
                vx = -1;
                vy = 0;
                break;
              case "top":
                vx = 0;
                vy = -1;
                break;
              case "start":
                vx = -vx;
                vy = -vy;
                break;
              case "end":
                break;
              default:
                align *= Math.PI / 180;
                vx = Math.cos(align);
                vy = Math.sin(align);
                break;
            }
            return {
              x: x2,
              y: y2,
              vx,
              vy
            };
          }
          var R_INSIDE = 0;
          var R_LEFT = 1;
          var R_RIGHT = 2;
          var R_BOTTOM = 4;
          var R_TOP = 8;
          function region(x2, y2, rect) {
            var res = R_INSIDE;
            if (x2 < rect.left) {
              res |= R_LEFT;
            } else if (x2 > rect.right) {
              res |= R_RIGHT;
            }
            if (y2 < rect.top) {
              res |= R_TOP;
            } else if (y2 > rect.bottom) {
              res |= R_BOTTOM;
            }
            return res;
          }
          function clipped(segment, area) {
            var x0 = segment.x0;
            var y0 = segment.y0;
            var x1 = segment.x1;
            var y1 = segment.y1;
            var r0 = region(x0, y0, area);
            var r1 = region(x1, y1, area);
            var r4, x2, y2;
            while (true) {
              if (!(r0 | r1) || r0 & r1) {
                break;
              }
              r4 = r0 || r1;
              if (r4 & R_TOP) {
                x2 = x0 + (x1 - x0) * (area.top - y0) / (y1 - y0);
                y2 = area.top;
              } else if (r4 & R_BOTTOM) {
                x2 = x0 + (x1 - x0) * (area.bottom - y0) / (y1 - y0);
                y2 = area.bottom;
              } else if (r4 & R_RIGHT) {
                y2 = y0 + (y1 - y0) * (area.right - x0) / (x1 - x0);
                x2 = area.right;
              } else if (r4 & R_LEFT) {
                y2 = y0 + (y1 - y0) * (area.left - x0) / (x1 - x0);
                x2 = area.left;
              }
              if (r4 === r0) {
                x0 = x2;
                y0 = y2;
                r0 = region(x0, y0, area);
              } else {
                x1 = x2;
                y1 = y2;
                r1 = region(x1, y1, area);
              }
            }
            return {
              x0,
              x1,
              y0,
              y1
            };
          }
          function compute(range, config) {
            var anchor = config.anchor;
            var segment = range;
            var x2, y2;
            if (config.clamp) {
              segment = clipped(segment, config.area);
            }
            if (anchor === "start") {
              x2 = segment.x0;
              y2 = segment.y0;
            } else if (anchor === "end") {
              x2 = segment.x1;
              y2 = segment.y1;
            } else {
              x2 = (segment.x0 + segment.x1) / 2;
              y2 = (segment.y0 + segment.y1) / 2;
            }
            return aligned(x2, y2, range.vx, range.vy, config.align);
          }
          var positioners = {
            arc: function(vm, config) {
              var angle = (vm.startAngle + vm.endAngle) / 2;
              var vx = Math.cos(angle);
              var vy = Math.sin(angle);
              var r0 = vm.innerRadius;
              var r1 = vm.outerRadius;
              return compute({
                x0: vm.x + vx * r0,
                y0: vm.y + vy * r0,
                x1: vm.x + vx * r1,
                y1: vm.y + vy * r1,
                vx,
                vy
              }, config);
            },
            point: function(vm, config) {
              var v2 = orient(vm, config.origin);
              var rx = v2.x * vm.radius;
              var ry = v2.y * vm.radius;
              return compute({
                x0: vm.x - rx,
                y0: vm.y - ry,
                x1: vm.x + rx,
                y1: vm.y + ry,
                vx: v2.x,
                vy: v2.y
              }, config);
            },
            rect: function(vm, config) {
              var v2 = orient(vm, config.origin);
              var x2 = vm.x;
              var y2 = vm.y;
              var sx = 0;
              var sy = 0;
              if (vm.horizontal) {
                x2 = Math.min(vm.x, vm.base);
                sx = Math.abs(vm.base - vm.x);
              } else {
                y2 = Math.min(vm.y, vm.base);
                sy = Math.abs(vm.base - vm.y);
              }
              return compute({
                x0: x2,
                y0: y2 + sy,
                x1: x2 + sx,
                y1: y2,
                vx: v2.x,
                vy: v2.y
              }, config);
            },
            fallback: function(vm, config) {
              var v2 = orient(vm, config.origin);
              return compute({
                x0: vm.x,
                y0: vm.y,
                x1: vm.x,
                y1: vm.y,
                vx: v2.x,
                vy: v2.y
              }, config);
            }
          };
          var helpers$1 = Chart2.helpers;
          var rasterize = utils.rasterize;
          function boundingRects(model) {
            var borderWidth = model.borderWidth || 0;
            var padding = model.padding;
            var th = model.size.height;
            var tw = model.size.width;
            var tx = -tw / 2;
            var ty = -th / 2;
            return {
              frame: {
                x: tx - padding.left - borderWidth,
                y: ty - padding.top - borderWidth,
                w: tw + padding.width + borderWidth * 2,
                h: th + padding.height + borderWidth * 2
              },
              text: {
                x: tx,
                y: ty,
                w: tw,
                h: th
              }
            };
          }
          function getScaleOrigin(el) {
            var horizontal = el._model.horizontal;
            var scale = el._scale || horizontal && el._xScale || el._yScale;
            if (!scale) {
              return null;
            }
            if (scale.xCenter !== void 0 && scale.yCenter !== void 0) {
              return { x: scale.xCenter, y: scale.yCenter };
            }
            var pixel = scale.getBasePixel();
            return horizontal ? { x: pixel, y: null } : { x: null, y: pixel };
          }
          function getPositioner(el) {
            if (el instanceof Chart2.elements.Arc) {
              return positioners.arc;
            }
            if (el instanceof Chart2.elements.Point) {
              return positioners.point;
            }
            if (el instanceof Chart2.elements.Rectangle) {
              return positioners.rect;
            }
            return positioners.fallback;
          }
          function drawFrame(ctx, rect, model) {
            var bgColor = model.backgroundColor;
            var borderColor = model.borderColor;
            var borderWidth = model.borderWidth;
            if (!bgColor && (!borderColor || !borderWidth)) {
              return;
            }
            ctx.beginPath();
            helpers$1.canvas.roundedRect(ctx, rasterize(rect.x) + borderWidth / 2, rasterize(rect.y) + borderWidth / 2, rasterize(rect.w) - borderWidth, rasterize(rect.h) - borderWidth, model.borderRadius);
            ctx.closePath();
            if (bgColor) {
              ctx.fillStyle = bgColor;
              ctx.fill();
            }
            if (borderColor && borderWidth) {
              ctx.strokeStyle = borderColor;
              ctx.lineWidth = borderWidth;
              ctx.lineJoin = "miter";
              ctx.stroke();
            }
          }
          function textGeometry(rect, align, font) {
            var h3 = font.lineHeight;
            var w2 = rect.w;
            var x2 = rect.x;
            var y2 = rect.y + h3 / 2;
            if (align === "center") {
              x2 += w2 / 2;
            } else if (align === "end" || align === "right") {
              x2 += w2;
            }
            return {
              h: h3,
              w: w2,
              x: x2,
              y: y2
            };
          }
          function drawTextLine(ctx, text, cfg) {
            var shadow = ctx.shadowBlur;
            var stroked = cfg.stroked;
            var x2 = rasterize(cfg.x);
            var y2 = rasterize(cfg.y);
            var w2 = rasterize(cfg.w);
            if (stroked) {
              ctx.strokeText(text, x2, y2, w2);
            }
            if (cfg.filled) {
              if (shadow && stroked) {
                ctx.shadowBlur = 0;
              }
              ctx.fillText(text, x2, y2, w2);
              if (shadow && stroked) {
                ctx.shadowBlur = shadow;
              }
            }
          }
          function drawText(ctx, lines, rect, model) {
            var align = model.textAlign;
            var color = model.color;
            var filled = !!color;
            var font = model.font;
            var ilen = lines.length;
            var strokeColor = model.textStrokeColor;
            var strokeWidth = model.textStrokeWidth;
            var stroked = strokeColor && strokeWidth;
            var i7;
            if (!ilen || !filled && !stroked) {
              return;
            }
            rect = textGeometry(rect, align, font);
            ctx.font = font.string;
            ctx.textAlign = align;
            ctx.textBaseline = "middle";
            ctx.shadowBlur = model.textShadowBlur;
            ctx.shadowColor = model.textShadowColor;
            if (filled) {
              ctx.fillStyle = color;
            }
            if (stroked) {
              ctx.lineJoin = "round";
              ctx.lineWidth = strokeWidth;
              ctx.strokeStyle = strokeColor;
            }
            for (i7 = 0, ilen = lines.length; i7 < ilen; ++i7) {
              drawTextLine(ctx, lines[i7], {
                stroked,
                filled,
                w: rect.w,
                x: rect.x,
                y: rect.y + rect.h * i7
              });
            }
          }
          var Label = function(config, ctx, el, index) {
            var me = this;
            me._config = config;
            me._index = index;
            me._model = null;
            me._rects = null;
            me._ctx = ctx;
            me._el = el;
          };
          helpers$1.extend(Label.prototype, {
            _modelize: function(display, lines, config, context) {
              var me = this;
              var index = me._index;
              var resolve = helpers$1.options.resolve;
              var font = utils.parseFont(resolve([config.font, {}], context, index));
              var color = resolve([config.color, Chart2.defaults.global.defaultFontColor], context, index);
              return {
                align: resolve([config.align, "center"], context, index),
                anchor: resolve([config.anchor, "center"], context, index),
                area: context.chart.chartArea,
                backgroundColor: resolve([config.backgroundColor, null], context, index),
                borderColor: resolve([config.borderColor, null], context, index),
                borderRadius: resolve([config.borderRadius, 0], context, index),
                borderWidth: resolve([config.borderWidth, 0], context, index),
                clamp: resolve([config.clamp, false], context, index),
                clip: resolve([config.clip, false], context, index),
                color,
                display,
                font,
                lines,
                offset: resolve([config.offset, 0], context, index),
                opacity: resolve([config.opacity, 1], context, index),
                origin: getScaleOrigin(me._el),
                padding: helpers$1.options.toPadding(resolve([config.padding, 0], context, index)),
                positioner: getPositioner(me._el),
                rotation: resolve([config.rotation, 0], context, index) * (Math.PI / 180),
                size: utils.textSize(me._ctx, lines, font),
                textAlign: resolve([config.textAlign, "start"], context, index),
                textShadowBlur: resolve([config.textShadowBlur, 0], context, index),
                textShadowColor: resolve([config.textShadowColor, color], context, index),
                textStrokeColor: resolve([config.textStrokeColor, color], context, index),
                textStrokeWidth: resolve([config.textStrokeWidth, 0], context, index)
              };
            },
            update: function(context) {
              var me = this;
              var model = null;
              var rects = null;
              var index = me._index;
              var config = me._config;
              var value, label, lines;
              var display = helpers$1.options.resolve([config.display, true], context, index);
              if (display) {
                value = context.dataset.data[index];
                label = helpers$1.valueOrDefault(helpers$1.callback(config.formatter, [value, context]), value);
                lines = helpers$1.isNullOrUndef(label) ? [] : utils.toTextLines(label);
                if (lines.length) {
                  model = me._modelize(display, lines, config, context);
                  rects = boundingRects(model);
                }
              }
              me._model = model;
              me._rects = rects;
            },
            geometry: function() {
              return this._rects ? this._rects.frame : {};
            },
            rotation: function() {
              return this._model ? this._model.rotation : 0;
            },
            visible: function() {
              return this._model && this._model.opacity;
            },
            model: function() {
              return this._model;
            },
            draw: function(chart, center) {
              var me = this;
              var ctx = chart.ctx;
              var model = me._model;
              var rects = me._rects;
              var area;
              if (!this.visible()) {
                return;
              }
              ctx.save();
              if (model.clip) {
                area = model.area;
                ctx.beginPath();
                ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
                ctx.clip();
              }
              ctx.globalAlpha = utils.bound(0, model.opacity, 1);
              ctx.translate(rasterize(center.x), rasterize(center.y));
              ctx.rotate(model.rotation);
              drawFrame(ctx, rects.frame, model);
              drawText(ctx, model.lines, rects.text, model);
              ctx.restore();
            }
          });
          var helpers$2 = Chart2.helpers;
          var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
          var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
          function rotated(point, center, angle) {
            var cos = Math.cos(angle);
            var sin = Math.sin(angle);
            var cx = center.x;
            var cy = center.y;
            return {
              x: cx + cos * (point.x - cx) - sin * (point.y - cy),
              y: cy + sin * (point.x - cx) + cos * (point.y - cy)
            };
          }
          function projected(points, axis) {
            var min = MAX_INTEGER;
            var max = MIN_INTEGER;
            var origin = axis.origin;
            var i7, pt, vx, vy, dp;
            for (i7 = 0; i7 < points.length; ++i7) {
              pt = points[i7];
              vx = pt.x - origin.x;
              vy = pt.y - origin.y;
              dp = axis.vx * vx + axis.vy * vy;
              min = Math.min(min, dp);
              max = Math.max(max, dp);
            }
            return {
              min,
              max
            };
          }
          function toAxis(p0, p1) {
            var vx = p1.x - p0.x;
            var vy = p1.y - p0.y;
            var ln = Math.sqrt(vx * vx + vy * vy);
            return {
              vx: (p1.x - p0.x) / ln,
              vy: (p1.y - p0.y) / ln,
              origin: p0,
              ln
            };
          }
          var HitBox = function() {
            this._rotation = 0;
            this._rect = {
              x: 0,
              y: 0,
              w: 0,
              h: 0
            };
          };
          helpers$2.extend(HitBox.prototype, {
            center: function() {
              var r4 = this._rect;
              return {
                x: r4.x + r4.w / 2,
                y: r4.y + r4.h / 2
              };
            },
            update: function(center, rect, rotation) {
              this._rotation = rotation;
              this._rect = {
                x: rect.x + center.x,
                y: rect.y + center.y,
                w: rect.w,
                h: rect.h
              };
            },
            contains: function(point) {
              var me = this;
              var margin = 1;
              var rect = me._rect;
              point = rotated(point, me.center(), -me._rotation);
              return !(point.x < rect.x - margin || point.y < rect.y - margin || point.x > rect.x + rect.w + margin * 2 || point.y > rect.y + rect.h + margin * 2);
            },
            intersects: function(other) {
              var r0 = this._points();
              var r1 = other._points();
              var axes = [
                toAxis(r0[0], r0[1]),
                toAxis(r0[0], r0[3])
              ];
              var i7, pr0, pr1;
              if (this._rotation !== other._rotation) {
                axes.push(toAxis(r1[0], r1[1]), toAxis(r1[0], r1[3]));
              }
              for (i7 = 0; i7 < axes.length; ++i7) {
                pr0 = projected(r0, axes[i7]);
                pr1 = projected(r1, axes[i7]);
                if (pr0.max < pr1.min || pr1.max < pr0.min) {
                  return false;
                }
              }
              return true;
            },
            _points: function() {
              var me = this;
              var rect = me._rect;
              var angle = me._rotation;
              var center = me.center();
              return [
                rotated({ x: rect.x, y: rect.y }, center, angle),
                rotated({ x: rect.x + rect.w, y: rect.y }, center, angle),
                rotated({ x: rect.x + rect.w, y: rect.y + rect.h }, center, angle),
                rotated({ x: rect.x, y: rect.y + rect.h }, center, angle)
              ];
            }
          });
          function coordinates(view, model, geometry) {
            var point = model.positioner(view, model);
            var vx = point.vx;
            var vy = point.vy;
            if (!vx && !vy) {
              return { x: point.x, y: point.y };
            }
            var w2 = geometry.w;
            var h3 = geometry.h;
            var rotation = model.rotation;
            var dx = Math.abs(w2 / 2 * Math.cos(rotation)) + Math.abs(h3 / 2 * Math.sin(rotation));
            var dy = Math.abs(w2 / 2 * Math.sin(rotation)) + Math.abs(h3 / 2 * Math.cos(rotation));
            var vs = 1 / Math.max(Math.abs(vx), Math.abs(vy));
            dx *= vx * vs;
            dy *= vy * vs;
            dx += model.offset * vx;
            dy += model.offset * vy;
            return {
              x: point.x + dx,
              y: point.y + dy
            };
          }
          function collide(labels, collider) {
            var i7, j, s0, s1;
            for (i7 = labels.length - 1; i7 >= 0; --i7) {
              s0 = labels[i7].$layout;
              for (j = i7 - 1; j >= 0 && s0._visible; --j) {
                s1 = labels[j].$layout;
                if (s1._visible && s0._box.intersects(s1._box)) {
                  collider(s0, s1);
                }
              }
            }
            return labels;
          }
          function compute$1(labels) {
            var i7, ilen, label, state, geometry, center;
            for (i7 = 0, ilen = labels.length; i7 < ilen; ++i7) {
              label = labels[i7];
              state = label.$layout;
              if (state._visible) {
                geometry = label.geometry();
                center = coordinates(label._el._model, label.model(), geometry);
                state._box.update(center, geometry, label.rotation());
              }
            }
            return collide(labels, function(s0, s1) {
              var h0 = s0._hidable;
              var h1 = s1._hidable;
              if (h0 && h1 || h1) {
                s1._visible = false;
              } else if (h0) {
                s0._visible = false;
              }
            });
          }
          var layout = {
            prepare: function(datasets) {
              var labels = [];
              var i7, j, ilen, jlen, label;
              for (i7 = 0, ilen = datasets.length; i7 < ilen; ++i7) {
                for (j = 0, jlen = datasets[i7].length; j < jlen; ++j) {
                  label = datasets[i7][j];
                  labels.push(label);
                  label.$layout = {
                    _box: new HitBox(),
                    _hidable: false,
                    _visible: true,
                    _set: i7,
                    _idx: j
                  };
                }
              }
              labels.sort(function(a3, b2) {
                var sa = a3.$layout;
                var sb = b2.$layout;
                return sa._idx === sb._idx ? sa._set - sb._set : sb._idx - sa._idx;
              });
              this.update(labels);
              return labels;
            },
            update: function(labels) {
              var dirty = false;
              var i7, ilen, label, model, state;
              for (i7 = 0, ilen = labels.length; i7 < ilen; ++i7) {
                label = labels[i7];
                model = label.model();
                state = label.$layout;
                state._hidable = model && model.display === "auto";
                state._visible = label.visible();
                dirty |= state._hidable;
              }
              if (dirty) {
                compute$1(labels);
              }
            },
            lookup: function(labels, point) {
              var i7, state;
              for (i7 = labels.length - 1; i7 >= 0; --i7) {
                state = labels[i7].$layout;
                if (state && state._visible && state._box.contains(point)) {
                  return {
                    dataset: state._set,
                    label: labels[i7]
                  };
                }
              }
              return null;
            },
            draw: function(chart, labels) {
              var i7, ilen, label, state, geometry, center;
              for (i7 = 0, ilen = labels.length; i7 < ilen; ++i7) {
                label = labels[i7];
                state = label.$layout;
                if (state._visible) {
                  geometry = label.geometry();
                  center = coordinates(label._el._view, label.model(), geometry);
                  state._box.update(center, geometry, label.rotation());
                  label.draw(chart, center);
                }
              }
            }
          };
          var helpers$3 = Chart2.helpers;
          var formatter = function(value) {
            if (helpers$3.isNullOrUndef(value)) {
              return null;
            }
            var label = value;
            var keys, klen, k2;
            if (helpers$3.isObject(value)) {
              if (!helpers$3.isNullOrUndef(value.label)) {
                label = value.label;
              } else if (!helpers$3.isNullOrUndef(value.r)) {
                label = value.r;
              } else {
                label = "";
                keys = Object.keys(value);
                for (k2 = 0, klen = keys.length; k2 < klen; ++k2) {
                  label += (k2 !== 0 ? ", " : "") + keys[k2] + ": " + value[keys[k2]];
                }
              }
            }
            return "" + label;
          };
          var defaults = {
            align: "center",
            anchor: "center",
            backgroundColor: null,
            borderColor: null,
            borderRadius: 0,
            borderWidth: 0,
            clamp: false,
            clip: false,
            color: void 0,
            display: true,
            font: {
              family: void 0,
              lineHeight: 1.2,
              size: void 0,
              style: void 0,
              weight: null
            },
            formatter,
            listeners: {},
            offset: 4,
            opacity: 1,
            padding: {
              top: 4,
              right: 4,
              bottom: 4,
              left: 4
            },
            rotation: 0,
            textAlign: "start",
            textStrokeColor: void 0,
            textStrokeWidth: 0,
            textShadowBlur: 0,
            textShadowColor: void 0
          };
          var helpers$4 = Chart2.helpers;
          var EXPANDO_KEY = "$datalabels";
          function configure(dataset, options) {
            var override = dataset.datalabels;
            var config = {};
            if (override === false) {
              return null;
            }
            if (override === true) {
              override = {};
            }
            return helpers$4.merge(config, [options, override]);
          }
          function dispatchEvent(chart, listeners, target) {
            var callback = listeners && listeners[target.dataset];
            if (!callback) {
              return;
            }
            var label = target.label;
            var context = label.$context;
            if (helpers$4.callback(callback, [context]) === true) {
              chart[EXPANDO_KEY]._dirty = true;
              label.update(context);
            }
          }
          function dispatchMoveEvents(chart, listeners, previous, target) {
            var enter, leave;
            if (!previous && !target) {
              return;
            }
            if (!previous) {
              enter = true;
            } else if (!target) {
              leave = true;
            } else if (previous.label !== target.label) {
              leave = enter = true;
            }
            if (leave) {
              dispatchEvent(chart, listeners.leave, previous);
            }
            if (enter) {
              dispatchEvent(chart, listeners.enter, target);
            }
          }
          function handleMoveEvents(chart, event) {
            var expando = chart[EXPANDO_KEY];
            var listeners = expando._listeners;
            var previous, target;
            if (!listeners.enter && !listeners.leave) {
              return;
            }
            if (event.type === "mousemove") {
              target = layout.lookup(expando._labels, event);
            } else if (event.type !== "mouseout") {
              return;
            }
            previous = expando._hovered;
            expando._hovered = target;
            dispatchMoveEvents(chart, listeners, previous, target);
          }
          function handleClickEvents(chart, event) {
            var expando = chart[EXPANDO_KEY];
            var handlers = expando._listeners.click;
            var target = handlers && layout.lookup(expando._labels, event);
            if (target) {
              dispatchEvent(chart, handlers, target);
            }
          }
          function invalidate(chart) {
            if (chart.animating) {
              return;
            }
            var animations = Chart2.animationService.animations;
            for (var i7 = 0, ilen = animations.length; i7 < ilen; ++i7) {
              if (animations[i7].chart === chart) {
                return;
              }
            }
            chart.render({ duration: 1, lazy: true });
          }
          Chart2.defaults.global.plugins.datalabels = defaults;
          var plugin = {
            id: "datalabels",
            beforeInit: function(chart) {
              chart[EXPANDO_KEY] = {
                _actives: []
              };
            },
            beforeUpdate: function(chart) {
              var expando = chart[EXPANDO_KEY];
              expando._listened = false;
              expando._listeners = {};
              expando._datasets = [];
              expando._labels = [];
            },
            afterDatasetUpdate: function(chart, args, options) {
              var datasetIndex = args.index;
              var expando = chart[EXPANDO_KEY];
              var labels = expando._datasets[datasetIndex] = [];
              var visible = chart.isDatasetVisible(datasetIndex);
              var dataset = chart.data.datasets[datasetIndex];
              var config = configure(dataset, options);
              var elements = args.meta.data || [];
              var ilen = elements.length;
              var ctx = chart.ctx;
              var i7, el, label;
              ctx.save();
              for (i7 = 0; i7 < ilen; ++i7) {
                el = elements[i7];
                if (visible && el && !el.hidden && !el._model.skip) {
                  labels.push(label = new Label(config, ctx, el, i7));
                  label.update(label.$context = {
                    active: false,
                    chart,
                    dataIndex: i7,
                    dataset,
                    datasetIndex
                  });
                } else {
                  label = null;
                }
                el[EXPANDO_KEY] = label;
              }
              ctx.restore();
              helpers$4.merge(expando._listeners, config.listeners || {}, {
                merger: function(key, target, source) {
                  target[key] = target[key] || {};
                  target[key][args.index] = source[key];
                  expando._listened = true;
                }
              });
            },
            afterUpdate: function(chart, options) {
              chart[EXPANDO_KEY]._labels = layout.prepare(chart[EXPANDO_KEY]._datasets, options);
            },
            afterDatasetsDraw: function(chart) {
              layout.draw(chart, chart[EXPANDO_KEY]._labels);
            },
            beforeEvent: function(chart, event) {
              if (chart[EXPANDO_KEY]._listened) {
                switch (event.type) {
                  case "mousemove":
                  case "mouseout":
                    handleMoveEvents(chart, event);
                    break;
                  case "click":
                    handleClickEvents(chart, event);
                    break;
                  default:
                }
              }
            },
            afterEvent: function(chart) {
              var expando = chart[EXPANDO_KEY];
              var previous = expando._actives;
              var actives = expando._actives = chart.lastActive || [];
              var updates = utils.arrayDiff(previous, actives);
              var i7, ilen, update, label;
              for (i7 = 0, ilen = updates.length; i7 < ilen; ++i7) {
                update = updates[i7];
                if (update[1]) {
                  label = update[0][EXPANDO_KEY];
                  if (label) {
                    label.$context.active = update[1] === 1;
                    label.update(label.$context);
                  }
                }
              }
              if (expando._dirty || updates.length) {
                layout.update(expando._labels);
                invalidate(chart);
              }
              delete expando._dirty;
            }
          };
          Chart2.plugins.register(plugin);
          return plugin;
        });
      }
    });
    var import_chart = __toModule2(require_Chart());
    var ChartAnnotation2 = __toModule2(require_src());
    var import_chartjs_plugin_datalabels = __toModule2(require_chartjs_plugin_datalabels());
    window._____chartjses = {
      Chart: import_chart.default,
      ChartAnnotation: ChartAnnotation2,
      ChartDataLabels: import_chartjs_plugin_datalabels.default
    };
  })();

  // ../chartjs-es/module.js
  var Chart = window._____chartjses.Chart;
  var ChartAnnotation = window._____chartjses.ChartAnnotation;
  var ChartDataLabels = window._____chartjses.ChartDataLabels;

  // ../utils/resize-mixin.js
  var resizeMixin = (superClass) => class extends superClass {
    connectedCallback() {
      super.connectedCallback();
      this.windowDimensionObserver = this.handleResize.bind(this);
      window.addEventListener("resize", this.windowDimensionObserver);
    }
    disconnectedCallback() {
      window.removeEventListener("resize", this.windowDimensionObserver);
      super.disconnectedCallback();
    }
  };

  // ../sh-chart/src/sh-chart.js
  var SHChart = class extends resizeMixin(s4) {
    static get styles() {
      return [
        sharedStyles,
        i`
        :host {
          height: 100%;
          width: 100%;
          position: relative;
          display: flex;
        }
        .chart-parent {
          height: 100%;
          width: 100%;
          align-items: center;
          justify-content: center;
          overflow: hidden;
          display: flex;
          flex: 1;
          position: relative;
        }
      `
      ];
    }
    render() {
      return x` <div class="chart-parent">
      <canvas id="chart-wrapper" width="0" height="0"></canvas>
    </div>`;
    }
    static get properties() {
      return {
        type: { type: String, reflect: true },
        legend: { type: Boolean, reflect: true },
        data: { type: Object },
        options: { type: Object },
        _chartData: { type: Object }
      };
    }
    constructor() {
      super();
      this.type = "line";
      this.legend = false;
    }
    firstUpdated() {
      Chart.plugins.register([ChartDataLabels, ChartAnnotation]);
      this._createChart();
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("type") || changedProperties.has("legend") || changedProperties.has("data") || changedProperties.has("options")) {
        this._createChart();
      }
      const listOfProperties = ["options", "type", "legend", "data"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    handleResize() {
      let id;
      for (id in Chart.instances) {
        if (Chart.instances.hasOwnProperty(id)) {
          Chart.instances[id].resize();
        }
      }
    }
    disconnectedCallback() {
      super.disconnectedCallback();
      this._chartData.destroy();
    }
    _setChartData() {
      if (this.data === null || this.data === void 0) {
        return;
      }
      const sets = this.data.datasets.length;
      for (let i7 = 0; i7 < sets; i7++) {
        this.data.datasets[i7].label = !this.data.datasets[i7].label ? "Dataset Label" : this.data.datasets[i7].label;
        if (this.data.datasets[i7].color === void 0) {
          if (this.type !== "pie" && this.type !== "doughnut" && sets > 1) {
            this._setChartDataColor(i7);
          } else {
            this.data.datasets[i7].color = [
              "rgba(50,158,188,.8)",
              "rgba(139,50,188,.8)",
              "rgba(50,188,77,.8)",
              "rgba(50,188,167,.8)",
              "rgba(50,144,188,.8)",
              "rgba(188,50,115,.8)"
            ];
          }
        }
        this.data.datasets[i7].fill = this.data.datasets[i7].fill === void 0 ? false : this.data.datasets[i7].fill;
        this.data.datasets[i7].pointBorderColor = "transparent";
        this.data.datasets[i7].pointRadius = 4;
        this.data.datasets[i7].pointHoverRadius = 8;
        this.data.datasets[i7].pointHitRadius = 4;
        this.data.datasets[i7].backgroundColor = this.data.datasets[i7].color;
        this.data.datasets[i7].hoverBackgroundColor = this.data.datasets[i7].color;
        this.data.datasets[i7].pointBackgroundColor = this.data.datasets[i7].color;
        this.data.datasets[i7].pointHoverBackgroundColor = this.data.datasets[i7].color;
        this.data.datasets[i7].borderColor = this.data.datasets[i7].color;
        if (this.type === "line" || this.type === "radar" || this.type === "pie" || this.type === "doughnut") {
          this.data.datasets[i7].borderWidth = 2;
          if (this.type === "pie" || this.type === "doughnut") {
            this.data.datasets[i7].borderColor = "white";
          }
        } else {
          this.data.datasets[i7].borderWidth = 0;
        }
        if (this.type === "radar") {
          this.data.datasets[i7].lineTension = 0;
        }
      }
    }
    _setChartDataColor(i7) {
      switch (i7) {
        case 0:
          this.data.datasets[i7].color = "rgba(50,158,188,1)";
          break;
        case 1:
          this.data.datasets[i7].color = "rgba(139,50,188,.8)";
          break;
        case 2:
          this.data.datasets[i7].color = "rgba(50,188,77,.8)";
          break;
        case 3:
          this.data.datasets[i7].color = "rgba(50,188,167,.8)";
          break;
        case 4:
          this.data.datasets[i7].color = "rgba(50,144,188,.8)";
          break;
        case 5:
          this.data.datasets[i7].color = "rgba(188,50,115,.8)";
          break;
      }
    }
    _createChart() {
      if (this._chartData !== void 0 && this._chartData !== null) {
        this._chartData.destroy();
      }
      this._setChartData();
      Chart.defaults.global.defaultFontColor = "rgba(0,0,0,.6)";
      Chart.defaults.global.defaultFontFamily = "siemens sans";
      Chart.defaults.global.defaultFontSize = 14;
      Chart.defaults.global.legend.labels.fontSize = 12;
      Chart.defaults.global.legend.labels.fontColor = "rgba(0,0,0,.9)";
      Chart.defaults.global.legend.labels.padding = 16;
      Chart.defaults.global.legend.labels.usePointStyle = true;
      Chart.defaults.global.tooltips.xPadding = 8;
      this.ctx = this.shadowRoot.querySelector("#chart-wrapper").getContext("2d");
      this._chartData = new Chart(this.ctx, {
        type: this.type,
        data: this.data,
        options: this.options
      });
      this._chartData.options.tooltips.backgroundColor = "rgb(255, 255, 255)";
      this._chartData.options.tooltips.titleFontColor = "rgba(0,0,0,.9)";
      this._chartData.options.tooltips.bodyFontColor = "rgba(0,0,0,.9)";
      this._chartData.options.tooltips.titleSpacing = 8;
      this._chartData.options.tooltips.bodySpacing = 4;
      this._chartData.options.tooltips.footerSpacing = 4;
      this._chartData.options.tooltips.yPadding = 8;
      this._chartData.options.tooltips.borderColor = "rgba(0,0,0,.2)";
      this._chartData.options.tooltips.multiKeyBackground = "transparent";
      this._chartData.options.tooltips.cornerRadius = 2;
      this._chartData.options.tooltips.borderWidth = 1;
      this._chartData.options.legend.display = this.legend;
      if (this.type === "line") {
        this.borderWidth = 2;
      }
    }
  };
  customElements.define("sh-chart", SHChart);

  // ../sh-drawer/src/sh-drawer.lit.scss.js
  var sh_drawer_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-drawer-width=22rem] - drawer width
   */
  --sh-drawer-width: 22rem;
  /* 
   * @cssprop [--sh-drawer-header-wrapper-padding=1rem] - padding of the header-wrapper
   */
  --sh-drawer-header-wrapper-padding: 1rem;
  /* 
   * @cssprop [--sh-drawer-label-wrapper-padding=1rem] - padding of the label-wrapper
   */
  --sh-drawer-label-wrapper-padding: 1rem;
  /* 
   * @cssprop [--sh-drawer-gap-between-function-footer-slot-elements=0.5rem] - gap between function and footer slot elements
   */
  --sh-drawer-gap-between-function-footer-slot-elements: 0.5rem;
  /* 
   * @cssprop [--sh-drawer-body-wrapper-padding=0 1rem] - padding of the body-wrapper
   */
  --sh-drawer-body-wrapper-padding: 0 1rem;
  /* 
   * @cssprop [--sh-drawer-menu-item-margin-top=0.5rem] - margin-top of menu-item
   */
  --sh-drawer-menu-item-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-drawer-headerless-body-wrapper-padding-top=1rem] - padding-top of body-wrapper when no header
   */
  --sh-drawer-headerless-body-wrapper-padding-top: 1rem;
  /* 
   * @cssprop [--sh-drawer-footerless-body-wrapper-padding-bottom=var(--sh-drawer-headerless-body-wrapper-padding-top)] - padding bottom of body-wrapper when no footer
   */
  --sh-drawer-footerless-body-wrapper-padding-bottom: var(--sh-drawer-headerless-body-wrapper-padding-top);
  /* 
   * @cssprop [--sh-drawer-body-wrapper-margin-bottom=0.5rem] - margin-bottom of elements in body-wrapper
   */
  --sh-drawer-body-wrapper-margin-bottom: 0.5rem;
  /* 
   * @cssprop [--sh-drawer-footer-wrapper-padding=var(--sh-drawer-footerless-body-wrapper-padding-bottom)] - padding of the footer-wrapper
   */
  --sh-drawer-footer-wrapper-padding: var(--sh-drawer-footerless-body-wrapper-padding-bottom);
  /* 
   * @cssprop [--sh-drawer-top-bottom-min-height=10rem] - min-height of top and bottom drawers
   */
  --sh-drawer-top-bottom-min-height: 10rem;
  /* 
   * @cssprop [--sh-drawer-label-line-height=1.5rem] - line-height of the label
   */
  --sh-drawer-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-drawer-label-padding=0rem] - padding of the label
   */
  --sh-drawer-label-padding: 0rem;
  /* 
   * @cssprop [--sh-drawer-label-margin-right=0.5rem] - margin-right of label
   */
  --sh-drawer-label-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-drawer-touch-gap-between-function-footer-slot-elements=1rem] - gap of the elements in function and footer slot for touch
   */
  --sh-drawer-touch-gap-between-function-footer-slot-elements: 1rem;
  /* 
   * @cssprop [--sh-drawer-body-wrapper-line-height=1.25rem] - line-height of elements in body-wrapper
   */
  --sh-drawer-body-wrapper-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-drawer-scrollpicker-padding=0.5rem 1rem] - padding of the scrollpicker used in datepicker and timepicker
   */
  --sh-drawer-scrollpicker-padding: 0.5rem 1rem;
}

:host {
  position: fixed;
  top: 0rem;
  left: 0rem;
  height: 100%;
  width: 100%;
  background: rgba(0, 0, 0, 0.4);
  /**
    Setting z-index is necessary here inorder to make the drawer appear.

    Why the value is set to 6?

    Since
    pane has z-index=2,
    access-bar has z-index=4,
    a reasonable value of 6 is chosen. 

    Why not a high value like that of popover ?

    Since we have no concrete control in what way the BL intends to display its popovers
    (whether it has to appear above the drawers or below it), we are not choosing such high values.

    Since the z-index is applied directly to the host, the Business Line can any time
    modify the z-index according to the business needs.
    */
  z-index: 6;
  max-height: 0rem;
  opacity: 0;
  transition: var(--transition-time) all ease-in-out, 0s height ease-in-out var(--transition-time), 0s max-height ease-in-out var(--transition-time), 0s visibility linear 0s;
  display: block;
  visibility: hidden;
}

:host(:not([visible])) {
  overflow: hidden;
  pointer-events: none;
}

.drawer-wrapper {
  background: var(--base-3);
  position: absolute;
  display: flex;
  flex-direction: column;
  box-shadow: var(--shadow-navigation);
  box-sizing: border-box;
  transition: var(--transition-time) all ease-in-out;
  --drawer-width: var(--sh-drawer-width);
}

/* slot styles */
:host(:not([label])) .drawer-wrapper[empty-function] .label-wrapper,
.drawer-wrapper:not([empty-header]) .label-wrapper {
  display: none;
}

.header-wrapper {
  display: flex;
  flex-direction: row;
  padding: var(--sh-drawer-header-wrapper-padding);
}

.label-wrapper {
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: var(--sh-drawer-label-wrapper-padding);
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
}

.functions-wrapper {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: var(--sh-drawer-gap-between-function-footer-slot-elements);
}

.body-wrapper {
  flex: 1;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  overflow: auto;
  overflow-x: hidden;
  padding: var(--sh-drawer-body-wrapper-padding);
  font: var(--body-1);
  color: var(--text-primary);
  line-height: var(--sh-drawer-body-wrapper-line-height) !important;
}

.drawer-wrapper[empty-header] .body-wrapper {
  padding-top: var(--sh-drawer-headerless-body-wrapper-padding-top);
}

.drawer-wrapper[empty-footer] .body-wrapper {
  padding-bottom: var(--sh-drawer-footerless-body-wrapper-padding-bottom);
}

.drawer-wrapper:not([empty-header]) .body-wrapper,
:host([label]) .body-wrapper {
  padding-top: 0rem;
}

.body-wrapper > ::slotted(*:not(:last-child):not(sh-menu-item)) {
  margin-bottom: var(--sh-drawer-body-wrapper-margin-bottom);
}

.footer-wrapper {
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  padding: var(--sh-drawer-footer-wrapper-padding);
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-end;
  align-items: center;
  gap: var(--sh-drawer-gap-between-function-footer-slot-elements);
}

.drawer-wrapper[empty-header] .header-wrapper,
.drawer-wrapper[empty-footer] .footer-wrapper {
  display: none;
}

/* positioning */
:host([position=top]) .drawer-wrapper,
:host([position=bottom]) .drawer-wrapper {
  height: auto;
  min-height: var(--sh-drawer-top-bottom-min-height);
  max-height: calc(100% - 6.5rem);
  width: 100%;
}

:host([position=left]) .drawer-wrapper,
:host([position=right]) .drawer-wrapper {
  width: var(--drawer-width);
  height: 100%;
}

:host([position=top]) .drawer-wrapper {
  top: 0rem;
  transform: translateY(-5rem);
}

:host([position=bottom]) .drawer-wrapper {
  bottom: 0rem;
  transform: translateY(5rem);
}

:host([position=left]) .drawer-wrapper {
  left: 0rem;
  transform: translateX(-5rem);
}

:host([position=right]) .drawer-wrapper {
  right: 0rem;
  transform: translateX(5rem);
}

/* Margin constraint */
:host([position=left]) .drawer-wrapper,
:host([position=right]) .drawer-wrapper {
  max-width: calc(100% - 6.5rem);
}

/* visible */
:host([visible]) {
  max-height: 100%;
  opacity: 1;
  transition: var(--transition-time) all ease-in-out var(--transition-time), 0s height ease-in-out, 0s max-height ease-in-out, 0s visibility linear 0s;
  visibility: visible;
}

:host([visible]) .drawer-wrapper {
  transition: var(--transition-time) all ease-in-out var(--transition-time);
  transform: none;
}

.drawer-label {
  overflow: hidden;
  width: -webkit-fill-available;
  width: -moz-available;
  text-overflow: ellipsis;
  white-space: nowrap;
  color: var(--text-primary);
  font: var(--header-2);
  line-height: var(--sh-drawer-label-line-height);
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  padding: var(--sh-drawer-label-padding);
  margin-right: var(--sh-drawer-label-margin-right);
}

/* touch */
@media (any-pointer: coarse) {
  .functions-wrapper,
  .footer-wrapper {
    gap: var(--sh-drawer-touch-gap-between-function-footer-slot-elements);
  }
}
/* scrollpicker */
:host(.point5-vertical-padding) .body-wrapper {
  padding: var(--sh-drawer-scrollpicker-padding);
}

:host([position=bottom][visible].initial-slide-on-connect) {
  animation: fade-in var(--transition-time) ease-in-out;
}

:host([position=bottom][visible].initial-slide-on-connect) .drawer-wrapper {
  animation: slide-on-connect var(--transition-time) ease-in-out;
}

@keyframes slide-on-connect {
  0% {
    bottom: 0rem;
    transform: translateY(5rem);
  }
  100% {
    transform: none;
  }
}
@keyframes fade-in {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}`;

  // ../sh-drawer/src/sh-drawer.js
  var SHDrawer = class extends s4 {
    static get properties() {
      return {
        visible: { type: Boolean, reflect: true },
        label: { type: String, reflect: true },
        position: { type: String, reflect: true },
        sticky: { type: Boolean, reflect: true },
        drawerWidth: { type: String, reflect: true, attribute: "drawer-width" },
        _emptyHeader: { type: Boolean },
        _emptyFooter: { type: Boolean },
        _emptyFunction: { type: Boolean }
      };
    }
    static get styles() {
      return [sharedStyles, sh_drawer_lit_scss_default];
    }
    render() {
      return x`
      <div
        class="drawer-wrapper"
        id="content"
        ?empty-footer="${this._emptyFooter}"
        ?empty-header="${this._emptyHeader}"
        ?empty-function="${this._emptyFunction}"
      >
        <div class="label-wrapper">
          ${this.label ? x`<div class="drawer-label">${this.label}</div>` : x`<div class="drawer-label"></div>`}
          <div class="functions-wrapper">
            <slot
              name="functions"
              id="functions"
              @slotchange="${(e8) => this._updateSlotFlag(e8.target, "_emptyFunction")}"
            ></slot>
          </div>
        </div>
        <div class="header-wrapper">
          <slot
            name="header"
            id="header"
            @slotchange="${(e8) => this._updateSlotFlag(e8.target, "_emptyHeader")}"
          ></slot>
        </div>
        <div class="body-wrapper">
          <slot id="body"></slot>
        </div>
        <div class="footer-wrapper">
          <slot
            name="footer"
            id="footer"
            @slotchange="${(e8) => this._updateSlotFlag(e8.target, "_emptyFooter")}"
          ></slot>
        </div>
      </div>
    `;
    }
    constructor() {
      super();
      this.position = "left";
      this._emptyHeader = true;
      this._emptyFooter = true;
      this._emptyFunction = true;
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("visible")) {
        this._drawerStatus();
      }
      if (changedProperties.has("drawerWidth")) {
        this.shadowRoot.querySelector(".drawer-wrapper").style.setProperty("--drawer-width", this.drawerWidth);
      }
      const listOfProperties = ["visible", "label", "position", "sticky", "drawerWidth"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    firstUpdated() {
      super.firstUpdated();
      this.addEventListener("mousedown", function() {
        if (!this.sticky) {
          this._closeDrawer();
        }
      });
      this.shadowRoot.querySelector("#content").addEventListener("mousedown", function(e8) {
        e8.stopPropagation();
      });
      this._documentKeyupListenerRef = this._handleDocumentKeyup.bind(this);
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("tabindex")) {
        this.setAttribute("tabindex", 0);
      }
    }
    disconnectedCallback() {
      document.removeEventListener("keyup", this._documentKeyupListenerRef);
      super.disconnectedCallback();
    }
    _updateSlotFlag(slot, emptySlotFlag) {
      const numberOfNodes = slot.assignedNodes({
        flatten: true
      }).length;
      if (numberOfNodes === 0) {
        this[emptySlotFlag] = true;
      } else {
        this[emptySlotFlag] = false;
      }
    }
    _closeDrawer() {
      this.visible = false;
      dispatchCustomEvent(this, "drawer-closed");
      console.warn(`The drawer-closed event is a legacy event of sh-drawer component and will be deprecated soon.
Please use the visible-changed event to observe changes in visible property`);
    }
    _drawerStatus() {
      if (this.visible) {
        this.focus();
        this.style.outline = "0";
        document.addEventListener("keyup", this._documentKeyupListenerRef);
      } else {
        document.removeEventListener("keyup", this._documentKeyupListenerRef);
      }
    }
    _handleDocumentKeyup(e8) {
      if (keyboardInteraction(e8, KEYCODE.ESCAPE) && !this.sticky) {
        this._closeDrawer();
      }
    }
  };
  window.customElements.define("sh-drawer", SHDrawer);

  // ../sh-input-text/src/sh-input-text.lit.scss.js
  var sh_input_text_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-input-text-label-left=0.5rem] - left of the input label
   */
  --sh-input-text-label-left: 0.5rem;
  /* 
   * @cssprop [--sh-input-text-empty-label-top=0.5rem] - top of the input label when no value
   */
  --sh-input-text-empty-label-top: 0.5rem;
  /* 
   * @cssprop [--sh-input-text-empty-label-line-height=1.5rem] - line-height of the input label when no value
   */
  --sh-input-text-empty-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-input-text-empty-padding=0.5rem 0 0.4375rem 0.5rem] - padding of the input-text when no value
   */
  --sh-input-text-empty-padding: 0.5rem 0 0.4375rem 0.5rem;
  /* 
   * @cssprop [--sh-input-text-height=2.4375rem] - height of the input-text
   */
  --sh-input-text-height: 2.4375rem;
  /* 
   * @cssprop [--sh-input-text-padding=1.25rem 0 0.1875rem 0.5rem] - padding of the input-text with value
   */
  --sh-input-text-padding: 1.25rem 0 0.1875rem 0.5rem;
  /* 
   * @cssprop [--sh-input-text-label-top=0.25rem] - top of the input label with value
   */
  --sh-input-text-label-top: 0.25rem;
  /* 
   * @cssprop [--sh-input-text-label-line-height=1rem] - line-height of the input label with value
   */
  --sh-input-text-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-input-text-empty-no-border-padding-bottom=0.5rem] - padding-bottom of the input when no border
   */
  --sh-input-text-empty-no-border-padding-bottom: 0.5rem;
  /* 
   * @cssprop [--sh-input-text-no-border-padding-bottom=0.25rem] - padding-bottom of the input with value when no border
   */
  --sh-input-text-no-border-padding-bottom: 0.25rem;
  /* 
   * @cssprop [--sh-input-text-no-border-condensed-padding-bottom=0.25rem] - padding-bottom of the condensed input when no border
   */
  --sh-input-text-no-border-condensed-padding-bottom: 0.25rem;
  /* 
   * @cssprop [--sh-input-text-icon-left-margin=0.5rem] - margin-left of the icon
   */
  --sh-input-text-icon-left-margin: 0.5rem;
  /* 
   * @cssprop [--sh-input-text-slot-icon-left-margin=0.5rem] - margin-left of the icon placed in the slot
   */
  --sh-input-text-slot-icon-left-margin: 0.5rem;
  /* 
   * @cssprop [--sh-input-text-icon-wrapper-right-padding=0.5rem] - right-padding of the icon-wrapper
   */
  --sh-input-text-icon-wrapper-right-padding: 0.5rem;
  /* 
   * @cssprop [--sh-input-text-icon-size=1.5rem] - size of the icon
   */
  --sh-input-text-icon-size: 1.5rem;
  /* 
   * @cssprop [--sh-input-text-icon-wrapper-margin=0rem] - margin-bottom of the icon
   */
  --sh-input-text-icon-wrapper-margin: 0rem;
  /* 
   * @cssprop [--sh-input-text-helper-text-padding=0.25rem 0.5rem 0] - padding of the helper-text
   */
  --sh-input-text-helper-text-padding: 0.25rem 0.5rem 0;
  /* 
   * @cssprop [--sh-input-text-condensed-label-top=0.25rem] - top of the condensed label
   */
  --sh-input-text-condensed-label-top: 0.25rem;
  /* 
   * @cssprop [--sh-input-text-condensed-padding=0.25rem 0 0.1875rem 0.5rem] - padding of the condensed input
   */
  --sh-input-text-condensed-padding: 0.25rem 0 0.1875rem 0.5rem;
  /* 
   * @cssprop [--sh-input-text-condensed-height=1.9375rem] - height of the condensed input
   */
  --sh-input-text-condensed-height: 1.9375rem;
  /* 
   * @cssprop [--sh-input-text-textarea-label-height=1.5rem] - height of the textarea label
   */
  --sh-input-text-textarea-label-height: 1.5rem;
  /* 
   * @cssprop [--sh-input-text-textarea-label-padding=0.25rem 0 0.25rem 0.5rem] - padding of the textarea label
   */
  --sh-input-text-textarea-label-padding: 0.25rem 0 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-input-text-textarea-padding=0 0.5rem 0.3125rem] - padding of the textarea
   */
  --sh-input-text-textarea-padding: 0 0.5rem 0.3125rem;
  /* 
   * @cssprop [--sh-input-text-textarea-line-height=1.0625rem] - line-height of the textarea
   */
  --sh-input-text-textarea-line-height: 1.0625rem;
  /* 
   * @cssprop [--sh-input-text-textarea-empty-label-line-height=1.25rem] - line-height of the empty textarea (without value)
   */
  --sh-input-text-textarea-empty-label-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-input-text-condensed-textarea-top=0.25rem] - top of the icon-wrapper and label of condensed textarea
   */
  --sh-input-text-condensed-textarea-top: 0.25rem;
  /* 
   * @cssprop [--sh-input-text-condensed-textarea-padding=0.25rem 0 0.3125rem 0.5rem] - padding of the div of condensed textarea
   */
  --sh-input-text-condensed-textarea-padding: 0.25rem 0 0.3125rem 0.5rem;
  /* 
   * @cssprop [--sh-input-text-textarea-label-line-height=1rem] - line-height of the label of textarea with value
   */
  --sh-input-text-textarea-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-input-text-condensed-textarea-icon-top=0.25rem] - top of the icon of condensed textarea with value
   */
  --sh-input-text-condensed-textarea-icon-top: 0.25rem;
  /* 
   * @cssprop [--sh-input-text-pointer-events=none] - pointer events of the input text label
   */
  --sh-input-text-pointer-events: none;
  /* 
   * @cssprop [--sh-input-text-label-condensed-display=none] - condensed label display
   */
  --sh-input-text-label-condensed-display: none;
  /* 
   * @cssprop [--sh-input-text-input-cursor=text] - cursor for the input
   */
  --sh-input-text-input-cursor: text;
}

:host {
  width: 100%;
  height: auto;
  position: relative;
  display: flex;
  flex-direction: column;
}

.outer-wrapper {
  display: flex;
  flex-direction: column;
}

.input-wrapper {
  display: flex;
  flex-direction: row;
  border-radius: 0.125rem 0.125rem 0 0;
  background: rgba(var(--ui-1), var(--opacity-7));
  border-bottom: 0.0625rem solid transparent;
  border-color: rgba(var(--ui-1), var(--opacity-4));
  transition: var(--hover-transition-time) background;
}

:host(.no-hovermq) .input-wrapper {
  transition: none;
}

.outer-wrapper:focus-visible {
  outline: var(--focus-outline);
}

.content-wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  position: relative;
}

.input-text-label {
  color: var(--text-secondary);
  position: absolute;
  left: var(--sh-input-text-label-left);
  width: calc(100% - var(--sh-input-text-label-left));
  transition: var(--transition-time) all ease-in-out;
  pointer-events: var(--sh-input-text-pointer-events);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  top: var(--sh-input-text-empty-label-top);
  font: var(--body-1);
  line-height: var(--sh-input-text-empty-label-line-height);
  display: flex;
  align-items: center;
}

.label-wrapper {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  max-width: fit-content;
}

input {
  outline: none;
  border: none;
  font: var(--body-1);
  color: var(--text-primary);
  background: transparent;
  height: var(--sh-input-text-height);
  width: 100%;
  box-sizing: border-box;
  text-overflow: ellipsis;
  transition: var(--transition-time) all ease-in-out;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  -webkit-appearance: none;
  cursor: var(--sh-input-text-input-cursor);
  padding: var(--sh-input-text-padding);
}

:host(:not([disabled])) input {
  -webkit-background-clip: text;
  background-clip: text;
  caret-color: var(--text-primary);
  -webkit-text-fill-color: var(--text-primary);
}

:host(.empty) input {
  padding: var(--sh-input-text-empty-padding);
}

:host([no-border]:not([textarea]):not([condensed])) input {
  height: calc(var(--sh-input-text-height) + 0.0625rem);
  padding-bottom: var(--sh-input-text-empty-no-border-padding-bottom);
}

:host([no-border]:not([textarea]):not([condensed]):not(.empty)) input {
  height: calc(var(--sh-input-text-height) + 0.0625rem);
  padding-bottom: var(--sh-input-text-no-border-padding-bottom);
}

:host([condensed][no-border]:not([textarea])) input,
:host([condensed][no-clear][no-border]:not([textarea])) input {
  padding-bottom: var(--sh-input-text-no-border-condensed-padding-bottom);
  height: calc(var(--sh-input-text-condensed-height) + 0.0625rem);
}

:host(:not(.empty)) .input-text-label,
:host(:not([readonly])) input:focus + .input-text-label,
:host(:not([readonly]):not([disabled])[show-outline]) .input-text-label {
  top: var(--sh-input-text-label-top);
  font: var(--body-2);
  line-height: var(--sh-input-text-label-line-height);
}

:host(:not([show-outline])[value=""][show-tooltip]) input:focus + .input-text-label {
  top: var(--sh-input-text-empty-label-top);
  font: var(--body-1);
  line-height: var(--sh-input-text-empty-label-line-height);
}

:host(:not([show-outline])[condensed][value=""][show-tooltip]) input:focus + .input-text-label {
  top: var(--sh-input-text-condensed-label-top);
  font: var(--body-1);
  line-height: var(--sh-input-text-empty-label-line-height);
}

:host(:not([readonly])) .textarea:focus + .input-text-label,
:host([textarea]:not(.empty)) .input-text-label,
:host([textarea][textarea-focused]) .input-text-label {
  font: var(--body-2);
  line-height: var(--sh-input-text-textarea-label-line-height);
}

input::-ms-clear,
input::-ms-reveal {
  display: none;
}

.icon-wrapper {
  position: relative;
  align-items: center;
  right: 0;
  display: flex;
  padding-right: var(--sh-input-text-icon-wrapper-right-padding);
  width: fit-content;
  border-radius: 0 0.125rem 0 0;
}

:host([textarea]) .icon-wrapper {
  margin-bottom: var(--sh-input-text-icon-wrapper-margin);
}

:host([textarea][condensed]) .icon-wrapper {
  height: fit-content;
  top: var(--sh-input-text-condensed-textarea-top);
}

:host([textarea][condensed]:not(.empty):hover:not(.no-hovermq)) .icon-wrapper,
:host([textarea][condensed][error]:not(.empty)) .icon-wrapper {
  top: var(--sh-input-text-condensed-textarea-icon-top);
}

.icon-wrapper > sh-icon[icon=error],
.icon-wrapper > sh-icon[icon=success] {
  margin-left: var(--sh-input-text-icon-left-margin);
}

:host([condensed]) .icon-wrapper > ::slotted(sh-icon),
.icon-wrapper > ::slotted(sh-icon) {
  margin-left: var(--sh-input-text-slot-icon-left-margin);
}

:host([condensed]:not([textarea])) #clear,
:host([condensed]:not([textarea])) .icon-wrapper > ::slotted(sh-icon) {
  --sh-icon-size-s: var(--sh-input-text-icon-size) !important;
}

/* disabled */
input:disabled,
textarea:disabled {
  opacity: unset;
}

:host([disabled]) .input-text-label,
:host([disabled][textarea]) .input-text-label,
:host([disabled]) input,
:host([disabled]) .textarea {
  color: var(--text-disabled);
}

:host([mandatory][disabled]) #mandatory {
  color: rgba(var(--ui-2), var(--opacity-5));
}

:host([disabled]) .icon-wrapper > ::slotted(*) {
  pointer-events: none;
  color: var(--text-disabled);
}

:host([disabled][textarea]) .textarea {
  color: var(--text-disabled);
}

/* Validation Styles */
:host([mandatory]) #mandatory {
  display: inline-block;
  color: rgba(var(--ui-2), var(--opacity-1));
}

:host([error]) .input-wrapper,
:host([error]) input:focus,
:host([textarea][error][condensed]) .input-wrapper,
:host([textarea][error]:not([condensed])) .outer-wrapper {
  border-color: rgba(var(--functional-red), var(--opacity-1));
}

:host([success]) .input-wrapper,
:host([success]) input:focus,
:host([textarea][success][condensed]) .input-wrapper,
:host([textarea][success]:not([condensed])) .outer-wrapper {
  border-color: rgba(var(--functional-green), var(--opacity-1));
}

:host([safety]) .input-wrapper,
:host([safety]) input:focus,
:host([textarea][safety][condensed]) .input-wrapper,
:host([textarea][safety]:not([condensed])) .outer-wrapper {
  border-color: rgba(var(--functional-yellow), var(--opacity-2));
}

/* focus */
:host(:not([error]):not([success]):not([safety]):not([readonly]):not([disabled])) .input-wrapper:focus-within,
:host([show-outline]:not([error]):not([success]):not([safety]):not([readonly]):not([disabled])) .input-wrapper {
  border-color: rgba(var(--ui-1), var(--opacity-2));
}

:host(.empty:not([condensed])) input:focus,
.textarea:focus {
  padding: var(--sh-input-text-padding);
}

/* readonly */
:host([readonly]) .input-wrapper,
:host([readonly]) .textarea {
  background: transparent;
}

:host([readonly]) input,
:host([readonly]) .textarea,
:host([disabled]) input,
:host([disabled]) .textarea {
  cursor: default;
  overflow: hidden;
  text-overflow: ellipsis;
}

:host([value=""][readonly]),
:host([disabled]) input,
:host([disabled]) .textarea {
  pointer-events: none;
}

/* Clear Field Icon */
#clear {
  opacity: 0;
  z-index: -1;
  padding: unset;
  pointer-events: none;
  transition: none;
  cursor: pointer;
  --sh-icon-size-s: 0;
  --sh-icon-font-size-s: 0;
}

:host([error]:not([value=""])) #clear {
  opacity: 1;
  z-index: auto;
  margin-left: var(--sh-input-text-icon-left-margin);
  --sh-icon-size-s: unset;
  --sh-icon-font-size-s: unset;
}

:host(.no-hovermq) #clear {
  opacity: 1;
  z-index: auto;
  pointer-events: all;
  --sh-icon-size-s: unset;
  --sh-icon-font-size-s: unset;
}

/* No Clear */
/* hover */
:host(:not([readonly]):not([disabled]):not([textarea])) .input-wrapper:hover {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host(:not([readonly]):not([disabled]):not(.empty)[textarea]) .outer-wrapper:hover #clear,
:host(:not([readonly]):not([disabled]):not(.empty):hover:not(.no-hovermq)) .input-wrapper:hover #clear,
:host(:not([readonly]):not([disabled]):not(.empty).no-hovermq):hover .input-wrapper:hover #clear,
#clear:focus {
  pointer-events: all;
  opacity: 1;
  z-index: auto;
  margin-left: var(--sh-input-text-icon-left-margin);
  --sh-icon-size-s: unset;
  --sh-icon-font-size-s: unset;
}

:host([condensed]:not([readonly]):not([disabled]):not(.empty):hover:not(.no-hovermq)) .input-wrapper:hover #clear,
:host([condensed]:not([readonly]):not([disabled]):not(.empty).no-hovermq):hover .input-wrapper:hover #clear,
:host([condensed]) #clear:focus,
:host([condensed]) .icon-wrapper > sh-icon[icon=error],
:host([condensed]) .icon-wrapper > sh-icon[icon=success],
:host([condensed][error]:not([value=""])) #clear {
  margin-left: var(--sh-input-text-icon-left-margin);
}

/* helper text */
.helper-text {
  padding: var(--sh-input-text-helper-text-padding);
  box-sizing: border-box;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  visibility: visible;
  cursor: text !important;
}

:host([disabled]) .helper-text {
  color: var(--text-disabled);
}

/*condensed*/
:host([condensed]) .input-text-label,
:host([condensed]:not([show-tooltip])) input:focus + .input-text-label,
:host([condensed][textarea]) .textarea:focus + .input-text-label {
  display: none;
}

:host([condensed][textarea]) #shinputDiv {
  padding: var(--sh-input-text-condensed-textarea-padding);
}

:host(.empty[condensed][readonly]) input:focus + .input-text-label {
  display: flex;
}

:host(.empty[condensed]) .input-text-label {
  display: flex;
  top: var(--sh-input-text-condensed-label-top);
}

:host(.empty[textarea][condensed]) .input-text-label {
  line-height: var(--sh-input-text-textarea-line-height);
  top: unset;
  height: unset;
}

:host([condensed]) input,
:host([condensed][no-clear]) input {
  padding: var(--sh-input-text-condensed-padding);
  height: var(--sh-input-text-condensed-height);
}

/*textarea*/
:host([textarea]) .outer-wrapper {
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background, 0s height;
  background: rgba(var(--ui-1), var(--opacity-7));
  border-bottom: 0.0625rem solid transparent;
  border-color: rgba(var(--ui-1), var(--opacity-5));
  border-radius: 0.125rem 0.125rem 0 0;
}

:host([textarea]) .input-text-label {
  background-color: transparent;
  transition: color var(--transition-time) ease-in-out, font var(--transition-time) ease-in-out, top var(--transition-time) ease-in-out, line-height var(--transition-time) ease-in-out;
  height: var(--sh-input-text-textarea-label-height);
  line-height: var(--sh-input-text-textarea-empty-label-line-height);
}

:host([textarea]:not([condensed])) .input-text-label {
  position: relative;
  width: 100%;
  top: unset;
  left: unset;
}

:host([textarea]:not([condensed])) .content-wrapper {
  border-radius: 0.125rem 0 0 0;
}

:host([textarea]) .textarea,
:host([readonly][textarea]) .textarea:focus {
  outline: none;
  border: none;
  font: var(--body-1);
  color: var(--text-primary);
  background-color: transparent;
  width: 100%;
  box-sizing: border-box;
  padding: 0rem;
  resize: none;
  overflow-y: auto;
  line-height: var(--sh-input-text-textarea-line-height);
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
}

:host([textarea]) .input-wrapper {
  transition: none;
  border-bottom: none;
  border-color: unset;
  border-radius: unset;
  background: none;
}

:host([textarea]:not([condensed])) .textarea,
:host([textarea][readonly]:not([condensed])) .textarea {
  padding: var(--sh-input-text-textarea-padding);
}

:host(:not([disabled]):not([readonly])[textarea]) .outer-wrapper:hover {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host(:not([readonly]):not(.no-hovermq)[textarea]:hover) input:hover:not(:focus),
:host(:not([readonly]):not(.no-hovermq)[textarea]:hover) .textarea:hover:not(:focus),
:host([textarea][readonly]) .outer-wrapper,
:host([textarea][readonly]) .input-wrapper {
  background-color: transparent;
}

:host([textarea]) #shinputDiv {
  padding: var(--sh-input-text-textarea-label-padding);
  box-sizing: border-box;
}

:host([textarea]:not([readonly]):not([disabled])) #shinputDiv {
  cursor: text;
}

/* textarea auto height */
:host([textarea][rows=auto]) .content-wrapper,
:host([textarea][rows=auto]) textarea {
  display: flex;
  flex: 1;
}

:host([no-border]) .input-wrapper,
:host([no-border][readonly]) input:focus .input-wrapper,
:host([textarea][no-border]) .outer-wrapper,
:host([textarea][error][condensed][no-border]) .input-wrapper,
:host([textarea][error][no-border]:not([condensed])) .outer-wrapper,
:host([textarea][success][condensed][no-border]) .input-wrapper,
:host([textarea][success][no-border]:not([condensed])) .outer-wrapper,
:host([textarea][safety][condensed][no-border]) .input-wrapper,
:host([textarea][safety][no-border]:not([condensed])) .outer-wrapper {
  border-bottom: none;
}`;

  // ../sh-input-text/src/sh-input-text.js
  var SHInputText = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        value: { type: String, reflect: true },
        hint: { type: String, reflect: true },
        type: { type: String, reflect: true },
        textarea: { type: Boolean, reflect: true },
        rows: { type: String, reflect: true },
        maxlength: { type: String, reflect: true },
        readonly: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        role: { type: String, reflect: true },
        mandatory: { type: Boolean, reflect: true },
        error: { type: Boolean, reflect: true },
        success: { type: Boolean, reflect: true },
        safety: { type: Boolean, reflect: true },
        errorMessage: { type: String, reflect: true, attribute: "error-message" },
        condensed: { type: Boolean, reflect: true },
        resizable: { type: Boolean, reflect: true },
        noClear: { type: Boolean, reflect: true, attribute: "no-clear" },
        autofocus: { type: Boolean, reflect: true },
        noBorder: { type: Boolean, reflect: true, attribute: "no-border" },
        _iconslot: { type: Boolean, reflect: true },
        _notifyInputClick: { type: Boolean },
        _notifyInputFocus: { type: Boolean },
        _inputReadonly: { type: Boolean },
        _showOutline: { type: Boolean, reflect: true, attribute: "show-outline" },
        _iconWrapperWidth: { type: Number },
        _showTooltip: { type: Boolean, reflect: true, attribute: "show-tooltip" }
      };
    }
    static get styles() {
      return [sh_input_text_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      <div
        class="outer-wrapper"
        tabindex="${this.disabled || this.readonly || !this._showTooltip ? -1 : 0}"
      >
        <div class="input-wrapper">
          <div id="shinputDiv" class="content-wrapper">
            ${!this.textarea ? x`
                  <input
                    type="${this.type}"
                    @input="${(e8) => {
        this.value = e8.target.value;
        dispatchCustomEvent(this, "value-changed", null, false);
      }}"
                    ?readonly="${this.readonly || this._inputReadonly}"
                    .value="${!this.value ? "" : this.value}"
                    maxlength="${this.maxlength}"
                    id="input"
                    ?disabled="${this.disabled}"
                    ?autofocus="${this.autofocus}"
                    tabindex="${this.disabled || this.value === "" && (this._showTooltip || this.readonly) ? "-1" : "0"}"
                    @click="${() => {
        if (this._notifyInputClick) {
          dispatchCustomEvent(this, "input-clicked", null, false, false);
        }
      }}"
                    @focus="${() => {
        if (this._notifyInputFocus) {
          dispatchCustomEvent(this, "input-focused", null, false, false);
        }
      }}"
                    @mouseover=${() => {
        if (this._showTooltip) {
          dispatchCustomEvent(this, "input-hover", null, false, false);
        }
      }}
                  />
                ` : ""}
            ${this.textarea && this.condensed ? x`
                  <textarea
                    class="textarea"
                    .value="${!this.value ? "" : this.value}"
                    @input="${(e8) => {
        this.value = e8.target.value;
        dispatchCustomEvent(this, "value-changed", null, false);
      }}"
                    maxlength="${this.maxlength}"
                    rows="${this.rows}"
                    ?readonly="${this.readonly}"
                    ?disabled="${this.disabled}"
                    ?autofocus="${this.autofocus}"
                    tabindex="${this.disabled || this.value === "" && this.readonly ? "-1" : "0"}"
                  >
${this.value}</textarea
                  >
                ` : ""}

            <div class="input-text-label">
              ${this.label ? x`
                    <div
                      class="label-wrapper"
                      @mouseover="${() => {
        if (this._showTooltip) {
          dispatchCustomEvent(this, "label-hover", null, false, false);
        }
      }}"
                    >
                      ${this.label}
                    </div>
                  ` : ""}
              ${this.mandatory ? x` <span id="mandatory"> *</span> ` : ""}
            </div>
          </div>
          <div class="icon-wrapper">
            ${this.value && !this.noClear && !this.disabled && !this.readonly ? x`
                  <sh-icon
                    size="s"
                    button
                    icon="cancel"
                    id="clear"
                    @click="${(e8) => {
        this._clearField(e8);
        dispatchCustomEvent(this, "clear-clicked", null, false, true);
      }}"
                  ></sh-icon>
                ` : ""}
            ${this.success || this.error ? x`
                  <sh-icon
                    icon="${this.error ? "error" : "success"}"
                    size="s"
                    ?disabled="${this.disabled}"
                  ></sh-icon>
                ` : ""}
            <slot name="icon" id="icon" @slotchange="${() => this._iconSlotObserver()}"></slot>
          </div>
        </div>
        ${this.textarea && !this.condensed ? x` <textarea
              class="textarea"
              .value="${!this.value ? "" : this.value}"
              @input="${(e8) => {
        this.value = e8.target.value;
        dispatchCustomEvent(this, "value-changed", null, false);
      }}"
              maxlength="${this.maxlength}"
              rows="${this.rows}"
              ?readonly="${this.readonly}"
              ?disabled="${this.disabled}"
              ?autofocus="${this.autofocus}"
              tabindex="${this.disabled || this.value === "" && this.readonly ? "-1" : "0"}"
              @focus=${() => {
        if (!this.readonly) {
          this.setAttribute("textarea-focused", "");
        }
      }}
              @blur=${() => {
        this.removeAttribute("textarea-focused");
      }}
            >
${this.value}</textarea
            >` : ""}
      </div>
      ${this.hint && !this.errorMessage ? x`
            <sh-text size="body-2" class="helper-text hint" color="secondary">${this.hint}</sh-text>
          ` : ""}
      ${this.hint && this.errorMessage && !this.error ? x`
            <sh-text size="body-2" class="helper-text hint" color="secondary">${this.hint}</sh-text>
          ` : ""}
      ${this.error && this.errorMessage ? x`
            <sh-text size="body-2" class="helper-text error-message" color="secondary"
              >${this.errorMessage}</sh-text
            >
          ` : ""}
    `;
    }
    constructor() {
      super();
      this.label = "label";
      this.type = "text";
      this.value = "";
      this._iconWrapperWidth = 0;
    }
    connectedCallback() {
      super.connectedCallback();
      this.textareaLabelClick = this._handleTextareaLabelClick.bind(this);
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("no-hovermq");
      }
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "textbox");
      }
      if (this.textarea) {
        document.body.addEventListener("click", this.textareaLabelClick);
      }
      this._addTabindex();
    }
    disconnectedCallback() {
      document.body.removeEventListener("click", this.textareaLabelClick);
      super.disconnectedCallback();
    }
    firstUpdated() {
      super.firstUpdated();
    }
    updated(changedProperties) {
      if (changedProperties.has("value")) {
        this._handleValueChanged();
      }
      if (changedProperties.has("resizable") && this.textarea) {
        this._handleResizableChanged();
      }
      if (this.textarea && !this.rows) {
        this.rows = 3;
      }
      const listOfProperties = [
        "label",
        "textarea",
        "resizable",
        "type",
        "condensed",
        "error",
        "readonly",
        "disabled"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    focus() {
      if (this.textarea) {
        this.shadowRoot.querySelector("textarea").focus();
      } else {
        this.shadowRoot.querySelector("#input").focus();
      }
    }
    defocus() {
      this.shadowRoot.querySelector("#input").blur();
    }
    select() {
      if (this.textarea) {
        this.shadowRoot.querySelector("textarea").select();
      } else {
        this.shadowRoot.querySelector("#input").select();
      }
    }
    _addTabindex() {
      const iconLength = this.querySelectorAll("sh-icon").length;
      if (!this.disabled && iconLength > 0) {
        for (let i7 = 0; i7 < iconLength; i7++) {
          this.querySelectorAll("sh-icon")[i7].setAttribute("tabindex", "0");
        }
      }
    }
    _handleTextareaLabelClick(e8) {
      if (e8.target === this && this.textarea) {
        this.shadowRoot.querySelector("textarea").focus();
      }
    }
    _handleValueChanged() {
      if (this.value) {
        this.classList.remove("empty");
      } else {
        this.classList.add("empty");
      }
    }
    _handleResizableChanged() {
      if (this.textarea && this.resizable) {
        this.shadowRoot.querySelector("textarea").style.resize = "vertical";
      } else {
        this.shadowRoot.querySelector("textarea").style.resize = "none";
      }
    }
    _iconSlotObserver() {
      const iconNodeLength = this.shadowRoot.querySelector("#icon").assignedNodes({
        flatten: true
      }).length;
      if (iconNodeLength > 0) {
        this._iconslot = true;
      } else {
        this._iconslot = false;
      }
    }
    _clearField() {
      this.value = "";
      if (this.textarea) {
        this.shadowRoot.querySelector("textarea").focus();
      } else {
        this.shadowRoot.querySelector("#input").focus();
      }
      dispatchCustomEvent(this, "value-changed", null, false);
    }
  };
  customElements.define("sh-input-text", SHInputText);

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/@open-wc/dedupe-mixin/src/dedupeMixin.js
  var appliedClassMixins = new WeakMap();
  function wasMixinPreviouslyApplied(mixin, superClass) {
    let klass = superClass;
    while (klass) {
      if (appliedClassMixins.get(klass) === mixin) {
        return true;
      }
      klass = Object.getPrototypeOf(klass);
    }
    return false;
  }
  function dedupeMixin(mixin) {
    return (superClass) => {
      if (wasMixinPreviouslyApplied(mixin, superClass)) {
        return superClass;
      }
      const mixedClass = mixin(superClass);
      appliedClassMixins.set(mixedClass, mixin);
      return mixedClass;
    };
  }

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/@advanced-rest-client/arc-fit-mixin/src/ArcFitMixin.js
  var mxFunction = (base) => {
    class ArcFitMixinImpl extends base {
      static get properties() {
        return {
          sizingTarget: { type: Object },
          fitInto: { type: Object },
          noOverlap: { type: Boolean },
          _oldNoOverlap: { type: Boolean, attribute: "no-overlap" },
          positionTarget: { type: Object },
          horizontalAlign: { type: String },
          _oldHorizontalAlign: { type: String, attribute: "horizontal-align" },
          verticalAlign: { type: String },
          _oldVerticalAlign: { type: String, attribute: "vertical-align" },
          dynamicAlign: { type: Boolean },
          _oldDynamicAlign: { type: Boolean, attribute: "dynamic-align" },
          horizontalOffset: { type: Number, reflect: true },
          _oldHorizontalOffset: { type: Number, attribute: "horizontal-offset" },
          verticalOffset: { type: Number, reflect: true },
          _oldVerticalOffset: { type: Number, attribute: "vertical-offset" },
          autoFitOnAttach: { type: Boolean, reflect: true },
          _oldAutoFitOnAttach: { type: Boolean, attribute: "auto-fit-on-attach" },
          _fitInfo: { type: Object },
          fitPositionTarget: { type: Boolean }
        };
      }
      get _fitWidth() {
        let fitWidth;
        if (this.fitInto === window) {
          fitWidth = this.fitInto.innerWidth;
        } else {
          fitWidth = this.fitInto.getBoundingClientRect().width;
        }
        return fitWidth;
      }
      get _fitHeight() {
        let fitHeight;
        if (this.fitInto === window) {
          fitHeight = this.fitInto.innerHeight;
        } else {
          fitHeight = this.fitInto.getBoundingClientRect().height;
        }
        return fitHeight;
      }
      get _fitLeft() {
        let fitLeft;
        if (this.fitInto === window) {
          fitLeft = 0;
        } else {
          fitLeft = this.fitInto.getBoundingClientRect().left;
        }
        return fitLeft;
      }
      get _fitTop() {
        let fitTop;
        if (this.fitInto === window) {
          fitTop = 0;
        } else {
          fitTop = this.fitInto.getBoundingClientRect().top;
        }
        return fitTop;
      }
      get _defaultPositionTarget() {
        let parent = this.parentNode;
        if (parent && parent.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
          parent = parent.host;
        }
        return parent;
      }
      get _localeHorizontalAlign() {
        if (this._isRTL) {
          if (this.horizontalAlign === "right") {
            return "left";
          }
          if (this.horizontalAlign === "left") {
            return "right";
          }
        }
        return this.horizontalAlign;
      }
      get __shouldPosition() {
        return (this.horizontalAlign || this.verticalAlign) && this.positionTarget;
      }
      get "sizing-target"() {
        return this.sizingTarget;
      }
      set "sizing-target"(value) {
        this.sizingTarget = value;
      }
      get "fit-into"() {
        return this.fitInto;
      }
      set "fit-into"(value) {
        this.fitInto = value;
      }
      get _oldNoOverlap() {
        return this.noOverlap;
      }
      set _oldNoOverlap(value) {
        this.noOverlap = value;
      }
      get "position-target"() {
        return this.positionTarget;
      }
      set "position-target"(value) {
        this.positionTarget = value;
      }
      get "horizontal-align"() {
        return this.horizontalAlign;
      }
      set "horizontal-align"(value) {
        this.horizontalAlign = value;
      }
      get _oldHorizontalAlign() {
        return this.horizontalAlign;
      }
      set _oldHorizontalAlign(value) {
        this.horizontalAlign = value;
      }
      get "vertical-align"() {
        return this.verticalAlign;
      }
      set "vertical-align"(value) {
        this.verticalAlign = value;
      }
      get _oldVerticalAlign() {
        return this.verticalAlign;
      }
      set _oldVerticalAlign(value) {
        this.verticalAlign = value;
      }
      get _oldDynamicAlign() {
        return this.dynamicAlign;
      }
      set _oldDynamicAlign(value) {
        this.dynamicAlign = value;
      }
      get _oldHorizontalOffset() {
        return this.horizontalOffset;
      }
      set _oldHorizontalOffset(value) {
        this.horizontalOffset = value;
      }
      get "horizontal-offset"() {
        return this.horizontalOffset;
      }
      set "horizontal-offset"(value) {
        this.horizontalOffset = value;
      }
      get _oldVerticalOffset() {
        return this.verticalOffset;
      }
      set _oldVerticalOffset(value) {
        this.verticalOffset = value;
      }
      get "vertical-offset"() {
        return this.verticalOffset;
      }
      set "vertical-offset"(value) {
        this.verticalOffset = value;
      }
      get _oldAutoFitOnAttach() {
        return this.autoFitOnAttach;
      }
      set _oldAutoFitOnAttach(value) {
        this.autoFitOnAttach = value;
      }
      connectedCallback() {
        if (super.connectedCallback) {
          super.connectedCallback();
        }
        if (typeof this._isRTL === "undefined") {
          this._isRTL = window.getComputedStyle(this).direction === "rtl";
        }
        this.positionTarget = this.positionTarget || this._defaultPositionTarget;
        if (this.autoFitOnAttach) {
          setTimeout(() => this.fit());
        }
      }
      disconnectedCallback() {
        if (super.disconnectedCallback) {
          super.disconnectedCallback();
        }
        if (this.__deferredFit) {
          clearTimeout(this.__deferredFit);
          this.__deferredFit = null;
        }
      }
      constructor() {
        super();
        this.sizingTarget = this;
        this.fitInto = window;
        this.horizontalOffset = 0;
        this.verticalOffset = 0;
        this.autoFitOnAttach = false;
        this.fitPositionTarget = false;
      }
      fit() {
        this.position();
        this.constrain();
        this.center();
      }
      _discoverInfo() {
        if (this._fitInfo) {
          return;
        }
        const target = window.getComputedStyle(this);
        const sizer = window.getComputedStyle(this.sizingTarget);
        let vertically;
        if (target.top !== "auto") {
          vertically = "top";
        } else if (target.bottom !== "auto") {
          vertically = "bottom";
        } else {
          vertically = null;
        }
        let horizontally;
        if (target.left !== "auto") {
          horizontally = "left";
        } else if (target.right !== "auto") {
          horizontally = "right";
        } else {
          horizontally = null;
        }
        this._fitInfo = {
          inlineStyle: {
            top: this.style.top || "",
            left: this.style.left || "",
            position: this.style.position || ""
          },
          sizerInlineStyle: {
            maxWidth: this.sizingTarget.style.maxWidth || "",
            maxHeight: this.sizingTarget.style.maxHeight || "",
            boxSizing: this.sizingTarget.style.boxSizing || ""
          },
          positionedBy: {
            vertically,
            horizontally
          },
          sizedBy: {
            height: sizer.maxHeight !== "none",
            width: sizer.maxWidth !== "none",
            minWidth: parseInt(sizer.minWidth, 10) || 0,
            minHeight: parseInt(sizer.minHeight, 10) || 0
          },
          margin: {
            top: parseInt(target.marginTop, 10) || 0,
            right: parseInt(target.marginRight, 10) || 0,
            bottom: parseInt(target.marginBottom, 10) || 0,
            left: parseInt(target.marginLeft, 10) || 0
          }
        };
      }
      resetFit() {
        const { _fitInfo } = this;
        if (_fitInfo && _fitInfo.sizerInlineStyle) {
          Object.keys(_fitInfo.sizerInlineStyle).forEach((property) => {
            this.sizingTarget.style[property] = _fitInfo.sizerInlineStyle[property];
          });
        }
        if (_fitInfo && _fitInfo.inlineStyle) {
          Object.keys(_fitInfo.inlineStyle).forEach((property) => {
            this.style[property] = _fitInfo.inlineStyle[property];
          });
        }
        this._fitInfo = null;
      }
      refit() {
        const { scrollLeft } = this.sizingTarget;
        const { scrollTop } = this.sizingTarget;
        this.resetFit();
        this.fit();
        this.sizingTarget.scrollLeft = scrollLeft;
        this.sizingTarget.scrollTop = scrollTop;
      }
      position() {
        if (!this.__shouldPosition) {
          return;
        }
        this._discoverInfo();
        this.style.position = "fixed";
        this.sizingTarget.style.boxSizing = "border-box";
        this.style.left = "0px";
        this.style.top = "0px";
        const rect = this.getBoundingClientRect();
        const positionRect = this.__getNormalizedRect(this.positionTarget);
        const fitRect = this.__getNormalizedRect(this.fitInto);
        const { margin } = this._fitInfo;
        const size = {
          width: rect.width + margin.left + margin.right,
          height: rect.height + margin.top + margin.bottom
        };
        const position = this.__getPosition(this._localeHorizontalAlign, this.verticalAlign, size, rect, positionRect, fitRect);
        let left = position.left + margin.left;
        let top = position.top + margin.top;
        const right = Math.min(fitRect.right - margin.right, left + rect.width);
        const bottom = Math.min(fitRect.bottom - margin.bottom, top + rect.height);
        left = Math.max(fitRect.left + margin.left, Math.min(left, right - this._fitInfo.sizedBy.minWidth));
        top = Math.max(fitRect.top + margin.top, Math.min(top, bottom - this._fitInfo.sizedBy.minHeight));
        if (this.fitPositionTarget) {
          this.sizingTarget.style.maxWidth = `${Math.max(right - left, this._fitInfo.sizedBy.minWidth, positionRect.width)}px`;
          this.style.width = this.sizingTarget.style.maxWidth;
        } else {
          this.sizingTarget.style.maxWidth = `${Math.max(right - left, this._fitInfo.sizedBy.minWidth)}px`;
        }
        this.sizingTarget.style.maxHeight = `${Math.max(bottom - top, this._fitInfo.sizedBy.minHeight)}px`;
        this.style.left = `${left - rect.left}px`;
        this.style.top = `${top - rect.top}px`;
      }
      constrain() {
        if (this.__shouldPosition) {
          return;
        }
        this._discoverInfo();
        const info = this._fitInfo;
        if (!info.positionedBy.vertically) {
          this.style.position = "fixed";
          this.style.top = "0px";
        }
        if (!info.positionedBy.horizontally) {
          this.style.position = "fixed";
          this.style.left = "0px";
        }
        this.sizingTarget.style.boxSizing = "border-box";
        const rect = this.getBoundingClientRect();
        if (!info.sizedBy.height) {
          this.__sizeDimension(rect, info.positionedBy.vertically, "top", "bottom", "Height");
        }
        if (!info.sizedBy.width) {
          this.__sizeDimension(rect, info.positionedBy.horizontally, "left", "right", "Width");
        }
      }
      __sizeDimension(rect, positionedBy, start, end, extent) {
        const info = this._fitInfo;
        const fitRect = this.__getNormalizedRect(this.fitInto);
        const max = extent === "Width" ? fitRect.width : fitRect.height;
        const flip = positionedBy === end;
        const offset = flip ? max - rect[end] : rect[start];
        const margin = info.margin[flip ? start : end];
        const offsetExtent = `offset${extent}`;
        const sizingOffset = this[offsetExtent] - this.sizingTarget[offsetExtent];
        this.sizingTarget.style[`max${extent}`] = `${max - margin - offset - sizingOffset}px`;
      }
      center() {
        if (this.__shouldPosition) {
          return;
        }
        this._discoverInfo();
        const { positionedBy } = this._fitInfo;
        if (positionedBy.vertically && positionedBy.horizontally) {
          return;
        }
        this.style.position = "fixed";
        if (!positionedBy.vertically) {
          this.style.top = "0px";
        }
        if (!positionedBy.horizontally) {
          this.style.left = "0px";
        }
        const rect = this.getBoundingClientRect();
        const fitRect = this.__getNormalizedRect(this.fitInto);
        if (!positionedBy.vertically) {
          const top = fitRect.top - rect.top + (fitRect.height - rect.height) / 2;
          this.style.top = `${top}px`;
        }
        if (!positionedBy.horizontally) {
          const left = fitRect.left - rect.left + (fitRect.width - rect.width) / 2;
          this.style.left = `${left}px`;
        }
      }
      __getNormalizedRect(target) {
        if (target === document.documentElement || target === window) {
          return {
            top: 0,
            left: 0,
            width: window.innerWidth,
            height: window.innerHeight,
            right: window.innerWidth,
            bottom: window.innerHeight
          };
        }
        return target.getBoundingClientRect();
      }
      __getOffscreenArea(position, size, fitRect) {
        const verticalCrop = Math.min(0, position.top) + Math.min(0, fitRect.bottom - (position.top + size.height));
        const horizontalCrop = Math.min(0, position.left) + Math.min(0, fitRect.right - (position.left + size.width));
        return Math.abs(verticalCrop) * size.width + Math.abs(horizontalCrop) * size.height;
      }
      __getPosition(hAlign, vAlign, size, sizeNoMargins, positionRect, fitRect) {
        const positions = [
          {
            verticalAlign: "top",
            horizontalAlign: "left",
            top: positionRect.top + this.verticalOffset,
            left: positionRect.left + this.horizontalOffset
          },
          {
            verticalAlign: "top",
            horizontalAlign: "right",
            top: positionRect.top + this.verticalOffset,
            left: positionRect.right - size.width - this.horizontalOffset
          },
          {
            verticalAlign: "bottom",
            horizontalAlign: "left",
            top: positionRect.bottom - size.height - this.verticalOffset,
            left: positionRect.left + this.horizontalOffset
          },
          {
            verticalAlign: "bottom",
            horizontalAlign: "right",
            top: positionRect.bottom - size.height - this.verticalOffset,
            left: positionRect.right - size.width - this.horizontalOffset
          }
        ];
        if (this.noOverlap) {
          for (let i7 = 0, l5 = positions.length; i7 < l5; i7++) {
            const copy = {};
            const keys = Object.keys(positions[i7]);
            for (let j = 0, lk = keys.length; j < lk; j++) {
              const key = keys[j];
              copy[key] = positions[i7][key];
            }
            positions.push(copy);
          }
          positions[0].top = positions[1].top += positionRect.height;
          positions[2].top = positions[3].top -= positionRect.height;
          positions[4].left = positions[6].left += positionRect.width;
          positions[5].left = positions[7].left -= positionRect.width;
        }
        vAlign = vAlign === "auto" ? null : vAlign;
        hAlign = hAlign === "auto" ? null : hAlign;
        if (!hAlign || hAlign === "center") {
          positions.push({
            verticalAlign: "top",
            horizontalAlign: "center",
            top: positionRect.top + this.verticalOffset + (this.noOverlap ? positionRect.height : 0),
            left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset
          });
          positions.push({
            verticalAlign: "bottom",
            horizontalAlign: "center",
            top: positionRect.bottom - size.height - this.verticalOffset - (this.noOverlap ? positionRect.height : 0),
            left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset
          });
        }
        if (!vAlign || vAlign === "middle") {
          positions.push({
            verticalAlign: "middle",
            horizontalAlign: "left",
            top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset,
            left: positionRect.left + this.horizontalOffset + (this.noOverlap ? positionRect.width : 0)
          });
          positions.push({
            verticalAlign: "middle",
            horizontalAlign: "right",
            top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset,
            left: positionRect.right - size.width - this.horizontalOffset - (this.noOverlap ? positionRect.width : 0)
          });
        }
        if (vAlign === "middle" && hAlign === "center") {
          positions.push({
            verticalAlign: "middle",
            horizontalAlign: "center",
            top: positionRect.top - sizeNoMargins.height / 2 + positionRect.height / 2 + this.verticalOffset,
            left: positionRect.left - sizeNoMargins.width / 2 + positionRect.width / 2 + this.horizontalOffset
          });
        }
        let position;
        for (let i7 = 0; i7 < positions.length; i7++) {
          const candidate = positions[i7];
          const vAlignOk = candidate.verticalAlign === vAlign;
          const hAlignOk = candidate.horizontalAlign === hAlign;
          if (!this.dynamicAlign && !this.noOverlap && vAlignOk && hAlignOk) {
            position = candidate;
            break;
          }
          const alignOk = (!vAlign || vAlignOk) && (!hAlign || hAlignOk);
          if (!this.dynamicAlign && !alignOk) {
            continue;
          }
          candidate.offscreenArea = this.__getOffscreenArea(candidate, size, fitRect);
          if (candidate.offscreenArea === 0 && alignOk) {
            position = candidate;
            break;
          }
          position = position || candidate;
          const diff = candidate.offscreenArea - position.offscreenArea;
          if (diff < 0 || diff === 0 && (vAlignOk || hAlignOk)) {
            position = candidate;
          }
        }
        return position;
      }
    }
    return ArcFitMixinImpl;
  };
  var ArcFitMixin = dedupeMixin(mxFunction);

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/@advanced-rest-client/arc-resizable-mixin/src/ArcResizableMixin.js
  var ORPHANS = new Set();
  var resizeNotificationEventType = "requestresizenotifications";
  var resizeEventType = "resize";
  var legacyResizeEventType = "iron-resize";
  var mxFunction2 = (base) => {
    class ArcResizableMixinImpl extends base {
      get _parentResizable() {
        return this.__parentResizable;
      }
      set _parentResizable(value) {
        const old = this.__parentResizable;
        this.__parentResizable = value;
        if (old !== value) {
          this._parentResizableChanged(value);
        }
      }
      get _notifyingDescendant() {
        return this.__notifyingDescendant;
      }
      set _notifyingDescendant(value) {
        this.__notifyingDescendant = value;
      }
      constructor() {
        super();
        this._interestedResizables = [];
        this._notifyingDescendant = false;
        this._onIronRequestResizeNotifications = this._onIronRequestResizeNotifications.bind(this);
        this.notifyResize = this.notifyResize.bind(this);
        this._onDescendantIronResize = this._onDescendantIronResize.bind(this);
        this.addEventListener(resizeNotificationEventType, this._onIronRequestResizeNotifications, true);
      }
      connectedCallback() {
        if (super.connectedCallback) {
          super.connectedCallback();
        }
        this.isAttached = true;
        setTimeout(() => {
          this._requestResizeNotifications();
        });
      }
      disconnectedCallback() {
        if (super.disconnectedCallback) {
          super.disconnectedCallback();
        }
        this.isAttached = false;
        if (this._parentResizable) {
          this._parentResizable.stopResizeNotificationsFor(this);
        } else {
          ORPHANS.delete(this);
          window.removeEventListener("resize", this.notifyResize);
        }
        this._parentResizable = null;
      }
      notifyResize() {
        if (!this.isAttached) {
          return;
        }
        this._interestedResizables.forEach((resizable) => {
          if (this.resizerShouldNotify(resizable)) {
            this._notifyDescendant(resizable);
          }
        });
        this._fireResize();
      }
      assignParentResizable(parentResizable) {
        if (this._parentResizable) {
          this._parentResizable.stopResizeNotificationsFor(this);
        }
        this._parentResizable = parentResizable;
        if (parentResizable && parentResizable._interestedResizables.indexOf(this) === -1) {
          parentResizable._interestedResizables.push(this);
          parentResizable._subscribeIronResize(this);
        }
      }
      stopResizeNotificationsFor(target) {
        const index = this._interestedResizables.indexOf(target);
        if (index > -1) {
          this._interestedResizables.splice(index, 1);
          this._unsubscribeIronResize(target);
        }
      }
      _subscribeIronResize(target) {
        target.addEventListener(legacyResizeEventType, this._onDescendantIronResize);
        target.addEventListener(resizeEventType, this._onDescendantIronResize);
      }
      _unsubscribeIronResize(target) {
        target.removeEventListener(legacyResizeEventType, this._onDescendantIronResize);
        target.removeEventListener(resizeEventType, this._onDescendantIronResize);
      }
      resizerShouldNotify(element) {
        return true;
      }
      _onDescendantIronResize(e8) {
        if (this._notifyingDescendant) {
          e8.stopPropagation();
          return;
        }
        this._fireResize();
      }
      _fireResize() {
        this.dispatchEvent(new CustomEvent(resizeEventType));
      }
      _onIronRequestResizeNotifications(e8) {
        const cp = e8.composedPath && e8.composedPath();
        let path;
        if (cp) {
          path = cp;
        } else {
          path = e8.path || [];
        }
        const target = path[0];
        if (target === this) {
          return;
        }
        if (target.assignParentResizable) {
          target.assignParentResizable(this);
        }
        this._notifyDescendant(target);
        e8.stopPropagation();
      }
      _parentResizableChanged(parentResizable) {
        if (parentResizable) {
          window.removeEventListener("resize", this.notifyResize);
        }
      }
      _notifyDescendant(descendant) {
        if (!this.isAttached) {
          return;
        }
        this._notifyingDescendant = true;
        descendant.notifyResize();
        this._notifyingDescendant = false;
      }
      _requestResizeNotifications() {
        if (!this.isAttached) {
          return;
        }
        if (document.readyState === "loading") {
          const _requestResizeNotifications = this._requestResizeNotifications.bind(this);
          document.addEventListener("readystatechange", function readystatechanged() {
            document.removeEventListener("readystatechange", readystatechanged);
            _requestResizeNotifications();
          });
        } else {
          this._findParent();
          if (!this._parentResizable) {
            ORPHANS.forEach((orphan) => {
              if (orphan !== this) {
                orphan._findParent();
              }
            });
            window.addEventListener("resize", this.notifyResize);
            this.notifyResize();
          } else {
            this._parentResizable._interestedResizables.forEach((resizable) => {
              if (resizable !== this) {
                resizable._findParent();
              }
            });
          }
        }
      }
      _findParent() {
        this.assignParentResizable(null);
        this.dispatchEvent(new CustomEvent(resizeNotificationEventType, {
          bubbles: true,
          cancelable: true,
          composed: true
        }));
        if (!this._parentResizable) {
          ORPHANS.add(this);
        } else {
          ORPHANS.delete(this);
        }
      }
    }
    return ArcResizableMixinImpl;
  };
  var ArcResizableMixin = dedupeMixin(mxFunction2);

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/src/ArcFocusableHelper.js
  var p2 = Element.prototype;
  var matches = p2.matches || p2.matchesSelector || p2.mozMatchesSelector || p2.msMatchesSelector || p2.oMatchesSelector || p2.webkitMatchesSelector;
  var ArcFocusableHelper = class {
    getTabbableNodes(node) {
      const result = [];
      const needsSortByTabIndex = this._collectTabbableNodes(node, result);
      if (needsSortByTabIndex) {
        return this._sortByTabIndex(result);
      }
      return result;
    }
    isFocusable(element) {
      if (matches.call(element, "input, select, textarea, button, object")) {
        return matches.call(element, ":not([disabled])");
      }
      return matches.call(element, "a[href], area[href], iframe, [tabindex], [contentEditable]");
    }
    isTabbable(element) {
      return this.isFocusable(element) && matches.call(element, ':not([tabindex="-1"])') && this._isVisible(element);
    }
    _normalizedTabIndex(element) {
      if (this.isFocusable(element)) {
        const tabIndex = element.getAttribute("tabindex") || 0;
        return Number(tabIndex);
      }
      return -1;
    }
    _collectTabbableNodes(node, result) {
      if (node.nodeType !== Node.ELEMENT_NODE) {
        return false;
      }
      const element = node;
      if (result.indexOf(element) !== -1) {
        return false;
      }
      if (!this._isVisible(element)) {
        return false;
      }
      const tabIndex = this._normalizedTabIndex(element);
      let needsSort = tabIndex > 0;
      if (tabIndex >= 0) {
        result.push(element);
      }
      let children;
      if (element.localName === "slot") {
        children = element.assignedNodes().filter((n8) => n8.nodeType === Node.ELEMENT_NODE);
      } else if (element.shadowRoot && element.shadowRoot.querySelectorAll) {
        children = element.shadowRoot.querySelectorAll("*");
      } else {
        children = element.children;
      }
      for (let i7 = 0; i7 < children.length; i7++) {
        needsSort = this._collectTabbableNodes(children[i7], result) || needsSort;
      }
      return needsSort;
    }
    _isVisible(element) {
      let { style } = element;
      if (style.visibility !== "hidden" && style.display !== "none") {
        style = window.getComputedStyle(element);
        return style.visibility !== "hidden" && style.display !== "none";
      }
      return false;
    }
    _sortByTabIndex(tabbables) {
      const len = tabbables.length;
      if (len < 2) {
        return tabbables;
      }
      const pivot = Math.ceil(len / 2);
      const left = this._sortByTabIndex(tabbables.slice(0, pivot));
      const right = this._sortByTabIndex(tabbables.slice(pivot));
      return this._mergeSortByTabIndex(left, right);
    }
    _mergeSortByTabIndex(left, right) {
      const result = [];
      while (left.length > 0 && right.length > 0) {
        if (this._hasLowerTabOrder(left[0], right[0])) {
          result.push(right.shift());
        } else {
          result.push(left.shift());
        }
      }
      return result.concat(left, right);
    }
    _hasLowerTabOrder(a3, b2) {
      const ati = Math.max(a3.tabIndex, 0);
      const bti = Math.max(b2.tabIndex, 0);
      return ati === 0 || bti === 0 ? bti > ati : ati > bti;
    }
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/arc-focusable-helper.js
  var ArcFocusableHelper2 = new ArcFocusableHelper();

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/dom.js
  var isCEPolyfill = typeof window !== "undefined" && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== void 0;
  var removeNodes = (container, start, end = null) => {
    while (start !== end) {
      const n8 = start.nextSibling;
      container.removeChild(start);
      start = n8;
    }
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/template.js
  var marker = `{{lit-${String(Math.random()).slice(2)}}}`;
  var nodeMarker = `<!--${marker}-->`;
  var markerRegex = new RegExp(`${marker}|${nodeMarker}`);
  var boundAttributeSuffix = "$lit$";
  var Template = class {
    constructor(result, element) {
      this.parts = [];
      this.element = element;
      const nodesToRemove = [];
      const stack = [];
      const walker = document.createTreeWalker(element.content, 133, null, false);
      let lastPartIndex = 0;
      let index = -1;
      let partIndex = 0;
      const { strings, values: { length } } = result;
      while (partIndex < length) {
        const node = walker.nextNode();
        if (node === null) {
          walker.currentNode = stack.pop();
          continue;
        }
        index++;
        if (node.nodeType === 1) {
          if (node.hasAttributes()) {
            const attributes = node.attributes;
            const { length: length2 } = attributes;
            let count = 0;
            for (let i7 = 0; i7 < length2; i7++) {
              if (endsWith(attributes[i7].name, boundAttributeSuffix)) {
                count++;
              }
            }
            while (count-- > 0) {
              const stringForPart = strings[partIndex];
              const name = lastAttributeNameRegex.exec(stringForPart)[2];
              const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
              const attributeValue = node.getAttribute(attributeLookupName);
              node.removeAttribute(attributeLookupName);
              const statics = attributeValue.split(markerRegex);
              this.parts.push({ type: "attribute", index, name, strings: statics });
              partIndex += statics.length - 1;
            }
          }
          if (node.tagName === "TEMPLATE") {
            stack.push(node);
            walker.currentNode = node.content;
          }
        } else if (node.nodeType === 3) {
          const data = node.data;
          if (data.indexOf(marker) >= 0) {
            const parent = node.parentNode;
            const strings2 = data.split(markerRegex);
            const lastIndex = strings2.length - 1;
            for (let i7 = 0; i7 < lastIndex; i7++) {
              let insert;
              let s5 = strings2[i7];
              if (s5 === "") {
                insert = createMarker();
              } else {
                const match = lastAttributeNameRegex.exec(s5);
                if (match !== null && endsWith(match[2], boundAttributeSuffix)) {
                  s5 = s5.slice(0, match.index) + match[1] + match[2].slice(0, -boundAttributeSuffix.length) + match[3];
                }
                insert = document.createTextNode(s5);
              }
              parent.insertBefore(insert, node);
              this.parts.push({ type: "node", index: ++index });
            }
            if (strings2[lastIndex] === "") {
              parent.insertBefore(createMarker(), node);
              nodesToRemove.push(node);
            } else {
              node.data = strings2[lastIndex];
            }
            partIndex += lastIndex;
          }
        } else if (node.nodeType === 8) {
          if (node.data === marker) {
            const parent = node.parentNode;
            if (node.previousSibling === null || index === lastPartIndex) {
              index++;
              parent.insertBefore(createMarker(), node);
            }
            lastPartIndex = index;
            this.parts.push({ type: "node", index });
            if (node.nextSibling === null) {
              node.data = "";
            } else {
              nodesToRemove.push(node);
              index--;
            }
            partIndex++;
          } else {
            let i7 = -1;
            while ((i7 = node.data.indexOf(marker, i7 + 1)) !== -1) {
              this.parts.push({ type: "node", index: -1 });
              partIndex++;
            }
          }
        }
      }
      for (const n8 of nodesToRemove) {
        n8.parentNode.removeChild(n8);
      }
    }
  };
  var endsWith = (str, suffix) => {
    const index = str.length - suffix.length;
    return index >= 0 && str.slice(index) === suffix;
  };
  var isTemplatePartActive = (part) => part.index !== -1;
  var createMarker = () => document.createComment("");
  var lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F "'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/modify-template.js
  var walkerNodeFilter = 133;
  function removeNodesFromTemplate(template2, nodesToRemove) {
    const { element: { content }, parts: parts2 } = template2;
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts2);
    let part = parts2[partIndex];
    let nodeIndex = -1;
    let removeCount = 0;
    const nodesToRemoveInTemplate = [];
    let currentRemovingNode = null;
    while (walker.nextNode()) {
      nodeIndex++;
      const node = walker.currentNode;
      if (node.previousSibling === currentRemovingNode) {
        currentRemovingNode = null;
      }
      if (nodesToRemove.has(node)) {
        nodesToRemoveInTemplate.push(node);
        if (currentRemovingNode === null) {
          currentRemovingNode = node;
        }
      }
      if (currentRemovingNode !== null) {
        removeCount++;
      }
      while (part !== void 0 && part.index === nodeIndex) {
        part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;
        partIndex = nextActiveIndexInTemplateParts(parts2, partIndex);
        part = parts2[partIndex];
      }
    }
    nodesToRemoveInTemplate.forEach((n8) => n8.parentNode.removeChild(n8));
  }
  var countNodes = (node) => {
    let count = node.nodeType === 11 ? 0 : 1;
    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);
    while (walker.nextNode()) {
      count++;
    }
    return count;
  };
  var nextActiveIndexInTemplateParts = (parts2, startIndex = -1) => {
    for (let i7 = startIndex + 1; i7 < parts2.length; i7++) {
      const part = parts2[i7];
      if (isTemplatePartActive(part)) {
        return i7;
      }
    }
    return -1;
  };
  function insertNodeIntoTemplate(template2, node, refNode = null) {
    const { element: { content }, parts: parts2 } = template2;
    if (refNode === null || refNode === void 0) {
      content.appendChild(node);
      return;
    }
    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
    let partIndex = nextActiveIndexInTemplateParts(parts2);
    let insertCount = 0;
    let walkerIndex = -1;
    while (walker.nextNode()) {
      walkerIndex++;
      const walkerNode = walker.currentNode;
      if (walkerNode === refNode) {
        insertCount = countNodes(node);
        refNode.parentNode.insertBefore(node, refNode);
      }
      while (partIndex !== -1 && parts2[partIndex].index === walkerIndex) {
        if (insertCount > 0) {
          while (partIndex !== -1) {
            parts2[partIndex].index += insertCount;
            partIndex = nextActiveIndexInTemplateParts(parts2, partIndex);
          }
          return;
        }
        partIndex = nextActiveIndexInTemplateParts(parts2, partIndex);
      }
    }
  }

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/directive.js
  var directives = new WeakMap();
  var isDirective = (o8) => {
    return typeof o8 === "function" && directives.has(o8);
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/part.js
  var noChange = {};
  var nothing = {};

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/template-instance.js
  var TemplateInstance = class {
    constructor(template2, processor, options) {
      this.__parts = [];
      this.template = template2;
      this.processor = processor;
      this.options = options;
    }
    update(values) {
      let i7 = 0;
      for (const part of this.__parts) {
        if (part !== void 0) {
          part.setValue(values[i7]);
        }
        i7++;
      }
      for (const part of this.__parts) {
        if (part !== void 0) {
          part.commit();
        }
      }
    }
    _clone() {
      const fragment = isCEPolyfill ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);
      const stack = [];
      const parts2 = this.template.parts;
      const walker = document.createTreeWalker(fragment, 133, null, false);
      let partIndex = 0;
      let nodeIndex = 0;
      let part;
      let node = walker.nextNode();
      while (partIndex < parts2.length) {
        part = parts2[partIndex];
        if (!isTemplatePartActive(part)) {
          this.__parts.push(void 0);
          partIndex++;
          continue;
        }
        while (nodeIndex < part.index) {
          nodeIndex++;
          if (node.nodeName === "TEMPLATE") {
            stack.push(node);
            walker.currentNode = node.content;
          }
          if ((node = walker.nextNode()) === null) {
            walker.currentNode = stack.pop();
            node = walker.nextNode();
          }
        }
        if (part.type === "node") {
          const part2 = this.processor.handleTextExpression(this.options);
          part2.insertAfterNode(node.previousSibling);
          this.__parts.push(part2);
        } else {
          this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
        }
        partIndex++;
      }
      if (isCEPolyfill) {
        document.adoptNode(fragment);
        customElements.upgrade(fragment);
      }
      return fragment;
    }
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/template-result.js
  var policy = window.trustedTypes && trustedTypes.createPolicy("lit-html", { createHTML: (s5) => s5 });
  var commentMarker = ` ${marker} `;
  var TemplateResult = class {
    constructor(strings, values, type, processor) {
      this.strings = strings;
      this.values = values;
      this.type = type;
      this.processor = processor;
    }
    getHTML() {
      const l5 = this.strings.length - 1;
      let html2 = "";
      let isCommentBinding = false;
      for (let i7 = 0; i7 < l5; i7++) {
        const s5 = this.strings[i7];
        const commentOpen = s5.lastIndexOf("<!--");
        isCommentBinding = (commentOpen > -1 || isCommentBinding) && s5.indexOf("-->", commentOpen + 1) === -1;
        const attributeMatch = lastAttributeNameRegex.exec(s5);
        if (attributeMatch === null) {
          html2 += s5 + (isCommentBinding ? commentMarker : nodeMarker);
        } else {
          html2 += s5.substr(0, attributeMatch.index) + attributeMatch[1] + attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] + marker;
        }
      }
      html2 += this.strings[l5];
      return html2;
    }
    getTemplateElement() {
      const template2 = document.createElement("template");
      let value = this.getHTML();
      if (policy !== void 0) {
        value = policy.createHTML(value);
      }
      template2.innerHTML = value;
      return template2;
    }
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/parts.js
  var isPrimitive = (value) => {
    return value === null || !(typeof value === "object" || typeof value === "function");
  };
  var isIterable = (value) => {
    return Array.isArray(value) || !!(value && value[Symbol.iterator]);
  };
  var AttributeCommitter = class {
    constructor(element, name, strings) {
      this.dirty = true;
      this.element = element;
      this.name = name;
      this.strings = strings;
      this.parts = [];
      for (let i7 = 0; i7 < strings.length - 1; i7++) {
        this.parts[i7] = this._createPart();
      }
    }
    _createPart() {
      return new AttributePart(this);
    }
    _getValue() {
      const strings = this.strings;
      const l5 = strings.length - 1;
      const parts2 = this.parts;
      if (l5 === 1 && strings[0] === "" && strings[1] === "") {
        const v2 = parts2[0].value;
        if (typeof v2 === "symbol") {
          return String(v2);
        }
        if (typeof v2 === "string" || !isIterable(v2)) {
          return v2;
        }
      }
      let text = "";
      for (let i7 = 0; i7 < l5; i7++) {
        text += strings[i7];
        const part = parts2[i7];
        if (part !== void 0) {
          const v2 = part.value;
          if (isPrimitive(v2) || !isIterable(v2)) {
            text += typeof v2 === "string" ? v2 : String(v2);
          } else {
            for (const t5 of v2) {
              text += typeof t5 === "string" ? t5 : String(t5);
            }
          }
        }
      }
      text += strings[l5];
      return text;
    }
    commit() {
      if (this.dirty) {
        this.dirty = false;
        this.element.setAttribute(this.name, this._getValue());
      }
    }
  };
  var AttributePart = class {
    constructor(committer) {
      this.value = void 0;
      this.committer = committer;
    }
    setValue(value) {
      if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {
        this.value = value;
        if (!isDirective(value)) {
          this.committer.dirty = true;
        }
      }
    }
    commit() {
      while (isDirective(this.value)) {
        const directive2 = this.value;
        this.value = noChange;
        directive2(this);
      }
      if (this.value === noChange) {
        return;
      }
      this.committer.commit();
    }
  };
  var NodePart = class {
    constructor(options) {
      this.value = void 0;
      this.__pendingValue = void 0;
      this.options = options;
    }
    appendInto(container) {
      this.startNode = container.appendChild(createMarker());
      this.endNode = container.appendChild(createMarker());
    }
    insertAfterNode(ref) {
      this.startNode = ref;
      this.endNode = ref.nextSibling;
    }
    appendIntoPart(part) {
      part.__insert(this.startNode = createMarker());
      part.__insert(this.endNode = createMarker());
    }
    insertAfterPart(ref) {
      ref.__insert(this.startNode = createMarker());
      this.endNode = ref.endNode;
      ref.endNode = this.startNode;
    }
    setValue(value) {
      this.__pendingValue = value;
    }
    commit() {
      if (this.startNode.parentNode === null) {
        return;
      }
      while (isDirective(this.__pendingValue)) {
        const directive2 = this.__pendingValue;
        this.__pendingValue = noChange;
        directive2(this);
      }
      const value = this.__pendingValue;
      if (value === noChange) {
        return;
      }
      if (isPrimitive(value)) {
        if (value !== this.value) {
          this.__commitText(value);
        }
      } else if (value instanceof TemplateResult) {
        this.__commitTemplateResult(value);
      } else if (value instanceof Node) {
        this.__commitNode(value);
      } else if (isIterable(value)) {
        this.__commitIterable(value);
      } else if (value === nothing) {
        this.value = nothing;
        this.clear();
      } else {
        this.__commitText(value);
      }
    }
    __insert(node) {
      this.endNode.parentNode.insertBefore(node, this.endNode);
    }
    __commitNode(value) {
      if (this.value === value) {
        return;
      }
      this.clear();
      this.__insert(value);
      this.value = value;
    }
    __commitText(value) {
      const node = this.startNode.nextSibling;
      value = value == null ? "" : value;
      const valueAsString = typeof value === "string" ? value : String(value);
      if (node === this.endNode.previousSibling && node.nodeType === 3) {
        node.data = valueAsString;
      } else {
        this.__commitNode(document.createTextNode(valueAsString));
      }
      this.value = value;
    }
    __commitTemplateResult(value) {
      const template2 = this.options.templateFactory(value);
      if (this.value instanceof TemplateInstance && this.value.template === template2) {
        this.value.update(value.values);
      } else {
        const instance = new TemplateInstance(template2, value.processor, this.options);
        const fragment = instance._clone();
        instance.update(value.values);
        this.__commitNode(fragment);
        this.value = instance;
      }
    }
    __commitIterable(value) {
      if (!Array.isArray(this.value)) {
        this.value = [];
        this.clear();
      }
      const itemParts = this.value;
      let partIndex = 0;
      let itemPart;
      for (const item of value) {
        itemPart = itemParts[partIndex];
        if (itemPart === void 0) {
          itemPart = new NodePart(this.options);
          itemParts.push(itemPart);
          if (partIndex === 0) {
            itemPart.appendIntoPart(this);
          } else {
            itemPart.insertAfterPart(itemParts[partIndex - 1]);
          }
        }
        itemPart.setValue(item);
        itemPart.commit();
        partIndex++;
      }
      if (partIndex < itemParts.length) {
        itemParts.length = partIndex;
        this.clear(itemPart && itemPart.endNode);
      }
    }
    clear(startNode = this.startNode) {
      removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);
    }
  };
  var BooleanAttributePart = class {
    constructor(element, name, strings) {
      this.value = void 0;
      this.__pendingValue = void 0;
      if (strings.length !== 2 || strings[0] !== "" || strings[1] !== "") {
        throw new Error("Boolean attributes can only contain a single expression");
      }
      this.element = element;
      this.name = name;
      this.strings = strings;
    }
    setValue(value) {
      this.__pendingValue = value;
    }
    commit() {
      while (isDirective(this.__pendingValue)) {
        const directive2 = this.__pendingValue;
        this.__pendingValue = noChange;
        directive2(this);
      }
      if (this.__pendingValue === noChange) {
        return;
      }
      const value = !!this.__pendingValue;
      if (this.value !== value) {
        if (value) {
          this.element.setAttribute(this.name, "");
        } else {
          this.element.removeAttribute(this.name);
        }
        this.value = value;
      }
      this.__pendingValue = noChange;
    }
  };
  var PropertyCommitter = class extends AttributeCommitter {
    constructor(element, name, strings) {
      super(element, name, strings);
      this.single = strings.length === 2 && strings[0] === "" && strings[1] === "";
    }
    _createPart() {
      return new PropertyPart(this);
    }
    _getValue() {
      if (this.single) {
        return this.parts[0].value;
      }
      return super._getValue();
    }
    commit() {
      if (this.dirty) {
        this.dirty = false;
        this.element[this.name] = this._getValue();
      }
    }
  };
  var PropertyPart = class extends AttributePart {
  };
  var eventOptionsSupported = false;
  (() => {
    try {
      const options = {
        get capture() {
          eventOptionsSupported = true;
          return false;
        }
      };
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (_e) {
    }
  })();
  var EventPart = class {
    constructor(element, eventName, eventContext) {
      this.value = void 0;
      this.__pendingValue = void 0;
      this.element = element;
      this.eventName = eventName;
      this.eventContext = eventContext;
      this.__boundHandleEvent = (e8) => this.handleEvent(e8);
    }
    setValue(value) {
      this.__pendingValue = value;
    }
    commit() {
      while (isDirective(this.__pendingValue)) {
        const directive2 = this.__pendingValue;
        this.__pendingValue = noChange;
        directive2(this);
      }
      if (this.__pendingValue === noChange) {
        return;
      }
      const newListener = this.__pendingValue;
      const oldListener = this.value;
      const shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
      const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);
      if (shouldRemoveListener) {
        this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);
      }
      if (shouldAddListener) {
        this.__options = getOptions(newListener);
        this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);
      }
      this.value = newListener;
      this.__pendingValue = noChange;
    }
    handleEvent(event) {
      if (typeof this.value === "function") {
        this.value.call(this.eventContext || this.element, event);
      } else {
        this.value.handleEvent(event);
      }
    }
  };
  var getOptions = (o8) => o8 && (eventOptionsSupported ? { capture: o8.capture, passive: o8.passive, once: o8.once } : o8.capture);

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/template-factory.js
  function templateFactory(result) {
    let templateCache = templateCaches.get(result.type);
    if (templateCache === void 0) {
      templateCache = {
        stringsArray: new WeakMap(),
        keyString: new Map()
      };
      templateCaches.set(result.type, templateCache);
    }
    let template2 = templateCache.stringsArray.get(result.strings);
    if (template2 !== void 0) {
      return template2;
    }
    const key = result.strings.join(marker);
    template2 = templateCache.keyString.get(key);
    if (template2 === void 0) {
      template2 = new Template(result, result.getTemplateElement());
      templateCache.keyString.set(key, template2);
    }
    templateCache.stringsArray.set(result.strings, template2);
    return template2;
  }
  var templateCaches = new Map();

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/render.js
  var parts = new WeakMap();
  var render = (result, container, options) => {
    let part = parts.get(container);
    if (part === void 0) {
      removeNodes(container, container.firstChild);
      parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));
      part.appendInto(container);
    }
    part.setValue(result);
    part.commit();
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/default-template-processor.js
  var DefaultTemplateProcessor = class {
    handleAttributeExpressions(element, name, strings, options) {
      const prefix = name[0];
      if (prefix === ".") {
        const committer2 = new PropertyCommitter(element, name.slice(1), strings);
        return committer2.parts;
      }
      if (prefix === "@") {
        return [new EventPart(element, name.slice(1), options.eventContext)];
      }
      if (prefix === "?") {
        return [new BooleanAttributePart(element, name.slice(1), strings)];
      }
      const committer = new AttributeCommitter(element, name, strings);
      return committer.parts;
    }
    handleTextExpression(options) {
      return new NodePart(options);
    }
  };
  var defaultTemplateProcessor = new DefaultTemplateProcessor();

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lit-html.js
  if (typeof window !== "undefined") {
    (window["litHtmlVersions"] || (window["litHtmlVersions"] = [])).push("1.4.1");
  }
  var html = (strings, ...values) => new TemplateResult(strings, values, "html", defaultTemplateProcessor);

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-html/lib/shady-render.js
  var getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;
  var compatibleShadyCSSVersion = true;
  if (typeof window.ShadyCSS === "undefined") {
    compatibleShadyCSSVersion = false;
  } else if (typeof window.ShadyCSS.prepareTemplateDom === "undefined") {
    console.warn(`Incompatible ShadyCSS version detected. Please update to at least @webcomponents/webcomponentsjs@2.0.2 and @webcomponents/shadycss@1.3.1.`);
    compatibleShadyCSSVersion = false;
  }
  var shadyTemplateFactory = (scopeName) => (result) => {
    const cacheKey = getTemplateCacheKey(result.type, scopeName);
    let templateCache = templateCaches.get(cacheKey);
    if (templateCache === void 0) {
      templateCache = {
        stringsArray: new WeakMap(),
        keyString: new Map()
      };
      templateCaches.set(cacheKey, templateCache);
    }
    let template2 = templateCache.stringsArray.get(result.strings);
    if (template2 !== void 0) {
      return template2;
    }
    const key = result.strings.join(marker);
    template2 = templateCache.keyString.get(key);
    if (template2 === void 0) {
      const element = result.getTemplateElement();
      if (compatibleShadyCSSVersion) {
        window.ShadyCSS.prepareTemplateDom(element, scopeName);
      }
      template2 = new Template(result, element);
      templateCache.keyString.set(key, template2);
    }
    templateCache.stringsArray.set(result.strings, template2);
    return template2;
  };
  var TEMPLATE_TYPES = ["html", "svg"];
  var removeStylesFromLitTemplates = (scopeName) => {
    TEMPLATE_TYPES.forEach((type) => {
      const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));
      if (templates !== void 0) {
        templates.keyString.forEach((template2) => {
          const { element: { content } } = template2;
          const styles = new Set();
          Array.from(content.querySelectorAll("style")).forEach((s5) => {
            styles.add(s5);
          });
          removeNodesFromTemplate(template2, styles);
        });
      }
    });
  };
  var shadyRenderSet = new Set();
  var prepareTemplateStyles = (scopeName, renderedDOM, template2) => {
    shadyRenderSet.add(scopeName);
    const templateElement = !!template2 ? template2.element : document.createElement("template");
    const styles = renderedDOM.querySelectorAll("style");
    const { length } = styles;
    if (length === 0) {
      window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
      return;
    }
    const condensedStyle = document.createElement("style");
    for (let i7 = 0; i7 < length; i7++) {
      const style2 = styles[i7];
      style2.parentNode.removeChild(style2);
      condensedStyle.textContent += style2.textContent;
    }
    removeStylesFromLitTemplates(scopeName);
    const content = templateElement.content;
    if (!!template2) {
      insertNodeIntoTemplate(template2, condensedStyle, content.firstChild);
    } else {
      content.insertBefore(condensedStyle, content.firstChild);
    }
    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);
    const style = content.querySelector("style");
    if (window.ShadyCSS.nativeShadow && style !== null) {
      renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
    } else if (!!template2) {
      content.insertBefore(condensedStyle, content.firstChild);
      const removes = new Set();
      removes.add(condensedStyle);
      removeNodesFromTemplate(template2, removes);
    }
  };
  var render2 = (result, container, options) => {
    if (!options || typeof options !== "object" || !options.scopeName) {
      throw new Error("The `scopeName` option is required.");
    }
    const scopeName = options.scopeName;
    const hasRendered = parts.has(container);
    const needsScoping = compatibleShadyCSSVersion && container.nodeType === 11 && !!container.host;
    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);
    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
    render(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));
    if (firstScopeRender) {
      const part = parts.get(renderContainer);
      parts.delete(renderContainer);
      const template2 = part.value instanceof TemplateInstance ? part.value.template : void 0;
      prepareTemplateStyles(scopeName, renderContainer, template2);
      removeNodes(container, container.firstChild);
      container.appendChild(renderContainer);
      parts.set(container, part);
    }
    if (!hasRendered && needsScoping) {
      window.ShadyCSS.styleElement(container.host);
    }
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-element/lib/updating-element.js
  var _a2;
  window.JSCompiler_renameProperty = (prop, _obj) => prop;
  var defaultConverter = {
    toAttribute(value, type) {
      switch (type) {
        case Boolean:
          return value ? "" : null;
        case Object:
        case Array:
          return value == null ? value : JSON.stringify(value);
      }
      return value;
    },
    fromAttribute(value, type) {
      switch (type) {
        case Boolean:
          return value !== null;
        case Number:
          return value === null ? null : Number(value);
        case Object:
        case Array:
          return JSON.parse(value);
      }
      return value;
    }
  };
  var notEqual = (value, old) => {
    return old !== value && (old === old || value === value);
  };
  var defaultPropertyDeclaration = {
    attribute: true,
    type: String,
    converter: defaultConverter,
    reflect: false,
    hasChanged: notEqual
  };
  var STATE_HAS_UPDATED = 1;
  var STATE_UPDATE_REQUESTED = 1 << 2;
  var STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
  var STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
  var finalized = "finalized";
  var UpdatingElement = class extends HTMLElement {
    constructor() {
      super();
      this.initialize();
    }
    static get observedAttributes() {
      this.finalize();
      const attributes = [];
      this._classProperties.forEach((v2, p3) => {
        const attr = this._attributeNameForProperty(p3, v2);
        if (attr !== void 0) {
          this._attributeToPropertyMap.set(attr, p3);
          attributes.push(attr);
        }
      });
      return attributes;
    }
    static _ensureClassProperties() {
      if (!this.hasOwnProperty(JSCompiler_renameProperty("_classProperties", this))) {
        this._classProperties = new Map();
        const superProperties = Object.getPrototypeOf(this)._classProperties;
        if (superProperties !== void 0) {
          superProperties.forEach((v2, k2) => this._classProperties.set(k2, v2));
        }
      }
    }
    static createProperty(name, options = defaultPropertyDeclaration) {
      this._ensureClassProperties();
      this._classProperties.set(name, options);
      if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
        return;
      }
      const key = typeof name === "symbol" ? Symbol() : `__${name}`;
      const descriptor = this.getPropertyDescriptor(name, key, options);
      if (descriptor !== void 0) {
        Object.defineProperty(this.prototype, name, descriptor);
      }
    }
    static getPropertyDescriptor(name, key, options) {
      return {
        get() {
          return this[key];
        },
        set(value) {
          const oldValue = this[name];
          this[key] = value;
          this.requestUpdateInternal(name, oldValue, options);
        },
        configurable: true,
        enumerable: true
      };
    }
    static getPropertyOptions(name) {
      return this._classProperties && this._classProperties.get(name) || defaultPropertyDeclaration;
    }
    static finalize() {
      const superCtor = Object.getPrototypeOf(this);
      if (!superCtor.hasOwnProperty(finalized)) {
        superCtor.finalize();
      }
      this[finalized] = true;
      this._ensureClassProperties();
      this._attributeToPropertyMap = new Map();
      if (this.hasOwnProperty(JSCompiler_renameProperty("properties", this))) {
        const props = this.properties;
        const propKeys = [
          ...Object.getOwnPropertyNames(props),
          ...typeof Object.getOwnPropertySymbols === "function" ? Object.getOwnPropertySymbols(props) : []
        ];
        for (const p3 of propKeys) {
          this.createProperty(p3, props[p3]);
        }
      }
    }
    static _attributeNameForProperty(name, options) {
      const attribute = options.attribute;
      return attribute === false ? void 0 : typeof attribute === "string" ? attribute : typeof name === "string" ? name.toLowerCase() : void 0;
    }
    static _valueHasChanged(value, old, hasChanged = notEqual) {
      return hasChanged(value, old);
    }
    static _propertyValueFromAttribute(value, options) {
      const type = options.type;
      const converter = options.converter || defaultConverter;
      const fromAttribute = typeof converter === "function" ? converter : converter.fromAttribute;
      return fromAttribute ? fromAttribute(value, type) : value;
    }
    static _propertyValueToAttribute(value, options) {
      if (options.reflect === void 0) {
        return;
      }
      const type = options.type;
      const converter = options.converter;
      const toAttribute = converter && converter.toAttribute || defaultConverter.toAttribute;
      return toAttribute(value, type);
    }
    initialize() {
      this._updateState = 0;
      this._updatePromise = new Promise((res) => this._enableUpdatingResolver = res);
      this._changedProperties = new Map();
      this._saveInstanceProperties();
      this.requestUpdateInternal();
    }
    _saveInstanceProperties() {
      this.constructor._classProperties.forEach((_v, p3) => {
        if (this.hasOwnProperty(p3)) {
          const value = this[p3];
          delete this[p3];
          if (!this._instanceProperties) {
            this._instanceProperties = new Map();
          }
          this._instanceProperties.set(p3, value);
        }
      });
    }
    _applyInstanceProperties() {
      this._instanceProperties.forEach((v2, p3) => this[p3] = v2);
      this._instanceProperties = void 0;
    }
    connectedCallback() {
      this.enableUpdating();
    }
    enableUpdating() {
      if (this._enableUpdatingResolver !== void 0) {
        this._enableUpdatingResolver();
        this._enableUpdatingResolver = void 0;
      }
    }
    disconnectedCallback() {
    }
    attributeChangedCallback(name, old, value) {
      if (old !== value) {
        this._attributeToProperty(name, value);
      }
    }
    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
      const ctor = this.constructor;
      const attr = ctor._attributeNameForProperty(name, options);
      if (attr !== void 0) {
        const attrValue = ctor._propertyValueToAttribute(value, options);
        if (attrValue === void 0) {
          return;
        }
        this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;
        if (attrValue == null) {
          this.removeAttribute(attr);
        } else {
          this.setAttribute(attr, attrValue);
        }
        this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
      }
    }
    _attributeToProperty(name, value) {
      if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
        return;
      }
      const ctor = this.constructor;
      const propName = ctor._attributeToPropertyMap.get(name);
      if (propName !== void 0) {
        const options = ctor.getPropertyOptions(propName);
        this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
        this[propName] = ctor._propertyValueFromAttribute(value, options);
        this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
      }
    }
    requestUpdateInternal(name, oldValue, options) {
      let shouldRequestUpdate = true;
      if (name !== void 0) {
        const ctor = this.constructor;
        options = options || ctor.getPropertyOptions(name);
        if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
          if (!this._changedProperties.has(name)) {
            this._changedProperties.set(name, oldValue);
          }
          if (options.reflect === true && !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
            if (this._reflectingProperties === void 0) {
              this._reflectingProperties = new Map();
            }
            this._reflectingProperties.set(name, options);
          }
        } else {
          shouldRequestUpdate = false;
        }
      }
      if (!this._hasRequestedUpdate && shouldRequestUpdate) {
        this._updatePromise = this._enqueueUpdate();
      }
    }
    requestUpdate(name, oldValue) {
      this.requestUpdateInternal(name, oldValue);
      return this.updateComplete;
    }
    _enqueueUpdate() {
      return __async(this, null, function* () {
        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;
        try {
          yield this._updatePromise;
        } catch (e8) {
        }
        const result = this.performUpdate();
        if (result != null) {
          yield result;
        }
        return !this._hasRequestedUpdate;
      });
    }
    get _hasRequestedUpdate() {
      return this._updateState & STATE_UPDATE_REQUESTED;
    }
    get hasUpdated() {
      return this._updateState & STATE_HAS_UPDATED;
    }
    performUpdate() {
      if (!this._hasRequestedUpdate) {
        return;
      }
      if (this._instanceProperties) {
        this._applyInstanceProperties();
      }
      let shouldUpdate = false;
      const changedProperties = this._changedProperties;
      try {
        shouldUpdate = this.shouldUpdate(changedProperties);
        if (shouldUpdate) {
          this.update(changedProperties);
        } else {
          this._markUpdated();
        }
      } catch (e8) {
        shouldUpdate = false;
        this._markUpdated();
        throw e8;
      }
      if (shouldUpdate) {
        if (!(this._updateState & STATE_HAS_UPDATED)) {
          this._updateState = this._updateState | STATE_HAS_UPDATED;
          this.firstUpdated(changedProperties);
        }
        this.updated(changedProperties);
      }
    }
    _markUpdated() {
      this._changedProperties = new Map();
      this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
    }
    get updateComplete() {
      return this._getUpdateComplete();
    }
    _getUpdateComplete() {
      return this.getUpdateComplete();
    }
    getUpdateComplete() {
      return this._updatePromise;
    }
    shouldUpdate(_changedProperties) {
      return true;
    }
    update(_changedProperties) {
      if (this._reflectingProperties !== void 0 && this._reflectingProperties.size > 0) {
        this._reflectingProperties.forEach((v2, k2) => this._propertyToAttribute(k2, this[k2], v2));
        this._reflectingProperties = void 0;
      }
      this._markUpdated();
    }
    updated(_changedProperties) {
    }
    firstUpdated(_changedProperties) {
    }
  };
  _a2 = finalized;
  UpdatingElement[_a2] = true;

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-element/lib/decorators.js
  var ElementProto = Element.prototype;
  var legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-element/lib/css-tag.js
  var supportsAdoptingStyleSheets = window.ShadowRoot && (window.ShadyCSS === void 0 || window.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
  var constructionToken = Symbol();
  var CSSResult = class {
    constructor(cssText, safeToken) {
      if (safeToken !== constructionToken) {
        throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
      }
      this.cssText = cssText;
    }
    get styleSheet() {
      if (this._styleSheet === void 0) {
        if (supportsAdoptingStyleSheets) {
          this._styleSheet = new CSSStyleSheet();
          this._styleSheet.replaceSync(this.cssText);
        } else {
          this._styleSheet = null;
        }
      }
      return this._styleSheet;
    }
    toString() {
      return this.cssText;
    }
  };
  var unsafeCSS = (value) => {
    return new CSSResult(String(value), constructionToken);
  };
  var textFromCSSResult = (value) => {
    if (value instanceof CSSResult) {
      return value.cssText;
    } else if (typeof value === "number") {
      return value;
    } else {
      throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but
            take care to ensure page security.`);
    }
  };
  var css = (strings, ...values) => {
    const cssText = values.reduce((acc, v2, idx) => acc + textFromCSSResult(v2) + strings[idx + 1], strings[0]);
    return new CSSResult(cssText, constructionToken);
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/node_modules/lit-element/lit-element.js
  (window["litElementVersions"] || (window["litElementVersions"] = [])).push("2.5.1");
  var renderNotImplemented = {};
  var LitElement = class extends UpdatingElement {
    static getStyles() {
      return this.styles;
    }
    static _getUniqueStyles() {
      if (this.hasOwnProperty(JSCompiler_renameProperty("_styles", this))) {
        return;
      }
      const userStyles = this.getStyles();
      if (Array.isArray(userStyles)) {
        const addStyles = (styles2, set2) => styles2.reduceRight((set3, s5) => Array.isArray(s5) ? addStyles(s5, set3) : (set3.add(s5), set3), set2);
        const set = addStyles(userStyles, new Set());
        const styles = [];
        set.forEach((v2) => styles.unshift(v2));
        this._styles = styles;
      } else {
        this._styles = userStyles === void 0 ? [] : [userStyles];
      }
      this._styles = this._styles.map((s5) => {
        if (s5 instanceof CSSStyleSheet && !supportsAdoptingStyleSheets) {
          const cssText = Array.prototype.slice.call(s5.cssRules).reduce((css2, rule) => css2 + rule.cssText, "");
          return unsafeCSS(cssText);
        }
        return s5;
      });
    }
    initialize() {
      super.initialize();
      this.constructor._getUniqueStyles();
      this.renderRoot = this.createRenderRoot();
      if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
        this.adoptStyles();
      }
    }
    createRenderRoot() {
      return this.attachShadow(this.constructor.shadowRootOptions);
    }
    adoptStyles() {
      const styles = this.constructor._styles;
      if (styles.length === 0) {
        return;
      }
      if (window.ShadyCSS !== void 0 && !window.ShadyCSS.nativeShadow) {
        window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s5) => s5.cssText), this.localName);
      } else if (supportsAdoptingStyleSheets) {
        this.renderRoot.adoptedStyleSheets = styles.map((s5) => s5 instanceof CSSStyleSheet ? s5 : s5.styleSheet);
      } else {
        this._needsShimAdoptedStyleSheets = true;
      }
    }
    connectedCallback() {
      super.connectedCallback();
      if (this.hasUpdated && window.ShadyCSS !== void 0) {
        window.ShadyCSS.styleElement(this);
      }
    }
    update(changedProperties) {
      const templateResult = this.render();
      super.update(changedProperties);
      if (templateResult !== renderNotImplemented) {
        this.constructor.render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });
      }
      if (this._needsShimAdoptedStyleSheets) {
        this._needsShimAdoptedStyleSheets = false;
        this.constructor._styles.forEach((s5) => {
          const style = document.createElement("style");
          style.textContent = s5.cssText;
          this.renderRoot.appendChild(style);
        });
      }
    }
    render() {
      return renderNotImplemented;
    }
  };
  LitElement["finalized"] = true;
  LitElement.render = render2;
  LitElement.shadowRootOptions = { mode: "open" };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/src/ArcOverlayBackdrop.js
  var ArcOverlayBackdrop = class extends LitElement {
    get styles() {
      return css`
    :host {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: var(--arc-overlay-backdrop-background-color,
        var(--iron-overlay-backdrop-background-color, #000));
      opacity: 0;
      transition: var(--arc-overlay-backdrop-transition, opacity 0.2s);
      pointer-events: none;
    }

    :host(.opened) {
      opacity: var(--arc-overlay-backdrop-opacity, var(--iron-overlay-backdrop-opacity, 0.6));
      pointer-events: auto;
    }`;
    }
    static get properties() {
      return {
        opened: { type: Boolean, reflect: true }
      };
    }
    get opened() {
      return this.__opened;
    }
    set opened(value) {
      const old = this.__opened;
      if (old === value) {
        return;
      }
      this.__opened = value;
      this._openedChanged(value);
    }
    constructor() {
      super();
      this.opened = false;
      this.__openedRaf = null;
      this._onTransitionend = this._onTransitionend.bind(this);
    }
    connectedCallback() {
      this.isAttached = true;
      super.connectedCallback();
      this.addEventListener("transitionend", this._onTransitionend, true);
      if (this.opened) {
        this._openedChanged(this.opened);
      }
    }
    disconnectedCallback() {
      this.isAttached = false;
      super.disconnectedCallback();
      this.removeEventListener("transitionend", this._onTransitionend);
    }
    prepare() {
      if (this.opened && !this.parentNode) {
        document.body.appendChild(this);
      }
    }
    open() {
      this.opened = true;
    }
    close() {
      this.opened = false;
    }
    complete() {
      if (!this.opened && this.parentNode === document.body) {
        this.parentNode.removeChild(this);
      }
    }
    _onTransitionend(e8) {
      if (e8 && e8.target === this) {
        this.complete();
      }
    }
    _openedChanged(opened) {
      if (opened) {
        this.prepare();
      } else {
        const cs = window.getComputedStyle(this);
        if (cs.transitionDuration === "0s" || cs.opacity === "0") {
          this.complete();
        }
      }
      if (!this.isAttached) {
        return;
      }
      if (this.__openedRaf) {
        window.cancelAnimationFrame(this.__openedRaf);
        this.__openedRaf = null;
      }
      const { scrollTop } = this;
      this.scrollTop = void 0;
      this.scrollTop = scrollTop;
      this.__openedRaf = window.requestAnimationFrame(() => {
        this.__openedRaf = null;
        this.toggleClass("opened", this.opened);
      });
    }
    toggleClass(klass, condition) {
      if (condition) {
        if (!this.classList.contains(klass)) {
          this.classList.add(klass);
        }
      } else if (this.classList.contains(klass)) {
        this.classList.remove(klass);
      }
    }
    render() {
      return html`<style>${this.styles}</style><slot></slot>`;
    }
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/arc-overlay-backdrop.js
  window.customElements.define("arc-overlay-backdrop", ArcOverlayBackdrop);

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/src/ArcOverlayManager.js
  var ArcOverlayManager = class {
    constructor() {
      this._overlays = [];
      this._minimumZ = 101;
      this._backdropElement = null;
      document.documentElement.addEventListener("click", () => {
      });
      document.addEventListener("click", this._onCaptureClick.bind(this), true);
      document.addEventListener("focus", this._onCaptureFocus.bind(this), true);
      document.addEventListener("keydown", this._onCaptureKeyDown.bind(this), true);
    }
    get backdropElement() {
      if (!this._backdropElement) {
        this._backdropElement = document.createElement("arc-overlay-backdrop");
      }
      return this._backdropElement;
    }
    get deepActiveElement() {
      let active = document.activeElement;
      if (!active || active instanceof Element === false) {
        active = document.body;
      }
      while (active.shadowRoot && active.shadowRoot.activeElement) {
        active = active.shadowRoot.activeElement;
      }
      return active;
    }
    _bringOverlayAtIndexToFront(i7) {
      const overlay = this._overlays[i7];
      if (!overlay) {
        return;
      }
      let lastI = this._overlays.length - 1;
      const currentOverlay = this._overlays[lastI];
      if (currentOverlay && this._shouldBeBehindOverlay(overlay, currentOverlay)) {
        lastI--;
      }
      if (i7 >= lastI) {
        return;
      }
      const minimumZ = Math.max(this.currentOverlayZ(), this._minimumZ);
      if (this._getZ(overlay) <= minimumZ) {
        this._applyOverlayZ(overlay, minimumZ);
      }
      while (i7 < lastI) {
        this._overlays[i7] = this._overlays[i7 + 1];
        i7++;
      }
      this._overlays[lastI] = overlay;
    }
    addOrRemoveOverlay(overlay) {
      if (overlay.opened) {
        this.addOverlay(overlay);
      } else {
        this.removeOverlay(overlay);
      }
    }
    addOverlay(overlay) {
      const i7 = this._overlays.indexOf(overlay);
      if (i7 >= 0) {
        this._bringOverlayAtIndexToFront(i7);
        this.trackBackdrop();
        return;
      }
      let insertionIndex = this._overlays.length;
      const currentOverlay = this._overlays[insertionIndex - 1];
      let minimumZ = Math.max(this._getZ(currentOverlay), this._minimumZ);
      const newZ = this._getZ(overlay);
      if (currentOverlay && this._shouldBeBehindOverlay(overlay, currentOverlay)) {
        this._applyOverlayZ(currentOverlay, minimumZ);
        insertionIndex--;
        const previousOverlay = this._overlays[insertionIndex - 1];
        minimumZ = Math.max(this._getZ(previousOverlay), this._minimumZ);
      }
      if (newZ <= minimumZ) {
        this._applyOverlayZ(overlay, minimumZ);
      }
      this._overlays.splice(insertionIndex, 0, overlay);
      this.trackBackdrop();
    }
    removeOverlay(overlay) {
      const i7 = this._overlays.indexOf(overlay);
      if (i7 === -1) {
        return;
      }
      this._overlays.splice(i7, 1);
      this.trackBackdrop();
    }
    currentOverlay() {
      const i7 = this._overlays.length - 1;
      return this._overlays[i7];
    }
    currentOverlayZ() {
      return this._getZ(this.currentOverlay());
    }
    ensureMinimumZ(minimumZ) {
      this._minimumZ = Math.max(this._minimumZ, minimumZ);
    }
    focusOverlay() {
      const current = this.currentOverlay();
      if (current) {
        current._applyFocus();
      }
    }
    trackBackdrop() {
      const overlay = this._overlayWithBackdrop();
      if (!overlay && !this._backdropElement) {
        return;
      }
      this.backdropElement.style.zIndex = String(this._getZ(overlay) - 1);
      this.backdropElement.opened = !!overlay;
      this.backdropElement.prepare();
    }
    getBackdrops() {
      const backdrops = [];
      for (let i7 = 0; i7 < this._overlays.length; i7++) {
        if (this._overlays[i7].withBackdrop) {
          backdrops.push(this._overlays[i7]);
        }
      }
      return backdrops;
    }
    backdropZ() {
      return this._getZ(this._overlayWithBackdrop()) - 1;
    }
    _overlayWithBackdrop() {
      for (let i7 = this._overlays.length - 1; i7 >= 0; i7--) {
        if (this._overlays[i7].withBackdrop) {
          return this._overlays[i7];
        }
      }
      return void 0;
    }
    _getZ(overlay) {
      let z2 = this._minimumZ;
      if (overlay) {
        const z1 = Number(overlay.style.zIndex || window.getComputedStyle(overlay).zIndex);
        if (!Number.isNaN(z1)) {
          z2 = z1;
        }
      }
      return z2;
    }
    _setZ(element, z2) {
      element.style.zIndex = String(z2);
    }
    _applyOverlayZ(overlay, aboveZ) {
      this._setZ(overlay, aboveZ + 2);
    }
    _overlayInPath(path) {
      path = path || [];
      for (let i7 = 0; i7 < path.length; i7++) {
        if (path[i7]._manager === this) {
          return path[i7];
        }
      }
      return void 0;
    }
    _onCaptureClick(e8) {
      let i7 = this._overlays.length - 1;
      if (i7 === -1) {
        return;
      }
      const cp = e8.composedPath && e8.composedPath();
      const path = cp || e8.path;
      let overlay;
      while ((overlay = this._overlays[i7]) && this._overlayInPath(path) !== overlay) {
        overlay._onCaptureClick(e8);
        if (overlay.allowClickThrough) {
          i7--;
        } else {
          break;
        }
      }
    }
    _onCaptureFocus(event) {
      const overlay = this.currentOverlay();
      if (overlay) {
        overlay._onCaptureFocus(event);
      }
    }
    _onCaptureKeyDown(e8) {
      const overlay = this.currentOverlay();
      if (overlay) {
        if (this._keyboardEventMatchesKeys(e8, "Escape")) {
          overlay._onCaptureEsc(e8);
        } else if (this._keyboardEventMatchesKeys(e8, "Tab")) {
          overlay._onCaptureTab(e8);
        }
      }
    }
    _keyboardEventMatchesKeys(e8, key) {
      if (e8.key && e8.key === key) {
        return true;
      }
      if (e8.detail && e8.detail.key === key) {
        return true;
      }
      return false;
    }
    _shouldBeBehindOverlay(overlay1, overlay2) {
      return !overlay1.alwaysOnTop && overlay2.alwaysOnTop;
    }
  };

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/arc-overlay-manager.js
  var ArcOverlayManager2 = new ArcOverlayManager();

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/src/arc-scroll-manager.js
  var lastTouchPosition = { pageX: 0, pageY: 0 };
  var lastRootTarget = null;
  var lastScrollableNodes = [];
  var scrollEvents = [
    "wheel",
    "mousewheel",
    "DOMMouseScroll",
    "touchstart",
    "touchmove"
  ];
  var _boundScrollHandler;
  var currentLockingElement;
  var _lockingElements = [];
  var _lockedElementCache = null;
  var _unlockedElementCache = null;
  function _getScrollInfo(event) {
    const info = { deltaX: event.deltaX, deltaY: event.deltaY };
    if ("deltaX" in event) {
    } else if ("wheelDeltaX" in event && "wheelDeltaY" in event) {
      info.deltaX = -event.wheelDeltaX;
      info.deltaY = -event.wheelDeltaY;
    } else if ("wheelDelta" in event) {
      info.deltaX = 0;
      info.deltaY = -event.wheelDelta;
    } else if ("axis" in event) {
      info.deltaX = event.axis === 1 ? event.detail : 0;
      info.deltaY = event.axis === 2 ? event.detail : 0;
    } else if (event.targetTouches) {
      const touch = event.targetTouches[0];
      info.deltaX = lastTouchPosition.pageX - touch.pageX;
      info.deltaY = lastTouchPosition.pageY - touch.pageY;
    }
    return info;
  }
  function _getScrollingNode(nodes, deltaX, deltaY) {
    if (!deltaX && !deltaY) {
      return void 0;
    }
    const verticalScroll = Math.abs(deltaY) >= Math.abs(deltaX);
    for (let i7 = 0; i7 < nodes.length; i7++) {
      const node = nodes[i7];
      let canScroll = false;
      if (verticalScroll) {
        canScroll = deltaY < 0 ? node.scrollTop > 0 : node.scrollTop < node.scrollHeight - node.clientHeight;
      } else {
        canScroll = deltaX < 0 ? node.scrollLeft > 0 : node.scrollLeft < node.scrollWidth - node.clientWidth;
      }
      if (canScroll) {
        return node;
      }
    }
    return void 0;
  }
  function _getScrollableNodes(nodes) {
    const scrollables = [];
    const lockingIndex = nodes.indexOf(currentLockingElement);
    for (let i7 = 0; i7 <= lockingIndex; i7++) {
      if (nodes[i7].nodeType !== Node.ELEMENT_NODE) {
        continue;
      }
      const node = nodes[i7];
      let { style } = node;
      if (!style.overflow.includes("scroll") && !style.overflow.includes("auto")) {
        style = window.getComputedStyle(node);
      }
      if (style.overflow.includes("scroll") || style.overflow.includes("auto")) {
        scrollables.push(node);
      }
    }
    return scrollables;
  }
  function _shouldPreventScrolling(event) {
    const cp = event.composedPath && event.composedPath();
    const path = cp || event.path;
    const target = path[0];
    if (event.type !== "touchmove" && lastRootTarget !== target) {
      lastRootTarget = target;
      lastScrollableNodes = _getScrollableNodes(path);
    }
    if (!lastScrollableNodes.length) {
      return true;
    }
    if (event.type === "touchstart") {
      return false;
    }
    const info = _getScrollInfo(event);
    return !_getScrollingNode(lastScrollableNodes, info.deltaX, info.deltaY);
  }
  function _scrollInteractionHandler(event) {
    if (event.cancelable && _shouldPreventScrolling(event)) {
      event.preventDefault();
    }
    if (event.targetTouches) {
      const touch = event.targetTouches[0];
      lastTouchPosition.pageX = touch.pageX;
      lastTouchPosition.pageY = touch.pageY;
    }
  }
  function _lockScrollInteractions() {
    _boundScrollHandler = _boundScrollHandler || _scrollInteractionHandler.bind(void 0);
    for (let i7 = 0, l5 = scrollEvents.length; i7 < l5; i7++) {
      document.addEventListener(scrollEvents[i7], _boundScrollHandler, { capture: true, passive: false });
    }
  }
  function _unlockScrollInteractions() {
    for (let i7 = 0, l5 = scrollEvents.length; i7 < l5; i7++) {
      document.removeEventListener(scrollEvents[i7], _boundScrollHandler, { capture: true, passive: false });
    }
  }
  function pushScrollLock(element) {
    if (_lockingElements.indexOf(element) >= 0) {
      return;
    }
    if (_lockingElements.length === 0) {
      _lockScrollInteractions();
    }
    _lockingElements.push(element);
    currentLockingElement = _lockingElements[_lockingElements.length - 1];
    _lockedElementCache = [];
    _unlockedElementCache = [];
  }
  function removeScrollLock(element) {
    const index = _lockingElements.indexOf(element);
    if (index === -1) {
      return;
    }
    _lockingElements.splice(index, 1);
    currentLockingElement = _lockingElements[_lockingElements.length - 1];
    _lockedElementCache = [];
    _unlockedElementCache = [];
    if (_lockingElements.length === 0) {
      _unlockScrollInteractions();
    }
  }

  // ../node_modules/@advanced-rest-client/arc-overlay-mixin/src/ArcOverlayMixin.js
  var mxFunction3 = (base) => {
    class ArcOverlayMixinImpl extends ArcFitMixin(ArcResizableMixin(base)) {
      static get properties() {
        return {
          opened: { type: Boolean, reflect: true },
          __canceled: { type: Boolean, reflect: true, attribute: "canceled" },
          withBackdrop: { type: Boolean, reflect: true },
          _oldWithBackdrop: { type: Boolean, attribute: "with-backdrop" },
          noAutoFocus: { type: Boolean, reflect: true },
          _oldNoAutoFocus: { type: Boolean, attribute: "no-auto-focus" },
          noCancelOnEscKey: { type: Boolean, reflect: true },
          _oldNoCancelOnEscKey: { type: Boolean, attribute: "no-cancel-on-esc-key" },
          noCancelOnOutsideClick: { type: Boolean, reflect: true },
          _oldNoCancelOnOutsideClick: { type: Boolean, attribute: "no-cancel-on-outside-click" },
          closingReason: { type: Object },
          restoreFocusOnClose: { type: Boolean, reflect: true },
          _oldRestoreFocusOnClose: { type: Boolean, attribute: "restore-focus-on-close" },
          allowClickThrough: { type: Boolean, reflect: true },
          _oldAllowClickThrough: { type: Boolean, attribute: "allow-click-through" },
          alwaysOnTop: { type: Boolean, reflect: true },
          _oldAlwaysOnTop: { type: Boolean, attribute: "always-on-top" },
          scrollAction: { type: String, reflect: true },
          _oldScrollAction: { type: String, attribute: "scroll-action" },
          _manager: { type: Object },
          _focusedChild: { type: Object }
        };
      }
      get opened() {
        return this._opened;
      }
      set opened(value) {
        const old = this._opened;
        if (value === old) {
          return;
        }
        this._opened = value;
        if (this.requestUpdate) {
          this.requestUpdate("opened", old);
        }
        this._openedChanged(value);
        this.__updateScrollObservers(this._isAttached, value, this.scrollAction);
        this.dispatchEvent(new CustomEvent("openedchange"));
        this.dispatchEvent(new CustomEvent("opened-changed", {
          detail: {
            value
          }
        }));
      }
      get canceled() {
        return this.__canceled;
      }
      get _canceled() {
        return this.__canceled;
      }
      set _canceled(value) {
        if (value === this.__canceled) {
          return;
        }
        this.__canceled = value;
        this._canceledChanged();
      }
      get withBackdrop() {
        return this._withBackdrop;
      }
      set withBackdrop(value) {
        const old = this._withBackdrop;
        if (value === old) {
          return;
        }
        this._withBackdrop = value;
        if (this.requestUpdate) {
          this.requestUpdate("withBackdrop", old);
        }
        this._withBackdropChanged();
      }
      get _oldWithBackdrop() {
        return this.withBackdrop;
      }
      set _oldWithBackdrop(value) {
        this.withBackdrop = value;
      }
      get _oldNoAutoFocus() {
        return this.noAutoFocus;
      }
      set _oldNoAutoFocus(value) {
        this.noAutoFocus = value;
      }
      get _oldNoCancelOnEscKey() {
        return this.noCancelOnEscKey;
      }
      set _oldNoCancelOnEscKey(value) {
        this.noCancelOnEscKey = value;
      }
      get _oldNoCancelOnOutsideClick() {
        return this.noCancelOnOutsideClick;
      }
      set _oldNoCancelOnOutsideClick(value) {
        this.noCancelOnOutsideClick = value;
      }
      get _oldRestoreFocusOnClose() {
        return this.restoreFocusOnClose;
      }
      set _oldRestoreFocusOnClose(value) {
        this.restoreFocusOnClose = value;
      }
      get _oldAllowClickThrough() {
        return this.allowClickThrough;
      }
      set _oldAllowClickThrough(value) {
        this.allowClickThrough = value;
      }
      get _oldAlwaysOnTop() {
        return this.alwaysOnTop;
      }
      set _oldAlwaysOnTop(value) {
        this.alwaysOnTop = value;
      }
      get _oldScrollAction() {
        return this.scrollAction;
      }
      set _oldScrollAction(value) {
        this.scrollAction = value;
      }
      get "scroll-action"() {
        return this.scrollAction;
      }
      set "scroll-action"(value) {
        this.scrollAction = value;
      }
      get isAttached() {
        return this._isAttached;
      }
      set isAttached(value) {
        this._isAttached = value;
        this.__updateScrollObservers(value, this._opened, this.scrollAction);
      }
      get scrollAction() {
        return this._scrollAction;
      }
      set scrollAction(value) {
        this._scrollAction = value;
        this.__updateScrollObservers(this._isAttached, this._opened, value);
      }
      get backdropElement() {
        return this._manager.backdropElement;
      }
      get _focusNode() {
        return this._focusedChild || this.querySelector("[autofocus]") || this;
      }
      get _focusableNodes() {
        return ArcFocusableHelper2.getTabbableNodes(this);
      }
      get onopenedchanged() {
        return this["_onopened-changed"];
      }
      set onopenedchanged(value) {
        this._registerCallback("opened-changed", value);
      }
      get onoverlaycanceled() {
        return this["_onoverlay-canceled"];
      }
      set onoverlaycanceled(value) {
        this._registerCallback("overlay-canceled", value);
      }
      get onoverlayopened() {
        return this["_onoverlay-opened"];
      }
      set onoverlayopened(value) {
        this._registerCallback("overlay-opened", value);
      }
      get onoverlayclosed() {
        return this["_onoverlay-closed"];
      }
      set onoverlayclosed(value) {
        this._registerCallback("overlay-closed", value);
      }
      get onopened() {
        return this["_onopened"];
      }
      set onopened(value) {
        this._registerCallback("opened", value);
      }
      get onclosed() {
        return this["_onclosed"];
      }
      set onclosed(value) {
        this._registerCallback("closed", value);
      }
      constructor() {
        super();
        this._opened = false;
        this._canceled = false;
        this.noAutoFocus = false;
        this.noCancelOnEscKey = false;
        this.noCancelOnOutsideClick = false;
        this.restoreFocusOnClose = false;
        this._manager = ArcOverlayManager2;
        this.__isAnimating = false;
        this.__shouldRemoveTabIndex = false;
        this.__firstFocusableNode = this.__lastFocusableNode = null;
        this.__rafs = {};
        this.__restoreFocusNode = null;
        this.__scrollTop = this.__scrollLeft = null;
        this.__rootNodes = null;
        this._onIronResize = this._onIronResize.bind(this);
        this.__onCaptureScroll = this.__onCaptureScroll.bind(this);
        this._boundSchedule = this._boundSchedule.bind(this);
      }
      connectedCallback() {
        super.connectedCallback();
        this.addEventListener("iron-resize", this._onIronResize);
        if (!this._elementReady) {
          this._elementReady = true;
          if (this.updateComplete) {
            this.updateComplete.then(() => {
              this._ensureSetup();
            });
          } else {
            this._ensureSetup();
          }
        }
        if (this.opened) {
          this._openedChanged(this.opened);
        }
        this._setupSlotListeners();
        this._ensureAria();
      }
      disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener("iron-resize", this._onIronResize);
        this._removeSlotListeners();
        Object.keys(this.__rafs).forEach((cb) => {
          if (this.__rafs[cb] !== null) {
            cancelAnimationFrame(this.__rafs[cb]);
          }
        });
        this.__rafs = {};
        this._manager.removeOverlay(this);
        if (this.__isAnimating) {
          if (this.opened) {
            this._finishRenderOpened();
          } else {
            this._applyFocus();
            this._finishRenderClosed();
          }
        }
      }
      _registerCallback(eventType, value) {
        const key = `_on${eventType}`;
        if (this[key]) {
          this.removeEventListener(eventType, this[key]);
        }
        if (typeof value !== "function") {
          this[key] = null;
          return;
        }
        this[key] = value;
        this.addEventListener(eventType, value);
      }
      _setupSlotListeners() {
        const observer = new MutationObserver((mutations) => {
          this._processMutations(mutations);
        });
        this._childrenObserver = observer;
        this._childrenObserver.observe(this, { childList: true });
      }
      _removeSlotListeners() {
        this._unlistenSlots(this.children);
        this._childrenObserver.disconnect();
        this._childrenObserver = null;
      }
      _processMutations(mutations) {
        if (mutations) {
          for (let i7 = 0; i7 < mutations.length; i7++) {
            const mutation = mutations[i7];
            if (mutation.addedNodes) {
              this._listenSlots(mutation.addedNodes);
            }
            if (mutation.removedNodes) {
              this._unlistenSlots(mutation.removedNodes);
            }
          }
          this._onNodesChange();
        }
      }
      _listenSlots(nodeList) {
        for (let i7 = 0; i7 < nodeList.length; i7++) {
          const n8 = nodeList[i7];
          if (n8.localName === "slot") {
            n8.addEventListener("slotchange", this._boundSchedule);
          }
        }
      }
      _unlistenSlots(nodeList) {
        for (let i7 = 0; i7 < nodeList.length; i7++) {
          const n8 = nodeList[i7];
          if (n8.localName === "slot") {
            n8.removeEventListener("slotchange", this._boundSchedule);
          }
        }
      }
      _boundSchedule() {
        setTimeout(() => {
          this._onNodesChange();
        });
      }
      toggle() {
        this._canceled = false;
        this.opened = !this.opened;
      }
      open() {
        this._canceled = false;
        this.opened = true;
      }
      close() {
        this._canceled = false;
        this.opened = false;
      }
      cancel(event) {
        const detail = {
          cancelable: true,
          bubbles: true,
          composed: true,
          detail: event
        };
        let cancelEvent = new Event("cancel", { cancelable: true, bubbles: true });
        this.dispatchEvent(cancelEvent);
        if (cancelEvent.defaultPrevented) {
          return;
        }
        cancelEvent = new CustomEvent("overlay-canceled", detail);
        this.dispatchEvent(cancelEvent);
        if (cancelEvent.defaultPrevented) {
          return;
        }
        cancelEvent = new CustomEvent("iron-overlay-canceled", detail);
        this.dispatchEvent(cancelEvent);
        if (cancelEvent.defaultPrevented) {
          return;
        }
        this._canceled = true;
        this.opened = false;
      }
      invalidateTabbables() {
        this.__firstFocusableNode = this.__lastFocusableNode = null;
      }
      _ensureSetup() {
        if (this._overlaySetup) {
          return;
        }
        this._overlaySetup = true;
        this.style.outline = "none";
        this.style.display = "none";
      }
      _openedChanged(opened) {
        this._ensureAria(opened);
        if (!this.isAttached) {
          return;
        }
        this.__isAnimating = true;
        this.__deraf("__openedChanged", this.__openedChanged);
      }
      _ensureAria(opened) {
        if (opened === void 0) {
          opened = this.opened;
        }
        if (opened) {
          this.removeAttribute("aria-hidden");
        } else {
          this.setAttribute("aria-hidden", "true");
        }
      }
      _canceledChanged() {
        this.closingReason = this.closingReason || {};
        this.closingReason.canceled = this.canceled;
      }
      _withBackdropChanged() {
        if (this.withBackdrop && !this.hasAttribute("tabindex")) {
          this.setAttribute("tabindex", "-1");
          this.__shouldRemoveTabIndex = true;
        } else if (this.__shouldRemoveTabIndex) {
          this.removeAttribute("tabindex");
          this.__shouldRemoveTabIndex = false;
        }
        if (this.opened && this.isAttached) {
          this._manager.trackBackdrop();
        }
      }
      _prepareRenderOpened() {
        this.__restoreFocusNode = this._manager.deepActiveElement;
        this._preparePositioning();
        this.refit();
        this._finishPositioning();
        if (this.noAutoFocus && document.activeElement === this._focusNode) {
          this._focusNode.blur();
          this.__restoreFocusNode.focus();
        }
      }
      _renderOpened() {
        this._finishRenderOpened();
      }
      _renderClosed() {
        this._finishRenderClosed();
      }
      _finishRenderOpened() {
        this.notifyResize();
        this.__isAnimating = false;
        const detail = {
          bubbles: true,
          composed: true
        };
        this.dispatchEvent(new CustomEvent("opened", detail));
        this.dispatchEvent(new CustomEvent("overlay-opened", detail));
        this.dispatchEvent(new CustomEvent("iron-overlay-opened", detail));
      }
      _finishRenderClosed() {
        this.style.display = "none";
        this.style.zIndex = "";
        this.notifyResize();
        this.__isAnimating = false;
        const detail = {
          bubbles: true,
          composed: true,
          detail: this.closingReason
        };
        this.dispatchEvent(new CustomEvent("closed", detail));
        this.dispatchEvent(new CustomEvent("overlay-closed", detail));
        this.dispatchEvent(new CustomEvent("iron-overlay-closed", detail));
      }
      _preparePositioning() {
        this.style.transition = this.style.webkitTransition = "none";
        this.style.transform = this.style.webkitTransform = "none";
        this.style.display = "";
      }
      _finishPositioning() {
        this.style.display = "none";
        let { scrollTop } = this;
        this.scrollTop = void 0;
        this.scrollTop = scrollTop;
        this.style.transition = this.style.webkitTransition = "";
        this.style.transform = this.style.webkitTransform = "";
        this.style.display = "";
        scrollTop = this.scrollTop;
        this.scrollTop = void 0;
        this.scrollTop = scrollTop;
      }
      _applyFocus() {
        if (this.opened) {
          if (!this.noAutoFocus) {
            this._focusNode.focus();
          }
        } else {
          if (this.restoreFocusOnClose && this.__restoreFocusNode) {
            const activeElement = this._manager.deepActiveElement;
            if (activeElement === document.body || this.shadowRoot.contains(activeElement) || this.contains(activeElement)) {
              this.__restoreFocusNode.focus();
            }
          }
          this.__restoreFocusNode = null;
          this._focusNode.blur();
          this._focusedChild = null;
        }
      }
      _onCaptureClick(event) {
        if (!this.noCancelOnOutsideClick) {
          this.cancel(event);
        }
      }
      _onCaptureFocus(event) {
        if (!this.withBackdrop) {
          return;
        }
        const cp = event.composedPath && event.composedPath();
        const path = cp || event.path;
        if (path.indexOf(this) === -1) {
          event.stopPropagation();
          this._applyFocus();
        } else {
          this._focusedChild = path[0];
        }
      }
      _onCaptureEsc(event) {
        if (!this.noCancelOnEscKey) {
          this.cancel(event);
        }
      }
      _onCaptureTab(event) {
        if (!this.withBackdrop) {
          return;
        }
        this.__ensureFirstLastFocusables();
        const shift = event.shiftKey;
        const nodeToCheck = shift ? this.__firstFocusableNode : this.__lastFocusableNode;
        const nodeToSet = shift ? this.__lastFocusableNode : this.__firstFocusableNode;
        let shouldWrap = false;
        if (nodeToCheck === nodeToSet) {
          shouldWrap = true;
        } else {
          const focusedNode = this._manager.deepActiveElement;
          shouldWrap = focusedNode === nodeToCheck || focusedNode === this;
        }
        if (shouldWrap) {
          event.preventDefault();
          this._focusedChild = nodeToSet;
          this._applyFocus();
        }
      }
      _onIronResize() {
        if (this.opened && !this.__isAnimating) {
          this.__deraf("refit", this.refit);
        }
      }
      _onNodesChange() {
        if (this.opened && !this.__isAnimating) {
          this.invalidateTabbables();
          this.notifyResize();
        }
      }
      __ensureFirstLastFocusables() {
        const focusableNodes = this._focusableNodes;
        this.__firstFocusableNode = focusableNodes[0];
        this.__lastFocusableNode = focusableNodes[focusableNodes.length - 1];
      }
      __openedChanged() {
        if (this.opened) {
          this._prepareRenderOpened();
          this._manager.addOverlay(this);
          this._applyFocus();
          this._renderOpened();
        } else {
          this._manager.removeOverlay(this);
          this._applyFocus();
          this._renderClosed();
        }
      }
      __deraf(jobName, callback) {
        const rafs = this.__rafs;
        if (rafs[jobName] !== null) {
          cancelAnimationFrame(rafs[jobName]);
        }
        rafs[jobName] = requestAnimationFrame(function nextAnimationFrame() {
          rafs[jobName] = null;
          callback.call(this);
        }.bind(this));
      }
      __updateScrollObservers(isAttached, opened, scrollAction) {
        if (!isAttached || !opened || !this.__isValidScrollAction(scrollAction)) {
          removeScrollLock(this);
          this.__removeScrollListeners();
        } else {
          if (scrollAction === "lock") {
            this.__saveScrollPosition();
            pushScrollLock(this);
          }
          this.__addScrollListeners();
        }
      }
      __addScrollListeners() {
        if (!this.__rootNodes) {
          this.__rootNodes = [];
          let node = this;
          while (node) {
            if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && node.host) {
              this.__rootNodes.push(node);
            }
            node = node.host || node.assignedSlot || node.parentNode;
          }
          this.__rootNodes.push(document);
        }
        this.__rootNodes.forEach((el) => {
          el.addEventListener("scroll", this.__onCaptureScroll, {
            capture: true,
            passive: true
          });
        });
      }
      __removeScrollListeners() {
        if (this.__rootNodes) {
          this.__rootNodes.forEach((el) => {
            el.removeEventListener("scroll", this.__onCaptureScroll, {
              capture: true,
              passive: true
            });
          });
        }
        if (!this.isAttached) {
          this.__rootNodes = null;
        }
      }
      __isValidScrollAction(scrollAction) {
        return scrollAction === "lock" || scrollAction === "refit" || scrollAction === "cancel";
      }
      __onCaptureScroll(event) {
        if (this.__isAnimating) {
          return;
        }
        const cp = event.composedPath && event.composedPath();
        const path = cp || event.path;
        if (path.indexOf(this) >= 0) {
          return;
        }
        switch (this.scrollAction) {
          case "lock":
            this.__restoreScrollPosition();
            break;
          case "refit":
            this.__deraf("refit", this.refit);
            break;
          case "cancel":
            this.cancel(event);
            break;
          default:
        }
      }
      __saveScrollPosition() {
        if (document.scrollingElement) {
          this.__scrollTop = document.scrollingElement.scrollTop;
          this.__scrollLeft = document.scrollingElement.scrollLeft;
        } else {
          this.__scrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);
          this.__scrollLeft = Math.max(document.documentElement.scrollLeft, document.body.scrollLeft);
        }
      }
      __restoreScrollPosition() {
        if (document.scrollingElement) {
          document.scrollingElement.scrollTop = this.__scrollTop;
          document.scrollingElement.scrollLeft = this.__scrollLeft;
        } else {
          document.documentElement.scrollTop = document.body.scrollTop = this.__scrollTop;
          document.documentElement.scrollLeft = document.body.scrollLeft = this.__scrollLeft;
        }
      }
    }
    return ArcOverlayMixinImpl;
  };
  var ArcOverlayMixin = dedupeMixin(mxFunction3);

  // ../sh-overlay/src/sh-overlay.js
  var SHOverlay = class SHOverlay2 extends ArcOverlayMixin(s4) {
    static get styles() {
      return [
        i`
        :host {
          background: transparent;
        }
      `
      ];
    }
    render() {
      return x` <slot></slot> `;
    }
    firstUpdated() {
      this.addEventListener("closed", (e8) => {
        e8.stopImmediatePropagation();
      });
      this.addEventListener("opened", (e8) => {
        e8.stopImmediatePropagation();
      });
    }
  };
  SHOverlay = __decorate([e4("sh-overlay")], SHOverlay);

  // ../utils/rem-to-pixel-convertor.js
  var convertToPixel2 = (remValue) => {
    const htmlFontSize = Number(getComputedStyle(document.documentElement)["font-size"].split("px")[0]);
    return remValue * htmlFontSize;
  };

  // ../utils/smoothscroll-polyfill-es-build.js
  (() => {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __markAsModule2 = (target) => __defProp2(target, "__esModule", { value: true });
    var __commonJS2 = (cb, mod) => function __require2() {
      return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __reExport2 = (target, module, desc) => {
      if (module && typeof module === "object" || typeof module === "function") {
        for (let key of __getOwnPropNames2(module))
          if (!__hasOwnProp2.call(target, key) && key !== "default")
            __defProp2(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc2(module, key)) || desc.enumerable });
      }
      return target;
    };
    var __toModule2 = (module) => {
      return __reExport2(__markAsModule2(__defProp2(module != null ? __create2(__getProtoOf2(module)) : {}, "default", module && module.__esModule && "default" in module ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
    };
    var require_smoothscroll = __commonJS2({
      "node_modules/smoothscroll-polyfill/dist/smoothscroll.js"(exports, module) {
        (function() {
          "use strict";
          function polyfill() {
            var w2 = window;
            var d3 = document;
            if ("scrollBehavior" in d3.documentElement.style && w2.__forceSmoothScrollPolyfill__ !== true) {
              return;
            }
            var Element2 = w2.HTMLElement || w2.Element;
            var SCROLL_TIME = 468;
            var original = {
              scroll: w2.scroll || w2.scrollTo,
              scrollBy: w2.scrollBy,
              elementScroll: Element2.prototype.scroll || scrollElement,
              scrollIntoView: Element2.prototype.scrollIntoView
            };
            var now = w2.performance && w2.performance.now ? w2.performance.now.bind(w2.performance) : Date.now;
            function isMicrosoftBrowser(userAgent) {
              var userAgentPatterns = ["MSIE ", "Trident/", "Edge/"];
              return new RegExp(userAgentPatterns.join("|")).test(userAgent);
            }
            var ROUNDING_TOLERANCE = isMicrosoftBrowser(w2.navigator.userAgent) ? 1 : 0;
            function scrollElement(x2, y2) {
              this.scrollLeft = x2;
              this.scrollTop = y2;
            }
            function ease(k2) {
              return 0.5 * (1 - Math.cos(Math.PI * k2));
            }
            function shouldBailOut(firstArg) {
              if (firstArg === null || typeof firstArg !== "object" || firstArg.behavior === void 0 || firstArg.behavior === "auto" || firstArg.behavior === "instant") {
                return true;
              }
              if (typeof firstArg === "object" && firstArg.behavior === "smooth") {
                return false;
              }
              throw new TypeError("behavior member of ScrollOptions " + firstArg.behavior + " is not a valid value for enumeration ScrollBehavior.");
            }
            function hasScrollableSpace(el, axis) {
              if (axis === "Y") {
                return el.clientHeight + ROUNDING_TOLERANCE < el.scrollHeight;
              }
              if (axis === "X") {
                return el.clientWidth + ROUNDING_TOLERANCE < el.scrollWidth;
              }
            }
            function canOverflow(el, axis) {
              var overflowValue = w2.getComputedStyle(el, null)["overflow" + axis];
              return overflowValue === "auto" || overflowValue === "scroll";
            }
            function isScrollable(el) {
              var isScrollableY = hasScrollableSpace(el, "Y") && canOverflow(el, "Y");
              var isScrollableX = hasScrollableSpace(el, "X") && canOverflow(el, "X");
              return isScrollableY || isScrollableX;
            }
            function findScrollableParent(el) {
              while (el !== d3.body && isScrollable(el) === false) {
                el = el.parentNode || el.host;
              }
              return el;
            }
            function step(context) {
              var time = now();
              var value;
              var currentX;
              var currentY;
              var elapsed = (time - context.startTime) / SCROLL_TIME;
              elapsed = elapsed > 1 ? 1 : elapsed;
              value = ease(elapsed);
              currentX = context.startX + (context.x - context.startX) * value;
              currentY = context.startY + (context.y - context.startY) * value;
              context.method.call(context.scrollable, currentX, currentY);
              if (currentX !== context.x || currentY !== context.y) {
                w2.requestAnimationFrame(step.bind(w2, context));
              }
            }
            function smoothScroll(el, x2, y2) {
              var scrollable;
              var startX;
              var startY;
              var method;
              var startTime = now();
              if (el === d3.body) {
                scrollable = w2;
                startX = w2.scrollX || w2.pageXOffset;
                startY = w2.scrollY || w2.pageYOffset;
                method = original.scroll;
              } else {
                scrollable = el;
                startX = el.scrollLeft;
                startY = el.scrollTop;
                method = scrollElement;
              }
              step({
                scrollable,
                method,
                startTime,
                startX,
                startY,
                x: x2,
                y: y2
              });
            }
            w2.scroll = w2.scrollTo = function() {
              if (arguments[0] === void 0) {
                return;
              }
              if (shouldBailOut(arguments[0]) === true) {
                original.scroll.call(w2, arguments[0].left !== void 0 ? arguments[0].left : typeof arguments[0] !== "object" ? arguments[0] : w2.scrollX || w2.pageXOffset, arguments[0].top !== void 0 ? arguments[0].top : arguments[1] !== void 0 ? arguments[1] : w2.scrollY || w2.pageYOffset);
                return;
              }
              smoothScroll.call(w2, d3.body, arguments[0].left !== void 0 ? ~~arguments[0].left : w2.scrollX || w2.pageXOffset, arguments[0].top !== void 0 ? ~~arguments[0].top : w2.scrollY || w2.pageYOffset);
            };
            w2.scrollBy = function() {
              if (arguments[0] === void 0) {
                return;
              }
              if (shouldBailOut(arguments[0])) {
                original.scrollBy.call(w2, arguments[0].left !== void 0 ? arguments[0].left : typeof arguments[0] !== "object" ? arguments[0] : 0, arguments[0].top !== void 0 ? arguments[0].top : arguments[1] !== void 0 ? arguments[1] : 0);
                return;
              }
              smoothScroll.call(w2, d3.body, ~~arguments[0].left + (w2.scrollX || w2.pageXOffset), ~~arguments[0].top + (w2.scrollY || w2.pageYOffset));
            };
            Element2.prototype.scroll = Element2.prototype.scrollTo = function() {
              if (arguments[0] === void 0) {
                return;
              }
              if (shouldBailOut(arguments[0]) === true) {
                if (typeof arguments[0] === "number" && arguments[1] === void 0) {
                  throw new SyntaxError("Value could not be converted");
                }
                original.elementScroll.call(this, arguments[0].left !== void 0 ? ~~arguments[0].left : typeof arguments[0] !== "object" ? ~~arguments[0] : this.scrollLeft, arguments[0].top !== void 0 ? ~~arguments[0].top : arguments[1] !== void 0 ? ~~arguments[1] : this.scrollTop);
                return;
              }
              var left = arguments[0].left;
              var top = arguments[0].top;
              smoothScroll.call(this, this, typeof left === "undefined" ? this.scrollLeft : ~~left, typeof top === "undefined" ? this.scrollTop : ~~top);
            };
            Element2.prototype.scrollBy = function() {
              if (arguments[0] === void 0) {
                return;
              }
              if (shouldBailOut(arguments[0]) === true) {
                original.elementScroll.call(this, arguments[0].left !== void 0 ? ~~arguments[0].left + this.scrollLeft : ~~arguments[0] + this.scrollLeft, arguments[0].top !== void 0 ? ~~arguments[0].top + this.scrollTop : ~~arguments[1] + this.scrollTop);
                return;
              }
              this.scroll({
                left: ~~arguments[0].left + this.scrollLeft,
                top: ~~arguments[0].top + this.scrollTop,
                behavior: arguments[0].behavior
              });
            };
            Element2.prototype.scrollIntoView = function() {
              if (shouldBailOut(arguments[0]) === true) {
                original.scrollIntoView.call(this, arguments[0] === void 0 ? true : arguments[0]);
                return;
              }
              var scrollableParent = findScrollableParent(this);
              var parentRects = scrollableParent.getBoundingClientRect();
              var clientRects = this.getBoundingClientRect();
              if (scrollableParent !== d3.body) {
                smoothScroll.call(this, scrollableParent, scrollableParent.scrollLeft + clientRects.left - parentRects.left, scrollableParent.scrollTop + clientRects.top - parentRects.top);
                if (w2.getComputedStyle(scrollableParent).position !== "fixed") {
                  w2.scrollBy({
                    left: parentRects.left,
                    top: parentRects.top,
                    behavior: "smooth"
                  });
                }
              } else {
                w2.scrollBy({
                  left: clientRects.left,
                  top: clientRects.top,
                  behavior: "smooth"
                });
              }
            };
          }
          if (typeof exports === "object" && typeof module !== "undefined") {
            module.exports = { polyfill };
          } else {
            polyfill();
          }
        })();
      }
    });
    var _smoothscroll = __toModule2(require_smoothscroll());
    window.____smoothscroll = _smoothscroll;
  })();

  // ../utils/smooth-scroll.js
  var SmoothScroll = class {
    static enable() {
      window.____smoothscroll.polyfill();
    }
  };

  // ../sh-scrollpicker/src/sh-scrollpicker.lit.scss.js
  var sh_scrollpicker_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-scrollpicker-main-container-height=12.5rem] - height of the main-container
   */
  --sh-scrollpicker-main-container-height: 12.5rem;
  /* 
   * @cssprop [--sh-scrollpicker-data-cell-height=2.5rem] - height of the data cell
   */
  --sh-scrollpicker-data-cell-height: 2.5rem;
  /* 
   * @cssprop [--sh-scrollpicker-data-cell-width=3.25rem] - width of the data cell
   */
  --sh-scrollpicker-data-cell-width: 3.25rem;
  /* 
   * @cssprop [--sh-scrollpicker-selector-top=5rem] - top of the selector
   */
  --sh-scrollpicker-selector-top: 5rem;
  /* 
   * @cssprop [--sh-scrollpicker-selector-height=var(--sh-scrollpicker-data-cell-height)] - height placement of the second selector
   */
  --sh-scrollpicker-selector-height: var(--sh-scrollpicker-data-cell-height);
  /* 
   * @cssprop [--sh-scrollpicker-current-scale=s] - the current scale of scrollpicker used to highlight the time/date selected
   */
  --sh-scrollpicker-current-scale: s;
}

:host * {
  box-sizing: border-box;
}

:host {
  --current-scale: var(--sh-scrollpicker-current-scale);
}

.main-container {
  height: var(--sh-scrollpicker-main-container-height);
  position: relative;
  transition: 0s all linear !important;
}

.scrollers-container {
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  height: 100%;
  transition: 0s all linear !important;
}

.scroll-container {
  height: 100%;
  overflow-y: auto;
  scroll-snap-type: y mandatory;
  transition: 0s all linear !important;
  scroll-behavior: smooth;
  scrollbar-width: none;
  width: fit-content;
}

.scroll-container::-webkit-scrollbar {
  display: none;
}

.row {
  height: var(--sh-scrollpicker-data-cell-height);
  width: var(--sh-scrollpicker-data-cell-width);
  font: var(--body-1);
  color: var(--text-secondary);
  display: flex;
  justify-content: center;
  align-items: center;
  scroll-snap-align: start;
  box-sizing: border-box;
  word-break: keep-all;
  transition: 0s all linear !important;
}

.selector {
  position: absolute;
  top: var(--sh-scrollpicker-selector-top);
  border-top-color: rgba(var(--ui-1), var(--opacity-6));
  border-bottom-color: rgba(var(--ui-1), var(--opacity-6));
  border-left-color: transparent;
  border-right-color: transparent;
  border-style: solid;
  border-width: 0.0625rem;
  height: var(--sh-scrollpicker-selector-height);
  width: 100%;
  box-sizing: border-box;
  pointer-events: none;
  transition: 0s all linear !important;
}

.row.selected {
  color: var(--text-primary);
}

.row.no-click {
  width: 100%;
  padding: 0;
}`;

  // ../sh-scrollpicker/src/sh-scrollpicker.js
  var SHScrollpicker = class extends s4 {
    static get properties() {
      return {
        items: { type: Array },
        visible: { type: Boolean, reflect: true },
        values: { type: Array, reflect: true },
        scrollerStyles: { type: Array, reflect: true },
        scroll: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sh_scrollpicker_lit_scss_default];
    }
    constructor() {
      super();
      this.items = [];
      this.scrollerStyles = [];
      this.values = [];
      this.rowClicklistener = {
        handleEvent(e8) {
          e8.target.previousElementSibling.previousElementSibling.scrollIntoView({
            behavior: "smooth"
          });
        },
        passive: true
      };
      this.values = [];
      this._previousValues = [];
    }
    connectedCallback() {
      super.connectedCallback();
      this.resizeObserver = new ResizeObserver(() => {
        this.requestUpdate();
      });
      this.resizeObserver.observe(this);
      SmoothScroll.enable();
    }
    render() {
      return x`<sh-drawer
      position="bottom"
      class="point5-vertical-padding initial-slide-on-connect"
      .visible="${this.visible}"
      @transitionend="${(e8) => {
        const drawer = e8.target;
        if (!drawer.visible) {
          this.visible = false;
        }
      }}"
      ><div class="main-container">
        <div class="selector"></div>
        <div class="scrollers-container">${this._getScrollerDOM()}</div>
      </div></sh-drawer
    >`;
    }
    updated(changedProperties) {
      var _a4;
      super.updated(changedProperties);
      dispatchAttributeChangedEvent(this, changedProperties, ["visible", "scroll"]);
      if (changedProperties.has("values") && this.values && ((_a4 = this.values) == null ? void 0 : _a4.length) > 0 && this.visible && JSON.stringify(this._previousValues) !== JSON.stringify(this.values)) {
        this._previousValues = this.values;
        dispatchCustomEvent(this, "values-changed");
      }
      if (changedProperties.has("scroll") && this.scroll) {
        this.scrollToValues();
      }
    }
    disconnectedCallback() {
      this.resizeObserver.disconnect();
      super.disconnectedCallback();
    }
    scrollToValues() {
      return __async(this, arguments, function* (values = this.values) {
        if (values.length !== this.items.length) {
          console.warn("Items and values array should have same length");
        }
        yield this.updateComplete;
        this._scrollAllScrollersToValues(values);
        this.scroll = false;
      });
    }
    _getScrollerDOM() {
      let DOM = [];
      if (this.items && this.items.length > 0) {
        for (let i7 = 0; i7 < this.items.length; i7++) {
          const item = this.items[i7];
          DOM.push(x`<div
          class="scroll-container"
          @scroll="${(e8) => {
            this._scrollerScrollTasks(e8);
          }}"
        >
          <div class="row no-click"></div>
          <div class="row no-click"></div>
          ${this._getScrollDOMArray(item, i7)}
          <div class="row no-click"></div>
          <div class="row no-click"></div>
        </div>`);
        }
        return DOM;
      }
    }
    _scrollerScrollTasks(e8) {
      clearTimeout(e8.target._scrollCorrectTimeout);
      const scroller = e8.target;
      scroller.setAttribute("is-scrolling", "");
      scroller._scrollCorrectTimeout = setTimeout(this._scrollerScrollEndTasks.bind(this), 300, scroller);
    }
    _setScrollerSelectedValue(scroller) {
      const ROW_HEIGHT_IN_REM = this._getScrollerRowHeight();
      const scrollerIndex = Array.from(scroller.parentNode.children).indexOf(scroller);
      const scrollTop = scroller.scrollTop;
      const rowHeightInPx = convertToPixel2(ROW_HEIGHT_IN_REM);
      scroller._selectedValue = this.items[scrollerIndex][Math.round(scrollTop / rowHeightInPx)];
    }
    _updateValues() {
      const scrollers = Array.from(this.shadowRoot.querySelector(".scrollers-container").children);
      const newValues = [];
      for (let i7 = 0; i7 < scrollers.length; i7++) {
        const scroller = scrollers[i7];
        this._setScrollerSelectedValue(scroller);
        newValues[i7] = scroller._selectedValue;
      }
      const newValuesStr = newValues.join("");
      const valuesStr = this.values.join("");
      if (newValuesStr !== valuesStr) {
        this.values = newValues;
      }
    }
    _scrollerScrollEndTasks(scroller) {
      const ROW_HEIGHT_IN_REM = this._getScrollerRowHeight();
      const scrollTop = scroller.scrollTop;
      const rowHeightInPx = convertToPixel2(ROW_HEIGHT_IN_REM);
      if (this._scrollerHasNotStoppedAtMiddle(scrollTop, rowHeightInPx)) {
        this._nudgeScroller(scroller, scrollTop);
      } else {
        scroller.removeAttribute("is-scrolling");
        scroller.blur();
        if (this._hasAllScrollersStopped()) {
          this._updateValues();
        }
      }
    }
    _nudgeScroller(scroller, scrollTop) {
      scroller.scrollTop = scrollTop;
    }
    _scrollerHasNotStoppedAtMiddle(scrollTop, rowHeight) {
      return scrollTop % rowHeight !== 0;
    }
    _hasAllScrollersStopped() {
      const scrollers = Array.from(this.shadowRoot.querySelector(".scrollers-container").children);
      let scrollingScrollerCount = 0;
      for (let i7 = 0; i7 < scrollers.length; i7++) {
        const scroller = scrollers[i7];
        if (scroller.hasAttribute("is-scrolling")) {
          ++scrollingScrollerCount;
          break;
        }
      }
      return scrollingScrollerCount === 0;
    }
    _scrollAllScrollersToValues(values) {
      const scrollers = Array.from(this.shadowRoot.querySelector(".scrollers-container").children);
      let staticScrollerCount = 0;
      for (let i7 = 0; i7 < values.length; i7++) {
        const ROW_HEIGHT_IN_REM = this._getScrollerRowHeight();
        const value = values[i7];
        const valueIndex = this._getValueIndexForColumn(i7, value);
        const rowHeightInPx = convertToPixel2(ROW_HEIGHT_IN_REM);
        const selectedValueScrollTop = valueIndex * rowHeightInPx;
        const scroller = scrollers[i7];
        if (scroller.scrollTop !== selectedValueScrollTop) {
          this._setScrollerScrollTop(selectedValueScrollTop, scroller);
        } else {
          ++staticScrollerCount;
        }
      }
      if (staticScrollerCount === scrollers.length) {
        this._updateValues();
      }
    }
    _getValueIndexForColumn(scrollerIndex, selectedValue) {
      return this.items[scrollerIndex].indexOf(selectedValue);
    }
    _setScrollerScrollTop(scrollTop, scroller) {
      scroller.scrollTop = scrollTop;
    }
    _getScrollerRowHeight() {
      const scrollpickerScale = getComputedStyle(this).getPropertyValue("--current-scale").trim();
      if (scrollpickerScale === "s") {
        return 2.5;
      } else if (scrollpickerScale === "m") {
        return 3;
      } else if (scrollpickerScale === "l") {
        return 3.5;
      } else {
        return 4.5;
      }
    }
    _getScrollDOMArray(item, scrollerIndex) {
      const itemLength = item.length;
      const itemDOM = [];
      for (let i7 = 0; i7 < itemLength; i7++) {
        itemDOM.push(x`<div
          class="row
            ${this.values[scrollerIndex] && this.values[scrollerIndex] === item[i7] ? " selected" : ""}"
          @click="${this.rowClicklistener}"
          data-value="${item[i7]}"
          style="${this.scrollerStyles[scrollerIndex] ? this.scrollerStyles[scrollerIndex] : ""}"
        >
          ${item[i7]}
        </div>`);
      }
      return itemDOM;
    }
  };
  customElements.define("sh-scrollpicker", SHScrollpicker);

  // ../utils/date-format-helper.js
  var DateFormatHelper = class {
    static getFormattedDate(rawDate, format, separator, locale) {
      let actualFormat = this.insertSeperator(separator, format);
      if (format.includes("MMM")) {
        actualFormat = actualFormat.replace("MMM", this._getFormattedPart(rawDate, "MMM", locale));
      } else if (format.includes("MM")) {
        actualFormat = actualFormat.replace("MM", this._getFormattedPart(rawDate, "MM", "en"));
      } else if (format.includes("M")) {
        actualFormat = actualFormat.replace("M", this._getFormattedPart(rawDate, "M", "en"));
      }
      if (format.includes("DD")) {
        actualFormat = actualFormat.replace("DD", this._getFormattedPart(rawDate, "DD", "en"));
      } else if (format.includes("D")) {
        actualFormat = actualFormat.replace("D", this._getFormattedPart(rawDate, "D", "en"));
      }
      if (format.includes("YYYY")) {
        actualFormat = actualFormat.replace("YYYY", this._getFormattedPart(rawDate, "YYYY", "en"));
      } else if (format.includes("YY")) {
        actualFormat = actualFormat.replace("YY", this._getFormattedPart(rawDate, "YY", "en"));
      }
      return actualFormat;
    }
    static isValidDate(dateString, format, separator, locale, todaysDate) {
      let isValid = false;
      const actualFormat = this.insertSeperator(separator, format);
      const sameSeperatorCount = this._hastheSameSeperatorCount(dateString, actualFormat, separator);
      if (sameSeperatorCount) {
        const sameNoOfParts = this._hasSameNoOfParts(dateString, actualFormat, separator);
        if (sameNoOfParts) {
          const partsInfo = this._validateAndGetParts(dateString, actualFormat, separator, locale);
          const hasInvalidParts = partsInfo.find((el) => !el.isValid);
          if (!hasInvalidParts) {
            const extractedDate = this._extractDateFromParts(partsInfo, todaysDate);
            const { year, month } = this._extractActualParts(partsInfo, todaysDate);
            isValid = extractedDate.getMonth() === month && extractedDate.getFullYear() === year;
          }
        }
      }
      return isValid;
    }
    static insertSeperator(separator, format) {
      let uniqueCharacter = format[0];
      for (let i7 = 0; i7 < format.length; ) {
        if (uniqueCharacter !== format[i7] && i7 !== format.length) {
          let arrStr = format.split("");
          arrStr = [...arrStr.slice(0, i7), separator, ...arrStr.slice(i7)];
          format = arrStr.join("");
          i7 += separator.length;
          uniqueCharacter = format[i7];
        } else {
          ++i7;
        }
      }
      return format;
    }
    static isValueValid(value, range, separator, format, futureDateDisable, pastDateDisable, todaysDate, min, max, locale) {
      let isValid = false;
      let actualFormat = this.insertSeperator(separator, format);
      let actualFromDate, actualToDate, actualSingleDate;
      if (range) {
        const [fromPart, toPart] = this.extractFromToParts(value, separator, actualFormat);
        const fromPartIsValid = Boolean(fromPart) && this.isValidDate(fromPart, format, separator, locale, todaysDate);
        const toPartIsValid = Boolean(toPart) && this.isValidDate(toPart, format, separator, locale, todaysDate);
        if (fromPartIsValid && toPartIsValid) {
          isValid = true;
          actualFromDate = this.parseDate(fromPart, actualFormat, separator, locale, todaysDate);
          actualToDate = this.parseDate(toPart, actualFormat, separator, locale, todaysDate);
          if (actualFromDate.getTime() > actualToDate.getTime()) {
            isValid = false;
          }
        }
      } else {
        const valueIsValid = this.isValidDate(value, format, separator, locale, todaysDate);
        if (valueIsValid) {
          actualSingleDate = this.parseDate(value, actualFormat, separator, locale, todaysDate);
          isValid = true;
        }
      }
      if (range && isValid) {
        const fromDateIsDisabled = this._isDisabledDate(actualFromDate, todaysDate, futureDateDisable, pastDateDisable, min, max);
        const toDateIsDisabled = this._isDisabledDate(actualToDate, todaysDate, futureDateDisable, pastDateDisable, min, max);
        if (fromDateIsDisabled || toDateIsDisabled) {
          isValid = false;
        }
      } else if (!range && isValid) {
        const validDateIsDisabled = this._isDisabledDate(actualSingleDate, todaysDate, futureDateDisable, pastDateDisable, min, max);
        if (validDateIsDisabled) {
          isValid = false;
        }
      }
      return isValid;
    }
    static parseDate(dateString, actualFormat, separator, locale, todaysDate) {
      const partsInfo = this._validateAndGetParts(dateString, actualFormat, separator, locale);
      return this._extractDateFromParts(partsInfo, todaysDate);
    }
    static parseRangeDates(dateString, actualFormat, separator, locale, todaysDate) {
      const [fromPart, toPart] = this.extractFromToParts(dateString, separator, actualFormat);
      const fromDate = this.parseDate(fromPart, actualFormat, separator, locale, todaysDate);
      const toDate = this.parseDate(toPart, actualFormat, separator, locale, todaysDate);
      return [fromDate, toDate];
    }
    static extractFromToParts(value, separator, actualFormat) {
      let fromPart = "", toPart = "";
      if (separator === "-") {
        let separatorIndex = -1;
        let occurenceCounter = 0;
        const numOfDashesInFormat = this._getOccurenceCount(actualFormat, "-");
        const separatingDashOccurencePosition = numOfDashesInFormat + 1;
        for (let i7 = 0; i7 < value.length; i7++) {
          if (value[i7] === "-") {
            ++occurenceCounter;
          }
          if (occurenceCounter === separatingDashOccurencePosition) {
            separatorIndex = i7;
            break;
          }
        }
        if (separatorIndex !== -1) {
          fromPart = value.substring(0, separatorIndex);
          toPart = value.substring(separatorIndex + 1);
        }
      } else {
        const splitDateInput = value.split("-");
        fromPart = splitDateInput[0];
        toPart = splitDateInput[1];
      }
      return [fromPart, toPart];
    }
    static getMonthIndex(monthName, locale) {
      const monthNameDict = new Array(12).fill("_").map((_2, _index) => this.getShortMonthName(_index, locale));
      return monthNameDict.indexOf(monthName);
    }
    static getShortMonthName(monthNum, locale = "en") {
      locale = locale ? locale : "en";
      let monthName = this._getMonthDateDict()[monthNum].toLocaleString(locale, { month: "short" });
      monthName = monthName[0].toLocaleUpperCase(locale) + monthName.slice(1);
      return monthName;
    }
    static getWeekDays(index, locale = "en") {
      locale = locale ? locale : "en";
      let variation = locale === "en" || locale === "de" || locale === "es" || locale === "fr" || locale === "ru-ru" || locale === "it-it" || locale === "pt" || locale === "pt-br" ? "short" : "narrow";
      let weekDayDates = new Array(7).fill("_");
      weekDayDates = weekDayDates.map((_2, _index) => new Date(2022, 4, _index + 1, 0, 0, 0, 0));
      let weekDay = weekDayDates[index].toLocaleString(locale, { weekday: variation });
      weekDay = weekDay[0].toLocaleUpperCase(locale) + weekDay.slice(1);
      return weekDay;
    }
    static _getFormattedPart(date, formatPart, locale) {
      let options;
      switch (formatPart) {
        case "D":
          options = { day: "numeric" };
          break;
        case "DD":
          options = { day: "2-digit" };
          break;
        case "M":
          options = { month: "numeric" };
          break;
        case "MM":
          options = { month: "2-digit" };
          break;
        case "MMM":
          options = { month: "short" };
          break;
        case "YYYY":
          options = { year: "numeric" };
          break;
        case "YY":
          options = { year: "2-digit" };
          break;
      }
      let localeFormattedString = date.toLocaleString(locale, options);
      if (formatPart === "MMM") {
        localeFormattedString = localeFormattedString[0].toLocaleUpperCase(locale) + localeFormattedString.slice(1);
      }
      return localeFormattedString;
    }
    static _getOccurenceCount(testString, separator) {
      let count = 0;
      let replaceCharacter = "*";
      if (separator.includes("*")) {
        replaceCharacter = "$";
      }
      const str = testString.replaceAll(separator, replaceCharacter);
      for (let i7 = 0; i7 < str.length; i7++) {
        if (str[i7] === replaceCharacter) {
          ++count;
        }
      }
      return count;
    }
    static _hastheSameSeperatorCount(dateString, correctFormat, separator) {
      let formatCount = this._getOccurenceCount(correctFormat, separator);
      let dateStringCount = this._getOccurenceCount(dateString, separator);
      return formatCount === dateStringCount;
    }
    static _hasSameNoOfParts(dateString, actualFormat, separator) {
      const dateStrArr = dateString.split(separator);
      const actualFormatArr = actualFormat.split(separator);
      return dateStrArr.length === actualFormatArr.length;
    }
    static _extractVariousData(dateString, actualFormat, separator) {
      const dateStrArr = dateString.split(separator);
      const actualFormatArr = actualFormat.split(separator);
      let extractedData = {};
      actualFormatArr.forEach((el, ind) => {
        extractedData[el] = dateStrArr[ind];
      });
      return extractedData;
    }
    static _isOfCorrectLengthAndNumber(numberStr, length) {
      return numberStr.length === length && Number.isInteger(Number(numberStr));
    }
    static _validateAndGetPart(formatPart, actualValue, locale) {
      let isValid = false;
      let value;
      let part;
      switch (formatPart) {
        case "M":
        case "D":
        case "YY":
        case "YYYY":
        case "MM":
        case "DD": {
          let isCorrectFormat = formatPart === "M" || formatPart === "D" ? Number.isInteger(Number(actualValue)) : this._isOfCorrectLengthAndNumber(actualValue, formatPart.length);
          if (isCorrectFormat) {
            value = Number(actualValue);
            switch (formatPart[0]) {
              case "D": {
                isValid = value >= 1 && value <= 31;
                part = "date";
                break;
              }
              case "M": {
                isValid = value >= 1 && value <= 12;
                value -= 1;
                part = "month";
                break;
              }
              case "Y": {
                if (formatPart === "YYYY") {
                  isValid = value >= 1e3 && value <= 9999;
                } else if (formatPart === "YY") {
                  isValid = true;
                  const todaysYear = new Date().getFullYear();
                  const currentCenturyPrefix = `20`;
                  const previousCenturyPrefix = `19`;
                  const previousCenturyYear = Number(`${previousCenturyPrefix}${actualValue}`);
                  const currentCenturyYear = Number(`${currentCenturyPrefix}${actualValue}`);
                  value = Math.min(Math.abs(currentCenturyYear - todaysYear), Math.abs(previousCenturyYear - todaysYear)) === Math.abs(currentCenturyYear - todaysYear) ? currentCenturyYear : previousCenturyYear;
                }
                part = "year";
                break;
              }
            }
          }
          break;
        }
        case "MMM": {
          const longMonthNames = this._getMonthDateDict().map((date) => date.toLocaleString(locale, { month: "long" }).toLocaleLowerCase(locale));
          const shortMonthNames = this._getMonthDateDict().map((date) => date.toLocaleString(locale, { month: "short" }).toLocaleLowerCase(locale));
          const filteredLongMonths = longMonthNames.map((el, index) => {
            if (Boolean(actualValue) && el.startsWith(actualValue.toLocaleLowerCase(locale))) {
              return { monthName: el, monthIndex: index };
            }
          }).filter((el) => el !== void 0);
          const filteredShortMonths = shortMonthNames.map((el, index) => {
            if (Boolean(actualValue) && el.startsWith(actualValue.toLocaleLowerCase(locale))) {
              return { monthName: el, monthIndex: index };
            }
          }).filter((el) => el !== void 0);
          isValid = filteredLongMonths.length > 0 || filteredShortMonths.length > 0;
          if (isValid) {
            value = filteredLongMonths.length > 0 ? filteredLongMonths[0].monthIndex : filteredShortMonths[0].monthIndex;
            part = "month";
          }
        }
      }
      return { isValid, value, part };
    }
    static _validateAndGetParts(dateString, actualFormat, separator, locale) {
      const extractedParts = Object.entries(this._extractVariousData(dateString, actualFormat, separator));
      const validationDataInfo = extractedParts.map((part) => {
        const key = part[0];
        const value = part[1];
        return this._validateAndGetPart(key, value, locale);
      });
      return validationDataInfo;
    }
    static _isDisabledDate(currentDate, todaysDate, futureDateDisable, pastDateDisable, min, max) {
      const currentDateTime = currentDate.getTime();
      const todaysDateTime = todaysDate.getTime();
      let isDisabled2 = Boolean(futureDateDisable) && currentDateTime > todaysDateTime || Boolean(pastDateDisable) && currentDateTime < todaysDateTime;
      if (!isDisabled2) {
        if (this.isValidDate(min, "YYYYMMDD", "-", "en", todaysDate)) {
          const minYear = Number(min.split("-")[0]);
          const minMonthIndex = Number(min.split("-")[1] - 1);
          const minDayOfMonth = Number(min.split("-")[2]);
          const minDate = new Date(minYear, minMonthIndex, minDayOfMonth, 0, 0, 0, 0);
          if (currentDate.getTime() < minDate.getTime()) {
            isDisabled2 = true;
          }
        }
        if (this.isValidDate(max, "YYYYMMDD", "-", "en", todaysDate)) {
          const maxYear = Number(max.split("-")[0]);
          const maxMonthIndex = Number(max.split("-")[1] - 1);
          const maxDayOfMonth = Number(max.split("-")[2]);
          const maxDate = new Date(maxYear, maxMonthIndex, maxDayOfMonth, 0, 0, 0, 0);
          if (currentDate.getTime() > maxDate.getTime()) {
            isDisabled2 = true;
          }
        }
      }
      return isDisabled2;
    }
    static _extractDateFromParts(partsInfo, todaysDate) {
      const { year, month, date } = this._extractActualParts(partsInfo, todaysDate);
      return new Date(year, month, date, 0, 0, 0, 0);
    }
    static _extractActualParts(partsInfo, todaysDate) {
      const dateInfo = partsInfo.find((el) => el.part === "date");
      const monthInfo = partsInfo.find((el) => el.part === "month");
      const yearInfo = partsInfo.find((el) => el.part === "year");
      const date = dateInfo ? dateInfo.value : todaysDate.getDate();
      const month = monthInfo ? monthInfo.value : todaysDate.getMonth();
      const year = yearInfo ? yearInfo.value : todaysDate.getFullYear();
      return { year, month, date };
    }
    static _getMonthDateDict() {
      let monthDateDict = new Array(12).fill("_");
      monthDateDict = monthDateDict.map((_2, _index) => new Date(2022, _index, 1, 0, 0, 0, 0));
      return monthDateDict;
    }
  };

  // ../utils/tablet-breakpoint.js
  var TABLET_BREAKPOINT = 768;

  // ../sh-datepicker/src/sh-datepicker.lit.scss.js
  var sh_datepicker_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height=2.5rem] - height of the overlay container
   */
  --sh-datepicker-overlay-container-height: 2.5rem;
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height-condensed=2rem] - height of the overlay container in condensed view
   */
  --sh-datepicker-overlay-container-height-condensed: 2rem;
  /* 
   * @cssprop [--sh-datepicker-months-grid-gap=0.5rem] - gap of months grid
   */
  --sh-datepicker-months-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-width=18rem] - gap of months grid
   */
  --sh-datepicker-date-panel-width: 18rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding=1rem 0.5rem 0.5rem 0.5rem] - gap of months grid
   */
  --sh-datepicker-date-panel-padding: 1rem 0.5rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-height=21rem] - gap of months grid
   */
  --sh-datepicker-date-panel-height: 21rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height=2rem] - height of the header area
   */
  --sh-datepicker-header-area-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-width=9.375rem] - width of the month and year display
   */
  --sh-datepicker-month-and-year-display-width: 9.375rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-line-height=2rem] - line-height of the month and year display
   */
  --sh-datepicker-month-and-year-display-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-border-radius=1rem] - border-radius of the month and year display
   */
  --sh-datepicker-month-and-year-display-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows=2rem] - grid template rows of the date grid
   */
  --sh-datepicker-date-grid-template-rows: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns=2rem] - grid template columns of the date grid
   */
  --sh-datepicker-date-grid-template-columns: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-gap=0.5rem] - grid gap of the date grid
   */
  --sh-datepicker-date-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-top=0.5rem] - margin top of  date grid
   */
  --sh-datepicker-date-grid-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-week-day-name-line-height=2rem] - line height of week day name
   */
  --sh-datepicker-week-day-name-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-line-height=2rem] - line height of date
   */
  --sh-datepicker-date-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-border-radius=1rem] - border-radius of date
   */
  --sh-datepicker-date-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-height=2rem] - border-radius of date
   */
  --sh-datepicker-date-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-width=2rem] - border-radius of date
   */
  --sh-datepicker-date-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-width=2rem] - width of dummy icon
   */
  --sh-datepicker-icon-dummy-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-height=2rem] - height of dummy icon
   */
  --sh-datepicker-icon-dummy-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding-year-and-month-selector=1rem 0.5rem 1.75rem] - date panel padding of year and month selector
   */
  --sh-datepicker-date-panel-padding-year-and-month-selector: 1rem 0.5rem 1.75rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height-year-and-month-selector=1.5rem] - height of the header area of year and month selector
   */
  --sh-datepicker-header-area-height-year-and-month-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-line-height-year-selector=1.5rem] - line height of the year selector
   */
  --sh-datepicker-line-height-year-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows-year-and-month-selector=3rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns-year-and-month-selector=4rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 4rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-column-gap-year-and-month-selector=1rem] - grid gap of year selector
   */
  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-row-gap-year-and-month-selector=1rem] - grid row gap of year selector
   */
  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-year-and-month-selector=1.75rem 1.5rem 0rem 1.5rem] - date grid margin of year selector
   */
  --sh-datepicker-date-grid-margin-year-and-month-selector: 1.75rem 1.5rem 0rem 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-width-year-and-month-selector=14rem] - width of date grid of year selector
   */
  --sh-datepicker-date-grid-width-year-and-month-selector: 14rem;
  /* 
   * @cssprop [--sh-datepicker-year-height-year-selector=2rem] - height of year field in year selector
   */
  --sh-datepicker-year-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-line-height-year-selector=2rem] - line height of year field in year selector
   */
  --sh-datepicker-year-line-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-border-radius-year-selector=1rem] - border radius of year field in year selector
   */
  --sh-datepicker-year-border-radius-year-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-width=4.5rem] - width of the year display  in month selector
   */
  --sh-datepicker-month-and-year-width: 4.5rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-height=2rem] - hieght of the year display  in month selector
   */
  --sh-datepicker-month-and-year-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-height=2rem] - hieght of the year month  in month selector
   */
  --sh-datepicker-month-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-line-height=2rem] - line hieght of the year month  in month selector
   */
  --sh-datepicker-month-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-border-radius=1rem] - border radius of  month  in month selector
   */
  --sh-datepicker-month-border-radius: 1rem;
}

:host {
  display: block;
  width: 100%;
  position: relative;
}

/**
      Correcting the icon opacity to the
      idle state color of button icon so
      that the calendar icon is not so light
      when disabled property is applied to 
      datepicker
       */
:host([disabled]) sh-icon[icon=calendar] {
  color: rgba(var(--ui-1), var(--opacity-3));
}

.overlay-container {
  position: absolute;
  height: var(--sh-datepicker-overlay-container-height);
  top: 0px;
  left: 0px;
}

:host([condensed]) .overlay-container {
  height: var(--sh-datepicker-overlay-container-height-condensed);
}

.input {
  outline: none;
}`;

  // ../sh-datepicker/src/sh-private-calender-view.lit.scss.js
  var sh_private_calender_view_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height=2.5rem] - height of the overlay container
   */
  --sh-datepicker-overlay-container-height: 2.5rem;
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height-condensed=2rem] - height of the overlay container in condensed view
   */
  --sh-datepicker-overlay-container-height-condensed: 2rem;
  /* 
   * @cssprop [--sh-datepicker-months-grid-gap=0.5rem] - gap of months grid
   */
  --sh-datepicker-months-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-width=18rem] - gap of months grid
   */
  --sh-datepicker-date-panel-width: 18rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding=1rem 0.5rem 0.5rem 0.5rem] - gap of months grid
   */
  --sh-datepicker-date-panel-padding: 1rem 0.5rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-height=21rem] - gap of months grid
   */
  --sh-datepicker-date-panel-height: 21rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height=2rem] - height of the header area
   */
  --sh-datepicker-header-area-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-width=9.375rem] - width of the month and year display
   */
  --sh-datepicker-month-and-year-display-width: 9.375rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-line-height=2rem] - line-height of the month and year display
   */
  --sh-datepicker-month-and-year-display-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-border-radius=1rem] - border-radius of the month and year display
   */
  --sh-datepicker-month-and-year-display-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows=2rem] - grid template rows of the date grid
   */
  --sh-datepicker-date-grid-template-rows: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns=2rem] - grid template columns of the date grid
   */
  --sh-datepicker-date-grid-template-columns: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-gap=0.5rem] - grid gap of the date grid
   */
  --sh-datepicker-date-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-top=0.5rem] - margin top of  date grid
   */
  --sh-datepicker-date-grid-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-week-day-name-line-height=2rem] - line height of week day name
   */
  --sh-datepicker-week-day-name-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-line-height=2rem] - line height of date
   */
  --sh-datepicker-date-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-border-radius=1rem] - border-radius of date
   */
  --sh-datepicker-date-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-height=2rem] - border-radius of date
   */
  --sh-datepicker-date-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-width=2rem] - border-radius of date
   */
  --sh-datepicker-date-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-width=2rem] - width of dummy icon
   */
  --sh-datepicker-icon-dummy-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-height=2rem] - height of dummy icon
   */
  --sh-datepicker-icon-dummy-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding-year-and-month-selector=1rem 0.5rem 1.75rem] - date panel padding of year and month selector
   */
  --sh-datepicker-date-panel-padding-year-and-month-selector: 1rem 0.5rem 1.75rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height-year-and-month-selector=1.5rem] - height of the header area of year and month selector
   */
  --sh-datepicker-header-area-height-year-and-month-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-line-height-year-selector=1.5rem] - line height of the year selector
   */
  --sh-datepicker-line-height-year-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows-year-and-month-selector=3rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns-year-and-month-selector=4rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 4rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-column-gap-year-and-month-selector=1rem] - grid gap of year selector
   */
  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-row-gap-year-and-month-selector=1rem] - grid row gap of year selector
   */
  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-year-and-month-selector=1.75rem 1.5rem 0rem 1.5rem] - date grid margin of year selector
   */
  --sh-datepicker-date-grid-margin-year-and-month-selector: 1.75rem 1.5rem 0rem 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-width-year-and-month-selector=14rem] - width of date grid of year selector
   */
  --sh-datepicker-date-grid-width-year-and-month-selector: 14rem;
  /* 
   * @cssprop [--sh-datepicker-year-height-year-selector=2rem] - height of year field in year selector
   */
  --sh-datepicker-year-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-line-height-year-selector=2rem] - line height of year field in year selector
   */
  --sh-datepicker-year-line-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-border-radius-year-selector=1rem] - border radius of year field in year selector
   */
  --sh-datepicker-year-border-radius-year-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-width=4.5rem] - width of the year display  in month selector
   */
  --sh-datepicker-month-and-year-width: 4.5rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-height=2rem] - hieght of the year display  in month selector
   */
  --sh-datepicker-month-and-year-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-height=2rem] - hieght of the year month  in month selector
   */
  --sh-datepicker-month-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-line-height=2rem] - line hieght of the year month  in month selector
   */
  --sh-datepicker-month-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-border-radius=1rem] - border radius of  month  in month selector
   */
  --sh-datepicker-month-border-radius: 1rem;
}

:host {
  display: table;
  animation: fade-in var(--transition-time) ease-in-out;
}

@keyframes fade-in {
  0% {
    opacity: 0;
    visibility: hidden;
  }
  100% {
    opacity: 1;
    visibility: visible;
  }
}
:host([close]) {
  animation: fade-out var(--transition-time) ease-in-out;
}

@keyframes fade-out {
  0% {
    opacity: 1;
    visibility: visible;
  }
  100% {
    opacity: 0;
    visibility: hidden;
  }
}`;

  // ../../../../node_modules/lit-html/directives/class-map.js
  var o7 = e7(class extends i5 {
    constructor(t5) {
      var i7;
      if (super(t5), t5.type !== t4.ATTRIBUTE || t5.name !== "class" || ((i7 = t5.strings) === null || i7 === void 0 ? void 0 : i7.length) > 2)
        throw Error("`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.");
    }
    render(t5) {
      return " " + Object.keys(t5).filter((i7) => t5[i7]).join(" ") + " ";
    }
    update(i7, [s5]) {
      var r4, o8;
      if (this.it === void 0) {
        this.it = new Set(), i7.strings !== void 0 && (this.nt = new Set(i7.strings.join(" ").split(/\s/).filter((t5) => t5 !== "")));
        for (const t5 in s5)
          s5[t5] && !((r4 = this.nt) === null || r4 === void 0 ? void 0 : r4.has(t5)) && this.it.add(t5);
        return this.render(s5);
      }
      const e8 = i7.element.classList;
      this.it.forEach((t5) => {
        t5 in s5 || (e8.remove(t5), this.it.delete(t5));
      });
      for (const t5 in s5) {
        const i8 = !!s5[t5];
        i8 === this.it.has(t5) || ((o8 = this.nt) === null || o8 === void 0 ? void 0 : o8.has(t5)) || (i8 ? (e8.add(t5), this.it.add(t5)) : (e8.remove(t5), this.it.delete(t5)));
      }
      return T;
    }
  });

  // ../utils/calendar-data-generator.js
  var DateData = class {
    constructor() {
      this.date = null;
      this.isOtherMonthDay = false;
      this.isSelected = false;
      this.isToday = false;
      this.isWithinRange = false;
      this.isDisabled = false;
    }
  };
  function generateCalendarData(month, year, todaysDate, selectedDates = [], futureDateDisable = false, pastDateDisable = false, minDate = null, maxDate = null, startDayAddendum = 0) {
    const calendarData = [];
    const dayOneDay = new Date(year, month, 1, 0, 0, 0, 0).getDay();
    const startDayLogic = dayOneDay === 0 && startDayAddendum === 1 ? 1 - 6 : 1 - dayOneDay + startDayAddendum;
    const currentDate = new Date(year, month, startDayLogic, 0, 0, 0, 0);
    for (let i7 = 0; i7 < 42; i7++) {
      const dateData = new DateData();
      dateData.date = new Date(JSON.parse(JSON.stringify(currentDate)));
      dateData.isOtherMonthDay = dateData.date.getMonth() !== month;
      dateData.isDisabled = _isDisabledDate(currentDate, todaysDate, futureDateDisable, pastDateDisable, minDate, maxDate);
      if (!dateData.isOtherMonthDay && !dateData.isDisabled) {
        dateData.isSelected = selectedDates.length === 2 ? dateData.date.getTime() === selectedDates[0].getTime() || dateData.date.getTime() === selectedDates[1].getTime() : selectedDates.length === 1 ? dateData.date.getTime() === selectedDates[0].getTime() : false;
        dateData.isToday = dateData.date.getTime() === todaysDate.getTime();
        dateData.isWithinRange = selectedDates.length === 2 ? dateData.date.getTime() >= selectedDates[0].getTime() && dateData.date.getTime() <= selectedDates[1].getTime() : false;
      }
      calendarData.push(dateData);
      currentDate.setDate(currentDate.getDate() + 1);
    }
    return calendarData;
  }
  function _isDisabledDate(currentDate, todaysDate, futureDateDisable, pastDateDisable, minDate, maxDate) {
    const currentDateTime = currentDate.getTime();
    const todaysDateTime = todaysDate.getTime();
    let isDisabled2 = Boolean(futureDateDisable) && currentDateTime > todaysDateTime || Boolean(pastDateDisable) && currentDateTime < todaysDateTime;
    if (!isDisabled2 && minDate) {
      if (currentDate.getTime() < minDate.getTime()) {
        isDisabled2 = true;
      }
    }
    if (!isDisabled2 && maxDate) {
      if (currentDate.getTime() > maxDate.getTime()) {
        isDisabled2 = true;
      }
    }
    return isDisabled2;
  }

  // ../utils/multi-item-focus-blur-mixin.js
  var MultiItemFocusBlurMixin = (superClass) => class extends superClass {
    static get properties() {
      return {
        _setHostFocus: { type: Boolean, reflect: true, attribute: "set-host-focus" }
      };
    }
    static get styles() {
      return i`
        :host([set-host-focus]:not(.item-focused)),
        .focus-item:not(.item-focused) {
          outline: none;
        }
        :host(.item-focused:not(.touch-device)),
        :host(:not(.touch-device)) *.item-focused {
          outline: var(--focus-outline) !important;
          outline-offset: -0.125rem;
        }
      `;
    }
    constructor() {
      super();
      this._setHostFocus = true;
    }
    connectedCallback() {
      super.connectedCallback();
      this._keyUpListener = this._keyUpCallBack.bind(this);
      this._shadowFocusOutListener = this._shadowFocusOutCallBack.bind(this);
      this.addEventListener("keyup", this._keyUpListener);
      this.shadowRoot.addEventListener("focusout", this._shadowFocusOutListener);
      if (this._setHostFocus) {
        this.focusOutListener = this.focusOutCallBack.bind(this);
        this.addEventListener("focusout", this.focusOutListener);
      }
    }
    disconnectedCallback() {
      this.removeEventListener("keyup", this._keyUpListener);
      this.shadowRoot.removeEventListener("focusout", this._shadowFocusOutListener);
      this.removeEventListener("focusout", this.focusOutListener);
      super.disconnectedCallback();
    }
    _keyUpCallBack(e8) {
      const pressedEnter = keyboardInteraction(e8, KEYCODE.ENTER);
      const pressedTab = keyboardInteraction(e8, KEYCODE.TAB);
      const shadowRootActiveElement = this.shadowRoot.activeElement;
      let focusedElement;
      if (pressedEnter || pressedTab) {
        if (shadowRootActiveElement) {
          const focusItems = this.shadowRoot.querySelectorAll(".focus-item");
          focusedElement = Array.from(focusItems).find((el) => e8.composedPath()[0] === el);
          this.classList.remove("item-focused");
        } else if (this._setHostFocus && e8.composedPath()[0] === this) {
          focusedElement = this;
        }
        if (focusedElement && pressedEnter) {
          this._enterKeyAction(focusedElement);
        } else if (focusedElement && pressedTab) {
          focusedElement.classList.add("item-focused");
        }
      }
    }
    _shadowFocusOutCallBack() {
      const focusedItem = this.shadowRoot.querySelector(".item-focused");
      if (focusedItem) {
        focusedItem.classList.remove("item-focused");
      }
    }
    focusOutCallBack() {
      this.classList.remove("item-focused");
    }
    _enterKeyAction(focusedElement) {
      if (focusedElement)
        return;
    }
  };

  // ../sh-datepicker/src/sh-private-date-selector.lit.scss.js
  var sh_private_date_selector_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height=2.5rem] - height of the overlay container
   */
  --sh-datepicker-overlay-container-height: 2.5rem;
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height-condensed=2rem] - height of the overlay container in condensed view
   */
  --sh-datepicker-overlay-container-height-condensed: 2rem;
  /* 
   * @cssprop [--sh-datepicker-months-grid-gap=0.5rem] - gap of months grid
   */
  --sh-datepicker-months-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-width=18rem] - gap of months grid
   */
  --sh-datepicker-date-panel-width: 18rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding=1rem 0.5rem 0.5rem 0.5rem] - gap of months grid
   */
  --sh-datepicker-date-panel-padding: 1rem 0.5rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-height=21rem] - gap of months grid
   */
  --sh-datepicker-date-panel-height: 21rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height=2rem] - height of the header area
   */
  --sh-datepicker-header-area-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-width=9.375rem] - width of the month and year display
   */
  --sh-datepicker-month-and-year-display-width: 9.375rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-line-height=2rem] - line-height of the month and year display
   */
  --sh-datepicker-month-and-year-display-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-border-radius=1rem] - border-radius of the month and year display
   */
  --sh-datepicker-month-and-year-display-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows=2rem] - grid template rows of the date grid
   */
  --sh-datepicker-date-grid-template-rows: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns=2rem] - grid template columns of the date grid
   */
  --sh-datepicker-date-grid-template-columns: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-gap=0.5rem] - grid gap of the date grid
   */
  --sh-datepicker-date-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-top=0.5rem] - margin top of  date grid
   */
  --sh-datepicker-date-grid-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-week-day-name-line-height=2rem] - line height of week day name
   */
  --sh-datepicker-week-day-name-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-line-height=2rem] - line height of date
   */
  --sh-datepicker-date-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-border-radius=1rem] - border-radius of date
   */
  --sh-datepicker-date-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-height=2rem] - border-radius of date
   */
  --sh-datepicker-date-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-width=2rem] - border-radius of date
   */
  --sh-datepicker-date-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-width=2rem] - width of dummy icon
   */
  --sh-datepicker-icon-dummy-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-height=2rem] - height of dummy icon
   */
  --sh-datepicker-icon-dummy-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding-year-and-month-selector=1rem 0.5rem 1.75rem] - date panel padding of year and month selector
   */
  --sh-datepicker-date-panel-padding-year-and-month-selector: 1rem 0.5rem 1.75rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height-year-and-month-selector=1.5rem] - height of the header area of year and month selector
   */
  --sh-datepicker-header-area-height-year-and-month-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-line-height-year-selector=1.5rem] - line height of the year selector
   */
  --sh-datepicker-line-height-year-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows-year-and-month-selector=3rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns-year-and-month-selector=4rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 4rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-column-gap-year-and-month-selector=1rem] - grid gap of year selector
   */
  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-row-gap-year-and-month-selector=1rem] - grid row gap of year selector
   */
  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-year-and-month-selector=1.75rem 1.5rem 0rem 1.5rem] - date grid margin of year selector
   */
  --sh-datepicker-date-grid-margin-year-and-month-selector: 1.75rem 1.5rem 0rem 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-width-year-and-month-selector=14rem] - width of date grid of year selector
   */
  --sh-datepicker-date-grid-width-year-and-month-selector: 14rem;
  /* 
   * @cssprop [--sh-datepicker-year-height-year-selector=2rem] - height of year field in year selector
   */
  --sh-datepicker-year-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-line-height-year-selector=2rem] - line height of year field in year selector
   */
  --sh-datepicker-year-line-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-border-radius-year-selector=1rem] - border radius of year field in year selector
   */
  --sh-datepicker-year-border-radius-year-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-width=4.5rem] - width of the year display  in month selector
   */
  --sh-datepicker-month-and-year-width: 4.5rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-height=2rem] - hieght of the year display  in month selector
   */
  --sh-datepicker-month-and-year-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-height=2rem] - hieght of the year month  in month selector
   */
  --sh-datepicker-month-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-line-height=2rem] - line hieght of the year month  in month selector
   */
  --sh-datepicker-month-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-border-radius=1rem] - border radius of  month  in month selector
   */
  --sh-datepicker-month-border-radius: 1rem;
}

.months {
  display: flex;
  flex-direction: row;
  grid-gap: var(--sh-datepicker-months-grid-gap);
  background-color: var(--base-4);
  width: fit-content;
  box-shadow: var(--shadow-overlay);
  overflow: hidden;
  border-radius: 0.125rem;
}

.date-panel {
  width: var(--sh-datepicker-date-panel-width);
  box-sizing: border-box;
  padding: var(--sh-datepicker-date-panel-padding);
  display: flex;
  flex-direction: column;
  height: var(--sh-datepicker-date-panel-height);
}

.header-area {
  height: var(--sh-datepicker-header-area-height);
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  overflow: hidden;
}

.month-and-year-display {
  width: var(--sh-datepicker-month-and-year-display-width);
  border-radius: var(--sh-datepicker-month-and-year-display-border-radius);
  font: var(--title-1);
  color: var(--text-primary);
  text-align: center;
  line-height: var(--sh-datepicker-month-and-year-display-line-height);
  box-sizing: border-box;
  cursor: pointer;
  transition: var(--hover-transition-time) background;
}

:host(:not(.touch-device)) .month-and-year-display:hover {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

.date-grid {
  display: grid;
  grid-template-rows: var(--sh-datepicker-date-grid-template-rows);
  grid-template-columns: repeat(7, var(--sh-datepicker-date-grid-template-columns));
  grid-gap: var(--sh-datepicker-date-grid-gap);
  margin-top: var(--sh-datepicker-date-grid-margin-top);
  box-sizing: border-box;
}

.week-day-name {
  text-align: center;
  font: var(--title-2);
  color: var(--text-primary);
  line-height: var(--sh-datepicker-week-day-name-line-height);
  box-sizing: border-box;
}

.date {
  text-align: center;
  font: var(--body-1);
  color: var(--text-primary);
  border-radius: var(--sh-datepicker-date-border-radius);
  box-sizing: border-box;
  cursor: pointer;
  height: var(--sh-datepicker-date-height);
  width: var(--sh-datepicker-date-width);
  line-height: var(--sh-datepicker-date-line-height);
  display: inline-block;
  outline: none;
  transition: var(--hover-transition-time) background;
}

:host(:not(.touch-device)) .date:hover:not(.selected) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

.date.selected:not(.other-month):not(.disabled) {
  background-color: rgb(var(--ui-3), var(--opacity-1)) !important;
  font: var(--title-1);
  color: var(--text-white);
  line-height: var(--sh-datepicker-date-line-height);
}

.date.within-range:not(.selected):not(.disabled) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

.date.today:not(.other-month):not(.selected):not(.disabled) {
  font: var(--title-1);
  color: var(--text-highlight);
  line-height: var(--sh-datepicker-date-line-height);
}

.date.other-month:not(.disabled) {
  color: var(--text-disabled);
}

.date.disabled {
  color: var(--text-disabled);
  pointer-events: none;
}

.icon-dummy {
  width: var(--sh-datepicker-icon-dummy-width);
  height: var(--sh-datepicker-icon-dummy-height);
}

:host([responsive]) .date-panel {
  padding: 0;
  width: auto;
}

:host([responsive]) .header-area {
  height: 1.5rem;
  align-items: center;
}

:host([responsive]) .date-grid {
  gap: 0.75rem;
  margin-top: 1rem;
}

:host([responsive]) .months {
  justify-content: center;
  width: 100%;
  box-shadow: none;
  background-color: transparent;
}

:host {
  display: block;
}`;

  // ../sh-datepicker/src/sh-private-date-selector.js
  var SHPrivateDateSelector = class extends MultiItemFocusBlurMixin(s4) {
    static get properties() {
      return {
        month: { type: Number },
        year: { type: Number },
        months: { type: Number },
        range: { type: Boolean },
        futureDateDisable: { type: Boolean },
        pastDateDisable: { type: Boolean },
        todaysDate: { type: Object },
        selectedDates: { type: Array },
        minDate: { type: Object },
        maxDate: { type: Object },
        responsive: { type: Boolean, reflect: true },
        locale: { type: String },
        startMondayLocales: { type: Array },
        _calendarDatas: { type: Array },
        _monthYearDatas: { type: Array }
      };
    }
    static get styles() {
      return [super.styles, sharedStyles, sh_private_date_selector_lit_scss_default];
    }
    constructor() {
      super();
      this.selectedDates = [];
      this._calendarDatas = [];
      this._monthYearDatas = [];
    }
    render() {
      return x`<div class="months">
      ${this._calendarDatas.map((calendarData, monthIndex) => x`<div class="date-panel">
            <div class="header-area">
              ${monthIndex === 0 ? x`<sh-icon
                    icon="arrow-left-s"
                    size="m"
                    button
                    @click="${() => {
        --this.month;
        this.generateCalendarDatas();
      }}"
                  ></sh-icon>` : x`<div class="icon-dummy"></div>`}
              <div
                class="month-and-year-display focus-item"
                @click="${() => {
        dispatchCustomEvent(this, "month-header-clicked", {
          clickedYear: this._monthYearDatas[monthIndex][1]
        });
      }}"
                tabindex="0"
              >
                ${this._getMonthYearHeader(this._monthYearDatas[monthIndex])}
              </div>
              ${monthIndex === this._calendarDatas.length - 1 ? x`<sh-icon
                    icon="arrow-right-s"
                    size="m"
                    button
                    @click="${() => {
        ++this.month;
        this.generateCalendarDatas();
      }}"
                  ></sh-icon>` : x`<div class="icon-dummy"></div>`}
            </div>
            <div class="date-grid">
              ${new Array(7).fill("_").map((_2, index) => {
        const startDay = this.startMondayLocales.includes(this.locale) ? 1 : 0;
        const dayIndex = index + startDay < 7 ? index + startDay : 0;
        return x`<span class="week-day-name"
                  >${DateFormatHelper.getWeekDays(dayIndex, this.locale)}</span
                >`;
      })}
              ${calendarData.map((dateObject) => x`<span
                    class="${o7(this._getComputedClasses(dateObject))}"
                    @click="${() => {
        this._addToSelectedDates(dateObject.date, dateObject);
      }}"
                    tabindex="${dateObject.isDisabled ? "-1" : "0"}"
                    @mouseover="${() => {
        if (this.range && this.selectedDates.length === 1) {
          this._hoverActions(dateObject.date);
        }
      }}"
                    >${dateObject.date.getDate()}</span
                  >`)}
            </div>
          </div>`)}
    </div>`;
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      } else {
        this.setAttribute("tabindex", 0);
      }
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("selectedDates") && this.selectedDates.length !== 0) {
        dispatchCustomEvent(this, "selected-dates-changed");
      }
    }
    generateCalendarDatas() {
      if (this.month > 11) {
        this.month = 0;
        ++this.year;
      }
      if (this.month < 0) {
        this.month = 11;
        --this.year;
      }
      let startMonth = this.month;
      let startYear = this.year;
      let calendarDatas = [];
      let monthYearDatas = [];
      for (let i7 = 0; i7 < this.months; i7++) {
        monthYearDatas.push([startMonth, startYear]);
        calendarDatas.push(generateCalendarData(startMonth, startYear, this.todaysDate, this.selectedDates, this.futureDateDisable, this.pastDateDisable, this.minDate, this.maxDate, this.startMondayLocales.includes(this.locale) ? 1 : 0));
        ++startMonth;
        if (startMonth === 12) {
          startMonth = 0;
          ++startYear;
        }
      }
      this._calendarDatas = calendarDatas;
      this._monthYearDatas = monthYearDatas;
    }
    _getComputedClasses(dateObject) {
      return {
        date: true,
        "other-month": dateObject.isOtherMonthDay,
        disabled: dateObject.isDisabled,
        today: dateObject.isToday,
        selected: dateObject.isSelected,
        "within-range": dateObject.isWithinRange,
        "focus-item": true
      };
    }
    _addToSelectedDates(date, dateObject) {
      let selectedDates = this.selectedDates;
      if (this.range) {
        if (selectedDates.length < 2) {
          selectedDates.push(date);
          this._updateSelectedDate(date);
          if (selectedDates.length === 2) {
            selectedDates.sort((a3, b2) => a3.getTime() - b2.getTime());
            this.selectedDates = selectedDates;
            dispatchCustomEvent(this, "ready-to-update-value", { selectedDates: this.selectedDates }, true);
            return;
          } else if (selectedDates.length === 1) {
            this._switchViewIfDateIsOutsideView(date);
          }
        } else if (selectedDates.length === 2) {
          this.selectedDates = [];
          this._clearAllData();
          this._addToSelectedDates(date, dateObject);
          return;
        }
      } else {
        this._clearAllData();
        this.selectedDates = [date];
        this._updateSelectedDate(date);
        dispatchCustomEvent(this, "ready-to-update-value", { selectedDates: this.selectedDates }, true);
        return;
      }
      if (this.range && selectedDates.length !== 2) {
        this.selectedDates = selectedDates;
        this.requestUpdate();
      }
    }
    _switchViewIfDateIsOutsideView(date) {
      const firstMonthYearMonthData = JSON.parse(JSON.stringify(this._monthYearDatas[0])).reverse();
      const lastMonthYearMonthData = JSON.parse(JSON.stringify(this._monthYearDatas[this._monthYearDatas.length - 1])).reverse();
      const lastMonthLastDayDate = this._getDayCountforMonthYear(lastMonthYearMonthData[1], lastMonthYearMonthData[0]);
      const firstMonthFirstDay = new Date(...firstMonthYearMonthData, 1, 0, 0, 0, 0);
      const lastMonthLastDay = new Date(...lastMonthYearMonthData, lastMonthLastDayDate, 0, 0, 0, 0);
      const selectedDateIsEarlierDate = date.getTime() < firstMonthFirstDay.getTime();
      const selectedDateIsLaterDate = date.getTime() > lastMonthLastDay.getTime();
      const selectedDateMonthIsNotInView = selectedDateIsEarlierDate || selectedDateIsLaterDate;
      if (selectedDateMonthIsNotInView) {
        if (selectedDateIsEarlierDate) {
          this.shadowRoot.querySelector('sh-icon[icon="arrow-left-s"]').click();
        } else {
          this.shadowRoot.querySelector('sh-icon[icon="arrow-right-s"]').click();
        }
      }
    }
    _hoverActions(date) {
      const calendarDatas = this._updateWithinRangeCalendarData(this._calendarDatas, this.selectedDates[0], date);
      this._calendarDatas = calendarDatas;
    }
    _extractNewCalendarDatas(allCalendarDatas) {
      const numOfData = allCalendarDatas.length / 42;
      let calendarDataIterationCount = 0;
      const requiredCalendarDatas = [];
      for (let i7 = 0; i7 < numOfData; i7++) {
        const calendarData = [];
        const startIndex = calendarDataIterationCount;
        const endIndex = calendarDataIterationCount + 41;
        for (let j = startIndex; j <= endIndex; j++) {
          calendarData.push(allCalendarDatas[j]);
          ++calendarDataIterationCount;
        }
        requiredCalendarDatas.push(calendarData);
      }
      return requiredCalendarDatas;
    }
    _clearAllData() {
      let allCalendarDatas = this._calendarDatas.flat();
      allCalendarDatas.forEach((dateObject) => dateObject.isWithinRange = false);
      allCalendarDatas.forEach((dateObject) => dateObject.isSelected = false);
      const requiredCalendarDatas = this._extractNewCalendarDatas(allCalendarDatas);
      this._calendarDatas = requiredCalendarDatas;
    }
    _updateSelectedDate(date) {
      let allCalendarDatas = this._calendarDatas.flat();
      let selectedDateObjectIndex = allCalendarDatas.findIndex((dateObject) => dateObject.date.getTime() === date.getTime() && !dateObject.isOtherMonthDay);
      if (selectedDateObjectIndex !== -1) {
        allCalendarDatas[selectedDateObjectIndex].isSelected = true;
      }
      const requiredCalendarDatas = this._extractNewCalendarDatas(allCalendarDatas);
      this._calendarDatas = requiredCalendarDatas;
      this.requestUpdate();
    }
    _updateWithinRangeCalendarData(calendarDatas, firstClickedDate, hoverDate) {
      if (hoverDate.getTime() > firstClickedDate.getTime()) {
        this.fromDate = firstClickedDate;
        this.toDate = hoverDate;
      } else {
        this.fromDate = hoverDate;
        this.toDate = firstClickedDate;
      }
      let allCalendarDatas = calendarDatas.flat();
      allCalendarDatas.forEach((dateObject) => dateObject.isWithinRange = false);
      let fromIndex = allCalendarDatas.findIndex((dateObject) => dateObject.date.getTime() === this.fromDate.getTime() && !dateObject.isOtherMonthDay);
      fromIndex = fromIndex === -1 ? 0 : fromIndex;
      let toIndex = allCalendarDatas.findIndex((dateObject) => dateObject.date.getTime() === this.toDate.getTime() && !dateObject.isOtherMonthDay);
      toIndex = toIndex === -1 ? allCalendarDatas.length - 1 : toIndex;
      for (let i7 = fromIndex; i7 <= toIndex; i7++) {
        const dateObject = allCalendarDatas[i7];
        if (!dateObject.isOtherMonthDay) {
          dateObject.isWithinRange = true;
        }
      }
      const requiredCalendarDatas = this._extractNewCalendarDatas(allCalendarDatas);
      return requiredCalendarDatas;
    }
    _getDayCountforMonthYear(monthIndex, year) {
      let dayCount = 0;
      for (let i7 = 1; i7 <= 31; i7++) {
        let testDate = new Date(year, monthIndex, i7, 0, 0, 0, 0);
        if (testDate.getMonth() === monthIndex) {
          ++dayCount;
        } else {
          break;
        }
      }
      return dayCount;
    }
    _enterKeyAction(focusedElement) {
      if (focusedElement !== this) {
        focusedElement.click();
      }
    }
    _getMonthYearHeader(monthYearData) {
      const month = monthYearData[0];
      const year = monthYearData[1];
      const date = new Date(year, month, 1, 0, 0, 0, 0);
      let monthYearHeader = date.toLocaleString(this.locale, { month: "long", year: "numeric" });
      monthYearHeader = monthYearHeader[0].toLocaleUpperCase(this.locale) + monthYearHeader.slice(1);
      return monthYearHeader;
    }
  };
  customElements.define("sh-private-date-selector", SHPrivateDateSelector);

  // ../utils/year-data-generator.js
  var MonthData = class {
    constructor() {
      this.date = null;
      this.isSelected = false;
      this.isThisMonth = false;
      this.isDisabled = false;
    }
  };
  function generateYearData(year, todaysDate, selectedDate = null, futureDateDisable = false, pastDateDisable = false, minDate = null, maxDate = null) {
    const yearData = [];
    for (let i7 = 0; i7 < 12; i7++) {
      const monthData = new MonthData();
      monthData.date = new Date(year, i7, 1, 0, 0, 0, 0);
      monthData.isDisabled = _isDisabledMonth(monthData.date, todaysDate, futureDateDisable, pastDateDisable, minDate, maxDate);
      if (!monthData.isDisabled) {
        monthData.isSelected = Boolean(selectedDate) && monthData.date.getTime() === selectedDate.getTime();
        monthData.isThisMonth = monthData.date.getTime() === todaysDate.getTime();
      }
      yearData.push(monthData);
    }
    return yearData;
  }
  function _isDisabledMonth(currentDate, todaysDate, futureDateDisable, pastDateDisable, minDate, maxDate) {
    const currentDateTime = currentDate.getTime();
    const todaysDateTime = todaysDate.getTime();
    let isDisabled2 = Boolean(futureDateDisable) && currentDateTime > todaysDateTime || Boolean(pastDateDisable) && currentDateTime < todaysDateTime;
    if (!isDisabled2 && minDate) {
      if (currentDate.getTime() < minDate.getTime()) {
        isDisabled2 = true;
      }
    }
    if (!isDisabled2 && maxDate) {
      if (currentDate.getTime() > maxDate.getTime()) {
        isDisabled2 = true;
      }
    }
    return isDisabled2;
  }

  // ../sh-datepicker/src/sh-private-month-selector.lit.scss.js
  var sh_private_month_selector_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height=2.5rem] - height of the overlay container
   */
  --sh-datepicker-overlay-container-height: 2.5rem;
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height-condensed=2rem] - height of the overlay container in condensed view
   */
  --sh-datepicker-overlay-container-height-condensed: 2rem;
  /* 
   * @cssprop [--sh-datepicker-months-grid-gap=0.5rem] - gap of months grid
   */
  --sh-datepicker-months-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-width=18rem] - gap of months grid
   */
  --sh-datepicker-date-panel-width: 18rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding=1rem 0.5rem 0.5rem 0.5rem] - gap of months grid
   */
  --sh-datepicker-date-panel-padding: 1rem 0.5rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-height=21rem] - gap of months grid
   */
  --sh-datepicker-date-panel-height: 21rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height=2rem] - height of the header area
   */
  --sh-datepicker-header-area-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-width=9.375rem] - width of the month and year display
   */
  --sh-datepicker-month-and-year-display-width: 9.375rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-line-height=2rem] - line-height of the month and year display
   */
  --sh-datepicker-month-and-year-display-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-border-radius=1rem] - border-radius of the month and year display
   */
  --sh-datepicker-month-and-year-display-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows=2rem] - grid template rows of the date grid
   */
  --sh-datepicker-date-grid-template-rows: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns=2rem] - grid template columns of the date grid
   */
  --sh-datepicker-date-grid-template-columns: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-gap=0.5rem] - grid gap of the date grid
   */
  --sh-datepicker-date-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-top=0.5rem] - margin top of  date grid
   */
  --sh-datepicker-date-grid-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-week-day-name-line-height=2rem] - line height of week day name
   */
  --sh-datepicker-week-day-name-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-line-height=2rem] - line height of date
   */
  --sh-datepicker-date-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-border-radius=1rem] - border-radius of date
   */
  --sh-datepicker-date-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-height=2rem] - border-radius of date
   */
  --sh-datepicker-date-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-width=2rem] - border-radius of date
   */
  --sh-datepicker-date-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-width=2rem] - width of dummy icon
   */
  --sh-datepicker-icon-dummy-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-height=2rem] - height of dummy icon
   */
  --sh-datepicker-icon-dummy-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding-year-and-month-selector=1rem 0.5rem 1.75rem] - date panel padding of year and month selector
   */
  --sh-datepicker-date-panel-padding-year-and-month-selector: 1rem 0.5rem 1.75rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height-year-and-month-selector=1.5rem] - height of the header area of year and month selector
   */
  --sh-datepicker-header-area-height-year-and-month-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-line-height-year-selector=1.5rem] - line height of the year selector
   */
  --sh-datepicker-line-height-year-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows-year-and-month-selector=3rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns-year-and-month-selector=4rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 4rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-column-gap-year-and-month-selector=1rem] - grid gap of year selector
   */
  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-row-gap-year-and-month-selector=1rem] - grid row gap of year selector
   */
  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-year-and-month-selector=1.75rem 1.5rem 0rem 1.5rem] - date grid margin of year selector
   */
  --sh-datepicker-date-grid-margin-year-and-month-selector: 1.75rem 1.5rem 0rem 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-width-year-and-month-selector=14rem] - width of date grid of year selector
   */
  --sh-datepicker-date-grid-width-year-and-month-selector: 14rem;
  /* 
   * @cssprop [--sh-datepicker-year-height-year-selector=2rem] - height of year field in year selector
   */
  --sh-datepicker-year-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-line-height-year-selector=2rem] - line height of year field in year selector
   */
  --sh-datepicker-year-line-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-border-radius-year-selector=1rem] - border radius of year field in year selector
   */
  --sh-datepicker-year-border-radius-year-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-width=4.5rem] - width of the year display  in month selector
   */
  --sh-datepicker-month-and-year-width: 4.5rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-height=2rem] - hieght of the year display  in month selector
   */
  --sh-datepicker-month-and-year-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-height=2rem] - hieght of the year month  in month selector
   */
  --sh-datepicker-month-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-line-height=2rem] - line hieght of the year month  in month selector
   */
  --sh-datepicker-month-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-border-radius=1rem] - border radius of  month  in month selector
   */
  --sh-datepicker-month-border-radius: 1rem;
}

.months {
  display: flex;
  flex-direction: row;
  grid-gap: var(--sh-datepicker-months-grid-gap);
  background-color: var(--base-4);
  width: fit-content;
  box-sizing: border-box;
  box-shadow: var(--shadow-overlay);
  overflow: hidden;
}

.date-panel {
  width: var(--sh-datepicker-date-panel-width);
  box-sizing: border-box;
  padding: var(--sh-datepicker-date-panel-padding-year-and-month-selector);
  display: flex;
  flex-direction: column;
  height: var(--sh-datepicker-date-panel-height);
}

.header-area {
  height: var(--sh-datepicker-header-area-height-year-and-month-selector);
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

.month-and-year-display {
  width: var(--sh-datepicker-month-and-year-width);
  border-radius: var(--sh-datepicker-month-and-year-display-border-radius);
  font: var(--title-1);
  color: var(--text-primary);
  text-align: center;
  line-height: var(--sh-datepicker-month-and-year-display-line-height);
  box-sizing: border-box;
  cursor: pointer;
  height: var(--sh-datepicker-month-and-year-height);
}

:host(:not(.touch-device)) .month-and-year-display:hover {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

.date-grid {
  display: grid;
  grid-template-rows: repeat(4, var(--sh-datepicker-date-grid-template-rows-year-and-month-selector));
  grid-template-columns: repeat(3, var(--sh-datepicker-date-grid-template-columns-year-and-month-selector));
  grid-row-gap: var(--sh-datepicker-date-grid-row-gap-year-and-month-selector);
  grid-column-gap: var(--sh-datepicker-date-grid-column-gap-year-and-month-selector);
  margin: var(--sh-datepicker-date-grid-margin-year-and-month-selector);
  box-sizing: border-box;
  width: var(--sh-datepicker-date-grid-width-year-and-month-selector);
  align-items: center;
}

.month {
  font: var(--body-1);
  color: var(--text-primary);
  text-align: center;
  height: var(--sh-datepicker-month-height);
  line-height: var(--sh-datepicker-month-line-height);
  border-radius: var(--sh-datepicker-month-border-radius);
  cursor: pointer;
  transition: var(--hover-transition-time) background;
}

:host(:not(.touch-device)) .month:hover:not(.selected) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

.month.selected:not(.disabled) {
  background-color: rgb(var(--ui-3), var(--opacity-1)) !important;
  font: var(--title-1);
  color: var(--text-white);
  line-height: var(--sh-datepicker-month-line-height);
}

.month.today:not(.selected):not(.disabled) {
  font: var(--title-1);
  color: var(--text-highlight);
  line-height: var(--sh-datepicker-month-line-height);
}

.month.disabled {
  color: var(--text-disabled);
  pointer-events: none;
}

.icon-dummy {
  width: var(--sh-datepicker-icon-dummy-width);
  height: var(--sh-datepicker-icon-dummy-height);
}

:host([responsive]) .months {
  justify-content: center;
  width: 100%;
  box-shadow: none;
  background-color: transparent;
}

:host {
  display: block;
}`;

  // ../sh-datepicker/src/sh-private-month-selector.js
  var SHPrivateMonthSelector = class extends MultiItemFocusBlurMixin(s4) {
    static get properties() {
      return {
        months: { type: Number },
        year: { type: Number },
        futureDateDisable: { type: Boolean },
        pastDateDisable: { type: Boolean },
        todaysDate: { type: Object },
        selectedDate: { type: Object },
        responsive: { type: Boolean, reflect: true },
        minDate: { type: Object },
        maxDate: { type: Object },
        locale: { type: String },
        _monthViewDatas: { type: Array },
        _yearDecadeDatas: { type: Array }
      };
    }
    static get styles() {
      return [super.styles, sharedStyles, sh_private_month_selector_lit_scss_default];
    }
    constructor() {
      super();
      this._monthViewDatas = [];
      this._yearDecadeDatas = [];
    }
    render() {
      return x`<div class="months">
      ${this._monthViewDatas.map((monthViewData, yearIndex) => x`<div class="date-panel">
            <div class="header-area">
              ${yearIndex === 0 ? x`<sh-icon
                    icon="arrow-left-s"
                    button
                    size="m"
                    @click="${() => {
        --this.year;
        this.generateMonthViewData();
      }}"
                  ></sh-icon>` : x`<div class="icon-dummy"></div>`}
              <div
                class="month-and-year-display focus-item"
                @click="${() => {
        dispatchCustomEvent(this, "year-header-clicked", {
          belongingDecade: this._yearDecadeDatas[yearIndex].year - this._yearDecadeDatas[yearIndex].year % 10
        });
      }}"
                tabindex="0"
              >
                ${this._yearDecadeDatas[yearIndex].year}
              </div>
              ${yearIndex === this._monthViewDatas.length - 1 ? x`<sh-icon
                    icon="arrow-right-s"
                    button
                    size="m"
                    @click="${() => {
        ++this.year;
        this.generateMonthViewData();
      }}"
                  ></sh-icon>` : x`<div class="icon-dummy"></div>`}
            </div>
            <div class="date-grid">
              <span
                class="${o7(this._getComputedClasses(monthViewData[0]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 0,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[0].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(0, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[1]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 1,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[1].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(1, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[2]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 2,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[2].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(2, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[3]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 3,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[3].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(3, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[4]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 4,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[4].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(4, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[5]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 5,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[5].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(5, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[6]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 6,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[6].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(6, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[7]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 7,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[7].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(7, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[8]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 8,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[8].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(8, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[9]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 9,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[9].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(9, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[10]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 10,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[10].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(10, this.locale)}
              </span>
              <span
                class="${o7(this._getComputedClasses(monthViewData[11]))}"
                @click="${() => {
        dispatchCustomEvent(this, "month-clicked", {
          clickedMonth: 11,
          clickedYear: this._yearDecadeDatas[yearIndex].year
        });
      }}"
                tabindex="${monthViewData[11].isDisabled ? "-1" : "0"}"
              >
                ${DateFormatHelper.getShortMonthName(11, this.locale)}
              </span>
            </div>
          </div>`)}
    </div>`;
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      } else {
        this.setAttribute("tabindex", 0);
      }
    }
    generateMonthViewData() {
      let year = this.year;
      let monthViewDatas = [];
      let yearDecadeDatas = [];
      for (let i7 = 0; i7 < this.months; i7++) {
        monthViewDatas.push(generateYearData(year, this.todaysDate, this.selectedDate, this.futureDateDisable, this.pastDateDisable, this.minDate, this.maxDate));
        yearDecadeDatas.push({ year, decade: year - year % 10 });
        ++year;
      }
      this._monthViewDatas = monthViewDatas;
      this._yearDecadeDatas = yearDecadeDatas;
    }
    _getComputedClasses(monthObject) {
      return {
        month: true,
        "focus-item": true,
        today: monthObject.isThisMonth,
        selected: monthObject.isSelected,
        disabled: monthObject.isDisabled
      };
    }
    _enterKeyAction(focusedElement) {
      if (focusedElement !== this) {
        focusedElement.click();
      }
    }
  };
  customElements.define("sh-private-month-selector", SHPrivateMonthSelector);

  // ../utils/decade-data-generator.js
  var YearData = class {
    constructor() {
      this.date = null;
      this.isSelected = false;
      this.isThisYear = false;
      this.isDisabled = false;
    }
  };
  function generateDecadeData(decade, todaysDate, selectedDate = null, futureDateDisable = false, pastDateDisable = false, minDate = null, maxDate = null) {
    const decadeData = [];
    const startingYear = decade - 1;
    for (let i7 = startingYear; i7 <= startingYear + 11; i7++) {
      const yearData = new YearData();
      yearData.date = new Date(i7, 0, 1, 0, 0, 0, 0);
      yearData.isDisabled = _isDisabledYear(yearData.date, todaysDate, futureDateDisable, pastDateDisable, minDate, maxDate);
      if (!yearData.isDisabled) {
        yearData.isSelected = Boolean(selectedDate) && yearData.date.getTime() === selectedDate.getTime();
        yearData.isThisYear = yearData.date.getTime() === todaysDate.getTime();
      }
      decadeData.push(yearData);
    }
    return decadeData;
  }
  function _isDisabledYear(currentDate, todaysDate, futureDateDisable, pastDateDisable, minDate, maxDate) {
    const currentDateTime = currentDate.getTime();
    const todaysDateTime = todaysDate.getTime();
    let isDisabled2 = Boolean(futureDateDisable) && currentDateTime > todaysDateTime || Boolean(pastDateDisable) && currentDateTime < todaysDateTime;
    if (!isDisabled2 && minDate) {
      if (currentDate.getTime() < minDate.getTime()) {
        isDisabled2 = true;
      }
    }
    if (!isDisabled2 && maxDate) {
      if (currentDate.getTime() > maxDate.getTime()) {
        isDisabled2 = true;
      }
    }
    return isDisabled2;
  }

  // ../sh-datepicker/src/sh-private-year-selector.lit.scss.js
  var sh_private_year_selector_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height=2.5rem] - height of the overlay container
   */
  --sh-datepicker-overlay-container-height: 2.5rem;
  /* 
   * @cssprop [--sh-datepicker-overlay-container-height-condensed=2rem] - height of the overlay container in condensed view
   */
  --sh-datepicker-overlay-container-height-condensed: 2rem;
  /* 
   * @cssprop [--sh-datepicker-months-grid-gap=0.5rem] - gap of months grid
   */
  --sh-datepicker-months-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-width=18rem] - gap of months grid
   */
  --sh-datepicker-date-panel-width: 18rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding=1rem 0.5rem 0.5rem 0.5rem] - gap of months grid
   */
  --sh-datepicker-date-panel-padding: 1rem 0.5rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-height=21rem] - gap of months grid
   */
  --sh-datepicker-date-panel-height: 21rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height=2rem] - height of the header area
   */
  --sh-datepicker-header-area-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-width=9.375rem] - width of the month and year display
   */
  --sh-datepicker-month-and-year-display-width: 9.375rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-line-height=2rem] - line-height of the month and year display
   */
  --sh-datepicker-month-and-year-display-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-display-border-radius=1rem] - border-radius of the month and year display
   */
  --sh-datepicker-month-and-year-display-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows=2rem] - grid template rows of the date grid
   */
  --sh-datepicker-date-grid-template-rows: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns=2rem] - grid template columns of the date grid
   */
  --sh-datepicker-date-grid-template-columns: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-gap=0.5rem] - grid gap of the date grid
   */
  --sh-datepicker-date-grid-gap: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-top=0.5rem] - margin top of  date grid
   */
  --sh-datepicker-date-grid-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-datepicker-week-day-name-line-height=2rem] - line height of week day name
   */
  --sh-datepicker-week-day-name-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-line-height=2rem] - line height of date
   */
  --sh-datepicker-date-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-border-radius=1rem] - border-radius of date
   */
  --sh-datepicker-date-border-radius: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-height=2rem] - border-radius of date
   */
  --sh-datepicker-date-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-width=2rem] - border-radius of date
   */
  --sh-datepicker-date-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-width=2rem] - width of dummy icon
   */
  --sh-datepicker-icon-dummy-width: 2rem;
  /* 
   * @cssprop [--sh-datepicker-icon-dummy-height=2rem] - height of dummy icon
   */
  --sh-datepicker-icon-dummy-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-date-panel-padding-year-and-month-selector=1rem 0.5rem 1.75rem] - date panel padding of year and month selector
   */
  --sh-datepicker-date-panel-padding-year-and-month-selector: 1rem 0.5rem 1.75rem;
  /* 
   * @cssprop [--sh-datepicker-header-area-height-year-and-month-selector=1.5rem] - height of the header area of year and month selector
   */
  --sh-datepicker-header-area-height-year-and-month-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-line-height-year-selector=1.5rem] - line height of the year selector
   */
  --sh-datepicker-line-height-year-selector: 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-rows-year-and-month-selector=3rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-rows-year-and-month-selector: 3rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-template-columns-year-and-month-selector=4rem] - grid template rows of year selector
   */
  --sh-datepicker-date-grid-template-columns-year-and-month-selector: 4rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-column-gap-year-and-month-selector=1rem] - grid gap of year selector
   */
  --sh-datepicker-date-grid-column-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-row-gap-year-and-month-selector=1rem] - grid row gap of year selector
   */
  --sh-datepicker-date-grid-row-gap-year-and-month-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-margin-year-and-month-selector=1.75rem 1.5rem 0rem 1.5rem] - date grid margin of year selector
   */
  --sh-datepicker-date-grid-margin-year-and-month-selector: 1.75rem 1.5rem 0rem 1.5rem;
  /* 
   * @cssprop [--sh-datepicker-date-grid-width-year-and-month-selector=14rem] - width of date grid of year selector
   */
  --sh-datepicker-date-grid-width-year-and-month-selector: 14rem;
  /* 
   * @cssprop [--sh-datepicker-year-height-year-selector=2rem] - height of year field in year selector
   */
  --sh-datepicker-year-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-line-height-year-selector=2rem] - line height of year field in year selector
   */
  --sh-datepicker-year-line-height-year-selector: 2rem;
  /* 
   * @cssprop [--sh-datepicker-year-border-radius-year-selector=1rem] - border radius of year field in year selector
   */
  --sh-datepicker-year-border-radius-year-selector: 1rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-width=4.5rem] - width of the year display  in month selector
   */
  --sh-datepicker-month-and-year-width: 4.5rem;
  /* 
   * @cssprop [--sh-datepicker-month-and-year-height=2rem] - hieght of the year display  in month selector
   */
  --sh-datepicker-month-and-year-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-height=2rem] - hieght of the year month  in month selector
   */
  --sh-datepicker-month-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-line-height=2rem] - line hieght of the year month  in month selector
   */
  --sh-datepicker-month-line-height: 2rem;
  /* 
   * @cssprop [--sh-datepicker-month-border-radius=1rem] - border radius of  month  in month selector
   */
  --sh-datepicker-month-border-radius: 1rem;
}

.months {
  display: flex;
  flex-direction: row;
  grid-gap: var(--sh-datepicker-months-grid-gap);
  background-color: var(--base-4);
  width: fit-content;
  box-sizing: border-box;
  box-shadow: var(--shadow-overlay);
  overflow-x: hidden;
}

.date-panel {
  width: var(--sh-datepicker-date-panel-width);
  box-sizing: border-box;
  padding: var(--sh-datepicker-date-panel-padding-year-and-month-selector);
  display: flex;
  flex-direction: column;
  height: var(--sh-datepicker-date-panel-height);
}

.header-area {
  height: var(--sh-datepicker-header-area-height-year-and-month-selector);
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
}

.month-and-year-display {
  font: var(--title-1);
  color: var(--text-primary);
  text-align: center;
  line-height: var(--sh-datepicker-line-height-year-selector);
  box-sizing: border-box;
}

.date-grid {
  display: grid;
  grid-template-rows: repeat(4, var(--sh-datepicker-date-grid-template-rows-year-and-month-selector));
  grid-template-columns: repeat(3, var(--sh-datepicker-date-grid-template-columns-year-and-month-selector));
  grid-row-gap: var(--sh-datepicker-date-grid-row-gap-year-and-month-selector);
  grid-column-gap: var(--sh-datepicker-date-grid-column-gap-year-and-month-selector);
  margin: var(--sh-datepicker-date-grid-margin-year-and-month-selector);
  box-sizing: border-box;
  width: var(--sh-datepicker-date-grid-width-year-and-month-selector);
  align-items: center;
}

.icon-dummy {
  width: var(--sh-datepicker-icon-dummy-width);
  height: var(--sh-datepicker-icon-dummy-height);
}

.year {
  font: var(--body-1);
  color: var(--text-primary);
  text-align: center;
  height: var(--sh-datepicker-year-height-year-selector);
  line-height: var(--sh-datepicker-year-line-height-year-selector);
  border-radius: var(--sh-datepicker-year-border-radius-year-selector);
  cursor: pointer;
  transition: var(--hover-transition-time) background;
}

:host(:not(.touch-device)) .year:hover:not(.selected) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

.year.selected:not(.other-decade):not(.disabled) {
  background-color: rgb(var(--ui-3), var(--opacity-1)) !important;
  font: var(--title-1);
  color: var(--text-white);
  line-height: var(--sh-datepicker-year-line-height-year-selector);
}

.year.today:not(.other-decade):not(.selected):not(.disabled) {
  font: var(--title-1);
  color: var(--text-highlight);
  line-height: var(--sh-datepicker-year-line-height-year-selector);
}

.year.other-decade:not(.disabled) {
  color: var(--text-disabled);
  pointer-events: none;
}

.year.disabled {
  color: var(--text-disabled);
  pointer-events: none;
}

:host([responsive]) .months {
  justify-content: center;
  width: 100%;
  box-shadow: none;
  background-color: transparent;
}

:host {
  display: block;
}`;

  // ../sh-datepicker/src/sh-private-year-selector.js
  var SHPrivateYearSelector = class extends MultiItemFocusBlurMixin(s4) {
    static get properties() {
      return {
        months: { type: Number },
        decade: { type: Number },
        todaysDate: { type: Object },
        selectedDate: { type: Object },
        futureDateDisable: { type: Boolean },
        pastDateDisable: { type: Boolean },
        minDate: { type: Object },
        maxDate: { type: Object },
        responsive: { type: Boolean, reflect: true },
        _yearViewDatas: { type: Array }
      };
    }
    static get styles() {
      return [super.styles, sharedStyles, sh_private_year_selector_lit_scss_default];
    }
    constructor() {
      super();
      this.selectedDate = null;
      this.minDate = null;
      this.maxDate = null;
      this._yearViewDatas = [];
    }
    render() {
      return x`<div class="months">
      ${this._yearViewDatas.map((decadeData, decadeIndex) => x`<div class="date-panel">
          <div class="header-area">
            ${decadeIndex === 0 ? x`<sh-icon
                  icon="arrow-left-s"
                  size="m"
                  button
                  @click="${() => {
        this.decade -= 10;
        this.generateYearViewData();
      }}"
                ></sh-icon>` : x`<div class="icon-dummy"></div>`}
            <div class="month-and-year-display">
              ${decadeData[1].date.getFullYear()} - ${decadeData[10].date.getFullYear()}
            </div>
            ${decadeIndex === this._yearViewDatas.length - 1 ? x`<sh-icon
                  icon="arrow-right-s"
                  size="m"
                  button
                  @click="${() => {
        this.decade += 10;
        this.generateYearViewData();
      }}"
                ></sh-icon>` : x`<div class="icon-dummy"></div>`}
          </div>
          <div class="date-grid">
            ${decadeData.map((yearData, yearIndex) => x`<span
                  class="${o7(this._getComputedClasses(yearData, yearIndex))}"
                  @click="${() => {
        dispatchCustomEvent(this, "year-clicked", {
          clickedYear: yearData.date.getFullYear()
        });
      }}"
                  tabindex="${yearData.isDisabled ? "-1" : "0"}"
                >
                  ${yearData.date.getFullYear()}
                </span>`)}
          </div>
        </div> `)}
    </div>`;
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      } else {
        this.setAttribute("tabindex", 0);
      }
    }
    generateYearViewData() {
      let startdecade = this.decade;
      let yearViewDatas = [];
      for (let i7 = 0; i7 < this.months; i7++) {
        yearViewDatas.push(generateDecadeData(startdecade, this.todaysDate, this.selectedDate, this.futureDateDisable, this.pastDateDisable, this.minDate, this.maxDate));
        startdecade += 10;
      }
      this._yearViewDatas = yearViewDatas;
    }
    _getComputedClasses(yearObject, yearIndex) {
      return {
        year: true,
        today: yearObject.isThisYear,
        selected: yearObject.isSelected,
        disabled: yearObject.isDisabled,
        "other-decade": yearIndex === 0 || yearIndex === 11,
        "focus-item": true
      };
    }
    _enterKeyAction(focusedElement) {
      if (focusedElement !== this) {
        focusedElement.click();
      }
    }
  };
  customElements.define("sh-private-year-selector", SHPrivateYearSelector);

  // ../sh-datepicker/src/sh-private-calendar-view.js
  var SHPrivateCalendarView = class extends s4 {
    static get properties() {
      return {
        currentView: { type: String },
        startingMonth: { type: Number },
        startingYear: { type: Number },
        startingDecade: { type: Number },
        todaysDate: { type: Object },
        selectedDates: { type: Array },
        futureDateDisable: { type: Boolean },
        pastDateDisable: { type: Boolean },
        minDate: { type: Object },
        maxDate: { type: Object },
        months: { type: Number },
        range: { type: Boolean },
        attachNode: { type: Object },
        responsive: { type: Boolean },
        locale: { type: String },
        close: { type: Boolean, reflect: true },
        startMondayLocales: { type: Array }
      };
    }
    static get styles() {
      return [sh_private_calender_view_lit_scss_default];
    }
    constructor() {
      super();
      this.selectedDates = [];
    }
    connectedCallback() {
      super.connectedCallback();
      this.documentBodyClickListener = this._documentBodyClickActions.bind(this);
      document.body.addEventListener("click", this.documentBodyClickListener);
    }
    render() {
      return x`${this.currentView === "date" ? x`<sh-private-date-selector
          .months="${this.months}"
          .month="${this.startingMonth}"
          .year="${this.startingYear}"
          .todaysDate="${this.todaysDate}"
          .selectedDates="${this.selectedDates}"
          .futureDateDisable="${this.futureDateDisable}"
          .pastDateDisable="${this.pastDateDisable}"
          .minDate="${this.minDate}"
          .maxDate="${this.maxDate}"
          .range="${this.range}"
          .startMondayLocales="${this.startMondayLocales}"
          @selected-dates-changed="${(e8) => {
        e8.stopPropagation();
        this.selectedDates = e8.target.selectedDates;
      }}"
          @month-header-clicked="${(e8) => {
        e8.stopPropagation();
        this.startingYear = e8.detail.clickedYear;
        this.currentView = "month";
      }}"
          .responsive="${this.responsive}"
          .locale="${this.locale}"
        ></sh-private-date-selector>` : ""}
    ${this.currentView === "month" ? x`<sh-private-month-selector
          .months="${this.months}"
          .year="${this.startingYear}"
          .todaysDate="${this._getMonthViewFormatDate(this.todaysDate)}"
          .minDate="${this._getMonthViewFormatDate(this.minDate)}"
          .maxDate="${this._getMonthViewFormatDate(this.maxDate)}"
          .selectedDate="${this._getMonthViewSelectedDate(this.selectedDates)}"
          .futureDateDisable="${this.futureDateDisable}"
          .pastDateDisable="${this.pastDateDisable}"
          .locale="${this.locale}"
          @month-clicked="${(e8) => {
        e8.stopPropagation();
        this.startingMonth = e8.detail.clickedMonth;
        this.startingYear = e8.detail.clickedYear;
        this.currentView = "date";
      }}"
          @year-header-clicked="${(e8) => {
        e8.stopPropagation();
        this.startingDecade = e8.detail.belongingDecade;
        this.currentView = "year";
      }}"
          .responsive="${this.responsive}"
        ></sh-private-month-selector>` : ""}
    ${this.currentView === "year" ? x`<sh-private-year-selector
          .months="${this.months}"
          .decade="${this.startingDecade}"
          .todaysDate="${this._getYearViewFormatDate(this.todaysDate)}"
          .selectedDate="${this._getYearViewSelectedDate(this.selectedDates)}"
          .minDate="${this._getYearViewFormatDate(this.minDate)}"
          .maxDate="${this._getYearViewFormatDate(this.maxDate)}"
          .futureDateDisable="${this.futureDateDisable}"
          .pastDateDisable="${this.pastDateDisable}"
          @year-clicked="${(e8) => {
        e8.stopPropagation();
        this.startingYear = e8.detail.clickedYear;
        this.currentView = "month";
      }}"
          .responsive="${this.responsive}"
        ></sh-private-year-selector>` : ""}`;
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("currentView") && this.currentView) {
        this.openCurrentView();
      }
    }
    disconnectedCallback() {
      document.body.removeEventListener("click", this.documentBodyClickListener);
      super.disconnectedCallback();
    }
    _documentBodyClickActions(e8) {
      if (e8.composedPath().indexOf(this) === -1 && e8.composedPath().indexOf(this.attachNode) === -1 && !this.responsive) {
        dispatchCustomEvent(this, "calendar-closed");
      }
    }
    _getMonthViewFormatDate(date) {
      let dateCopy;
      if (date) {
        dateCopy = new Date(date.getTime());
        dateCopy.setDate(1);
        dateCopy.setHours(0, 0, 0, 0);
      }
      return dateCopy;
    }
    _getYearViewFormatDate(date) {
      let dateCopy;
      if (date) {
        dateCopy = new Date(date.getTime());
        dateCopy.setMonth(0, 1);
        dateCopy.setHours(0, 0, 0, 0);
      }
      return dateCopy;
    }
    _getMonthViewSelectedDate(selectedDates) {
      if (selectedDates.length === 2 && this.range) {
        return this._getMonthViewFormatDate(this.selectedDates[1]);
      } else if (selectedDates.length === 1 && !this.range) {
        return this._getMonthViewFormatDate(this.selectedDates[0]);
      } else {
        return null;
      }
    }
    _getYearViewSelectedDate(selectedDates) {
      if (selectedDates.length === 2 && this.range) {
        return this._getYearViewFormatDate(this.selectedDates[1]);
      } else if (selectedDates.length === 1 && !this.range) {
        return this._getYearViewFormatDate(this.selectedDates[0]);
      } else {
        return null;
      }
    }
    openCurrentView() {
      const selector = this.currentView === "date" ? "date-selector" : this.currentView === "month" ? "month-selector" : "year-selector";
      const generatorFunction = this.currentView === "date" ? "generateCalendarDatas" : this.currentView === "month" ? "generateMonthViewData" : "generateYearViewData";
      const selectorComponent = this.shadowRoot.querySelector(`sh-private-${selector}`);
      selectorComponent[generatorFunction]();
      selectorComponent.focus();
    }
  };
  customElements.define("sh-private-calendar-view", SHPrivateCalendarView);

  // ../sh-datepicker/src/sh-datepicker.js
  var SHDatepicker = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        error: { type: Boolean, reflect: true },
        errorMessage: { type: String, reflect: true, attribute: "error-message" },
        hint: { type: String, reflect: true, attribute: "hint" },
        success: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        readonly: { type: Boolean, reflect: true },
        safety: { type: Boolean, reflect: true },
        mandatory: { type: Boolean, reflect: true },
        value: { type: String, reflect: true },
        active: { type: Boolean, reflect: true },
        range: { type: Boolean, reflect: true },
        separator: { type: String, reflect: true },
        format: { type: String, reflect: true },
        futureDateDisable: {
          type: Boolean,
          reflect: true,
          attribute: "future-date-disable"
        },
        condensed: { type: Boolean, reflect: true },
        noBorder: { type: Boolean, reflect: true, attribute: "no-border" },
        min: { type: String, reflect: true },
        max: { type: String, reflect: true },
        editable: { type: Boolean, reflect: true },
        months: { type: Number, reflect: true },
        pastDateDisable: {
          type: Boolean,
          reflect: true,
          attribute: "past-date-disable"
        },
        responsive: {
          type: String,
          reflect: true
        },
        scrollpicker: {
          type: String,
          reflect: true
        },
        fromDate: {
          type: String,
          reflect: true,
          attribute: "from-date"
        },
        toDate: {
          type: String,
          reflect: true,
          attribute: "to-date"
        },
        locale: {
          type: String,
          reflect: true
        },
        noClear: { type: Boolean, reflect: true, attribute: "no-clear" },
        standardValue: { type: Array },
        _currentView: { type: String },
        _selectedDates: { type: Array },
        _todaysDate: { type: Object },
        _showOverlay: { type: Boolean },
        _month: { type: Number },
        _year: { type: Number },
        _minDate: { type: String },
        _maxDate: { type: String },
        _scrollpicker: { type: Boolean },
        _responsive: { type: Boolean },
        _scrollpickerItems: { type: Array },
        _scrollpickerScroll: { type: Array },
        _scrollpickerValues: { type: Array }
      };
    }
    static get styles() {
      return [sh_datepicker_lit_scss_default];
    }
    constructor() {
      super();
      this.label = "Label";
      this.format = "MMDDYYYY";
      this.separator = "/";
      this.months = 1;
      this.disabled = false;
      this.readonly = false;
      this.range = false;
      this.futureDateDisable = false;
      this.pastDateDisable = false;
      this.condensed = false;
      this.editable = false;
      this.responsive = "false";
      this.scrollpicker = "false";
      this.error = false;
      this.success = false;
      this.safety = false;
      this.noBorder = false;
      this.mandatory = false;
      this.max = "";
      this.min = "";
      this.locale = "en";
      this.standardValue = [];
      this._selectedDates = [];
      this._scrollpickerValues = [];
      this._startMondayLocales = ["de", "es", "zh", "fr", "ru-ru", "it-it", "ko-kr", "pt", "pt-br"];
    }
    render() {
      return x`<sh-input-text
        .label="${this.label}"
        .error="${this.error}"
        .errorMessage="${this.errorMessage}"
        .hint="${this.hint}"
        .success="${this.success}"
        .disabled="${this.disabled}"
        .safety="${this.safety}"
        .mandatory="${this.mandatory}"
        .readonly="${this.readonly}"
        .value="${this.value}"
        ._inputReadonly="${!this.editable}"
        ._showOutline="${this.active && !this.readonly}"
        .condensed="${this.condensed}"
        .noBorder="${this.noBorder}"
        ?no-clear="${this.noClear}"
        ._notifyInputClick="${true}"
        @input-clicked="${(e8) => {
        e8.stopPropagation();
        this._toggleActive();
      }}"
        @input="${(e8) => {
        this.active = false;
        this.value = e8.target.value;
      }}"
        @clear-clicked="${(e8) => {
        e8.stopPropagation();
        this.value = "";
        if (!this.active && !this.editable) {
          e8.target.defocus();
        } else {
          this.active = false;
        }
      }}"
        @value-changed="${(e8) => {
        e8.stopPropagation();
      }}"
        class="input"
      >
        ${!this.readonly ? x`<sh-icon
              slot="icon"
              icon="calendar"
              size="s"
              button
              @click="${() => {
        this._toggleActive();
      }}"
              .disabled="${this.disabled}"
            ></sh-icon>` : ""}
      </sh-input-text>
      <div class="overlay-container">
        ${!this._responsive ? x`
              <sh-overlay
                .opened=${this._showOverlay && !this.readonly}
                scroll-action="cancel"
                no-overlap
                horizontal-align="auto"
                auto-fit-on-attach
                .noCancelOnOutsideClick="${true}"
                @overlay-canceled=${(e8) => {
        this._overlayCancelledCallback(e8);
      }}
              >
                ${this._showOverlay ? x`<sh-private-calendar-view
                      .currentView="${this._currentView}"
                      .months="${this.months}"
                      .startingMonth="${this._month}"
                      .startingYear="${this._year}"
                      .todaysDate="${this._todaysDate}"
                      .selectedDates="${this._selectedDates}"
                      .futureDateDisable="${this.futureDateDisable}"
                      .minDate="${this._minDate}"
                      .maxDate="${this._maxDate}"
                      .range="${this.range}"
                      .pastDateDisable="${this.pastDateDisable}"
                      .attachNode="${this}"
                      .locale="${this.locale}"
                      .startMondayLocales="${this._startMondayLocales}"
                      @ready-to-update-value="${(e8) => {
        e8.stopPropagation();
        this._updateValue(e8.detail.selectedDates);
        e8.target.close = true;
      }}"
                      @calendar-closed="${(e8) => {
        e8.stopPropagation();
        e8.target.close = true;
      }}"
                      @animationend="${(e8) => {
        e8.stopPropagation();
        if (e8.target.close) {
          this.active = false;
        }
      }}"
                    ></sh-private-calendar-view>` : ""}
              </sh-overlay>
            ` : ""}
      </div>
      ${this._responsive && this._showOverlay && !this.readonly ? this._scrollpicker ? x`<sh-scrollpicker
              .items="${this._scrollpickerItems}"
              .visible="${this._showOverlay}"
              .scroll="${this._scrollpickerScroll}"
              .values="${this._scrollpickerValues}"
              @values-changed="${(e8) => {
        e8.stopPropagation();
        this._updateValueFromScrollPicker(e8.target);
      }}"
              @visible-changed="${(e8) => {
        e8.stopPropagation();
        if (!e8.target.visible) {
          this.active = false;
        }
      }}"
              @scroll-changed="${(e8) => {
        e8.stopPropagation();
        this._scrollpickerScroll = e8.target.scroll;
      }}"
            ></sh-scrollpicker>` : x`<sh-drawer
              .visible="${this._showOverlay && !this.readonly}"
              position="bottom"
              @transitionend="${(e8) => {
        e8.stopPropagation();
        if (!e8.target.visible) {
          this.active = false;
        }
      }}"
              class="initial-slide-on-connect"
            >
              <sh-private-calendar-view
                .currentView="${this._currentView}"
                .months="${this.months}"
                .startingMonth="${this._month}"
                .startingYear="${this._year}"
                .todaysDate="${this._todaysDate}"
                .selectedDates="${this._selectedDates}"
                .futureDateDisable="${this.futureDateDisable}"
                .minDate="${this._minDate}"
                .maxDate="${this._maxDate}"
                .range="${this.range}"
                .pastDateDisable="${this.pastDateDisable}"
                .attachNode="${this}"
                .responsive="${true}"
                .locale="${this.locale}"
                .startMondayLocales="${this._startMondayLocales}"
                @ready-to-update-value="${(e8) => {
        e8.stopPropagation();
        this._updateValue(e8.detail.selectedDates);
        e8.target.parentElement.visible = false;
      }}"
              ></sh-private-calendar-view>
            </sh-drawer>` : ""}`;
    }
    connectedCallback() {
      super.connectedCallback();
      if (windowSize.util.valueMatches(document.documentElement.clientWidth, "<", TABLET_BREAKPOINT)) {
        this.responsive = "true";
      }
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("active")) {
        this._handleActive();
      }
      if (changedProperties.has("min")) {
        this._handleMin();
      }
      if (changedProperties.has("max")) {
        this._handleMax();
      }
      if (changedProperties.has("scrollpicker")) {
        this._scrollpicker = JSON.parse(this.scrollpicker);
      }
      if (changedProperties.has("responsive")) {
        this._responsive = JSON.parse(this.responsive);
      }
      if (changedProperties.has("value")) {
        this._setResetFromToDates();
        if (!this.value) {
          this._clearSelectedDates();
        }
      }
      dispatchAttributeChangedEvent(this, changedProperties, [
        "active",
        "value",
        "error",
        "disabled",
        "noClear"
      ]);
    }
    _overlayCancelledCallback(e8) {
      const event = e8.detail;
      if (event.type === "scroll") {
        this.active = false;
      }
    }
    _handleMin() {
      if (!this.min) {
        this._minDate = null;
      } else {
        const todaysDate = this._getTodaysDate();
        const minDateIsValid = DateFormatHelper.isValidDate(this.min, "YYYYMMDD", "-", "en", todaysDate);
        if (minDateIsValid) {
          this._minDate = DateFormatHelper.parseDate(this.min, "YYYY-MM-DD", "-", "en", todaysDate);
        } else {
          this._minDate = null;
        }
      }
    }
    _handleMax() {
      if (!this.max) {
        this._maxDate = null;
      } else {
        const todaysDate = this._getTodaysDate();
        const maxDateIsValid = DateFormatHelper.isValidDate(this.max, "YYYYMMDD", "-", "en", todaysDate);
        if (maxDateIsValid) {
          this._maxDate = DateFormatHelper.parseDate(this.max, "YYYY-MM-DD", "-", "en", todaysDate);
        } else {
          this._maxDate = null;
        }
      }
    }
    _updateValue(selectedDates) {
      if (selectedDates.length === 2) {
        this.value = `${DateFormatHelper.getFormattedDate(selectedDates[0], this.format, this.separator, this.locale)}-${DateFormatHelper.getFormattedDate(selectedDates[1], this.format, this.separator, this.locale)}`;
      } else {
        this.value = `${DateFormatHelper.getFormattedDate(selectedDates[0], this.format, this.separator, this.locale)}`;
      }
      if (this.editable || this.value) {
        this.shadowRoot.querySelector("sh-input-text").focus();
      } else if (!this.value) {
        this.shadowRoot.querySelector("sh-input-text").defocus();
      }
    }
    _setMonthYearDate(date) {
      this._month = date.getMonth();
      this._year = date.getFullYear();
      this._scrollpickerDate = date.getDate();
    }
    _setDefaultVariables(todaysDate) {
      this._setMonthYearDate(todaysDate);
      this._selectedDates = [];
    }
    _setSingleDateVariables(singleDate) {
      this._setMonthYearDate(singleDate);
      this._selectedDates = [singleDate];
    }
    _setRangeDateVariables(rangeDates) {
      this._setMonthYearDate(rangeDates[1]);
      this._selectedDates = rangeDates;
    }
    _updateVariables() {
      this._todaysDate = this._getTodaysDate();
      this._currentView = "date";
      if (this.value) {
        const actualFormat = DateFormatHelper.insertSeperator(this.separator, this.format);
        const isValueValid = DateFormatHelper.isValueValid(this.value, this.range, this.separator, this.format, this.futureDateDisable, this.pastDateDisable, this._todaysDate, this.min, this.max, this.locale);
        if (isValueValid) {
          if (!this.range) {
            const parsedDate = DateFormatHelper.parseDate(this.value, actualFormat, this.separator, this.locale, this._todaysDate);
            this._setSingleDateVariables(parsedDate);
          } else {
            const parsedRangeDates = DateFormatHelper.parseRangeDates(this.value, actualFormat, this.separator, this.locale, this._todaysDate);
            this._setRangeDateVariables(parsedRangeDates);
          }
        } else {
          this._setDefaultVariables(this._todaysDate);
        }
      } else {
        this._setDefaultVariables(this._todaysDate);
      }
    }
    _getTodaysDate() {
      const todaysDate = new Date();
      todaysDate.setHours(0, 0, 0, 0);
      return todaysDate;
    }
    _toggleActive() {
      this.active = !this.active;
    }
    _handleActive() {
      if (this.active) {
        this._updateVariables();
        this._showOverlay = true;
        if (this._scrollpicker) {
          this._initialiseScrollpicker();
        }
      }
      if (!this.active) {
        this._showOverlay = false;
        this._scrollpickerItems = [];
        this._scrollpickerValues = [];
        this._scrollpickerScroll = false;
        this._clearSelectedDates();
      }
    }
    _initialiseScrollpicker() {
      const months = new Array(12).fill(0).map((_2, index) => DateFormatHelper.getShortMonthName(index, this.locale));
      const years = new Array(201).fill(0).map((_2, index) => index + 1900);
      const dayCount = this._getDayCountforMonthYear(this._month, this._year);
      const days = new Array(dayCount).fill(0).map((_2, index) => index + 1);
      this._scrollpickerItems = [months, days, years];
      this._scrollpickerValues = [
        DateFormatHelper.getShortMonthName(this._month, this.locale),
        this._scrollpickerDate,
        this._year
      ];
      this._scrollpickerScroll = true;
    }
    _getDayCountforMonthYear(monthIndex, year) {
      let dayCount = 0;
      for (let i7 = 1; i7 <= 31; i7++) {
        let testDate = new Date(year, monthIndex, i7, 0, 0, 0, 0);
        if (testDate.getMonth() === monthIndex) {
          ++dayCount;
        } else {
          break;
        }
      }
      return dayCount;
    }
    _updateValueFromScrollPicker(scrollpicker) {
      const values = scrollpicker.values;
      const monthIndex = DateFormatHelper.getMonthIndex(values[0], this.locale);
      const year = values[2];
      const date = values[1];
      const dayCount = this._getDayCountforMonthYear(monthIndex, year);
      const dayCountIsNotCorrect = dayCount !== scrollpicker.items[1].length;
      const requiredDate = dayCountIsNotCorrect ? date > dayCount ? dayCount : date : date;
      this._scrollpickerValues = [
        DateFormatHelper.getShortMonthName(monthIndex, this.locale),
        requiredDate,
        year
      ];
      this.value = DateFormatHelper.getFormattedDate(new Date(year, monthIndex, requiredDate, 0, 0, 0, 0), this.format, this.separator, this.locale);
      if (dayCountIsNotCorrect) {
        const days = new Array(dayCount).fill(0).map((_2, index) => index + 1);
        this._scrollpickerItems[1] = days;
        this._scrollpickerScroll = true;
      }
    }
    _resetFromToDate() {
      this.fromDate = null;
      this.toDate = null;
    }
    _setResetFromToDates() {
      this._todaysDate = this._getTodaysDate();
      let standardValue = [], fromDate = null, toDate = null;
      if (this.value) {
        const actualFormat = DateFormatHelper.insertSeperator(this.separator, this.format);
        const isValueValid = DateFormatHelper.isValueValid(this.value, this.range, this.separator, this.format, this.futureDateDisable, this.pastDateDisable, this._todaysDate, this.min, this.max, this.locale);
        if (isValueValid) {
          if (this.range) {
            [fromDate, toDate] = DateFormatHelper.extractFromToParts(this.value, this.separator, actualFormat);
            const parsedRangeDates = DateFormatHelper.parseRangeDates(this.value, actualFormat, this.separator, this.locale, this._todaysDate);
            standardValue = parsedRangeDates;
          } else {
            const parsedDate = DateFormatHelper.parseDate(this.value, actualFormat, this.separator, this.locale, this._todaysDate);
            standardValue = [parsedDate];
          }
        }
      }
      this.fromDate = fromDate;
      this.toDate = toDate;
      this.standardValue = standardValue;
    }
    _clearSelectedDates() {
      this._selectedDates = [];
    }
  };
  customElements.define("sh-datepicker", SHDatepicker);

  // ../sh-divider/src/sh-divider.lit.scss.js
  var sh_divider_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-divider-thickness=0.0625rem] - width / height of the  vertical & horizontal divider
   */
  --sh-divider-thickness: 0.0625rem;
  /* 
   * @cssprop [--sh-divider-horizontal-s=0.5rem 0] - spacing s for the horizontal divider
   */
  --sh-divider-horizontal-s: 0.5rem 0;
  /* 
   * @cssprop [--sh-divider-horizontal-m=1rem 0] - spacing m for the horizontal divider
   */
  --sh-divider-horizontal-m: 1rem 0;
  /* 
   * @cssprop [--sh-divider-horizontal-l=1.5rem 0] - spacing l for the horizontal divider
   */
  --sh-divider-horizontal-l: 1.5rem 0;
  /* 
   * @cssprop [--sh-divider-horizontal-xl=3rem 0] - spacing xl for the horizontal divider
   */
  --sh-divider-horizontal-xl: 3rem 0;
  /* 
   * @cssprop [--sh-divider-vertical-s=0 0.5rem] - spacing s for the vertical divider
   */
  --sh-divider-vertical-s: 0 0.5rem;
  /* 
   * @cssprop [--sh-divider-vertical-m=0 1rem] - spacing m for the vertical divider
   */
  --sh-divider-vertical-m: 0 1rem;
  /* 
   * @cssprop [--sh-divider-vertical-l=0 1.5rem] - spacing l for the vertical divider
   */
  --sh-divider-vertical-l: 0 1.5rem;
  /* 
   * @cssprop [--sh-divider-vertical-xl=0 3rem] - spacing xl for the vertical divider
   */
  --sh-divider-vertical-xl: 0 3rem;
}

:host {
  height: fit-content;
  height: -ms-fit-content;
  height: -moz-fit-content;
  display: block;
}

.divider-wrapper {
  background-color: rgba(var(--ui-1), var(--opacity-6));
}

:host(:not([vertical])) :host(:not([vertical])) .divider-wrapper {
  width: 100%;
}

:host([vertical]),
:host([vertical]) .divider-wrapper {
  height: 100%;
}

:host(:not([vertical])) .divider-wrapper {
  height: var(--sh-divider-thickness);
}

:host([vertical]) .divider-wrapper {
  width: var(--sh-divider-thickness);
}

/* spacing */
:host([spacing=s]) .divider-wrapper {
  margin: var(--sh-divider-horizontal-s);
}

:host([spacing=m]) .divider-wrapper {
  margin: var(--sh-divider-horizontal-m);
}

:host([spacing=l]) .divider-wrapper {
  margin: var(--sh-divider-horizontal-l);
}

:host([spacing=xl]) .divider-wrapper {
  margin: var(--sh-divider-horizontal-xl);
}

/* vertical divider spacing */
:host([vertical][spacing=s]) .divider-wrapper {
  margin: var(--sh-divider-vertical-s);
}

:host([vertical][spacing=m]) .divider-wrapper {
  margin: var(--sh-divider-vertical-m);
}

:host([vertical][spacing=l]) .divider-wrapper {
  margin: var(--sh-divider-vertical-l);
}

:host([vertical][spacing=xl]) .divider-wrapper {
  margin: var(--sh-divider-vertical-xl);
}`;

  // ../sh-divider/src/sh-divider.js
  var SHDivider = class SHDivider2 extends s4 {
    constructor() {
      super(...arguments);
      this.spacing = "s";
      this.vertical = false;
    }
    static get styles() {
      return [sh_divider_lit_scss_default];
    }
    render() {
      return x` <div class="divider-wrapper"></div> `;
    }
    updated(changedProperties) {
      const listOfProperties = ["vertical", "spacing"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHDivider.prototype, "spacing", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHDivider.prototype, "vertical", void 0);
  SHDivider = __decorate([e4("sh-divider")], SHDivider);

  // ../sh-dropdown/src/sh-dropdown.lit.scss.js
  var sh_dropdown_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-dropdown-overlay-height=2.5rem] - height of the dropdown to position the overlay
   */
  --sh-dropdown-overlay-height: 2.5rem;
  /* 
   * @cssprop [--sh-dropdown-overlay-condensed-height=2rem] - height of the dropdown when condensed to position the overlay
   */
  --sh-dropdown-overlay-condensed-height: 2rem;
  /* 
   * @cssprop [--sh-dropdown-overlay-padding=0 0.5rem] - overlay padding
   */
  --sh-dropdown-overlay-padding: 0 0.5rem;
  /* 
   * @cssprop [--sh-dropdown-overlay-max-height=13.75rem] - max height of the overlay
   */
  --sh-dropdown-overlay-max-height: 13.75rem;
  /* 
   * @cssprop [--sh-dropdown-icon-input-padding=1.25rem 0 0.1875rem 3rem] - padding of the dropdown input with icon set
   */
  --sh-dropdown-icon-input-padding: 1.25rem 0 0.1875rem 3rem;
  /* 
   * @cssprop [--sh-dropdown-icon-label-padding-left=3rem] - padding of the label with icon set
   */
  --sh-dropdown-icon-label-padding-left: 3rem;
  /* 
   * @cssprop [--sh-dropdown-icon-top=0.25rem] - position top of the icon
   */
  --sh-dropdown-icon-top: 0.25rem;
  /* 
   * @cssprop [--sh-dropdown-icon-left=0.5rem] - position left of the icon
   */
  --sh-dropdown-icon-left: 0.5rem;
  /* 
   * @cssprop [--sh-dropdown-label-pointer-event=all] - Pointer event of the label
   */
  --sh-dropdown-label-pointer-event: all;
  /* 
   * @cssprop [--sh-dropdown-label-disabled-pointer-event=none] - pointer events of the input text label when disabled
   */
  --sh-dropdown-label-disabled-pointer-event: none;
  /* 
   * @cssprop [--sh-dropdown-icon-wrapper-left-margin=0.25rem] - left margin of the arrow icon inside the icon wrapper
   */
  --sh-dropdown-icon-wrapper-left-margin: 0.25rem;
  /* 
   * @cssprop [--sh-dropdown-error-success-icon-left-margin=0.5rem] - left margin of the error/success icons inside the icon wrapper
   */
  --sh-dropdown-error-success-icon-left-margin: 0.5rem;
  /* 
   * @cssprop [--sh-dropdown-condensed-input-padding=0.25rem 0 0.1875rem 2.5rem] - Padding for the input when dropdown is condensed
   */
  --sh-dropdown-condensed-input-padding: 0.25rem 0 0.1875rem 2.5rem;
  /* 
   * @cssprop [--sh-dropdown-arrow-icon-size=1.9375rem] - Dropdown arrow icon size when dropdown is condensed
   */
  --sh-dropdown-arrow-icon-size: 1.9375rem;
  /* 
   * @cssprop [--sh-dropdown-input-cursor=pointer] - cursor for the dropdown input
   */
  --sh-dropdown-input-cursor: pointer;
  /* 
   * @cssprop [--sh-dropdown-transition-time=0s] - transition for label and input
   */
  --sh-dropdown-transition-time: 0s;
}

:host {
  width: 100%;
  height: fit-content;
  position: relative;
  display: block;
  --sh-input-text-pointer-events: var(--sh-dropdown-label-pointer-event);
  --sh-input-text-icon-left-margin: var(--sh-dropdown-error-success-icon-left-margin);
  --sh-input-text-icon-wrapper-right-padding: var(--sh-dropdown-icon-wrapper-left-margin);
  --sh-input-text-slot-icon-left-margin: var(--sh-dropdown-icon-wrapper-left-margin);
  --sh-input-text-input-cursor: var(--sh-dropdown-input-cursor);
  --transition-time: var(--sh-dropdown-transition-time);
}

sh-input-text {
  cursor: pointer;
}

.dropdown-wrapper {
  position: relative;
}

.content-wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
}

:host(:not([disabled]:not([readonly]))) .dropdown-wrapper:focus-visible {
  outline: var(--focus-outline);
}

:host([active]) #dropdown-icon {
  transform: rotate(180deg);
}

.overlay {
  min-width: 0;
  overflow: auto;
  padding: var(--sh-dropdown-overlay-padding);
  background: var(--base-4);
  box-shadow: var(--shadow-overlay);
  box-sizing: border-box;
  border-radius: 0.125rem;
  display: none;
}

:host([items]) .overlay {
  max-height: var(--max-height) !important;
}

:host(:not([items])) .overlay {
  max-height: var(--sh-dropdown-overlay-max-height) !important;
}

:host([active]) .overlay {
  display: block;
  max-width: unset !important;
}

/* Validation Styles */
:host([readonly]) #dropdown-icon {
  display: none;
}

:host([readonly]),
:host([disabled]) {
  pointer-events: none;
  --sh-input-text-pointer-events: var(--sh-dropdown-label-disabled-pointer-event);
}

/* icon */
:host([condensed]:not([editable])) {
  --sh-input-text-label-condensed-display: block;
}

.dropdown-icon {
  position: absolute;
  top: var(--sh-dropdown-icon-top);
  left: var(--sh-dropdown-icon-left);
}

::slotted([class="touch-device hidden"]),
::slotted([class=hidden]) {
  display: none;
}

:host([icon]) {
  --sh-input-text-label-left: var(--sh-dropdown-icon-label-padding-left) !important;
  --sh-input-text-padding: var(--sh-dropdown-icon-input-padding) !important;
  --sh-input-text-condensed-padding: var(--sh-dropdown-condensed-input-padding) !important;
}

.overlay-container {
  position: absolute;
  height: var(--sh-dropdown-overlay-height);
  top: 0rem;
  left: 0rem;
}

:host([condensed]) .overlay-container {
  height: var(--sh-dropdown-overlay-condensed-height);
}

:host([condensed]) #dropdown-icon {
  --sh-icon-size-m: var(--sh-dropdown-arrow-icon-size);
}`;

  // ../sh-dropdown/src/sh-dropdown.js
  var SHDropdown = class extends RefrainSpaceScrollMixin(s4) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        value: { type: String, reflect: true },
        hint: { type: String, reflect: true },
        icon: { type: String, reflect: true },
        active: { type: Boolean, reflect: true },
        errorMessage: { type: String, reflect: true, attribute: "error-message" },
        readonly: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        _currentFocus: { type: Number },
        multiSelect: { type: Boolean, reflect: true, attribute: "multi-select" },
        noBorder: { type: Boolean, reflect: true, attribute: "no-border" },
        noClear: { type: Boolean, reflect: true, attribute: "no-clear" },
        mandatory: { type: Boolean, reflect: true },
        error: { type: Boolean, reflect: true },
        success: { type: Boolean, reflect: true },
        safety: { type: Boolean, reflect: true },
        editable: { type: Boolean, reflect: true },
        items: { type: Number, reflect: true },
        display: { type: String, reflect: true }
      };
    }
    static get styles() {
      return [sharedStyles, sh_dropdown_lit_scss_default];
    }
    render() {
      return x`
      <div class="dropdown-wrapper">
        <div class="content-wrapper">
        ${this.icon && !this.multiSelect ? x` <sh-icon
                icon="${this.icon}"
                tabindex="-1"
                size="${this.condensed ? "s" : "m"}"
                class="dropdown-icon"
                ?disabled="${this.disabled}"
              ></sh-icon>` : ""}
          <sh-input-text
            id="dropdownInput"
            .label="${this.label}"
            .error="${this.error}"
            .errorMessage="${this.errorMessage}"
            .hint="${this.hint}"
            ?success="${this.success}"
            ?disabled="${this.disabled}"
            ?safety="${this.safety}"
            ?mandatory="${this.mandatory}"
            ?readonly="${this.readonly}"
            ?no-clear="${this.noClear}"
            .value="${this.value ? this.value : ""}"
            ._inputReadonly="${!this.editable}"
            ._showOutline="${this.active && !this.readonly}"
            .condensed="${this.condensed}"
            .noBorder="${this.noBorder}"
            ._notifyInputClick="${true}"
            ._showTooltip="${true}"
            @clear-clicked="${this._resetValue}"
            type="text"
            @input="${this._inputChangeListener}"
            @value-changed="${(e8) => e8.stopPropagation()}"
            @input-hover="${(e8) => {
        const input = e8.target.shadowRoot.querySelector("#input");
        if (input.offsetWidth < input.scrollWidth) {
          input.setAttribute("title", this.value);
        } else {
          input.removeAttribute("title");
        }
      }}"
            @label-hover="${(e8) => {
        const label = e8.target.shadowRoot.querySelector(".label-wrapper");
        if (label.offsetWidth < label.scrollWidth) {
          label.setAttribute("title", this.label);
        } else {
          label.removeAttribute("title");
        }
      }}"
          >
            <sh-icon
              button
              tabindex="-1"
              slot="icon"
              id="dropdown-icon"
              icon="down-s"
            ></sh-icon>
          </sh-input-text>
        </div>
        <div class="overlay-container">
          <sh-overlay
            class="overlay"
            style="width:${getComputedStyle(this).width}; top: calc(top - 16px);"
            @click="${(event) => this.multiSelect ? event.stopPropagation() : ""}"
            scroll-action="cancel"
            no-overlap
            horizontal-align="left"
            @opened="${(e8) => this._overlayOpenCallback(e8)}"
          >
            <slot id="dropdownMenu" @slotchange="${this._handleSlotChange}"></slot>
          </sh-overlay>
        </div>
        </div>
      </div>
    `;
    }
    constructor() {
      super();
      this.label = "label";
      this._currentFocus = -1;
      this.noClear = true;
      this._multiValue = [];
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("role", "listbox");
      this._handleMenuItemActiveChange = this._updateDropdown.bind(this);
      this.addEventListener("active-changed", this._handleMenuItemActiveChange);
      this.addEventListener("click", this._handleClick);
      this.resizeListener = this._handleResize.bind(this);
      window.addEventListener("resize", this.resizeListener);
    }
    updated(changedProperties) {
      if (changedProperties.has("active")) {
        this._toggleDropdown();
      }
      if (changedProperties.has("value")) {
        this._valueObserver();
      }
      if (changedProperties.has("multiSelect")) {
        this._addMenuItemCheckboxes();
      }
      if (changedProperties.has("items")) {
        this._updateMaxHeight();
      }
      if (changedProperties.has("editable")) {
        this.noClear = false;
      }
      const listOfProperties = [
        "label",
        "value",
        "hint",
        "active",
        "icon",
        "errorMessage",
        "readonly",
        "disabled",
        "condensed",
        "multiSelect",
        "noBorder",
        "noClear",
        "mandatory",
        "error",
        "success",
        "safety",
        "editable"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _updateMaxHeight() {
      if (this.items) {
        const menuHeight = getComputedStyle(this).getPropertyValue("--sh-dropdown-overlay-height");
        let finalMenuHeight = Number(menuHeight.replace("rem", ""));
        finalMenuHeight = finalMenuHeight === 0 ? 2.5 : finalMenuHeight;
        this.style.setProperty("--max-height", `${this.items * finalMenuHeight}rem`);
      }
    }
    _inputChangeListener(e8) {
      const menuItems = this.querySelectorAll("sh-menu-item");
      let value = this.value = e8.target.value;
      let itemData;
      this._hideCategories();
      for (let menuItem of menuItems) {
        itemData = this._getItemData(menuItem.label, menuItem.value);
        if (itemData.toLowerCase().indexOf(value.toLowerCase()) === -1) {
          menuItem.classList.add("hidden");
        } else {
          menuItem.classList.remove("hidden");
        }
      }
      if (this.editable) {
        this.shadowRoot.querySelector("sh-overlay")._fireResize();
        this.shadowRoot.querySelector("sh-overlay").refit();
      }
    }
    _hideCategories() {
      const categories = this.querySelectorAll(":not(sh-menu-item)");
      if (categories.length > 0) {
        for (let category of categories) {
          category.classList.add("hidden");
        }
      }
    }
    firstUpdated() {
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("no-hovermq");
      }
      this.addEventListener("overlay-canceled", this._overlayCancelledCallback);
      this.addEventListener("focus", () => this._handleFocus());
      this.addEventListener("keydown", (e8) => this._handleKeydown(e8));
      this.shadowRoot.querySelector("#dropdown-icon").setAttribute("tabindex", "-1");
      this._updateMaxHeight();
    }
    _handleResize() {
      this.active = false;
    }
    disconnectedCallback() {
      this.removeEventListener("active-changed", this._handleMenuItemActiveChange);
      window.removeEventListener("resize", this.resizeListener);
      super.disconnectedCallback();
    }
    _addMenuItemCheckboxes() {
      const menuItems = this.querySelectorAll("sh-menu-item");
      for (let menuItem of menuItems) {
        menuItem.checkbox = true;
      }
    }
    _handleSlotChange() {
      if (this.multiSelect) {
        this._addMenuItemCheckboxes();
      }
    }
    _valueObserver() {
      if (this.value) {
        this._updateMenuItemState();
      } else {
        this.icon = null;
        if (this.editable) {
          this._removeHiddenClass();
          this._unselectActiveItems();
        }
      }
    }
    _updateMenuItemState() {
      if (this.multiSelect) {
        return;
      }
      let menuItemFound = false;
      const menuItems = this.querySelectorAll("sh-menu-item");
      let activeMenuItemCount = 0;
      for (let menuItem of menuItems) {
        const itemData = this._getItemData(menuItem.label, menuItem.value);
        const itemIcon = menuItem.icon;
        if (this.icon && this.value === itemData && this.icon === itemIcon) {
          menuItem.active = true;
          menuItemFound = true;
          activeMenuItemCount += 1;
          this._removeHiddenClass();
        } else if (!this.icon && this.value === itemData) {
          menuItem.active = true;
          menuItemFound = true;
          activeMenuItemCount += 1;
          this._removeHiddenClass();
        } else {
          menuItem.active = false;
        }
      }
      if (activeMenuItemCount > 1) {
        console.warn(`Multiple menu-items are found to be active. This happens when no difference is found in terms of label or icon used.
        If not multi-select it is advisable to have only a single menu-item as active.`);
      }
      if (!menuItemFound) {
        this.icon = null;
      }
    }
    _updateDropdown(e8) {
      if (e8.target === this) {
        return;
      }
      const menuItem = e8.target;
      const clickevent = e8.target.clicked;
      if (this.multiSelect) {
        this._updateMultiSelectDropdownValue(menuItem);
      } else {
        this._updateDropdownValue(menuItem, clickevent);
      }
    }
    _overlayCancelledCallback(e8) {
      const event = e8.detail;
      if (event.type === "click" && event.target !== this) {
        this.active = false;
      } else if (event.type === "keydown" && event.code === "Escape" || event.type === "scroll") {
        this.active = false;
        if (!this.active) {
          this._focusInputText();
        }
      }
    }
    _handleClick(e8) {
      const inputText = this.shadowRoot.querySelector("#dropdownInput");
      const input = inputText.shadowRoot.querySelector("#input");
      if (e8.target === this && !this.disabled && !this.readonly && !e8.composedPath().find((x2) => {
        var _a4;
        return (_a4 = x2.classList) == null ? void 0 : _a4.contains("helper-text");
      })) {
        this.active = !this.active;
      }
      if (input) {
        if (this.active) {
          input.focus({ preventScroll: true });
        } else {
          input.blur();
        }
      }
      if (this.editable && this.active) {
        inputText.setAttribute("show-outline", "true");
        input.removeAttribute("readonly");
      }
    }
    _overlayOpenCallback(e8) {
      if (this.editable) {
        const inputText = this.shadowRoot.querySelector("#dropdownInput");
        const input = inputText.shadowRoot.querySelector("#input");
        input.focus();
      }
      const activeItem = this.querySelector("sh-menu-item[active]");
      if (activeItem && !this.multiSelect) {
        const activeTop = activeItem.getBoundingClientRect().top;
        const targetTop = e8.target.getBoundingClientRect().top;
        const activeItemOffsetTop = activeTop - targetTop + e8.target.scrollTop;
        e8.target.scrollTo({
          top: activeItemOffsetTop - (e8.target.offsetHeight / 2 - activeItem.offsetHeight / 2)
        });
      }
    }
    _handleKeydown(e8) {
      if (e8.code === "ArrowUp" || e8.code === "ArrowDown" || e8.code === "Home" || e8.code === "End") {
        e8.preventDefault();
        e8.stopPropagation();
      } else if (e8.code === "Tab" && !e8.shiftKey) {
        this.active = false;
        if (e8.composedPath()[0].id === "input") {
          this._inputDeSelect();
          this._toggleDropdown();
        }
      } else if (e8.code === "Tab" && e8.shiftKey) {
        this.active = false;
      }
      if (keyboardInteraction(e8, KEYCODE2.SPACE) && !this.editable) {
        e8.preventDefault();
      }
    }
    _toggleDropdown() {
      const overlay = this.shadowRoot.querySelector(".overlay");
      if (this.active) {
        overlay.open();
      } else {
        overlay.close();
        this._resetMenuItemHoverStyle();
        this._currentFocus = -1;
      }
    }
    _updateDropdownValue(menuItem, clickevent) {
      const itemData = this._getItemData(menuItem.label, menuItem.value);
      if (menuItem.active) {
        this.value = itemData;
        this._updateDropdownIcon(menuItem);
        this._unselectSiblings(menuItem);
        this.active = false;
      } else if (!menuItem.active && this.value === itemData && clickevent) {
        if (!this.icon) {
          menuItem.active = true;
        } else {
          menuItem.active = this.icon === menuItem.icon;
        }
      }
    }
    _updateDropdownIcon(menuItem) {
      if (this.value && menuItem.active && !this.multiSelect) {
        this.icon = menuItem.icon;
      } else if (!this.value || this.multiSelect) {
        this.removeAttribute("icon");
      }
    }
    _unselectSiblings(menuItem) {
      const activeItems = this.querySelectorAll("sh-menu-item[active]");
      for (let i7 = 0; i7 < activeItems.length; i7++) {
        if (this.icon && this.icon !== activeItems[i7].icon) {
          activeItems[i7].active = false;
        } else {
          const thisActiveMenuItemNeedsToBeTurnedOff = this._doesThisActiveMenuItemNeedToBeTurnedOff(menuItem.label, menuItem.value, activeItems[i7].label, activeItems[i7].value);
          if (thisActiveMenuItemNeedsToBeTurnedOff) {
            activeItems[i7].active = false;
          }
        }
      }
    }
    _updateMultiSelectDropdownValue(menuItem) {
      const itemData = this._getItemData(menuItem.label, menuItem.value);
      if (menuItem.active) {
        this._multiValue.push(itemData);
      } else {
        this._multiValue = this._multiValue.filter((val) => val !== itemData);
      }
      this.value = this._multiValue.toString();
    }
    _resetValue() {
      if (this.editable) {
        this._removeHiddenClass();
      }
      this.active = false;
      this.value = "";
      this._unselectActiveItems();
      this._focusInputText();
    }
    _removeHiddenClass() {
      const children = this.querySelectorAll("*");
      for (let child of children) {
        child.classList.remove("hidden");
      }
    }
    _resetMenuItemHoverStyle() {
      if (this._currentFocus !== -1) {
        const menuItems = this.querySelectorAll("sh-menu-item.hover");
        for (let menuItem of menuItems) {
          menuItem.classList.remove("hover");
          menuItem.classList.remove("focus");
          menuItem.blur();
        }
      }
    }
    _unselectActiveItems() {
      const activeItems = this.querySelectorAll("sh-menu-item[active]");
      for (let i7 = 0; i7 < activeItems.length; i7++) {
        activeItems[i7].active = false;
      }
    }
    _handleFocus() {
      this.onkeyup = (e8) => {
        this._keyEvents(e8);
      };
    }
    _keyEvents(e8) {
      const overlay = this.shadowRoot.querySelector(".overlay");
      if (e8.code === "Tab" && e8.composedPath()[0].id !== "clear" && e8.shiftKey && e8.composedPath()[0].classList[0] === "outer-wrapper") {
        this._inputDeSelect();
        this._focusInputText();
      }
      if (e8.code === "Enter" || e8.code === "NumpadEnter" || keyboardInteraction(e8, KEYCODE2.SPACE) && !this.editable) {
        const source = this._getEventSource(e8);
        if (!this.readonly && source.tagName !== "SH-MENU-ITEM") {
          const inputText = this.shadowRoot.querySelector("#dropdownInput");
          const input = inputText.shadowRoot.querySelector("#input");
          this.active = !this.active;
          if (this.editable) {
            if (!this.active) {
              inputText.removeAttribute("show-outline");
              input.setAttribute("readonly", "true");
            } else {
              input.removeAttribute("readonly");
              inputText.setAttribute("show-outline", "true");
              input.focus();
            }
          }
        } else {
          if (!this.active && !this.readonly) {
            this._focusInputText();
          }
        }
      } else if (e8.code === "ArrowDown" || e8.code === "Home") {
        const menuItems = this.querySelectorAll(`sh-menu-item:not([class='hidden'])`);
        if (!overlay.opened) {
          this.active = !this.active;
        } else {
          if (menuItems.length !== 0) {
            this._currentFocus = ++this._currentFocus % menuItems.length;
            this._updateFocusedItem(e8);
          }
        }
      } else if (e8.code === "ArrowUp" || e8.code === "End") {
        const menuItems = this.querySelectorAll(`sh-menu-item:not([class='hidden'])`);
        if (!overlay.opened) {
          this.active = !this.active;
        } else {
          if (menuItems.length !== 0) {
            this._decrementCurrentFocus(menuItems);
            this._updateFocusedItem(e8);
          }
        }
      } else if (e8.code === "Backspace" && this.value === "" && !overlay.opened) {
        this._focusInputText();
      }
    }
    _updateFocusedItem(e8) {
      e8.stopImmediatePropagation();
      e8.preventDefault();
      const menuItems = this.querySelectorAll(`sh-menu-item:not([class='hidden'])`);
      this._resetMenuItemHoverStyle();
      menuItems[this._currentFocus].classList.add("hover");
      menuItems[this._currentFocus].classList.add("focus");
      menuItems[this._currentFocus].focus();
    }
    _decrementCurrentFocus(menuItems) {
      if (this._currentFocus === -1) {
        this._currentFocus = (this._currentFocus + menuItems.length) % menuItems.length;
      } else {
        this._currentFocus = (this._currentFocus - 1 + menuItems.length) % menuItems.length;
      }
    }
    _getEventSource(e8) {
      const source = e8.composedPath() ? e8.composedPath()[0] : null;
      return source;
    }
    _focusInputText() {
      const inputText = this.shadowRoot.querySelector("#dropdownInput");
      const outerWrapper = inputText.shadowRoot.querySelector(".outer-wrapper");
      outerWrapper.focus();
    }
    _inputDeSelect() {
      const inputText = this.shadowRoot.querySelector("#dropdownInput");
      const input = inputText.shadowRoot.querySelector("#input");
      input.focus();
      input.setSelectionRange(0, 0);
      input.blur();
    }
    _getItemData(menuItemLabel, menuItemValue) {
      switch (this.display) {
        case "label": {
          return menuItemLabel;
        }
        case "value": {
          return menuItemValue;
        }
        default: {
          return menuItemValue || menuItemLabel;
        }
      }
    }
    _doesThisActiveMenuItemNeedToBeTurnedOff(currentSelectedItemLabel, currentSelectedItemValue, testActiveItemLabel, testActiveItemValue) {
      const currentSelectedItemHasLabel = Boolean(currentSelectedItemLabel);
      const currentSelectedItemHasValue = Boolean(currentSelectedItemValue);
      const hasLabelMismatch = testActiveItemLabel !== currentSelectedItemLabel;
      const hasValueMismatch = testActiveItemValue !== currentSelectedItemValue;
      switch (this.display) {
        case "label": {
          return hasLabelMismatch;
        }
        case "value": {
          return hasValueMismatch;
        }
        default: {
          return Boolean(currentSelectedItemHasLabel && hasLabelMismatch || currentSelectedItemHasValue && hasValueMismatch);
        }
      }
    }
  };
  customElements.define("sh-dropdown", SHDropdown);

  // ../sh-empty-state/src/sh-empty-state.lit.scss.js
  var sh_empty_state_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-empty-state-icon-size=4rem] - Size of the empty state icon
   */
  --sh-empty-state-icon-size: 4rem;
  /* 
   * @cssprop [--sh-empty-state-text-width=24rem] - Width of the empty state text
   */
  --sh-empty-state-text-width: 24rem;
  /* 
   * @cssprop [--sh-empty-state-text-max-width=calc(100% - 4rem)] - Maximum width of the empty state text 
   */
  --sh-empty-state-text-max-width: calc(100% - 4rem);
  /* 
   * @cssprop [--sh-empty-state-margin=1rem] - Top margin for the footer slot & Bottom margin of the icon 
   */
  --sh-empty-state-margin: 1rem;
  /* 
   * @cssprop [--sh-empty-state-thickness=0.125rem] - Border thickness of the dotted line when drag and drop is set
   */
  --sh-empty-state-thickness: 0.125rem;
  /* 
   * @cssprop [--sh-empty-state-left-margin=0.5rem] - left margin of the non first footer slot elements
   */
  --sh-empty-state-left-margin: 0.5rem;
}

:host {
  height: 100%;
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

sh-icon {
  /* WARNING: this rule is only to make */
  /* the rescaled implementation look like the legacy one. */
  /* It nudges the icon down a bit which seems like a change */
  /* that was introduced at some point */
  /* !!!!this rule probably should go!!!! */
  margin-bottom: var(--sh-empty-state-margin);
  --sh-icon-size-m: var(--sh-empty-state-icon-size);
  --sh-icon-font-size-m: var(--sh-empty-state-icon-size);
  color: rgba(var(--ui-1), var(--opacity-5));
}

sh-text {
  text-align: center;
  width: var(--sh-empty-state-text-width);
  max-width: var(--sh-empty-state-text-max-width);
}

.header {
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  margin-bottom: 0.5rem;
}

/* footer */
.footer-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: var(--sh-empty-state-margin);
}

.footer-wrapper > ::slotted(*:not(:first-child)) {
  margin-left: var(--sh-empty-state-left-margin);
}

.footer-wrapper[empty-footer] {
  display: none;
}

/* drag and drop */
:host([drag-and-drop]) {
  border: var(--sh-empty-state-thickness) dotted rgba(var(--ui-1), var(--opacity-5));
  box-sizing: border-box;
}`;

  // ../sh-empty-state/src/sh-empty-state.js
  var SHEmptyState = class SHEmptyState2 extends s4 {
    constructor() {
      super(...arguments);
      this.emptyFooter = true;
      this.dragAndDrop = false;
    }
    static get styles() {
      return [sh_empty_state_lit_scss_default];
    }
    render() {
      return x`
      ${this.icon ? x`<sh-icon icon="${this.icon}" .color="${this.iconColor}"></sh-icon>` : A}
      ${this.header ? x` <sh-text size="header-2" class="header">${this.header}</sh-text> ` : ""}
      <sh-text size="body-1">${this.label}</sh-text>
      <div class="footer-wrapper" ?empty-footer="${this.emptyFooter}">
        <slot name="footer" @slotchange="${(e8) => this.footerSlotChange(e8)}" id="footerSlot"></slot>
      </div>
    `;
    }
    updated(changedProperties) {
      const listOfProperties = ["label", "icon", "dragAndDrop", "iconColor", "header"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    footerSlotChange(e8) {
      const footerslot = e8.target;
      const footerslotNode = footerslot.assignedNodes({
        flatten: true
      }).length;
      this.emptyFooter = footerslotNode === 0;
    }
  };
  __decorate([t3()], SHEmptyState.prototype, "emptyFooter", void 0);
  __decorate([n5({ type: String, reflect: true })], SHEmptyState.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHEmptyState.prototype, "icon", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "drag-and-drop" })], SHEmptyState.prototype, "dragAndDrop", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-color" })], SHEmptyState.prototype, "iconColor", void 0);
  __decorate([n5({ type: String, reflect: true })], SHEmptyState.prototype, "header", void 0);
  SHEmptyState = __decorate([e4("sh-empty-state")], SHEmptyState);

  // ../sh-grid/src/sh-grid.lit.scss.js
  var sh_grid_lit_scss_default = i`:host {
  display: grid;
  display: -ms-grid;
  grid-template-columns: repeat(12, 1fr);
  -ms-grid-columns: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
}

::slotted(*) {
  width: auto;
  min-width: 0;
  min-height: 0;
}

/* small spacing */
:host([spacing=s]) {
  margin: -0.25rem !important;
  height: calc(100% + 0.5rem) !important;
  width: calc(100% + 0.5rem) !important;
}

:host([spacing=s]) ::slotted(*) {
  margin: 0.25rem;
}

/* medium spacing (default) */
:host([spacing=m]) {
  height: calc(100% + 1rem) !important;
  width: calc(100% + 1rem) !important;
  margin: -0.5rem !important;
}

:host([spacing=m]) ::slotted(*) {
  margin: 0.5rem;
}

/* large spacing */
:host([spacing=l]) {
  margin: -0.75rem !important;
  height: calc(100% + 1.5rem) !important;
  width: calc(100% + 1.5rem) !important;
}

:host([spacing=l]) ::slotted(*) {
  margin: 0.75rem;
}

/* fit-content */
:host([fit-content]) {
  height: auto !important;
}

/* columns rules: large screen */
::slotted([columns="0"]) {
  display: none;
}

::slotted(*:not([columns])),
::slotted([columns="1"]) {
  grid-column: span 1;
  -ms-grid-column-span: 1;
}

::slotted([columns="2"]) {
  grid-column: span 2;
  -ms-grid-column-span: 2;
}

::slotted([columns="3"]) {
  grid-column: span 3;
  -ms-grid-column-span: 3;
}

::slotted([columns="4"]) {
  grid-column: span 4;
  -ms-grid-column-span: 4;
}

::slotted([columns="5"]) {
  grid-column: span 5;
  -ms-grid-column-span: 5;
}

::slotted([columns="6"]) {
  grid-column: span 6;
  -ms-grid-column-span: 6;
}

::slotted([columns="7"]) {
  grid-column: span 7;
  -ms-grid-column-span: 7;
}

::slotted([columns="8"]) {
  grid-column: span 8;
  -ms-grid-column-span: 8;
}

::slotted([columns="9"]) {
  grid-column: span 9;
  -ms-grid-column-span: 9;
}

::slotted([columns="10"]) {
  grid-column: span 10;
  -ms-grid-column-span: 10;
}

::slotted([columns="11"]) {
  grid-column: span 11;
  -ms-grid-column-span: 11;
}

::slotted([columns="12"]) {
  grid-column: span 12;
  -ms-grid-column-span: 12;
}

/* columns rules: medium screen */
@media only screen and (max-width: 64.0625rem) {
  ::slotted([col-m="0"]) {
    display: none;
  }
  ::slotted([col-m="1"]) {
    grid-column: span 1;
    -ms-grid-column-span: 1;
  }
  ::slotted([col-m="2"]) {
    grid-column: span 2;
    -ms-grid-column-span: 2;
  }
  ::slotted([col-m="3"]) {
    grid-column: span 3;
    -ms-grid-column-span: 3;
  }
  ::slotted([col-m="4"]) {
    grid-column: span 4;
    -ms-grid-column-span: 4;
  }
  ::slotted([col-m="5"]) {
    grid-column: span 5;
    -ms-grid-column-span: 5;
  }
  ::slotted([col-m="6"]) {
    grid-column: span 6;
    -ms-grid-column-span: 6;
  }
  ::slotted([col-m="7"]) {
    grid-column: span 7;
    -ms-grid-column-span: 7;
  }
  ::slotted([col-m="8"]) {
    grid-column: span 8;
    -ms-grid-column-span: 8;
  }
  ::slotted([col-m="9"]) {
    grid-column: span 9;
    -ms-grid-column-span: 9;
  }
  ::slotted([col-m="10"]) {
    grid-column: span 10;
    -ms-grid-column-span: 10;
  }
  ::slotted([col-m="11"]) {
    grid-column: span 11;
    -ms-grid-column-span: 11;
  }
  ::slotted([col-m="12"]) {
    grid-column: span 12;
    -ms-grid-column-span: 12;
  }
}
/* columns rules: small screen */
@media only screen and (max-width: 47.9375rem) {
  ::slotted([col-s="0"]) {
    display: none;
  }
  ::slotted([col-s="1"]) {
    grid-column: span 1;
    -ms-grid-column-span: 1;
  }
  ::slotted([col-s="2"]) {
    grid-column: span 2;
    -ms-grid-column-span: 2;
  }
  ::slotted([col-s="3"]) {
    grid-column: span 3;
    -ms-grid-column-span: 3;
  }
  ::slotted([col-s="4"]) {
    grid-column: span 4;
    -ms-grid-column-span: 4;
  }
  ::slotted([col-s="5"]) {
    grid-column: span 5;
    -ms-grid-column-span: 5;
  }
  ::slotted([col-s="6"]) {
    grid-column: span 6;
    -ms-grid-column-span: 6;
  }
  ::slotted([col-s="7"]) {
    grid-column: span 7;
    -ms-grid-column-span: 7;
  }
  ::slotted([col-s="8"]) {
    grid-column: span 8;
    -ms-grid-column-span: 8;
  }
  ::slotted([col-s="9"]) {
    grid-column: span 9;
    -ms-grid-column-span: 9;
  }
  ::slotted([col-s="10"]) {
    grid-column: span 10;
    -ms-grid-column-span: 10;
  }
  ::slotted([col-s="11"]) {
    grid-column: span 11;
    -ms-grid-column-span: 11;
  }
  ::slotted([col-s="12"]) {
    grid-column: span 12;
    -ms-grid-column-span: 12;
  }
}
/* rows rules */
::slotted(*:not([rows])),
::slotted([rows="1"]) {
  grid-row: span 1;
  -ms-grid-row-span: 1;
}

::slotted([rows="2"]) {
  grid-row: span 2;
  -ms-grid-row-span: 2;
}

::slotted([rows="3"]) {
  grid-row: span 3;
  -ms-grid-row-span: 3;
}

::slotted([rows="4"]) {
  grid-row: span 4;
  -ms-grid-row-span: 4;
}

::slotted([rows="5"]) {
  grid-row: span 5;
  -ms-grid-row-span: 5;
}

::slotted([rows="6"]) {
  grid-row: span 6;
  -ms-grid-row-span: 6;
}

::slotted([rows="7"]) {
  grid-row: span 7;
  -ms-grid-row-span: 7;
}

::slotted([rows="8"]) {
  grid-row: span 8;
  -ms-grid-row-span: 8;
}

::slotted([rows="9"]) {
  grid-row: span 9;
  -ms-grid-row-span: 9;
}

::slotted([rows="10"]) {
  grid-row: span 10;
  -ms-grid-row-span: 10;
}

::slotted([rows="11"]) {
  grid-row: span 11;
  -ms-grid-row-span: 11;
}

::slotted([rows="12"]) {
  grid-row: span 12;
  -ms-grid-row-span: 12;
}`;

  // ../sh-grid/src/sh-grid.js
  var SHGrid = class SHGrid2 extends s4 {
    constructor() {
      super();
      this.spacing = "m";
      this.fitContent = false;
      this.spacing = "m";
    }
    static get styles() {
      return [sh_grid_lit_scss_default];
    }
    render() {
      return x` <slot spacing="${this.spacing}" style="min-width: 0rem"></slot> `;
    }
    updated(changedProperties) {
      if (changedProperties.has("rows")) {
        this._rowsChanged();
      }
      if (changedProperties.has("columns")) {
        this._columnsChanged();
      }
    }
    _rowsChanged() {
      if (this.rows !== void 0) {
        this.style.gridTemplateRows = "repeat(" + this.rows + ", 1fr)";
        this.style.msGridRows = "(1fr)[" + this.rows + "]";
      }
    }
    _columnsChanged() {
      if (this.rows !== void 0) {
        this.style.gridTemplateColumns = "repeat(" + this.columns + ", 1fr)";
        this.style.msGridColumns = "(1fr)[" + this.columns + "]";
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHGrid.prototype, "spacing", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHGrid.prototype, "columns", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHGrid.prototype, "rows", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "fit-content" })], SHGrid.prototype, "fitContent", void 0);
  SHGrid = __decorate([e4("sh-grid")], SHGrid);

  // ../sh-home-card/src/sh-home-card.js
  var SHHomeCard = class extends s4 {
    static get properties() {
      return {
        icon: { type: String, reflect: true },
        label: { type: String, reflect: true },
        notifications: { type: Number, reflect: true },
        errors: { type: Number, reflect: true }
      };
    }
    static get styles() {
      return [
        sharedStyles,
        i`
        :host {
          cursor: pointer;
          transition: var(--transition-time) all ease-in-out;
          display: flex;
        }

        :host(:hover) {
          transform: translateY(-0.25rem);
        }

        sh-card {
          height: 100%;
        }

        sh-card {
          height: 16.5rem;
          width: 19rem;
          margin: 0.5rem;
        }

        .card-wrapper {
          height: 100%;
          display: flex;
          flex-direction: column;
        }

        .content-wrapper {
          height: 100%;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
        }

        #card-icon {
          color: var(--text-secondary);
          --sh-icon-size-m: 4rem;
          --sh-icon-font-size-m: 4rem;
          position: relative;
        }
        .card-title {
          margin-top: 0.5rem;
          text-align: center;
        }

        #footer-wrapper {
          border-top: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));
          padding-top: 1rem;
          height: 4.5rem;
          overflow: auto;
        }
        :host([notifications]) .notification-dot {
          background: var(--support-5);
          height: 1rem;
          width: 1rem;
          font: var(--body-2);
          text-align: center;
          font-weight: bold;
          line-height: 1rem;
          color: var(--base-3);
          border: 0.125rem solid var(--base-3);
          position: absolute;
          right: 0rem;
          bottom: 0rem;
          border-radius: 50%;
        }

        :host([errors]) .error-dot {
          background: rgb(var(--functional-red));
          height: 1rem;
          width: 1rem;
          font: var(--body-2);
          text-align: center;
          font-weight: bold;
          line-height: 1rem;
          color: var(--base-3);
          border: 0.125rem solid var(--base-3);
          position: absolute;
          right: 0rem;
          bottom: 0rem;
          border-radius: 50%;
        }

        /* small screens */
        @media only screen and (max-width: 47.9375rem) {
          :host(:hover) {
            transform: none;
          }
        }
      `
      ];
    }
    render() {
      return x`
      <sh-card>
        <div class="card-wrapper">
          <div class="content-wrapper">
            <div style="position: relative">
              ${this.icon ? x` <sh-icon id="card-icon" icon="${this.icon}"></sh-icon>` : ""}
              ${this.notifications ? x` <div class="notification-dot">${this.notifications}</div>` : ""}
              ${this.errors ? x` <div class="error-dot">${this.errors}</div> ` : ""}
            </div>
            ${this.label ? x` <sh-text class="card-title" title-1>${this.label}</sh-text> ` : ""}
          </div>
          <div id="footer-wrapper">
            <slot @slotchange="${this._handleSlotChange.bind(this)}"></slot>
          </div>
        </div>
      </sh-card>
    `;
    }
    constructor() {
      super();
      this.icon = "patient";
      this.label = "Card Label";
    }
    _handleSlotChange() {
      if (this.children.length === 0) {
        this.shadowRoot.querySelector("#footer-wrapper").setAttribute("style", "display: none");
      } else {
        this.shadowRoot.querySelector("#footer-wrapper").setAttribute("style", "display: block");
      }
    }
  };
  customElements.define("sh-home-card", SHHomeCard);

  // ../sh-home-screen/src/sh-home-screen.lit.scss.js
  var sh_home_screen_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-home-screen-card-height=20rem] - height of the card in cards-wrapper
   */
  --sh-home-screen-card-height: 20rem;
  /* 
   * @cssprop [--sh-home-screen-card-width=20rem] - width of the card in cards-wrapper
   */
  --sh-home-screen-card-width: 20rem;
  /* 
   * @cssprop [--sh-home-screen-card-margin-right=1rem] - margin right of the card
   */
  --sh-home-screen-card-margin-right: 1rem;
  /* 
   * @cssprop [--sh-home-screen-functions-button-bottom=1rem] - vertical position of the function button
   */
  --sh-home-screen-functions-button-bottom: 1rem;
  /* 
   * @cssprop [--sh-home-screen-functions-button-right=1rem] - horizintal position of the function button
   */
  --sh-home-screen-functions-button-right: 1rem;
  /* 
   * @cssprop [--sh-home-screen-functions-card-bottom=3.5rem] - vertical position of the function card
   */
  --sh-home-screen-functions-card-bottom: 3.5rem;
  /* 
   * @cssprop [--sh-home-screen-functions-card-right=1rem] - horizontal position of the function card
   */
  --sh-home-screen-functions-card-right: 1rem;
  /* 
   * @cssprop [--sh-home-screen-functions-card-width=15rem] - width of the function card
   */
  --sh-home-screen-functions-card-width: 15rem;
}

:host {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  overflow-y: auto;
  overflow-x: hidden;
}

.cards-wrapper {
  display: flex;
  flex-wrap: wrap;
  min-height: fit-content;
  width: fit-content;
  max-height: calc(100% + 1rem);
  max-width: calc(100% + 1rem);
  margin: -0.5rem;
  justify-content: center;
  align-items: center;
}

.cards-wrapper > ::slotted(sh-card) {
  height: var(--sh-home-screen-card-height);
  width: var(--sh-home-screen-card-width);
}

.cards-wrapper > ::slotted(sh-card:not(:first-of-type)) {
  margin-left: var(--sh-home-screen-card-margin-right);
}

#functions-button {
  position: fixed;
  bottom: var(--sh-home-screen-functions-button-bottom);
  right: var(--sh-home-screen-functions-button-right);
}

.functions-card:not([active]) {
  opacity: 0;
  margin-bottom: -1rem;
  pointer-events: none;
}

.functions-card {
  transition: var(--transition-time) all ease-in-out;
  position: fixed;
  right: var(--sh-home-screen-functions-card-right);
  bottom: var(--sh-home-screen-functions-card-bottom);
  width: var(--sh-home-screen-functions-card-width);
}

.functions-div {
  margin: -0.5rem 0;
}

/* small screens */
:host([mobile]) {
  align-items: flex-start;
}

:host([mobile]) .cards-wrapper {
  width: calc(100% + 1rem);
  flex-direction: column;
}

:host([mobile]) .cards-wrapper > ::slotted(sh-home-card) {
  width: calc(100% - 1rem);
}`;

  // ../sh-home-screen/src/sh-home-screen.js
  var SHHomeScreen = class extends s4 {
    static get properties() {
      return {
        functions: { type: Boolean, reflect: true },
        mobile: { type: Boolean, reflect: true },
        _iconVisible: { type: Boolean, reflect: false }
      };
    }
    static get styles() {
      return [sharedStyles, sh_home_screen_lit_scss_default];
    }
    render() {
      return x` <div class="cards-wrapper">
        <slot></slot>
      </div>
      ${this._iconVisible ? x` <sh-icon
            button
            icon="standby"
            id="functions-button"
            @click="${this._handleFunctions}"
          ></sh-icon>` : ""}
      <sh-card class="functions-card" ?active="${this.functions}">
        <div class="functions-div" @click="${this._handleFunctions}">
          <slot
            name="functions"
            @slotchange=${(e8) => {
        this.slotChanged(e8.target);
      }}
          ></slot>
        </div>
      </sh-card>`;
    }
    slotChanged(slot) {
      const nodes = slot.assignedNodes({
        flatten: true
      }).length;
      if (nodes > 0) {
        this._iconVisible = true;
      } else {
        this._iconVisible = false;
        this.functions = false;
      }
    }
    connectedCallback() {
      super.connectedCallback();
      this.windowDimensionObserver = this.handleResize.bind(this);
      window.addEventListener("resize", this.windowDimensionObserver);
    }
    disconnectedCallback() {
      window.removeEventListener("resize", this.windowDimensionObserver);
      super.disconnectedCallback();
    }
    updated(changedProperties) {
      const listOfProperties = ["mobile"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    handleResize() {
      this.mobile = document.documentElement.clientWidth < 767;
    }
    _handleFunctions() {
      this.functions = !this.functions;
    }
  };
  customElements.define("sh-home-screen", SHHomeScreen);

  // ../sh-image-segment/src/sh-image-segment.lit.scss.js
  var sh_image_segment_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-image-segment-slot-left=0.75rem] - slot left
   */
  --sh-image-segment-slot-left: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-slot-right=0.75rem] - slot right
   */
  --sh-image-segment-slot-right: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-slot-top=0.75rem] - slot top
   */
  --sh-image-segment-slot-top: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-slot-bottom=0.75rem] - slot bottom
   */
  --sh-image-segment-slot-bottom: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-left-right-margin=0.25rem 0] - margin for left and right side partions of slot
   */
  --sh-image-segment-left-right-margin: 0.25rem 0;
  /* 
   * @cssprop [--sh-image-segment-top-bottom-margin=0 0.25rem] - margin for top and bottom side partions of slot
   */
  --sh-image-segment-top-bottom-margin: 0 0.25rem;
  /* 
   * @cssprop [--sh-image-segment-text-line-height=1.25rem] - line-height of text
   */
  --sh-image-segment-text-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-image-segment-corner-right-ml=0.5rem] - margin-left of corner-right
   */
  --sh-image-segment-corner-right-ml: 0.5rem;
}

:host {
  position: relative;
  border-radius: 0.125rem;
  background: black;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

/* slotted image */
:host > ::slotted(*:not([slot])) {
  height: 100%;
  width: 100%;
  flex: 1;
}

/* outlines */
.segment-outline {
  position: absolute;
  top: 0.125rem;
  left: 0.125rem;
  height: calc(100% - 0.25rem);
  width: calc(100% - 0.25rem);
  box-sizing: border-box;
  border: 0.0625rem solid transparent;
  border-radius: 0.125rem;
  transition: var(--transition-time) all ease-in-out;
  opacity: var(--opacity-3);
}

:host(:not([outline])[focus]) .segment-outline {
  border-color: rgb(var(--ui-0));
}

:host([focus]) .segment-outline {
  border-width: 0.125rem;
  opacity: var(--opacity-2);
}

/* slots */
:host ::slotted(*[slot]) {
  pointer-events: all;
}

.corner,
.side {
  pointer-events: none;
  position: absolute;
  height: auto;
  width: auto;
  transition: var(--transition-time) all ease-in-out;
}

:host([hide-overlay]) .corner,
:host([hide-overlay]) .side {
  opacity: 0;
  pointer-events: none;
}

/* corner slots */
.corner {
  max-width: calc(50% - 0.75rem);
  display: flex;
  flex-direction: column;
}

.corner > ::slotted(*) {
  display: flex;
  flex-direction: column;
}

.corner.right ::slotted(*) {
  text-align: right;
  margin-left: var(--sh-image-segment-corner-right-ml);
}

/* side slots */
.side {
  display: flex;
  align-items: center;
  justify-content: center;
}

.side.left > ::slotted(*),
.side.right > ::slotted(*) {
  margin: var(--sh-image-segment-left-right-margin);
}

.side.left,
.side.right {
  height: calc(100% - 1.5rem);
  flex-direction: column;
}

.side.top > ::slotted(*),
.side.bottom > ::slotted(*) {
  margin: var(--sh-image-segment-top-bottom-margin);
}

.side.top,
.side.bottom {
  width: calc(100% - 1.5rem);
  flex-direction: row;
}

.left {
  left: var(--sh-image-segment-slot-left);
}

.right {
  right: var(--sh-image-segment-slot-right);
}

.top {
  top: var(--sh-image-segment-slot-top);
}

.bottom {
  bottom: var(--sh-image-segment-slot-bottom);
}`;

  // ../sh-image-segment/src/sh-image-segment.js
  var SHImageSegment = class SHImageSegment2 extends s4 {
    static get styles() {
      return [sh_image_segment_lit_scss_default];
    }
    render() {
      return x`
      <div class="segment-outline" style="border-color: ${this.color}"></div>
      <!-- corner slots -->
      <div class="corner top left">
        <slot name="top-left"></slot>
      </div>
      <div class="corner top right">
        <slot name="top-right"></slot>
      </div>
      <div class="corner bottom left">
        <slot name="bottom-left"></slot>
      </div>
      <div class="corner bottom right">
        <slot name="bottom-right"></slot>
      </div>
      <!-- side slots -->
      <div class="side left">
        <slot name="left"></slot>
      </div>
      <div class="side right">
        <slot name="right"></slot>
      </div>
      <div class="side top">
        <slot name="top"></slot>
      </div>
      <div class="side bottom">
        <slot name="bottom"></slot>
      </div>
      <!-- image slot -->
      <slot></slot>
    `;
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHImageSegment.prototype, "color", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHImageSegment.prototype, "focus", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "hide-overlay" })], SHImageSegment.prototype, "hideOverlay", void 0);
  SHImageSegment = __decorate([e4("sh-image-segment")], SHImageSegment);

  // ../sh-image-segment/src/sh-image-text.lit.scss.js
  var sh_image_text_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-image-segment-slot-left=0.75rem] - slot left
   */
  --sh-image-segment-slot-left: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-slot-right=0.75rem] - slot right
   */
  --sh-image-segment-slot-right: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-slot-top=0.75rem] - slot top
   */
  --sh-image-segment-slot-top: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-slot-bottom=0.75rem] - slot bottom
   */
  --sh-image-segment-slot-bottom: 0.75rem;
  /* 
   * @cssprop [--sh-image-segment-left-right-margin=0.25rem 0] - margin for left and right side partions of slot
   */
  --sh-image-segment-left-right-margin: 0.25rem 0;
  /* 
   * @cssprop [--sh-image-segment-top-bottom-margin=0 0.25rem] - margin for top and bottom side partions of slot
   */
  --sh-image-segment-top-bottom-margin: 0 0.25rem;
  /* 
   * @cssprop [--sh-image-segment-text-line-height=1.25rem] - line-height of text
   */
  --sh-image-segment-text-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-image-segment-corner-right-ml=0.5rem] - margin-left of corner-right
   */
  --sh-image-segment-corner-right-ml: 0.5rem;
}

:host {
  transition: var(--transition-time) all ease-in-out;
  width: 100%;
  font: var(--body-1);
  line-height: var(--sh-image-segment-text-line-height);
  color: var(--text-white);
  text-shadow: 0.0625rem 0.0625rem 0.25rem black, -0.0625rem -0.0625rem 0.25rem black, 0rem 0rem 0.25rem black, 0rem 0rem 0.125rem black;
  word-wrap: break-word;
}

:host([alignment=left]) {
  text-align: left;
}

:host([alignment=right]) {
  text-align: right;
}`;

  // ../sh-image-segment/src/sh-image-text.js
  var SHImageText = class SHImageText2 extends s4 {
    static get styles() {
      return [sh_image_text_lit_scss_default];
    }
    render() {
      return x`<slot></slot> `;
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHImageText.prototype, "alignment", void 0);
  SHImageText = __decorate([e4("sh-image-text")], SHImageText);

  // ../sh-image-segment/src/sh-toolbar.lit.scss.js
  var sh_toolbar_lit_scss_default = i`:host {
  display: flex;
  background: rgba(var(--ui-6), var(--opacity-2));
  border-radius: 0.125rem;
}

:host([orientation=horizontal]),
:host([slot=top]),
:host([slot=bottom]) {
  flex-direction: row;
}

:host([orientation=vertical]),
:host([slot=left]),
:host([slot=right]) {
  flex-direction: column;
}`;

  // ../sh-image-segment/src/sh-toolbar.js
  var SHToolbar = class SHToolbar2 extends s4 {
    static get styles() {
      return [sh_toolbar_lit_scss_default];
    }
    render() {
      return x` <slot></slot> `;
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHToolbar.prototype, "orientation", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "in-segment-theme" })], SHToolbar.prototype, "inSegmentTheme", void 0);
  SHToolbar = __decorate([e4("sh-toolbar")], SHToolbar);

  // ../utils/decimal-separator.js
  var decimalSeparator = getBrowserLanguageBasedDecimalSeparator();
  function getBrowserLanguageBasedDecimalSeparator() {
    let decimalSeperator = ".";
    const nonEuropeanNumberFormat = "120.94";
    const EuropeanNumberFormat = "120,94";
    if (Number(nonEuropeanNumberFormat).toLocaleString() === EuropeanNumberFormat) {
      decimalSeperator = ",";
    } else if (Number(nonEuropeanNumberFormat).toLocaleString() === nonEuropeanNumberFormat) {
      decimalSeperator = ".";
    }
    return decimalSeperator;
  }

  // ../sh-input-number/src/sh-input-number.lit.scss.js
  var sh_input_number_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-input-number-status-text-padding=0.25rem 0.5rem 0 0.5rem] - padding of status text (warning, hint, ..)
   */
  --sh-input-number-status-text-padding: 0.25rem 0.5rem 0 0.5rem;
  /* 
   * @cssprop [--sh-input-number-left-icon-padding=0 0 0 0.25rem] - padding of left icon
   */
  --sh-input-number-left-icon-padding: 0 0 0 0.25rem;
  /* 
   * @cssprop [--sh-input-number-right-icon-padding=0] - padding of right icon
   */
  --sh-input-number-right-icon-padding: 0;
  /* 
   * @cssprop [--sh-input-number-icon-size=1.9375rem] - size of the icon left and right
   */
  --sh-input-number-icon-size: 1.9375rem;
  /* 
   * @cssprop [--sh-input-number-input-right-padding=0.25rem] - right padding of the input
   */
  --sh-input-number-input-right-padding: 0.25rem;
}

:host {
  width: 100%;
  height: fit-content;
  height: -moz-fit-content;
  position: relative;
  display: inline-block;
  flex-direction: column;
  --sh-input-text-icon-wrapper-right-padding: var(--sh-input-number-input-right-padding);
}
:host sh-icon {
  margin-top: auto;
  margin-bottom: auto;
}
:host sh-icon[icon=left-s] {
  margin: var(--sh-input-number-left-icon-padding);
}
:host sh-icon[icon=right-s] {
  margin: var(--sh-input-number-right-icon-padding);
}
:host sh-text {
  width: 100%;
}

:host([condensed]) sh-icon[icon=left-s],
:host([condensed]) sh-icon[icon=right-s] {
  --sh-icon-size-m: var(--sh-input-number-icon-size);
}

/* Stepper Styles */
:host([disabled]) .icon-container > * {
  pointer-events: none;
}

/* helper text */
.helper-text {
  padding: var(--sh-input-number-status-text-padding);
  box-sizing: border-box;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  visibility: visible;
}

:host([disabled]) .helper-text {
  color: var(--text-disabled);
}`;

  // ../sh-input-number/src/sh-numeric-keypad.lit.scss.js
  var sh_numeric_keypad_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-numeric-keypad-width=11rem] - width of the keypad container
   */
  --sh-numeric-keypad-width: 11rem;
  /* 
   * @cssprop [--sh-numeric-keypad-height=15rem] - height of the keypad container
   */
  --sh-numeric-keypad-height: 15rem;
  /* 
   * @cssprop [--sh-numeric-keypad-circle-button-width=3rem] - width of the circle buttons
   */
  --sh-numeric-keypad-circle-button-width: 3rem;
  /* 
   * @cssprop [--sh-numeric-keypad-circle-button-height=3rem] - height of the circle buttons
   */
  --sh-numeric-keypad-circle-button-height: 3rem;
  /* 
   * @cssprop [--sh-numeric-keypad-container-padding=1rem] - padding of the keypad container
   */
  --sh-numeric-keypad-container-padding: 1rem;
  /* 
   * @cssprop [--sh-numeric-keypad-button-margins=0.5rem] - margin for the circle buttons
   */
  --sh-numeric-keypad-button-margins: 0.5rem;
  /* 
   * @cssprop [--sh-numeric-keypad-button-center-margin=0 0.5rem] - margin for the circle buttons in the center column
   */
  --sh-numeric-keypad-button-center-margin: 0 0.5rem;
}

:host {
  visibility: hidden;
  opacity: 0;
  overflow: hidden;
  max-height: 0rem;
  height: 0rem;
  width: 13rem;
  z-index: 9999;
  position: fixed;
  background-color: var(--base-3);
  box-sizing: border-box;
  top: 2.5rem;
  box-shadow: var(--shadow-raised);
  transition: var(--transition-time) opacity var(--transition-time) ease-in-out;
  border-radius: 0.125rem;
}

:host([visible]) {
  visibility: visible;
  opacity: 1;
  overflow: visible;
  max-height: fit-content;
  height: fit-content;
  padding: var(--sh-numeric-keypad-container-padding);
  display: table;
}

:host([condensed]) {
  top: 2rem;
}

.functions-wrapper {
  position: relative;
  display: flex;
  justify-content: space-between;
  padding-right: 0.5rem;
  box-sizing: border-box;
}

.functions-wrapper > ::slotted(*:first-child) {
  margin-left: 1rem;
  margin-right: 0.5rem;
}

.functions-wrapper > ::slotted(:not(*:first-child)) {
  margin-left: 0.5rem;
  margin-right: 0.5rem;
}

.keypad-main-frame {
  width: var(--sh-numeric-keypad-width);
  height: var(--sh-numeric-keypad-height);
  position: relative;
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-content: space-between;
}

.circle-buttons {
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background;
  border-radius: 50%;
  width: var(--sh-numeric-keypad-circle-button-width);
  height: var(--sh-numeric-keypad-circle-button-height);
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgba(var(--ui-1), var(--opacity-6));
  font: var(--header-2);
  color: var(--text-primary);
  cursor: pointer;
  user-select: none;
  -webkit-touch-callout: none;
  -ms-user-select: none;
  -moz-user-select: none;
  line-height: 1.5rem;
}

.circle-buttons[value="1"],
.circle-buttons[value="4"],
.circle-buttons[value="7"],
.circle-buttons[value="."],
.circle-buttons[value=","] {
  margin-right: var(--sh-numeric-keypad-button-margins);
}

.circle-buttons[value="2"],
.circle-buttons[value="5"],
.circle-buttons[value="8"],
.circle-buttons[value="0"] {
  margin: var(--sh-numeric-keypad-button-center-margin);
}

.circle-buttons[value="3"],
.circle-buttons[value="6"],
.circle-buttons[value="9"],
.erase-button {
  margin-left: var(--sh-numeric-keypad-button-margins);
}

.erase-button {
  background-color: transparent;
}

:host(:not(.no-hovermq)) .circle-buttons:hover {
  background-color: rgba(var(--ui-1), var(--opacity-5));
}

.circle-buttons:active {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([disabled]) .circle-buttons.dont-disable {
  pointer-events: all;
}

:host([disabled]) .circle-buttons:not(.dont-disable) {
  pointer-events: none;
  background-color: rgba(var(--ui-1), var(--opacity-7)) !important;
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([decimals="0"]) .circle-buttons.decimals-point {
  pointer-events: none;
  opacity: 0;
}

.footer-wrapper {
  position: relative;
  display: flex;
  justify-content: flex-end;
}`;

  // ../sh-input-number/src/sh-numeric-keypad.js
  var SHNumericKeypad = class extends FocusBlurMixin2(s4) {
    static get properties() {
      return {
        visible: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        target: { type: String, reflect: true },
        decimals: { type: String, reflect: true },
        disabled: { type: Boolean, reflect: true },
        europeanNumberConvention: {
          type: Boolean,
          reflect: true,
          attribute: "european-number-convention"
        },
        _decimalSeparator: { type: String },
        _isKeypadButtonFocused: { type: Boolean }
      };
    }
    static get styles() {
      return [sharedStyles, sh_numeric_keypad_lit_scss_default];
    }
    render() {
      return x`
      <div class="functions-wrapper">
        <slot name="functions" id="functionsSlot" @slotchange=${this.addMargins}></slot>
      </div>
      <div class="keypad-main-frame">
        <div
          value="1"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
          @keydown="${(e8) => {
        this._keyDownOnNumberOne(e8);
      }}"
        >
          1
        </div>

        <div
          value="2"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          2
        </div>

        <div
          value="3"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          3
        </div>

        <div
          value="4"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          4
        </div>

        <div
          value="5"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          5
        </div>

        <div
          value="6"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          6
        </div>

        <div
          value="7"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          7
        </div>

        <div
          value="8"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          8
        </div>

        <div
          value="9"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          9
        </div>

        <div
          class="circle-buttons decimals-point dont-disable"
          tabindex="0"
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
          value="${this._decimalSeparator}"
        >
          ${this._decimalSeparator}
        </div>

        <div
          value="0"
          class="circle-buttons"
          tabindex=${this.disabled ? -1 : 0}
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
        >
          0
        </div>

        <div
          class="circle-buttons erase-button dont-disable"
          tabindex="0"
          @click="${(e8) => {
        this._circleButtonClick(e8);
      }}"
          @keyup="${(e8) => {
        this._EnterKeyIsPressedOnButton(e8, e8.target);
      }}"
          @keydown="${(e8) => {
        this._keyDownOnEraseButton(e8);
      }}"
        >
          <sh-icon icon="delete-number" tabindex="-1"></sh-icon>
        </div>
      </div>
      <sh-divider class="divider" spacing="m"></sh-divider>
      <div class="footer-wrapper">
        <slot
          name="footer"
          id="footer"
          @slotchange=${this._hideOrDisplayDividerBasedOnFooter}
        ></slot>
      </div>
    `;
    }
    constructor() {
      super();
      this._decimalSeparator = ".";
      this._isKeypadButtonFocused = false;
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("no-hovermq");
      }
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("europeanNumberConvention")) {
        this._europeanNumberConventionObserver();
      }
      const listOfProperties = [
        "visible",
        "condensed",
        "target",
        "decimals",
        "disabled",
        "europeanNumberConvention"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _circleButtonClick(e8) {
      const shIconTag = "SH-ICON";
      const isEraseButton = e8.target.tagName === shIconTag || e8.target.classList.contains("erase-button");
      const detail = {
        isEraseButton,
        keyValueString: isEraseButton ? "" : e8.target.getAttribute("value"),
        changeFocus: !this._isKeypadButtonFocused
      };
      dispatchCustomEvent(this, "key-press", detail);
      this._isKeypadButtonFocused = false;
    }
    _keyDownOnEraseButton(e8) {
      if (e8.code === "Tab" && !e8.shiftKey) {
        const checkfooterNodes = true;
        if (!this._slotNodesPresent(checkfooterNodes)) {
          dispatchCustomEvent(this, "closing", null);
        }
      }
    }
    _keyDownOnNumberOne(e8) {
      if (e8.code === "Tab" && e8.shiftKey) {
        const checkfooterNodes = false;
        if (!this._slotNodesPresent(checkfooterNodes)) {
          dispatchCustomEvent(this, "closing", null);
        }
      }
    }
    _slotNodesPresent(checkfooterNodes) {
      if (checkfooterNodes) {
        const footerSlot = this.shadowRoot.querySelector('[name="footer"]');
        if (footerSlot !== null) {
          const footerNodes = footerSlot.assignedNodes({
            flatten: true
          });
          if (footerNodes.length !== 0) {
            return true;
          }
        }
      } else {
        const functionSlot = this.shadowRoot.querySelector('[name="functions"]');
        if (functionSlot !== null) {
          const functionNodes = functionSlot.assignedNodes({
            flatten: true
          });
          if (functionNodes.length !== 0) {
            return true;
          }
        }
      }
      return false;
    }
    _EnterKeyIsPressedOnButton(e8, element) {
      const shIconTag = "SH-ICON";
      if (e8.srcElement.tagName !== shIconTag && ((e8.code === "Enter" || e8.code === "NumpadEnter") && !this.disabled || (e8.code === "Enter" || e8.code === "NumpadEnter") && element.classList.contains("dont-disable"))) {
        element.focus();
        this._isKeypadButtonFocused = true;
        element.click();
      }
    }
    _hideOrDisplayDividerBasedOnFooter() {
      const footerNodes = this.shadowRoot.querySelector("#footer").assignedNodes({
        flatten: true
      });
      if (footerNodes.length !== 0) {
        this.shadowRoot.querySelector(".divider").style.display = "initial";
      } else {
        this.shadowRoot.querySelector(".divider").style.display = "none";
      }
    }
    addMargins() {
      const functionsWrapper = this.shadowRoot.querySelector(".functions-wrapper");
      const functionNodes = this.shadowRoot.querySelector("#functionsSlot").assignedNodes({
        flatten: true
      });
      functionsWrapper.style.marginBottom = functionNodes.length !== 0 ? "1rem" : "0rem";
    }
    _europeanNumberConventionObserver() {
      if (typeof this.europeanNumberConvention !== "boolean") {
        this._decimalSeparator = decimalSeparator;
      } else {
        this._decimalSeparator = this.europeanNumberConvention ? "," : ".";
      }
    }
  };
  customElements.define("sh-numeric-keypad", SHNumericKeypad);

  // ../sh-input-number/src/sh-input-number.js
  var SHInputNumber = class extends FocusBlurMixin2(s4) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        value: { type: Number, reflect: true },
        step: { type: Number, reflect: true },
        readonly: { type: Boolean, reflect: true },
        min: { type: Number, reflect: true },
        max: { type: Number, reflect: true },
        mandatory: { type: Boolean, reflect: true },
        error: { type: Boolean, reflect: true },
        success: { type: Boolean, reflect: true },
        safety: { type: Boolean, reflect: true },
        hint: { type: String, reflect: true },
        condensed: { type: Boolean, reflect: true },
        decimals: { type: Number, reflect: true },
        keypad: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        errorMessage: { type: String, reflect: true, attribute: "error-message" },
        noClear: { type: Boolean, reflect: true, attribute: "no-clear" },
        noArrows: { type: Boolean, reflect: true, attribute: "no-arrows" },
        inputDisabled: { type: Boolean, reflect: true, attribute: "input-disabled" },
        keypadActive: { type: Boolean, reflect: true, attribute: "keypad-active" },
        keypadDisabled: { type: Boolean, reflect: true, attribute: "keypad-disabled" },
        noBorder: { type: Boolean, reflect: true, attribute: "no-border" },
        noValidate: { type: Boolean, reflect: true, attribute: "no-validate" },
        europeanNumberConvention: {
          type: Boolean,
          reflect: true,
          attribute: "european-number-convention"
        },
        role: { type: String, reflect: true },
        _displayValue: { type: String },
        _decimalSeparator: { type: String },
        _inputMode: { type: String },
        _cursorPosition: { type: Number }
      };
    }
    static get styles() {
      return [sh_input_number_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      <div style="display: flex; width: 100%">
        <sh-input-text
          .label=${this.label}
          id="input"
          .value=${this.value}
          ?error=${this.error}
          ?success=${this.success}
          ?safety=${this.safety}
          type="text"
          ?condensed="${this.condensed}"
          ?readonly="${this.readonly}"
          ?disabled="${this.disabled}"
          ?no-border="${this.noBorder}"
          ?no-clear="${this.noClear}"
          ?mandatory="${this.mandatory}"
          min="${this.min}"
          max="${this.max}"
          step="${this.step}"
          @click="${(e8) => {
        this._storeCursorPosition(e8.target);
      }}"
          @input-clicked="${(e8) => {
        e8.stopPropagation();
      }}"
          @input-focused="${(e8) => {
        e8.stopPropagation();
        this._inputFocus(e8);
      }}"
          @input="${(e8) => {
        this.value = this.europeanNumberConvention ? e8.target.value.toString().split(",").join(".") : e8.target.value;
      }}"
          @value-changed="${(e8) => {
        if (this.value !== "") {
          let inputText = this.shadowRoot.querySelector("#input");
          if (inputText.shadowRoot.querySelector("#clear")) {
            inputText.shadowRoot.querySelector("#clear").setAttribute("tabindex", "0");
          }
        }
        if (!this.value && this.keypadActive) {
          let inputText = this.shadowRoot.querySelector("#input");
          inputText.classList.remove("empty");
        }
        if ((this.value == "" || this.value === void 0) && this.readonly) {
          let inputText = this.shadowRoot.querySelector("#input");
          inputText.setAttribute("tabindex", "-1");
        }
        e8.stopPropagation();
      }}"
          ._notifyInputClick="${true}"
          ._notifyInputFocus="${true}"
          @clear-clicked="${() => this._clearField()}"
          @keydown="${(e8) => {
        this._restrictOnlyNumberKeys(e8);
        if (!this.inputDisabled) {
          this._closeKeypadIfBackTabbed(e8);
        } else {
          e8.preventDefault();
        }
      }}"
          @keyup="${() => this._updateDisplayValue.bind(this)}"
          @focus="${() => {
        this.shadowRoot.querySelector("sh-input-text").shadowRoot.querySelector("input").inputMode = this._inputMode;
      }}"
          @blur="${(e8) => this._handleBlur(e8)}"
          ><div class="icon-wrapper" style="display: flex;" slot="icon">
            ${!this.noArrows && !this.readonly ? x` <sh-icon
                    button
                    icon="left-s"
                    id="minus"
                    ?disabled="${this.disabled}"
                    @keypress="${(e8) => this._releaseMinusCounter(e8)}"
                    @keyup="${(e8) => {
        if (e8.code === "Space" || e8.code === "NumpadEnter") {
          this._releaseMinusCounter(e8);
        }
      }}"
                    @mousedown="${(e8) => this._startMinusCounter(e8)}"
                    @mouseup="${(e8) => this._releaseMinusCounter(e8)}"
                    @touchstart="${(e8) => this._startMinusCounter(e8)}"
                    @touchend="${(e8) => this._releaseMinusCounter(e8)}"
                  ></sh-icon>
                  <sh-icon
                    button
                    icon="right-s"
                    id="plus"
                    ?disabled="${this.disabled}"
                    @keypress="${(e8) => this._releasePlusCounter(e8)}"
                    @keyup="${(e8) => {
        if (e8.code === "Space" || e8.code === "NumpadEnter") {
          this._releasePlusCounter(e8);
        }
      }}"
                    @mousedown="${(e8) => this._startPlusCounter(e8)}"
                    @mouseup="${(e8) => this._releasePlusCounter(e8)}"
                    @touchstart="${(e8) => this._startPlusCounter(e8)}"
                    @touchend="${(e8) => this._releasePlusCounter(e8)}"
                  ></sh-icon>` : ""}
          </div></sh-input-text
        >
        ${this.keypad ? x`
              <sh-numeric-keypad
                @key-press="${(e8) => {
        this._updateInputBox(e8, this.shadowRoot.querySelector("#input"));
      }}"
                @closing="${() => {
        this._closeKeypadIfTabbed();
      }}"
                .target=${this}
                .disabled=${this.keypadDisabled}
                .visible=${this.keypadActive}
                .condensed=${this.condensed}
                .decimals=${this.decimals}
                .europeanNumberConvention=${this.europeanNumberConvention}
              >
                <slot name="functions" slot="functions"></slot>
                <slot name="footer" slot="footer"></slot>
              </sh-numeric-keypad>
            ` : ""}
      </div>
      ${this.hint && !this.error ? x`
            <sh-text size="body-2" class="helper-text hint" color="secondary">${this.hint}</sh-text>
          ` : ""}
      ${this.error && this.errorMessage ? x`
            <sh-text size="body-2" class="helper-text error-message" color="secondary"
              >${this.errorMessage}</sh-text
            >
          ` : ""}
    `;
    }
    firstUpdated() {
      super.firstUpdated();
    }
    constructor() {
      super();
      this.label = "label";
      this.step = 1;
      this.decimals = "";
      this._decimalSeparator = ".";
      this._inputMode = "numeric";
      this._displayValue = "";
      this.boundMove = this._releasePlusCounter.bind(this);
      this.closeListener = this._closeInputKeyPad.bind(this);
      this._rAFCallBack = this._showKeypad.bind(this);
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("value")) {
        this.valueChanged();
      }
      if (changedProperties.has("decimals")) {
        this._decimalsObserver();
      }
      if (changedProperties.has("inputDisabled")) {
        this._handleInputDisabledChange();
      }
      if (changedProperties.has("keypad")) {
        this._keypadObserver();
      }
      if (changedProperties.has("keypadActive")) {
        this._handleKeypadActive();
      }
      if (changedProperties.has("europeanNumberConvention")) {
        this._europeanNumberConventionObserver();
      }
      if (changedProperties.has("value")) {
        dispatchCustomEvent(this, "value-changed", { value: this.value }, false);
      }
      const listOfProperties = [
        "label",
        "step",
        "readonly",
        "disabled",
        "min",
        "max",
        "mandatory",
        "error",
        "success",
        "safety",
        "hint",
        "condensed",
        "decimals",
        "keypad",
        "errorMessage",
        "noClear",
        "noArrows",
        "inputDisabled",
        "keypadActive",
        "keypadDisabled",
        "noBorder",
        "noValidate",
        "europeanNumberConvention",
        "role"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    valueChanged() {
      if (!this.value && this.value !== 0) {
        this.classList.add("empty");
        this.shadowRoot.querySelector("#input").classList.add("empty");
        this._displayValue = "";
      } else {
        this.classList.remove("empty");
        this.shadowRoot.querySelector("#input").classList.remove("empty");
        let inputText = this.shadowRoot.querySelector("#input");
        if (inputText.shadowRoot.querySelector("#clear")) {
          inputText.shadowRoot.querySelector("#clear").setAttribute("tabindex", "0");
        }
        if (this.value || this.value === 0) {
          const valueOfInput = this.value.toString();
          if (valueOfInput !== "" && valueOfInput.indexOf(".") > -1) {
            const decimalPlaces = valueOfInput.split(".")[1].length;
            this.shadowRoot.querySelector("#input").step = Math.pow(10, -decimalPlaces);
          }
          let numberSystem;
          if (this.europeanNumberConvention === void 0 || this.europeanNumberConvention === null) {
            numberSystem = decimalSeparator === "," ? "European" : "English";
          } else {
            numberSystem = this.europeanNumberConvention ? "European" : "English";
          }
          if (numberSystem === "English") {
            this._displayValue = this.value.toString().split(",").join(".");
          } else {
            this._displayValue = this.value.toString().split(".").join(",");
          }
        }
      }
      this._displayValueChange();
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      document.body.addEventListener("mousemove", this.boundMove);
      this.addEventListener("blur", () => {
        this._validateOnBlurOnNormalInput();
      });
      this._checkMaxMin();
      this._renewStableValue(this.value);
      if (this.europeanNumberConvention === void 0 || this.europeanNumberConvention === null) {
        this._setBrowserLanguageBasedEuropeanNumberConventionProperty();
      }
      if (!this.value && this.value !== 0) {
        this.classList.add("empty");
      }
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "textbox");
      }
      this.addEventListener("keydown", (e8) => {
        this._closeKeypadIfTabbedOnAppropriateElement(e8);
      });
    }
    getValue() {
      if (this.value !== void 0 && this.value !== null) {
        const valueInNumber = parseFloat(this.value.toString(), 10);
        if (!isNaN(valueInNumber)) {
          return valueInNumber;
        } else {
          return "";
        }
      }
    }
    _updateInputBox(e8, input) {
      return __async(this, null, function* () {
        const inputBox = input.shadowRoot.querySelector("input");
        const isEraseButton = e8.detail.isEraseButton;
        let buttonValue;
        if (!isEraseButton) {
          buttonValue = Number(e8.detail.keyValueString.toString());
        }
        const buttonString = e8.detail.keyValueString.toString();
        const valueString = this._displayValue ? this._displayValue.toString() : "";
        const isEitherNumberOrDecimalSeparator = buttonString !== "" && buttonValue >= 0 && buttonValue <= 9 || buttonString === "." || buttonString === ",";
        this._cursorPosition = inputBox.selectionStart;
        let tempDisplayValue;
        if (isEitherNumberOrDecimalSeparator) {
          tempDisplayValue = valueString.slice(0, this._cursorPosition) + buttonString + valueString.slice(this._cursorPosition);
          this.value = tempDisplayValue.toString().split(",").join(".");
          inputBox.style.caretColor = "transparent";
          setTimeout(() => {
            inputBox.setSelectionRange(this._cursorPosition + 1, this._cursorPosition + 1);
            inputBox.style.caretColor = "auto";
          }, 0);
        }
        if (isEraseButton && this._cursorPosition !== 0) {
          tempDisplayValue = valueString.slice(0, this._cursorPosition - 1) + valueString.slice(this._cursorPosition);
          this.value = tempDisplayValue.toString().split(",").join(".");
          inputBox.style.caretColor = "transparent";
          setTimeout(() => {
            inputBox.setSelectionRange(this._cursorPosition - 1, this._cursorPosition - 1);
            inputBox.style.caretColor = "auto";
          }, 0);
        }
        this._cursorPosition = inputBox.selectionStart;
        if (e8.detail.changeFocus) {
          inputBox.focus();
        }
      });
    }
    _closeKeypadIfTabbedOnAppropriateElement(e8) {
      const forwardTabbed = e8.code === "Tab" && !e8.shiftKey;
      const backwardTabbed = e8.code === "Tab" && e8.shiftKey;
      if (forwardTabbed) {
        const footer = this.shadowRoot.querySelector('[name="footer"]');
        if (footer === null)
          return;
        const footerNodes = footer.assignedNodes({
          flatten: true
        });
        const hasFooterNode = footerNodes.length !== 0;
        const forwardTabCheckingElement = this._determineForwardTabCheckingElement(hasFooterNode, footerNodes);
        this._closeKeypadIfForwardTabbedOnForwardTabElement(e8, forwardTabCheckingElement);
      } else if (backwardTabbed) {
        const functionslot = this.shadowRoot.querySelector('[name="functions"]');
        if (functionslot === null)
          return;
        const functionNodes = functionslot.assignedNodes({
          flatten: true
        });
        const hasFunctionNodes = functionNodes.length !== 0;
        const backwardTabCheckingElement = this._determineBackwardTabCheckingElement(hasFunctionNodes, functionNodes);
        this._closeKeypadIfBackwardTabbedOnBackwardTabElement(e8, backwardTabCheckingElement);
      } else {
      }
    }
    _closeKeypadIfTabbed() {
      this._closeKeypad();
      this._finalCheck();
      this._checkMaxMin();
    }
    _determineForwardTabCheckingElement(hasFooterNode, footerNodes) {
      if (hasFooterNode) {
        return footerNodes[footerNodes.length - 1];
      }
    }
    _determineBackwardTabCheckingElement(hasFunctionNodes, functionNodes) {
      if (hasFunctionNodes) {
        return functionNodes[0];
      }
    }
    _closeKeypadIfForwardTabbedOnForwardTabElement(e8, forwardTabCheckingElement) {
      if (e8.target === forwardTabCheckingElement) {
        this._closeKeypad();
        this._finalCheck();
        this._checkMaxMin();
      }
    }
    _closeKeypadIfBackwardTabbedOnBackwardTabElement(e8, backwardTabCheckingElement) {
      if (e8.target === backwardTabCheckingElement) {
        this._closeKeypad();
        this._finalCheck();
        this._checkMaxMin();
      }
    }
    _clearValueIfEnterKeyPressed(e8) {
      const outlineOffset = "-0.125rem";
      if (e8.code === "Enter" || e8.code === "NumpadEnter" || e8.code === "Space") {
        this._clearField();
      }
      this.style.outlineOffset = outlineOffset;
    }
    _storeCursorPosition(inputBox) {
      this._cursorPosition = inputBox.selectionStart;
    }
    _inputFocus(e8) {
      if (!this.keypadActive) {
        this._openKeypadIfAppropriate();
      }
      e8.target.onkeydown = (e9) => {
        if (!this.inputDisabled) {
          this._addOrSubtractBasedOnKey(e9);
        } else {
          e9.preventDefault();
        }
      };
    }
    _handleBlur(e8) {
      if ((this.value !== "" || e8.currentTarget && e8.currentTarget.tagName == "SH-INPUT-TEXT") && this.keypadActive) {
        this.shadowRoot.querySelector("#input").classList.remove("empty");
      }
    }
    _openKeypadIfAppropriate() {
      if (this.keypad && !this.readonly && !this.disabled) {
        this._openKeypad();
      }
    }
    _openKeypad() {
      this.keypadActive = true;
    }
    _addOrSubtractBasedOnKey(e8) {
      switch (e8.which) {
        case 38:
          {
            e8.preventDefault();
            if (this.disabled || this.readonly) {
              return;
            }
            this._handlePlus();
          }
          break;
        case 40:
          {
            e8.preventDefault();
            if (this.disabled || this.readonly) {
              return;
            }
            this._handleMinus();
          }
          break;
        default: {
        }
      }
    }
    _closeKeypadIfBackTabbed(e8) {
      if (e8.code === "Tab" && e8.shiftKey && e8.target.id !== "plus" && e8.target.id !== "minus") {
        this._finalCheck();
        this._checkMaxMin();
        this._closeKeypad();
      }
    }
    _finalCheck() {
      const isInvalidValue = this.value === "" || isNaN(this.value);
      if (isInvalidValue) {
        this.shadowRoot.querySelector("#input").value = null;
        this.value = "";
      } else {
        this.value = Number(parseFloat(this.value)).toString();
        if (this.decimals !== "" && parseFloat(this.decimals) >= 0 && !isNaN(this.decimals)) {
          this.value = Number(this.value).toFixed(Number(this.decimals)).toString();
        }
      }
    }
    _validateOnBlurOnNormalInput() {
      if (!this.noValidate) {
        this._finalCheck();
      }
      if (!this.inputDisabled) {
        this._checkMaxMin();
      }
      if (!this.readonly) {
        this.shadowRoot.querySelector("#input").readonly = false;
      }
    }
    _closeInputKeyPad(e8) {
      let inputText = this.shadowRoot.querySelector("#input");
      const inputBox = inputText.shadowRoot.querySelector("input");
      const hasClickedOutsideKeypad = this._checkIfClickedOutsideKeypad(e8);
      if (hasClickedOutsideKeypad) {
        this._validateOnBlurOnKeypadInput(inputBox);
        this.blur();
      }
    }
    _validateOnBlurOnKeypadInput(inputBox) {
      this._closeKeypad();
      this._checkMaxMin();
      if (!this.readonly) {
        inputBox.readonly = false;
      }
    }
    _closeKeypad() {
      this.keypadActive = false;
      if (this.value == "") {
        this.shadowRoot.querySelector("#input").classList.add("empty");
      }
    }
    _checkMaxMin() {
      if (this.max !== void 0 || this.min !== void 0) {
        const finalNumberOfDecimalPoints = this._getNumberOfPrecision();
        self.value = Number(self.value).toFixed(finalNumberOfDecimalPoints);
        if (this.value !== "" && Number(this.value) > Number(this.max)) {
          this.value = this.decimals == "" ? this.max : Number(this.max).toFixed(finalNumberOfDecimalPoints);
        }
        if (Number(this.value) < Number(this.min)) {
          this.value = this.decimals == "" ? this.min : Number(this.min).toFixed(finalNumberOfDecimalPoints);
        }
      }
    }
    _checkIfClickedOutsideKeypad(e8) {
      let clickedOutside;
      const composedPathLength = e8.composedPath().length;
      let inputText = this.shadowRoot.querySelector("#input");
      for (let i7 = 0; i7 < composedPathLength; i7++) {
        const clickedKeypadWrapperOrInputBox = e8.composedPath()[i7] === this.shadowRoot.querySelector("sh-numeric-keypad") || e8.composedPath()[i7] === inputText.shadowRoot.querySelector("input") || e8.composedPath()[i7] === this.shadowRoot.querySelector("#clear") || e8.composedPath()[i7] === this;
        const clickedFunctionWrapperOrFooterWrapper = e8.composedPath()[i7] === this.shadowRoot.querySelector(".functions-wrapper") || e8.composedPath()[i7] === this.shadowRoot.querySelector(".footer-wrapper");
        const clickedDivider = e8.composedPath()[i7] === this.shadowRoot.querySelector(".divider");
        const clickedHost = e8.composedPath()[i7] === this.shadowRoot.querySelector(".host-wrapper");
        const clickOnControl = clickedKeypadWrapperOrInputBox || clickedFunctionWrapperOrFooterWrapper || clickedDivider || clickedHost;
        if (clickOnControl) {
          clickedOutside = false;
          break;
        } else {
          clickedOutside = true;
        }
      }
      return clickedOutside;
    }
    _setBrowserLanguageBasedEuropeanNumberConventionProperty() {
      if (Number("120.94").toLocaleString() === "120,94") {
        this.europeanNumberConvention = true;
      } else if (Number("120.94").toLocaleString() === "120.94") {
        this.europeanNumberConvention = false;
      }
    }
    _handleKeypadActive() {
      if (this.keypadActive) {
        if (this.inputDisabled) {
          document.removeEventListener("keydown", this.keyDownListener);
          this.keyDownListener = this._closeOnInactive.bind(this);
          document.addEventListener("keydown", this.keyDownListener);
        }
        document.body.addEventListener("click", this.closeListener);
        document.body.addEventListener("touchstart", this.closeListener);
        dispatchCustomEvent(this, "keypad-opened", this);
        clearTimeout(this._rAFFrameControlDelay);
        cancelAnimationFrame(this._positioningFrame);
        this._positioningFrame = window.requestAnimationFrame(this._rAFCallBack);
      } else {
        document.removeEventListener("keydown", this.keyDownListener);
        document.body.removeEventListener("click", this.closeListener);
        document.body.removeEventListener("touchstart", this.closeListener);
        dispatchCustomEvent(this, "keypad-closed", this);
        clearTimeout(this._rAFFrameControlDelay);
        cancelAnimationFrame(this._positioningFrame);
      }
    }
    _closeOnInactive() {
      if (document.activeElement !== this) {
        this._closeKeypad();
      }
    }
    _showKeypad() {
      this._rAFFrameControlDelay = setTimeout(() => {
        clearTimeout(this._rAFFrameControlDelay);
        this._handleOffset();
        if (this.keypadActive) {
          this._positioningFrame = window.requestAnimationFrame(this._rAFCallBack);
        } else {
          cancelAnimationFrame(this._positioningFrame);
        }
      }, 10);
    }
    _handleOffset() {
      const menu = this.shadowRoot.querySelector("sh-numeric-keypad");
      const baseFontSize2 = parseFloat(window.getComputedStyle(document.querySelector("html"), null).getPropertyValue("font-size"));
      menu.style.left = this.offsetX / 16 + "rem";
      let elem = this;
      let transformPresent;
      let transformedParent;
      while (elem.parentNode && elem.parentNode.nodeName.toLowerCase() !== "body") {
        if (getComputedStyle(elem.parentNode).transform !== "none") {
          transformPresent = true;
          transformedParent = elem.parentNode;
          break;
        } else {
          transformPresent = false;
        }
        elem = elem.parentNode;
      }
      this.offsetY = this.getBoundingClientRect().top;
      var rect = this.getBoundingClientRect();
      if (this.offsetY + menu.clientHeight + this.offsetHeight > window.innerHeight && this.offsetY > menu.clientHeight || this.isDropUp) {
        menu.style.left = rect.left / baseFontSize2 + "rem";
        if (transformPresent) {
          menu.style.top = (0 - transformedParent.getBoundingClientRect().top + this.offsetY - menu.clientHeight) / baseFontSize2 + "rem";
        } else {
          menu.style.top = (this.offsetY - menu.clientHeight) / baseFontSize2 + "rem";
        }
        if (rect.left + menu.offsetWidth + 16 > window.innerWidth) {
          let leftOffset = (window.innerWidth - menu.offsetWidth - 16) / baseFontSize2 + "rem";
          menu.style.left = leftOffset;
        } else {
          if (menu.style.left) {
            menu.style.left = rect.left / baseFontSize2 + "rem";
          }
        }
      } else if (this.offsetY + menu.clientHeight + this.offsetHeight < window.innerHeight) {
        menu.style.left = rect.left / baseFontSize2 + "rem";
        if (transformPresent) {
          menu.style.top = (0 - transformedParent.getBoundingClientRect().top + this.offsetY + this.offsetHeight) / baseFontSize2 + "rem";
        } else {
          menu.style.top = (this.offsetY + this.offsetHeight) / baseFontSize2 + "rem";
        }
        if (rect.left + menu.offsetWidth + 16 > window.innerWidth) {
          let leftOffset = (window.innerWidth - menu.offsetWidth - 16) / baseFontSize2 + "rem";
          menu.style.left = leftOffset;
        } else {
          if (menu.style.left) {
            menu.style.left = rect.left / baseFontSize2 + "rem";
          }
        }
      } else {
        var rect = this.getBoundingClientRect();
        if (rect.left > menu.clientWidth) {
          menu.style.left = (rect.left - menu.clientWidth) / baseFontSize2 + "rem";
          menu.style.top = (window.innerHeight - menu.clientHeight - 16) / baseFontSize2 + "rem";
        } else {
          if (rect.left + this.offsetWidth + menu.offsetWidth + 16 < window.innerWidth) {
            let leftOffset = (rect.left + this.offsetWidth) / baseFontSize2 + "rem";
            menu.style.left = leftOffset;
            menu.style.top = (window.innerHeight - menu.clientHeight - 16) / baseFontSize2 + "rem";
          } else {
            let leftOffset = (window.innerWidth - menu.offsetWidth - 16) / baseFontSize2 + "rem";
            menu.style.left = leftOffset;
          }
        }
      }
    }
    _keypadObserver() {
      if (this.keypad) {
        this._inputMode = "none";
      } else {
        this._inputMode = "numeric";
      }
    }
    _handleInputDisabledChange() {
      document.removeEventListener("keydown", this.keyDownListener);
      if (this.inputDisabled && this.keypadActive) {
        this.keyDownListener = this._closeOnInactive.bind(this);
        document.addEventListener("keydown", this.keyDownListener);
      }
    }
    _decimalsObserver() {
      const decimalsInNumber = Number(this.decimals);
      this.shadowRoot.querySelector("#input").step = Math.pow(10, -decimalsInNumber);
    }
    _displayValueChange() {
      const newValueIsNotEmpty = this._displayValue ? true : false;
      if (this._displayValue === "") {
        this.shadowRoot.querySelector("#input").value = this._displayValue;
      }
      if (newValueIsNotEmpty) {
        this.shadowRoot.querySelector("#input").value = this._displayValue;
      }
    }
    _restrictOnlyNumberKeys(e8) {
      const isValidInput = this._checkIfValidInput(e8);
      if (isValidInput && !this.inputDisabled) {
        let numberSystem;
        if (this.europeanNumberConvention === void 0 || this.europeanNumberConvention === null) {
          numberSystem = decimalSeparator === "," ? "European" : "English";
        } else {
          numberSystem = this.europeanNumberConvention ? "European" : "English";
        }
        if (numberSystem === "English" && e8.key === ",") {
          e8.preventDefault();
        }
        if (numberSystem === "European" && e8.key === ".") {
          e8.preventDefault();
        }
      } else {
        e8.preventDefault();
      }
    }
    _checkIfValidInput(e8) {
      let isValidInput = false;
      const eventKey = e8.key;
      const allowedKeys = [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "e",
        "Shift",
        "Enter",
        "Tab",
        "Backspace",
        "Delete",
        "Home",
        "End",
        "ArrowUp",
        "ArrowDown",
        "ArrowRight",
        "ArrowLeft",
        "-",
        "+",
        ",",
        ".",
        "Space"
      ];
      const numberOfAllowedKeys = allowedKeys.length;
      for (let i7 = 0; i7 < numberOfAllowedKeys; i7++) {
        if (eventKey === allowedKeys[i7]) {
          isValidInput = true;
          break;
        } else if (e8.ctrlKey && KEYCODE.A) {
          isValidInput = true;
          break;
        } else if ((e8.metaKey || e8.ctrlKey) && [
          KEYCODE.V.code,
          KEYCODE.C.code,
          KEYCODE.A.code,
          KEYCODE.X.code,
          KEYCODE.Z.code,
          KEYCODE.Y.code
        ].indexOf(e8.code) !== -1) {
          isValidInput = true;
          break;
        }
      }
      return isValidInput;
    }
    _updateDisplayValue() {
      this.value = this.value ? this.value.toString().split(",").join(".") : "";
    }
    _clearField() {
      this.value = "";
    }
    _startMinusCounter(e8) {
      this.shadowRoot.querySelector("#input").classList.remove("empty");
      if (e8.touches) {
        this.skipMouseMove = true;
      }
      e8.target.style.transition = "0s all linear";
      this._releaseMinusCounter();
      this._releasePlusCounter();
      this.minusClock = setInterval(this._handleMinusOnMouseDown, 120, this);
    }
    _startPlusCounter(e8) {
      this.shadowRoot.querySelector("#input").classList.remove("empty");
      if (e8.touches) {
        this.skipMouseMove = true;
      }
      e8.target.style.transition = "0s all linear";
      this._releasePlusCounter();
      this._releaseMinusCounter();
      this.plusClock = setInterval(this._handlePlusOnMouseDown, 120, this);
    }
    _releasePlusCounter(e8 = null) {
      if (e8 && e8.type === "keypress" && e8.code !== "Enter" && e8.code !== "Space") {
        return;
      }
      if (e8 && e8.type === "mousemove" && this.skipMouseMove) {
        this.skipMouseMove = false;
        return;
      }
      if (this.plusIcon) {
        clearInterval(this.plusClock);
      }
      if (this.minusIcon) {
        clearInterval(this.minusClock);
      }
      clearInterval(this.plusClock);
      if (e8 && e8.type !== "mousemove") {
        this._handlePlus();
      }
      if (e8 && e8.touches) {
        e8.preventDefault();
      }
    }
    _releaseMinusCounter(e8 = null) {
      if (e8 && e8.type === "keypress" && e8.code !== "Enter" && e8.code !== "Space") {
        return;
      }
      if (e8 && e8.type === "mousemove" && this.skipMouseMove) {
        this.skipMouseMove = false;
        return;
      }
      if (this.plusIcon) {
        clearInterval(this.plusClock);
      }
      if (this.minusIcon) {
        clearInterval(this.minusClock);
      }
      clearInterval(this.minusClock);
      if (e8 && e8.type !== "mousemove") {
        this._handleMinus();
      }
      if (e8 && e8.touches) {
        e8.preventDefault();
      }
    }
    _handlePlusOnMouseDown(self2) {
      if (!self2.disabled) {
        if (self2.value === null || self2.value === void 0) {
          self2.value = "";
        }
        if (self2.step === null || self2.step === void 0) {
          self2.step = "1";
        }
        const finalNumberOfDecimalPoints = self2._getNumberOfPrecision();
        self2.value = Number(self2.step) + Number(self2.value);
        self2.value = Number(self2.value).toFixed(finalNumberOfDecimalPoints);
        self2._checkMaxMin();
        self2._renewStableValue(self2.value);
        self2.minusIcon = false;
        self2.plusIcon = true;
        dispatchCustomEvent(self2, "plusPressed", self2);
        self2.mouseDownAddition = true;
      } else {
        self2._releasePlusCounter();
      }
    }
    _getNumberOfPrecision() {
      const valueInString = this.value ? this.value.toString() : "";
      let valueHasDecimalPoints = false;
      let stepHasDecimalPoints = false;
      let numberOfDecimalPointsOfValue = 0;
      let numberOfDecimalPointsOfStep = 0;
      let finalNumberOfDecimalPoints = 0;
      if (this.step !== Math.round(this.step)) {
        stepHasDecimalPoints = true;
        numberOfDecimalPointsOfStep = ("" + this.step).split(".")[1].length;
      }
      if (valueInString.includes(".")) {
        valueHasDecimalPoints = true;
        numberOfDecimalPointsOfValue = valueInString.split(".")[1].length;
      }
      if (valueHasDecimalPoints || stepHasDecimalPoints) {
        if (numberOfDecimalPointsOfStep > numberOfDecimalPointsOfValue) {
          finalNumberOfDecimalPoints = numberOfDecimalPointsOfStep;
        } else {
          finalNumberOfDecimalPoints = numberOfDecimalPointsOfValue;
        }
      }
      return this._getNumberOfDecimalPoints(finalNumberOfDecimalPoints);
    }
    _getNumberOfDecimalPoints(finalNumberOfDecimalPoints) {
      const decimalPoints = this.decimals;
      const numOfDecimalPoints = Number(decimalPoints);
      if (decimalPoints !== "" && parseFloat(decimalPoints) >= 0 && !isNaN(decimalPoints)) {
        if (this.shadowRoot.querySelector("#input")) {
          this.shadowRoot.querySelector("#input").step = Math.pow(10, -numOfDecimalPoints);
        }
        return numOfDecimalPoints;
      } else {
        if (this.shadowRoot.querySelector("#input")) {
          this.shadowRoot.querySelector("#input").step = Math.pow(10, -finalNumberOfDecimalPoints);
        }
        return finalNumberOfDecimalPoints;
      }
    }
    _handleMinusOnMouseDown(self2) {
      if (!self2.disabled) {
        if (self2.value === null || self2.value === void 0) {
          self2.value = "";
        }
        if (self2.step === null || self2.step === void 0) {
          self2.step = "1";
        }
        const finalNumberOfDecimalPoints = self2._getNumberOfPrecision();
        self2.value = Number(self2.value) - Number(self2.step);
        self2.value = Number(self2.value).toFixed(finalNumberOfDecimalPoints);
        if (self2.value === "-0") {
          self2.value = "0";
        }
        self2._checkMaxMin();
        self2._renewStableValue(self2.value);
        self2.plusIcon = false;
        self2.minusIcon = true;
        dispatchCustomEvent(self2, "minusPressed", self2);
        self2.mouseDownSubtraction = true;
      } else {
        self2._releaseMinusCounter();
      }
    }
    _handlePlus() {
      if (!this.disabled) {
        if (this.mouseDownAddition) {
          this.mouseDownAddition = false;
          return;
        }
        if (this.value === null || this.value === void 0) {
          this.value = "";
        }
        if (this.step === null || this.step === void 0) {
          this.step = "1";
        }
        const finalNumberOfDecimalPoints = this._getNumberOfPrecision();
        this.value = Number(this.step) + Number(this.value);
        this.value = Number(this.value).toFixed(finalNumberOfDecimalPoints);
        this._checkMaxMin();
        this._renewStableValue(this.value);
        dispatchCustomEvent(this, "plusPressed", this);
      }
      this._releaseMinusCounter();
      this._releasePlusCounter();
    }
    _handleMinus() {
      if (!this.disabled) {
        if (this.mouseDownSubtraction) {
          this.mouseDownSubtraction = false;
          return;
        }
        if (this.value === null || this.value === void 0) {
          this.value = "";
        }
        if (this.step === null || this.step === void 0) {
          this.step = "1";
        }
        const finalNumberOfDecimalPoints = this._getNumberOfPrecision();
        this.value = Number(this.value) - Number(this.step);
        this.value = Number(this.value).toFixed(finalNumberOfDecimalPoints);
        if (this.value === "-0") {
          this.value = "0";
        }
        this._checkMaxMin();
        this._renewStableValue(this.value);
        dispatchCustomEvent(this, "minusPressed", this);
      }
      this._releaseMinusCounter();
      this._releasePlusCounter();
    }
    _renewStableValue(value) {
      let tempValue = Number(value);
      if (this.min && this.max) {
        if (Number(this.value) >= Number(this.min) && Number(this.value) <= Number(this.max)) {
          this.stableValue = tempValue;
        }
      } else {
        this.stableValue = tempValue;
      }
    }
    _europeanNumberConventionObserver() {
      const replaceSeparator = this.europeanNumberConvention ? "." : ",";
      this._decimalSeparator = this.europeanNumberConvention ? "," : ".";
      if (this._displayValue) {
        this._displayValue = this._displayValue.toString().split(replaceSeparator).join(this._decimalSeparator);
        this._displayValueChange();
      }
    }
    disconnectedCallback() {
      if (this._rAFFrameControlDelay) {
        clearTimeout(this._rAFFrameControlDelay);
      }
      if (this._positioningFrame) {
        cancelAnimationFrame(this._positioningFrame);
      }
      if (this.keyDownListener) {
        document.removeEventListener("keydown", this.keyDownListener);
      }
      document.body.removeEventListener("click", this.closeListener);
      document.body.removeEventListener("mousemove", this.boundMove);
      document.body.removeEventListener("click", this.closeListener);
      super.disconnectedCallback();
    }
  };
  customElements.define("sh-input-number", SHInputNumber);

  // ../sh-radio-button/src/sh-radio-button.lit.scss.js
  var sh_radio_button_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-radio-button-container-margin=0] - margin of the container(XL)
   */
  --sh-radio-button-container-margin: 0;
  /* 
   * @cssprop [--sh-radio-button-label-line-height=1.25rem] - line height of the label
   */
  --sh-radio-button-label-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-radio-button-label-padding=0.25rem] - left padding of the label
   */
  --sh-radio-button-label-padding: 0.25rem;
  /* 
   * @cssprop [--sh-radio-button-label-margin=0.125rem 0] - top and bottom margins of the label
   */
  --sh-radio-button-label-margin: 0.125rem 0;
  /* 
   * @cssprop [--sh-radio-button-width=1.5rem] - width of the radio-button
   */
  --sh-radio-button-width: 1.5rem;
  /* 
   * @cssprop [--sh-radio-button-height=1.5rem] - height of radio-button
   */
  --sh-radio-button-height: 1.5rem;
  /* 
   * @cssprop [--sh-radio-button-pseudo-width=1rem] - width of the pseudo radio-button
   */
  --sh-radio-button-pseudo-width: 1rem;
  /* 
   * @cssprop [--sh-radio-button-pseudo-height=1rem] - height of the pseudo radio-button
   */
  --sh-radio-button-pseudo-height: 1rem;
  /* 
   * @cssprop [--sh-radio-button-pseudo-margin=0.25rem] - margin of the pseudo radio-button
   */
  --sh-radio-button-pseudo-margin: 0.25rem;
  /* 
   * @cssprop [--sh-radio-button-pseudo-border-width=0.125rem] - border-width of the pseudo radio-button
   */
  --sh-radio-button-pseudo-border-width: 0.125rem;
  /* 
   * @cssprop [--sh-radio-button-pseudo-border-width-active=0.3125rem] - border-width of the pseudo radio-button when active
   */
  --sh-radio-button-pseudo-border-width-active: 0.3125rem;
}

:host {
  outline: none;
  display: flex;
  flex-direction: row;
  width: 100%;
  position: relative;
  font: var(--body-1);
  color: var(--text-primary);
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
}

:host([disabled]) {
  pointer-events: none;
  color: var(--text-disabled) !important;
}

:host(:not([disabled])) * {
  cursor: pointer;
}

:host .radio-container {
  display: flex;
  align-items: center;
  height: fit-content;
  width: 100%;
  position: relative;
  margin: var(--sh-radio-button-container-margin);
}

:host .radioBtn {
  opacity: 0;
  position: absolute;
  margin: 0;
  width: var(--sh-radio-button-width);
  height: var(--sh-radio-button-height);
  align-self: flex-start;
}

:host .pseudo-radio {
  border-radius: 50%;
  border-width: var(--sh-radio-button-pseudo-border-width);
  border-style: solid;
  border-color: rgba(var(--ui-1), var(--opacity-4));
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) border-color;
  margin: var(--sh-radio-button-pseudo-margin);
  box-sizing: border-box;
  height: var(--sh-radio-button-pseudo-height);
  width: var(--sh-radio-button-pseudo-width);
  align-self: flex-start;
}

:host label {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  padding-left: var(--sh-radio-button-label-padding);
  margin: var(--sh-radio-button-label-margin);
  flex: 1;
  font: var(--body-1);
  line-height: var(--sh-radio-button-label-line-height);
  text-overflow: ellipsis;
  overflow: hidden;
}

:host([label=""]),
:host(:not([label])) {
  width: fit-content;
  width: -moz-fit-content;
}

/* Component State Styles */
:host([active]) .pseudo-radio {
  background: transparent;
  height: var(--sh-radio-button-pseudo-height);
  width: var(--sh-radio-button-pseudo-width);
  border-width: var(--sh-radio-button-pseudo-border-width-active) !important;
  box-sizing: border-box;
  border-style: solid;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) border-color;
  border-color: rgba(var(--ui-2), var(--opacity-1));
}

/* Neutral */
:host([neutral][active]:not([disabled])) .pseudo-radio {
  border-color: rgba(var(--ui-1), var(--opacity-3));
}

:host([disabled]) .pseudo-radio,
:host([neutral][disabled][active]) .pseudo-radio {
  border-color: rgba(var(--ui-1), var(--opacity-5));
}

:host([disabled][active]:not([neutral])) .pseudo-radio {
  border-color: rgba(var(--ui-2), var(--opacity-5));
}

/* hover */
:host(:hover:not(.no-hovermq)) .pseudo-radio {
  border-color: rgba(var(--ui-1), var(--opacity-3));
}

:host([active]:hover:not(.no-hovermq)) .pseudo-radio {
  border-color: rgba(var(--ui-3), var(--opacity-1));
}

:host([neutral][active]:hover:not(.no-hovermq)) .pseudo-radio {
  border-color: rgba(var(--ui-1), var(--opacity-2));
}

.focus {
  outline: var(--focus-outline);
}`;

  // ../sh-radio-button/src/sh-radio-button.js
  var SHRadioButton = class SHRadioButton2 extends s4 {
    constructor() {
      super();
      this.label = "label";
      this.active = false;
      this.disabled = false;
      this.neutral = false;
      this.label = "label";
    }
    static get styles() {
      return [extendInteractiveArea(), sh_radio_button_lit_scss_default];
    }
    render() {
      return x`
      <div class="radio-container">
        <input
          class="radioBtn"
          type="radio"
          name="${this.label ? this.label : ""}"
          ?checked="${this.active}"
          ?active="${this.active}"
          tabindex="-1"
        />
        <span class="pseudo-radio"></span>
        ${this.label ? x` <label>${this.label}</label>` : ""}
      </div>
    `;
    }
    attributeChangedCallback(name, oldval, newVal) {
      super.attributeChangedCallback(name, oldval, newVal);
      const val = newVal !== null;
      if (name === "active") {
        this.setAttribute("aria-checked", val.toString());
      }
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("no-hovermq");
      }
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "radio");
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("active") && this.active) {
        this.dispatchEvent(new Event(`active-changed`));
      }
      if (this.active) {
        this.setAttribute("tabindex", "0");
      } else {
        this.setAttribute("tabindex", "-1");
      }
    }
    firstUpdated() {
      this.addEventListener("click", () => {
        this.handleActive();
      });
      this.addEventListener("focus", () => {
        this.handleFocus();
      });
      this.addEventListener("blur", () => {
        this.handleBlur();
      });
    }
    handleFocus() {
      var _a4;
      const pseudoRadio = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".pseudo-radio");
      if (!this.disabled) {
        this.onkeyup = function(e8) {
          if (keyboardInteraction2(e8, KEYCODE2.TAB)) {
            pseudoRadio === null || pseudoRadio === void 0 ? void 0 : pseudoRadio.classList.add("focus");
          }
        };
        this.onkeydown = (e8) => {
          this.handleKeydown(e8);
        };
      }
    }
    handleKeydown(e8) {
      var _a4;
      const siblings = (_a4 = this.parentElement) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll("SH-RADIO-BUTTON:not([disabled])");
      if (siblings) {
        if (keyboardInteraction2(e8, KEYCODE2.ARROW_RIGHT) || keyboardInteraction2(e8, KEYCODE2.ARROW_DOWN)) {
          this.handleTarget(e8, ["ArrowRight", "ArrowDown"], siblings, "next");
        } else if (keyboardInteraction2(e8, KEYCODE2.ARROW_LEFT) || keyboardInteraction2(e8, KEYCODE2.ARROW_UP)) {
          this.handleTarget(e8, ["ArrowLeft", "ArrowUp"], siblings, "prev");
        }
      }
    }
    handleTarget(e8, targetKeys, siblings, traversal) {
      let target;
      const posThis = Array.from(siblings).indexOf(this);
      if (traversal === "next") {
        target = posThis === siblings.length - 1 ? siblings[0] : siblings[posThis + 1];
      } else {
        target = posThis === 0 ? siblings[siblings.length - 1] : siblings[posThis - 1];
      }
      this.handleArrowInput(e8, targetKeys, target);
    }
    handleArrowInput(e8, triggerKeys, target) {
      if (triggerKeys.includes(e8.code) && target) {
        e8.preventDefault();
        this.active = false;
        target.active = true;
        target.focus();
      }
    }
    handleBlur() {
      var _a4;
      const pseudoRadio = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".pseudo-radio");
      pseudoRadio === null || pseudoRadio === void 0 ? void 0 : pseudoRadio.classList.remove("focus");
    }
    handleActive() {
      this.active = true;
      this.dispatchEvent(new CustomEvent("clicked", { bubbles: true, detail: this }));
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHRadioButton.prototype, "label", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHRadioButton.prototype, "active", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHRadioButton.prototype, "disabled", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHRadioButton.prototype, "neutral", void 0);
  __decorate([n5({ type: String, reflect: true })], SHRadioButton.prototype, "role", void 0);
  SHRadioButton = __decorate([e4("sh-radio-button")], SHRadioButton);

  // ../sh-radio-button/src/sh-radio-group.lit.scss.js
  var sh_radio_group_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-radio-group-margin=0.5rem] - margin for the radio-button
   */
  --sh-radio-group-margin: 0.5rem;
  /* 
   * @cssprop [--sh-radio-group-horizontal-gap=0.5rem 1.5rem] - horizontal gap in-between radio-buttons
   */
  --sh-radio-group-horizontal-gap: 0.5rem 1.5rem;
}

:host {
  width: 100%;
  outline: 0;
  display: block;
}

.radio-wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
}

#grouped {
  flex: 1;
  box-sizing: border-box;
  display: flex;
}

:host([horizontal]) #grouped {
  flex-direction: row;
  flex-wrap: wrap;
  gap: var(--sh-radio-group-horizontal-gap);
}

:host(:not([horizontal])) #grouped {
  flex-direction: column;
}

:host([horizontal]) .radio-wrapper > ::slotted(sh-radio-button) {
  width: unset;
}

:host(:not([horizontal])) .radio-wrapper > ::slotted(*) {
  margin-top: var(--sh-radio-group-margin);
}

:host(:not([horizontal])) .radio-wrapper > ::slotted(:first-child) {
  margin-top: 0;
}`;

  // ../sh-radio-button/src/sh-radio-group.js
  var SHRadioGroup = class SHRadioGroup2 extends s4 {
    constructor() {
      super(...arguments);
      this.horizontal = false;
    }
    static get styles() {
      return [sh_radio_group_lit_scss_default];
    }
    render() {
      return x` <div class="radio-wrapper">
      <slot id="grouped"></slot>
    </div>`;
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "radiogroup");
      }
    }
    firstUpdated() {
      this.addEventListener("click", (e8) => {
        this.handleClick(e8);
      });
    }
    handleClick(e8) {
      const target = e8.target;
      if (!target.disabled && target.tagName !== "SH-RADIO-GROUP" && target.tagName === "SH-RADIO-BUTTON") {
        const activeEls = this.querySelectorAll("[active]");
        for (const activeEl of activeEls) {
          if (activeEl !== target) {
            activeEl.active = false;
          }
        }
      }
    }
  };
  __decorate([n5({ type: Boolean, reflect: true })], SHRadioGroup.prototype, "horizontal", void 0);
  __decorate([n5({ type: String, reflect: true })], SHRadioGroup.prototype, "role", void 0);
  SHRadioGroup = __decorate([e4("sh-radio-group")], SHRadioGroup);

  // ../sh-list/src/sh-list-item.lit.scss.js
  var sh_list_item_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-list-item-padding=0.25rem 1rem] - padding of the list item
   */
  --sh-list-item-padding: 0.25rem 1rem;
  /* 
   * @cssprop [--sh-list-item-min-height=2rem] - min height of the list item
   */
  --sh-list-item-min-height: 2rem;
  /* 
   * @cssprop [--sh-list-item-icon-margin=0.5rem] - margin of the icon and the arrow icon
   */
  --sh-list-item-icon-margin: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-line-height=1.25rem] - line height of the label
   */
  --sh-list-item-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-list-item-info-line-height=1rem] - line height of the info
   */
  --sh-list-item-info-line-height: 1rem;
  /* 
   * @cssprop [--sh-list-item-text-padding=0.25rem 0] - top and bottom padding of the text content
   */
  --sh-list-item-text-padding: 0.25rem 0;
  /* 
   * @cssprop [--sh-list-item-arrow-right-margin=0.5rem] - margin of the arrow icon
   */
  --sh-list-item-arrow-right-margin: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-text-wrapper-left-margin=0.5rem] - left margin of the text wrapper
   */
  --sh-list-item-text-wrapper-left-margin: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-right-slotted-margin=0.5rem] - right margin of the text wrapper
   */
  --sh-list-item-right-slotted-margin: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-select-margin-right=0.5rem] - margin right of the checkbox/radio button
   */
  --sh-list-item-select-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-icon-size-s=2rem] - size of the icon
   */
  --sh-list-item-icon-size-s: 2rem;
  /* 
   * @cssprop [--sh-list-item-bottom-first-margin=0.5rem] - first child margin in bottom slot
   */
  --sh-list-item-bottom-first-margin: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-bottom-slot-margin=0.5rem] - bottom slotted child margins
   */
  --sh-list-item-bottom-slot-margin: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-content-line-height=1.25rem] - line height for the direct content added
   */
  --sh-list-item-content-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-list-item-checkbox-right=0rem] - checkbox right margin
   */
  --sh-list-item-checkbox-right: 0rem;
  /* 
   * @cssprop [--sh-list-item-select-wrapper-size=2rem] - select wrapper height and width
   */
  --sh-list-item-select-wrapper-size: 2rem;
  /* 
   * @cssprop [--sh-list-item-info-margin=0.125rem 0] - top and bottom margin of the info
   */
  --sh-list-item-info-margin: 0.125rem 0;
  /* 
   * @cssprop [--sh-list-item-left-slotted-margin=0.25rem] - right margin of the left slotted items
   */
  --sh-list-item-left-slotted-margin: 0.25rem;
  /* 
   * @cssprop [--sh-list-item-right-slotted-first-margin=0.5rem] - left margin of the first right slotted item
   */
  --sh-list-item-right-slotted-first-margin: 0.5rem;
  /* 
   * @cssprop [--sh-list-item-divider-inset-margin=1rem] - divider inset margin to the left or right
   */
  --sh-list-item-divider-inset-margin: 1rem;
}

:host {
  position: relative;
  --sh-checkbox-margin-right: var(--sh-list-item-checkbox-right);
  color: var(--text-primary);
  display: block;
  height: fit-content;
}

:host(:not([disabled])[clickable]),
:host(:not([disabled])[toggle]),
:host(:not([disabled])[selectable]),
:host(:not([disabled])[href]) {
  cursor: pointer;
}

.outer-wrapper {
  min-height: var(--sh-list-item-min-height);
  font: var(--body-1);
  line-height: var(--sh-list-item-content-line-height);
  height: fit-content;
  padding: var(--sh-list-item-padding);
  display: flex;
  align-items: center;
  gap: var(--sh-list-item-text-wrapper-left-margin);
}

:host(:hover:not([disabled])) .outer-wrapper {
  background: rgba(var(--ui-1), var(--opacity-7));
}

:host([active]:not([disabled])) .outer-wrapper {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host(:not([disabled])) .outer-wrapper:active {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host([active]:not([selectable]):not([toggle]):not([href]):not([clickable])) .outer-wrapper,
:host(:hover:not([selectable]):not([toggle]):not([href]):not([clickable])) .outer-wrapper {
  background: transparent;
}

:host slot[name=left]::slotted(*) {
  margin-right: var(--sh-list-item-left-slotted-margin);
}

:host slot[name=right]::slotted(*:not(:first-child)) {
  margin-left: var(--sh-list-item-right-slotted-margin);
}

:host slot[name=right]::slotted(*:first-child) {
  margin-left: var(--sh-list-item-right-slotted-first-margin);
}

:host slot[name=bottom]::slotted(*:last-child) {
  margin-bottom: var(--sh-list-item-bottom-slot-margin);
}

:host slot[name=bottom]::slotted(*:not(:last-child)) {
  margin-bottom: var(--sh-list-item-bottom-first-margin);
}

.label {
  line-height: var(--sh-list-item-line-height);
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
  -webkit-line-clamp: 1;
}

.info {
  line-height: var(--sh-list-item-info-line-height);
  margin: var(--sh-list-item-info-margin);
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  overflow: hidden;
  -webkit-line-clamp: 1;
}

:host(:not([label]):not([info])) .slot-body {
  display: flex;
  align-items: center;
  height: 100%;
}

.icon {
  margin-right: var(--sh-list-item-icon-margin);
  min-height: var(--sh-list-item-icon-size-s);
  min-width: var(--sh-list-item-icon-size-s);
}

.text-wrapper {
  flex: 1;
  padding: var(--sh-list-item-text-padding);
}

.icon-text-wrapper {
  display: flex;
  align-items: center;
}

.right-slot-wrapper {
  display: flex;
  padding: 0.25rem 0;
}

.right {
  display: flex;
}

.arrow {
  margin-left: var(--sh-list-item-icon-margin);
  margin-right: calc(-1 * var(--sh-list-item-arrow-right-margin));
}

.content-wrapper {
  flex: 1;
}

.select-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--sh-list-item-select-wrapper-size);
  height: var(--sh-list-item-select-wrapper-size);
}

:host([vertical-align=top]) .select-wrapper,
:host([vertical-align=top]) .arrow {
  align-self: flex-start;
}

:host([vertical-align=top]) .content-wrapper {
  margin-top: 0rem;
}

:host([divider=full-width]) .divider-wrapper {
  left: 0rem;
}

:host([divider=inset]) .divider-wrapper {
  left: var(--sh-list-item-divider-inset-margin);
  right: var(--sh-list-item-divider-inset-margin);
}

.select {
  width: fit-content;
}

.divider-wrapper {
  bottom: 0;
  left: var(--sh-list-item-divider-inset-margin);
  position: absolute;
  right: 0;
  border-bottom: 1px solid rgba(var(--ui-1), var(--opacity-6));
}

:host(:not([disabled])[active]) .divider-wrapper,
:host(:not([disabled]):hover) .divider-wrapper {
  border-color: rgba(var(--divider), var(--opacity-1)); /* ui-6 color */
  right: 0;
  left: 0;
}

:host(:not([selectable]):not([toggle]):not([href]):not([clickable]):hover) .divider-wrapper {
  border-color: rgba(var(--ui-1), var(--opacity-6));
}

:host(:not([selectable]):not([toggle]):not([href]):not([clickable])[divider=inset]:hover) .divider-wrapper {
  right: var(--sh-list-item-divider-inset-margin);
  left: var(--sh-list-item-divider-inset-margin);
}

:host(:not([selectable]):not([toggle]):not([href]):not([clickable])[divider=inset-left]:hover) .divider-wrapper {
  left: var(--sh-list-item-divider-inset-margin);
}

:host(:not([selectable]):not([toggle]):not([href]):not([clickable])[divider=full-width]:hover) .divider-wrapper {
  right: 0;
  left: 0;
}

:host(:not([selectable]):not([toggle]):not([href]):not([clickable])[active])::before,
:host(:not([selectable]):not([toggle]):not([href]):not([clickable])[active]):hover::before,
:host(:not([selectable]):not([toggle]):not([href]):not([clickable]):hover)::before {
  background-color: transparent;
}

:host(:not([disabled]):not([divider=none])[active])::before,
:host(:not([disabled]):not([divider=none])[active]):hover::before,
:host(:not([disabled]):not([divider=none]):hover)::before {
  content: "";
  position: absolute;
  top: -0.0625rem;
  left: 0;
  width: 100%;
  height: 0.0625rem;
  background-color: rgba(var(--divider), var(--opacity-1)); /* ui-6 color */
}

.draggable {
  margin-left: var(--sh-list-item-text-wrapper-left-margin);
}

:host([disabled]) {
  pointer-events: none;
}
:host([disabled]) .outer-wrapper {
  opacity: 0.2;
}`;

  // ../sh-list/src/sh-list-item.js
  var SHListItem = class SHListItem2 extends s4 {
    constructor() {
      super(...arguments);
      this.selectable = false;
      this.active = false;
      this.toggle = false;
      this.disabled = false;
      this.divider = "inset-left";
      this.iconSize = "s";
      this.verticalAlign = "center";
      this.clickable = false;
      this.hideLinkArrow = false;
    }
    static get styles() {
      return [sh_list_item_lit_scss_default];
    }
    render() {
      var _a4;
      return x`
      <div class="outer-wrapper">
        ${this.selectable ? x` <div class="select-wrapper">
              ${((_a4 = this.closest("sh-list")) === null || _a4 === void 0 ? void 0 : _a4.selectionType) == "single" ? x`<sh-radio-button
                    class="select"
                    label=""
                    @click="${() => this.handleSelectClicked()}"
                    .active=${this.active}
                  ></sh-radio-button>` : x`<sh-checkbox
                    class="select"
                    label=""
                    .active=${this.active}
                    @click="${() => this.handleSelectClicked()}"
                  ></sh-checkbox>`}
            </div>` : ""}
        <slot name="left" class="left-slot"></slot>
        <div class="content-wrapper">
          <div class="icon-text-wrapper">
            ${this.icon ? x`<sh-icon
                  class="icon"
                  size="${this.iconSize}"
                  color="${this.iconColor}"
                  icon="${this.icon}"
                ></sh-icon>` : ""}

            <div class="text-wrapper">
              ${this.label ? x`<sh-text class="label" size="title-1" color="primary"
                    >${this.label}</sh-text
                  >` : ""}
              ${this.info ? x`<sh-text class="info" size="body-2" color="secondary">${this.info}</sh-text>` : ""}
              <slot class="slot-body"></slot>
            </div>

            <slot name="right" class="right"></slot>
            ${this.href && !this.hideLinkArrow ? x`<sh-icon class="arrow" button icon="arrow-right-s"></sh-icon>` : ""}
          </div>
          <slot name="bottom"></slot>
        </div>
        ${this.draggable ? x` <sh-icon class="draggable" icon="draggable-vertical-s" button></sh-icon>` : ""}
      </div>
      ${this.divider !== "none" ? x` <div class="divider-wrapper"></div>` : ""}
    `;
    }
    firstUpdated() {
      this.addEventListener("click", () => {
        if (this.href && !this.disabled) {
          window.location.href = this.href;
        }
        this.handleClick();
      });
    }
    update(changedProperties) {
      if (changedProperties.has("selectable") && this.selectable) {
        this.toggle = true;
      }
      super.update(changedProperties);
    }
    handleClick() {
      var _a4;
      if (this.toggle) {
        this.active = !this.active;
      }
      if (((_a4 = this.closest("sh-list")) === null || _a4 === void 0 ? void 0 : _a4.selectionType) == "single") {
        this.handleSingleSelection();
      }
    }
    handleSelectClicked() {
      var _a4;
      this.toggle = true;
      if (((_a4 = this.closest("sh-list")) === null || _a4 === void 0 ? void 0 : _a4.selectionType) == "single") {
        this.handleSingleSelection();
      }
    }
    handleSingleSelection() {
      var _a4;
      const listItems = (_a4 = this.closest("sh-list")) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll("sh-list-item[active]");
      listItems === null || listItems === void 0 ? void 0 : listItems.forEach((element) => {
        element.active = false;
      });
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHListItem.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHListItem.prototype, "info", void 0);
  __decorate([n5({ type: String, reflect: true })], SHListItem.prototype, "icon", void 0);
  __decorate([n5({ type: String, reflect: true })], SHListItem.prototype, "href", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHListItem.prototype, "selectable", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHListItem.prototype, "active", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHListItem.prototype, "toggle", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHListItem.prototype, "disabled", void 0);
  __decorate([n5({ type: String, reflect: true })], SHListItem.prototype, "divider", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-color" })], SHListItem.prototype, "iconColor", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-size" })], SHListItem.prototype, "iconSize", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "vertical-align" })], SHListItem.prototype, "verticalAlign", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHListItem.prototype, "clickable", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "hide-link-arrow" })], SHListItem.prototype, "hideLinkArrow", void 0);
  SHListItem = __decorate([e4("sh-list-item")], SHListItem);

  // ../sh-list/src/sh-list.lit.scss.js
  var sh_list_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-list-integrated-margin=0 -1rem] - negative margins of the integrated list
   */
  --sh-list-integrated-margin: 0 -1rem;
  /* 
   * @cssprop [--sh-list-integrated-arrow-margin=0rem] - arrow negative margin when inside integrated list
   */
  --sh-list-integrated-arrow-margin: 0rem;
}

:host {
  height: fit-content;
  overflow: auto;
  display: block;
}

:host(:not([flat])) {
  background-color: var(--base-3);
  box-shadow: var(--shadow-raised);
  border-radius: 0.125rem;
}

:host([integrated]) {
  margin: var(--sh-list-integrated-margin);
  --sh-list-item-arrow-right-margin: var(--sh-list-integrated-arrow-margin);
}

:host(:not([flat])) ::slotted(sh-list-item:first-child:not([disabled]):hover)::before {
  background-color: transparent;
}

:host([flat]) ::slotted(sh-list-item:first-child:not([disabled])[active])::before,
:host([flat]) ::slotted(sh-list-item:first-child:not([disabled]):hover)::before {
  top: 0;
}`;

  // ../sh-list/src/sh-list.js
  var SHList = class SHList2 extends s4 {
    constructor() {
      super(...arguments);
      this.flat = false;
      this.integrated = false;
      this.selectionType = "multiple";
    }
    static get styles() {
      return [sh_list_lit_scss_default];
    }
    render() {
      return x` <slot></slot> `;
    }
  };
  __decorate([n5({ type: Boolean, reflect: true })], SHList.prototype, "flat", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHList.prototype, "integrated", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "selection-type" })], SHList.prototype, "selectionType", void 0);
  SHList = __decorate([e4("sh-list")], SHList);

  // ../sh-menu-group/src/sh-menu-group.js
  var SHMenuGroup = class SHMenuGroup2 extends s4 {
    constructor() {
      super(...arguments);
      this.selected = "defaultId";
      this.group = "defaultGroup";
      this.role = "listgroup";
    }
    static get styles() {
      return [
        i`
        :host {
          width: 100%;
          display: block;
        }

        .menu-wrapper {
          display: flex;
          flex-direction: column;
          width: 100%;
        }

        #grouped {
          flex: 1;
          box-sizing: border-box;
          display: flex;
          flex-direction: column;
          overflow: hidden;
        }

        .menu-wrapper > ::slotted(sh-menu-item) {
          margin-top: 0.5rem;
        }
        .menu-wrapper > ::slotted(*:first-child) {
          margin-top: 0rem !important;
        }
        /* touch */
        @media (any-pointer: coarse) {
          .menu-wrapper > ::slotted(sh-menu-item) {
            margin-top: 1rem;
          }
        }
      `
      ];
    }
    render() {
      return x`
      <div class="menu-wrapper">
        <slot id="grouped" @slotchange="${this.handleSlotChange}"></slot>
      </div>
    `;
    }
    connectedCallback() {
      super.connectedCallback();
      this._handleMenuItemActiveChange = this.activeHandle.bind(this);
      this.addEventListener("clicked", this._handleMenuItemActiveChange);
    }
    activeHandle() {
      const childElement = this.querySelectorAll("sh-menu-item[active]");
      for (const child of childElement) {
        child.removeAttribute("active");
      }
    }
    handleSlotChange() {
      for (const child of this.children) {
        if (!child.hasAttribute("disabled")) {
          child.setAttribute("tabindex", "0");
        }
      }
    }
    disconnectedCallback() {
      this.removeEventListener("clicked", this._handleMenuItemActiveChange);
      super.disconnectedCallback();
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHMenuGroup.prototype, "selected", void 0);
  __decorate([n5({ type: String, reflect: true })], SHMenuGroup.prototype, "group", void 0);
  __decorate([n5({ type: String, reflect: true })], SHMenuGroup.prototype, "role", void 0);
  SHMenuGroup = __decorate([e4("sh-menu-group")], SHMenuGroup);

  // ../node_modules/@a11y/focus-trap/shadow.js
  function queryShadowRoot(root, skipNode, isMatch, maxDepth = 20, depth = 0) {
    let matches2 = [];
    if (depth >= maxDepth) {
      return matches2;
    }
    const traverseSlot = ($slot) => {
      const assignedNodes = $slot.assignedNodes().filter((node) => node.nodeType === 1);
      if (assignedNodes.length > 0) {
        return queryShadowRoot(assignedNodes[0].parentElement, skipNode, isMatch, maxDepth, depth + 1);
      }
      return [];
    };
    const children = Array.from(root.children || []);
    for (const $child of children) {
      if (skipNode($child)) {
        continue;
      }
      if (isMatch($child)) {
        matches2.push($child);
      }
      if ($child.shadowRoot != null) {
        matches2.push(...queryShadowRoot($child.shadowRoot, skipNode, isMatch, maxDepth, depth + 1));
      } else if ($child.tagName === "SLOT") {
        matches2.push(...traverseSlot($child));
      } else {
        matches2.push(...queryShadowRoot($child, skipNode, isMatch, maxDepth, depth + 1));
      }
    }
    return matches2;
  }

  // ../node_modules/@a11y/focus-trap/focusable.js
  function isHidden($elem) {
    return $elem.hasAttribute("hidden") || $elem.hasAttribute("aria-hidden") && $elem.getAttribute("aria-hidden") !== "false" || $elem.style.display === `none` || $elem.style.opacity === `0` || $elem.style.visibility === `hidden` || $elem.style.visibility === `collapse`;
  }
  function isDisabled($elem) {
    return $elem.hasAttribute("disabled") || $elem.hasAttribute("aria-disabled") && $elem.getAttribute("aria-disabled") !== "false";
  }
  function isFocusable($elem) {
    if ($elem.getAttribute("tabindex") === "-1" || isHidden($elem) || isDisabled($elem)) {
      return false;
    }
    return $elem.hasAttribute("tabindex") || ($elem instanceof HTMLAnchorElement || $elem instanceof HTMLAreaElement) && $elem.hasAttribute("href") || ($elem instanceof HTMLButtonElement || $elem instanceof HTMLInputElement || $elem instanceof HTMLTextAreaElement || $elem instanceof HTMLSelectElement) || $elem instanceof HTMLIFrameElement;
  }

  // ../node_modules/@a11y/focus-trap/debounce.js
  var timeouts = new Map();
  function debounce(cb, ms, id) {
    const timeout = timeouts.get(id);
    if (timeout != null) {
      window.clearTimeout(timeout);
    }
    timeouts.set(id, window.setTimeout(() => {
      cb();
      timeouts.delete(id);
    }, ms));
  }

  // ../node_modules/@a11y/focus-trap/focus-trap.js
  var template = document.createElement("template");
  template.innerHTML = `
	<div id="start"></div>
	<div id="backup"></div>
	<slot></slot>
	<div id="end"></div>
`;
  var FocusTrap = class extends HTMLElement {
    constructor() {
      super();
      this.debounceId = Math.random().toString();
      this._focused = false;
      const shadow = this.attachShadow({ mode: "open" });
      shadow.appendChild(template.content.cloneNode(true));
      this.$backup = shadow.querySelector("#backup");
      this.$start = shadow.querySelector("#start");
      this.$end = shadow.querySelector("#end");
      this.focusLastElement = this.focusLastElement.bind(this);
      this.focusFirstElement = this.focusFirstElement.bind(this);
      this.onFocusIn = this.onFocusIn.bind(this);
      this.onFocusOut = this.onFocusOut.bind(this);
    }
    static get observedAttributes() {
      return [
        "inactive"
      ];
    }
    get inactive() {
      return this.hasAttribute("inactive");
    }
    set inactive(value) {
      value ? this.setAttribute("inactive", "") : this.removeAttribute("inactive");
    }
    get focused() {
      return this._focused;
    }
    connectedCallback() {
      this.$start.addEventListener("focus", this.focusLastElement);
      this.$end.addEventListener("focus", this.focusFirstElement);
      this.addEventListener("focusin", this.onFocusIn);
      this.addEventListener("focusout", this.onFocusOut);
      this.render();
    }
    disconnectedCallback() {
      this.$start.removeEventListener("focus", this.focusLastElement);
      this.$end.removeEventListener("focus", this.focusFirstElement);
      this.removeEventListener("focusin", this.onFocusIn);
      this.removeEventListener("focusout", this.onFocusOut);
    }
    attributeChangedCallback() {
      this.render();
    }
    focusFirstElement() {
      this.trapFocus();
    }
    focusLastElement() {
      this.trapFocus(true);
    }
    getFocusableElements() {
      return queryShadowRoot(this, isHidden, isFocusable);
    }
    trapFocus(trapToEnd) {
      if (this.inactive)
        return;
      let focusableChildren = this.getFocusableElements();
      if (focusableChildren.length > 0) {
        if (trapToEnd) {
          focusableChildren[focusableChildren.length - 1].focus();
        } else {
          focusableChildren[0].focus();
        }
        this.$backup.setAttribute("tabindex", "-1");
      } else {
        this.$backup.setAttribute("tabindex", "0");
        this.$backup.focus();
      }
    }
    onFocusIn() {
      this.updateFocused(true);
    }
    onFocusOut() {
      this.updateFocused(false);
    }
    updateFocused(value) {
      debounce(() => {
        if (this.focused !== value) {
          this._focused = value;
          this.render();
        }
      }, 0, this.debounceId);
    }
    render() {
      this.$start.setAttribute("tabindex", !this.focused || this.inactive ? `-1` : `0`);
      this.$end.setAttribute("tabindex", !this.focused || this.inactive ? `-1` : `0`);
      this.focused ? this.setAttribute("focused", "") : this.removeAttribute("focused");
    }
  };
  window.customElements.define("focus-trap", FocusTrap);

  // ../sh-modal/src/sh-modal.lit.scss.js
  var sh_modal_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-modal-label-wrapper-padding=0rem 1rem] - padding of label wrapper
   */
  --sh-modal-label-wrapper-padding: 0rem 1rem;
  /* 
   * @cssprop [--sh-modal-footer-wrapper-padding=1rem] - padding of footer wrapper
   */
  --sh-modal-footer-wrapper-padding: 1rem;
  /* 
   * @cssprop [--sh-modal-body-wrapper-padding=1rem] - padding of body wrapper
   */
  --sh-modal-body-wrapper-padding: 1rem;
  /* 
   * @cssprop [--sh-modal-footer-wrapper-margin-left=0.5rem] - left margin between buttons in footer wrapper
   */
  --sh-modal-footer-wrapper-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-modal-close-button-2-margin=1rem 1rem 0rem 0.5rem] - margin of close buttons in header
   */
  --sh-modal-close-button-2-margin: 1rem 1rem 0rem 0.5rem;
  /* 
   * @cssprop [--sh-modal-modal-label-line-height=1.5rem] - line height of modal label
   */
  --sh-modal-modal-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-modal-close-button-margin-left=0.5rem] - left margin of close buttons in functions
   */
  --sh-modal-close-button-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-modal-icon-margin-right=0.5rem] - right margin of modal icons in header
   */
  --sh-modal-icon-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-modal-label-wrapper-height=3.5rem] - height of the label wrapper
   */
  --sh-modal-label-wrapper-height: 3.5rem;
  /* 
   * @cssprop [--sh-modal-wrapper-content-margin-bottom=0.5rem] - margin bottom of the content wrapper
   */
  --sh-modal-wrapper-content-margin-bottom: 0.5rem;
  /* 
   * @cssprop [--sh-modal-functions-wrapper-gap=0.5rem] - gap in the functions wrapper
   */
  --sh-modal-functions-wrapper-gap: 0.5rem;
  /* 
   * @cssprop [--sh-modal-functions-wrapper-margin-left=0.5rem] - margin left of the functions wrapper
   */
  --sh-modal-functions-wrapper-margin-left: 0.5rem;
}

:host {
  visibility: hidden;
  position: fixed;
  top: 0rem;
  left: 0rem;
  width: 100%;
  height: 0rem;
  max-height: 0rem;
  overflow: hidden;
  opacity: 0;
  z-index: 5;
  align-items: center;
  justify-content: center;
  display: flex;
  outline: transparent;
  background: rgba(0, 0, 0, 0.4); /* Modal Background (UI 1 - Light / UI 7 - Dark) */
  transition: var(--transition-time) all ease-in-out, 0s height ease-in-out var(--transition-time), 0s max-height ease-in-out var(--transition-time), 0s visibility linear 0s;
}

:host([visible]) {
  visibility: visible;
  opacity: 1;
  height: 100%;
  max-height: 100%;
  transition: var(--transition-time) all ease-in-out var(--transition-time), 0s height ease-in-out, 0s max-height ease-in-out, 0s visibility linear 0s;
}

:host([visible]) .modal-wrapper {
  transform: none;
  transition: var(--transition-time) all ease-in-out var(--transition-time);
}

.modal-wrapper {
  transition: var(--transition-time) all ease-in-out;
  transform: translateY(2.5rem);
  background: var(--base-3);
  box-shadow: var(--shadow-navigation);
  display: flex;
  flex-direction: column;
  border-radius: 0.125rem;
  z-index: 5;
  position: relative;
}

.focus-wrapper {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  overflow: auto;
}

.label-wrapper {
  display: flex;
  flex-direction: row;
  padding: var(--sh-modal-label-wrapper-padding);
  align-items: center;
  height: var(--sh-modal-label-wrapper-height);
}

.modal-label {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  color: var(--text-primary);
  font: var(--header-2);
  line-height: var(--sh-modal-modal-label-line-height);
  flex: 1;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
}

.close-button-2 {
  margin: var(--sh-modal-close-button-2-margin);
}

.functions-wrapper {
  display: flex;
  flex-direction: row;
  align-items: center;
  margin-left: var(--sh-modal-functions-wrapper-margin-left);
  gap: var(--sh-modal-functions-wrapper-gap);
}

.footer-wrapper > ::slotted(*) {
  margin-left: var(--sh-modal-footer-wrapper-margin-left);
}

.header-wrapper {
  display: flex;
  flex-direction: row;
}

.header-slot-wrapper > ::slotted(:not(sh-tabs)) {
  margin: 1rem;
}

.header-slot-wrapper > ::slotted(sh-tabs) {
  margin-bottom: 1rem;
}

.header-slot-wrapper {
  flex: 1 1 0%;
  display: flex;
  overflow: hidden;
}

.body-wrapper {
  flex: 1;
  padding: var(--sh-modal-body-wrapper-padding);
  box-sizing: border-box;
  display: block;
  flex-direction: column;
  overflow: auto;
  font: var(--body-1);
  color: var(--text-primary);
  line-height: 1.25rem;
}

.body-wrapper > ::slotted(*:not(:last-child):not(sh-menu-item)) {
  margin-bottom: var(--sh-modal-wrapper-content-margin-bottom);
}

.footer-wrapper {
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  padding: var(--sh-modal-footer-wrapper-padding);
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-end;
  align-items: center;
}

.footer-wrapper > ::slotted(*) {
  color: var(--text-primary);
  font: var(--body-2);
  line-height: 1rem;
}

.close-button {
  transition: var(--transition-time) all ease-in-out;
}

.modal-wrapper[empty-header] .header-wrapper {
  display: none;
}

:host(:not([label])) .label-wrapper {
  display: none;
}

.modal-wrapper[empty-footer] .footer-wrapper {
  display: none;
}

.modal-wrapper:not([empty-header]) .label-wrapper {
  display: none;
}

.modal-wrapper:not([empty-header]) .body-wrapper,
:host([label]) .body-wrapper {
  padding-top: 0rem;
}

.modal-wrapper:not([empty-footer]) .body-wrapper {
  padding-bottom: 0rem;
}

/* Modal Type Styles */
.modal-wrapper .label-wrapper sh-icon:not(.close-button) {
  margin-right: var(--sh-modal-icon-margin-right);
  margin-left: 0rem;
}

.body-wrapper > ::slotted(sh-badge) {
  display: block;
}`;

  // ../sh-modal/src/sh-modal.js
  var SHModal = class SHModal2 extends s4 {
    constructor() {
      super();
      this.modalHeight = "30rem";
      this.modalWidth = "30rem";
      this.visible = false;
      this.emptyFooter = true;
      this.emptyHeader = true;
    }
    static get styles() {
      return [sharedStyles, sh_modal_lit_scss_default];
    }
    render() {
      return x`
      <div
        class="modal-wrapper"
        style="height: ${this.modalHeight}; width: ${this.modalWidth}"
        ?empty-header=${this.emptyHeader}
        ?empty-footer=${this.emptyFooter}
      >
        <focus-trap class="focus-wrapper">
          <div class="label-wrapper">
            ${this.icon ? x` <sh-icon
                  icon="${this.icon}"
                  .color="${this.iconColor}"
                  class="modal-icon"
                  size="s"
                ></sh-icon>` : ""}
            ${this.type === "error" ? x` <sh-icon icon="error" size="s"></sh-icon>` : ""}
            ${this.type === "alert" || this.type === "warning" ? x` <sh-icon icon="warning" size="s"></sh-icon>` : ""}
            ${this.type === "confirmation" || this.type === "success" ? x` <sh-icon icon="success" size="s"></sh-icon>` : ""}
            <div class="modal-label">${this.label}</div>
            <div class="functions-wrapper">
              <slot name="functions"></slot>
              ${!this.sticky ? x` <sh-icon
                    button
                    icon="cancel"
                    class="close-button"
                    size="s"
                    @click="${() => this.closeModal()}"
                  ></sh-icon>` : ""}
            </div>
          </div>
          <div class="header-wrapper">
            <div class="header-slot-wrapper">
              <slot
                name="header"
                class="header"
                @slotchange="${(e8) => this.updateHeaderSlotFlag(e8.target)}"
              ></slot>
            </div>
            ${!this.sticky ? x` <sh-icon
                  button
                  icon="cancel"
                  class="close-button-2"
                  size="s"
                  @click="${() => this.closeModal()}"
                ></sh-icon>` : ""}
          </div>
          <div class="body-wrapper">
            <slot></slot>
          </div>
          <div class="footer-wrapper">
            <slot
              name="footer"
              class="footer"
              @slotchange="${(e8) => this.updateFooterSlotFlag(e8.target)}"
            ></slot>
          </div>
        </focus-trap>
      </div>
    `;
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "dialog");
      }
      if (!this.hasAttribute("tabindex")) {
        this.setAttribute("tabindex", "0");
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("visible")) {
        this.handleVisibleChanged();
      }
      const listOfProperties = [
        "label",
        "visible",
        "type",
        "icon",
        "sticky",
        "modalHeight",
        "modalWidth"
      ];
      dispatchAttributeChangedEvent2(this, changedProperties, listOfProperties);
    }
    firstUpdated() {
      var _a4;
      this.addEventListener("mousedown", this.closeNonstickyModal);
      this.addEventListener("dblclick", this.closeNonstickyModal);
      const modalWrapper = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".modal-wrapper");
      modalWrapper === null || modalWrapper === void 0 ? void 0 : modalWrapper.addEventListener("mousedown", (e8) => {
        e8.stopPropagation();
      });
      modalWrapper === null || modalWrapper === void 0 ? void 0 : modalWrapper.addEventListener("dblclick", (e8) => {
        e8.stopPropagation();
      });
      this.keyEventHandler = this.handleKeyup.bind(this);
    }
    updateHeaderSlotFlag(slot) {
      const headerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyHeader = headerNodes === 0;
    }
    updateFooterSlotFlag(slot) {
      const footerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyFooter = footerNodes === 0;
    }
    handleVisibleChanged() {
      var _a4;
      const modalWrapper = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".modal-wrapper");
      if (this.visible) {
        this.focus();
        modalWrapper.style.outline = "0";
        document.addEventListener("keyup", this.keyEventHandler);
      } else {
        document.removeEventListener("keyup", this.keyEventHandler);
      }
    }
    handleKeyup(e8) {
      const target = e8.target;
      e8.stopPropagation();
      if (e8.code === "Escape") {
        this.closeNonstickyModal();
      }
      if (e8.code === "Tab" && !this.contains(target)) {
        this.focus();
      }
    }
    closeNonstickyModal() {
      if (!this.sticky) {
        this.closeModal();
      }
    }
    closeModal() {
      this.visible = false;
      dispatchCustomEvent(this, "modal-closed");
    }
    disconnectedCallback() {
      document.removeEventListener("keyup", this.keyEventHandler);
      super.disconnectedCallback();
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHModal.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "modal-height" })], SHModal.prototype, "modalHeight", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "modal-width" })], SHModal.prototype, "modalWidth", void 0);
  __decorate([n5({ type: String, reflect: true })], SHModal.prototype, "type", void 0);
  __decorate([n5({ type: String, reflect: true })], SHModal.prototype, "icon", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHModal.prototype, "sticky", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHModal.prototype, "visible", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-color" })], SHModal.prototype, "iconColor", void 0);
  __decorate([n5({ type: Boolean })], SHModal.prototype, "emptyFooter", void 0);
  __decorate([n5({ type: Boolean })], SHModal.prototype, "emptyHeader", void 0);
  SHModal = __decorate([e4("sh-modal")], SHModal);

  // ../sh-nav-bar/src/sh-nav-bar.lit.scss.js
  var sh_nav_bar_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-nav-bar-nav-bar-wrapper-height=3.5rem] - height of nav bar wrapper
   */
  --sh-nav-bar-nav-bar-wrapper-height: 3.5rem;
  /* 
   * @cssprop [--sh-nav-bar-condensed-nav-bar-wrapper-height=2.5rem] - height of condensed nav bar wrapper height
   */
  --sh-nav-bar-condensed-nav-bar-wrapper-height: 2.5rem;
  /* 
   * @cssprop [--sh-nav-bar-functions-wrapper-gap=0.5rem] - gap of functions wrapper
   */
  --sh-nav-bar-functions-wrapper-gap: 0.5rem;
  /* 
   * @cssprop [--sh-nav-bar-functions-wrapper-padding=0 0 0 0.5rem] - padding of functions wrapper
   */
  --sh-nav-bar-functions-wrapper-padding: 0 0 0 0.5rem;
  /* 
   * @cssprop [--sh-nav-bar-nav-bar-wrapper-padding=0 1rem] - padding of nav-bar-wrapper
   */
  --sh-nav-bar-nav-bar-wrapper-padding: 0 1rem;
}

:host {
  background-color: var(--base-2);
  transition: var(--transition-time) all ease-in-out;
  box-shadow: var(--shadow-navigation);
  z-index: 3;
  width: 100%;
  overflow: auto;
  display: block;
  flex-shrink: 0;
}

.nav-bar-wrapper {
  height: var(--sh-nav-bar-nav-bar-wrapper-height);
  width: 100%;
  padding: var(--sh-nav-bar-nav-bar-wrapper-padding);
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
}

:host([slot=footer]) .tabs-wrapper {
  flex: none;
  margin: auto;
}

.tabs-wrapper {
  flex: 1;
  display: flex;
  overflow: hidden;
  height: 100%;
  align-items: center;
}

.tabs-wrapper > ::slotted(sh-tabs) {
  margin: -1rem 0;
}

.functions-wrapper {
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: var(--sh-nav-bar-functions-wrapper-padding);
  gap: var(--sh-nav-bar-functions-wrapper-gap);
}

.functions-wrapper[empty-function] {
  display: none;
}

:host([condensed]) .nav-bar-wrapper {
  height: var(--sh-nav-bar-condensed-nav-bar-wrapper-height);
}`;

  // ../sh-nav-bar/src/sh-nav-bar.js
  var SHNavBar = class extends s4 {
    static get properties() {
      return {
        role: { type: String, reflect: true },
        condensed: { type: Boolean, reflect: true },
        _emptyFunction: { type: Boolean }
      };
    }
    static get styles() {
      return [sharedStyles, sh_nav_bar_lit_scss_default];
    }
    render() {
      return x`
      <div class="nav-bar-wrapper">
        <div class="tabs-wrapper">
          <slot id="tabs" @slotchange=${() => this.tabsSlotUpdated()}></slot>
        </div>

        <!-- emptyFooter is used to check any slots should be displayed -->

        <div class="functions-wrapper" ?empty-function="${this._emptyFunction}">
          <slot
            name="functions"
            @slotchange="${this._handleSlotNodes.bind(this)}"
            id="functionsSlot"
          ></slot>
        </div>
      </div>
    `;
    }
    constructor() {
      super();
      this._emptyFunction = true;
    }
    firstUpdated() {
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "button");
      }
    }
    tabsSlotUpdated() {
      const tabs = this.querySelectorAll("sh-tabs");
      if (this.slot === "nav") {
        for (let i7 = 0; i7 < tabs.length; i7++) {
          tabs[i7]._navContext = true;
        }
      }
      if (this.slot === "footer") {
        for (let i7 = 0; i7 < tabs.length; i7++) {
          tabs[i7]._footerContext = true;
        }
      }
      this._handleCondensed();
    }
    updated(changedProperties) {
      if (changedProperties.has("condensed")) {
        this._handleCondensed();
      }
    }
    _handleCondensed() {
      const tabItems = this.querySelectorAll("sh-tab-item");
      const tabs = this.querySelectorAll("sh-tabs");
      tabs.forEach((el) => {
        el.condensed = this.condensed;
      });
      tabItems.forEach((el) => {
        el.condensed = this.condensed;
      });
    }
    _handleSlotNodes() {
      const functionNodesLength = this.shadowRoot.querySelector("#functionsSlot").assignedNodes({
        flatten: true
      }).length;
      this._emptyFunction = functionNodesLength === 0;
    }
  };
  customElements.define("sh-nav-bar", SHNavBar);

  // ../sh-notifications/src/sh-notification-item.lit.scss.js
  var sh_notification_item_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-notification-item-header-margin=1rem 1rem 0 1rem] - margin of header area
   */
  --sh-notification-item-header-margin: 1rem 1rem 0 1rem;
  /* 
   * @cssprop [--sh-notification-item-header-icon-margin=0 0.5rem 0 0] - margin of header icon
   */
  --sh-notification-item-header-icon-margin: 0 0.5rem 0 0;
  /* 
   * @cssprop [--sh-notification-item-header-line-height=1.5rem] - header line height
   */
  --sh-notification-item-header-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-notification-item-header-max-height=3rem] - header max height
   */
  --sh-notification-item-header-max-height: 3rem;
  /* 
   * @cssprop [--sh-notification-item-header-text-margin=0 0.5rem 0 0] - margin of header text
   */
  --sh-notification-item-header-text-margin: 0 0.5rem 0 0;
  /* 
   * @cssprop [--sh-notification-item-header-close-button-margin=0] - margin of header close button
   */
  --sh-notification-item-header-close-button-margin: 0;
  /* 
   * @cssprop [--sh-notification-item-description-container-margin=1rem] - margin of description container
   */
  --sh-notification-item-description-container-margin: 1rem;
  /* 
   * @cssprop [--sh-notification-item-no-label-description-container-margin=1rem] - margin of description container when there is no label
   */
  --sh-notification-item-no-label-description-container-margin: 1rem;
  /* 
   * @cssprop [--sh-notification-item-description-icon-margin=0 0.5rem 0 0] - margin of description icon
   */
  --sh-notification-item-description-icon-margin: 0 0.5rem 0 0;
  /* 
   * @cssprop [--sh-notification-item-description-line-height=1.5rem] - description line height
   */
  --sh-notification-item-description-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-notification-item-description-text-margin=0 0.5rem 0 0] - description text margin
   */
  --sh-notification-item-description-text-margin: 0 0.5rem 0 0;
  /* 
   * @cssprop [--sh-notification-item-description-close-button-margin=0rem] - margin of description close button
   */
  --sh-notification-item-description-close-button-margin: 0rem;
  /* 
   * @cssprop [--sh-notification-item-footer-margin=0 1rem 1rem 1rem] - margin of footer area
   */
  --sh-notification-item-footer-margin: 0 1rem 1rem 1rem;
  /* 
   * @cssprop [--sh-notification-item-footer-margin-with-no-description=1rem] - footer margin when no description is preset
   */
  --sh-notification-item-footer-margin-with-no-description: 1rem;
  /* 
   * @cssprop [--sh-notification-item-description-slot-elements-margin-top=0rem] - margin between elements added in description slot
   */
  --sh-notification-item-description-slot-elements-margin-top: 0rem;
  /* 
   * @cssprop [--sh-notification-item-badge-margin=0.5rem 1rem 0.5rem 1rem] - margin for the notification badge
   */
  --sh-notification-item-badge-margin: 0.5rem 1rem 0.5rem 1rem;
  /* 
   * @cssprop [--sh-notification-item-footer-slot-child-margin-left=0.5rem] - margin-left for the components in the footer slot
   */
  --sh-notification-item-footer-slot-child-margin-left: 0.5rem;
}

:host {
  width: 100%;
  height: auto;
  height: -ms-fit-content;
  height: -moz-fit-content;
  background: var(--base-4);
  box-shadow: var(--shadow-overlay);
  display: flex;
  flex-shrink: 0;
  flex-direction: column;
  border-radius: 0.125rem;
  box-sizing: border-box;
  overflow: hidden;
  transition: var(--transition-time) all ease-in-out, 0s max-height ease-in-out, 0s width ease-in-out, 0s padding ease-in-out, 0s margin ease-in-out;
}

/* flat */
:host([flat]) {
  background: transparent;
  box-shadow: var(--shadow-flat);
}

:host([inline]) {
  background: rgba(var(--ui-1), var(--opacity-7));
  box-shadow: none;
  border-left: 4px solid rgba(var(--ui-1), var(--opacity-3));
  transition: none;
}

:host([inline][type=alert]),
:host([inline][type=warning]) {
  border-left: 4px solid rgb(var(--functional-yellow));
}

:host([inline][type=confirmation]),
:host([inline][type=success]) {
  border-left: 4px solid rgb(var(--functional-green));
}

:host([inline][type=error]) {
  border-left: 4px solid rgb(var(--functional-red));
}

:host([flat]:hover) {
  background: rgba(var(--ui-1), var(--opacity-7));
}

/* hidden */
:host(:not([visible])) {
  max-height: 0rem;
  min-height: unset;
  width: 0rem;
  padding: 0;
  margin: 0 !important;
  pointer-events: none;
  transform: translateX(5rem);
  opacity: 0;
  transition: var(--transition-time) all ease-in-out, 0s max-height ease-in-out var(--transition-time), 0s width ease-in-out var(--transition-time), 0s padding ease-in-out var(--transition-time), 0s margin ease-in-out var(--transition-time);
}

:host(:not([visible])[inline]) {
  transition: none;
}

/* header */
.header-wrapper {
  display: flex;
  margin: var(--sh-notification-item-header-margin);
}

.header-wrapper > sh-icon:not([icon=cancel]) {
  margin: var(--sh-notification-item-header-icon-margin);
}

.header-wrapper > sh-text {
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: var(--sh-notification-item-header-line-height);
  max-height: var(--sh-notification-item-header-max-height);
  margin: var(--sh-notification-item-header-text-margin);
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  word-break: break-word;
}

.default {
  margin: var(--sh-notification-item-description-container-margin);
}

:host(:not([label])) .default {
  display: flex;
  flex-direction: row-reverse;
  margin: var(--sh-notification-item-no-label-description-container-margin);
}

.default > sh-icon:not([icon=cancel]) {
  margin: var(--sh-notification-item-description-icon-margin);
}

/* body */
sh-text[size=body-1] {
  line-height: var(--sh-notification-item-description-line-height);
}

:host(:not([label])) sh-text[size=body-1] {
  line-height: var(--sh-notification-item-description-line-height);
  margin: var(--sh-notification-item-description-text-margin);
}

sh-text[size=body-1] > ::slotted(*:first-child),
sh-text[size=body-1] > ::slotted(sh-menu-item) {
  margin-top: 0rem;
}

sh-text[size=body-1] > ::slotted(*) {
  margin-top: var(--sh-notification-item-description-slot-elements-margin-top);
}

/* footer */
.footer-wrapper {
  display: flex;
  flex-direction: row-reverse;
  align-items: center;
  margin: var(--sh-notification-item-footer-margin);
}

.footer-wrapper[empty-footer] {
  display: none;
}

.footer-wrapper > ::slotted(*) {
  margin-left: var(--sh-notification-item-footer-slot-child-margin-left);
}

/* no label */
:host(:not([label])) sh-text[body-1] {
  margin-right: 2.5rem;
  margin-top: -2.5rem;
  width: calc(100% - 2.5rem);
}

:host(:not([label])[type]) sh-text[body-1] {
  margin-left: 2.5rem;
  width: calc(100% - 5rem);
}

.badge {
  margin: var(--sh-notification-item-badge-margin);
}`;

  // ../sh-notifications/src/sh-notification-item.js
  var SHNotificationItem = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        message: { type: String, reflect: true },
        type: { type: String, reflect: true },
        visible: { type: Boolean, reflect: true },
        duration: { type: String, reflect: true },
        sticky: { type: Boolean, reflect: true },
        icon: { type: String, reflect: true },
        flat: { type: Boolean, reflect: true },
        new: { type: Boolean, reflect: true },
        inline: { type: Boolean, reflect: true },
        iconColor: { type: String, reflect: true, attribute: "icon-color" },
        _emptyFooter: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sh_notification_item_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      ${this.label ? this.createHeaderWrapper() : ""} ${this.getDescription()}
      <div class="footer-wrapper" ?empty-footer=${this._emptyFooter}>
        <slot
          id="footer"
          name="footer"
          @slotchange="${(e8) => this._updateFooterSlot(e8.target)}"
        ></slot>
      </div>
    `;
    }
    constructor() {
      super();
      this._emptyFooter = true;
    }
    createHeaderWrapper() {
      return x`
      <div class="header-wrapper">
        ${this.icon && this.type !== "alert" && this.type !== "confirmation" && this.type !== "error" ? x` <sh-icon
              icon="${this.icon}"
              .color="${this.iconColor}"
              id="notification-icon"
              size="s"
            ></sh-icon>` : ""}
        ${this.type === "error" ? x`<sh-icon icon="error" class="type-icon-error" size="s"></sh-icon>` : ""}
        ${this.type === "alert" || this.type === "warning" ? x`<sh-icon icon="warning" class="type-icon-warning" size="s"></sh-icon>` : ""}
        ${this.type === "confirmation" || this.type === "success" ? x`<sh-icon icon="success" class="type-icon-success" size="s"></sh-icon>` : ""}
        ${this.label ? x`<sh-text size="header-2" id="label">${this.label}</sh-text>` : ""}
        ${this.new ? x`<sh-badge class="badge"></sh-badge>` : ""}
        ${!this.sticky && this.label ? x`<sh-icon
              button
              icon="cancel"
              size="s"
              tabindex="0"
              @click="${() => this._fireClosevent()}"
              id="close-button"
            ></sh-icon>` : ""}
      </div>
    `;
    }
    getDescription() {
      return x` <div class="default">
      ${!this.sticky && !this.label ? x`
            <sh-icon
              button
              icon="cancel"
              size="s"
              tabindex="0"
              @click="${() => this._fireClosevent()}"
              id="close-button-2"
            ></sh-icon>
            ${this.new ? x`<sh-badge class="badge"></sh-badge>` : ""}
          ` : ""}
      <sh-text size="body-1"> ${this.message ? this.message : x` <slot></slot> `} </sh-text>
      ${!this.label ? this.getBodyIcon() : ""}
    </div>`;
    }
    getBodyIcon() {
      return x`
      ${this.icon && this.type !== "alert" && this.type !== "confirmation" && this.type !== "error" ? x` <sh-icon icon="${this.icon}" id="notification-icon" size="s"></sh-icon>` : ""}
      ${this.type === "error" ? x`<sh-icon icon="error" class="type-icon-error" size="s"></sh-icon>` : ""}
      ${this.type === "alert" || this.type === "warning" ? x`<sh-icon icon="warning" class="type-icon-warning" size="s"></sh-icon>` : ""}
      ${this.type === "confirmation" || this.type === "success" ? x`<sh-icon icon="success" class="type-icon-success" size="s"></sh-icon>` : ""}
    `;
    }
    _updateFooterSlot(slot) {
      const numberOfNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this._emptyFooter = numberOfNodes === 0;
    }
    _fireClosevent() {
      this.visible = false;
      dispatchCustomEvent(this, "close");
    }
    updated(changedProperties) {
      if (changedProperties.has("visible")) {
        this._autoClose();
      }
      const listOfProperties = [
        "label",
        "icon",
        "type",
        "message",
        "visible",
        "sticky",
        "flat",
        "new"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _autoClose() {
      const shortDuration = 2e3;
      const longDuration = 5e3;
      if (this.duration === "short" && this.visible) {
        this._addsDelay(shortDuration);
      } else if (this.duration === "long" && this.visible) {
        this._addsDelay(longDuration);
      } else if (this.duration && this.visible) {
        const customDuration = parseFloat(this.duration);
        this._addsDelay(customDuration);
      }
    }
    _addsDelay(duration) {
      this._delay = setTimeout(() => {
        this._fireClosevent();
        clearTimeout(this._delay);
      }, duration);
    }
  };
  customElements.define("sh-notification-item", SHNotificationItem);

  // ../sh-notifications/src/sh-notification.lit.scss.js
  var sh_notification_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-notification-width=20rem] - width of notification
   */
  --sh-notification-width: 20rem;
}

:host {
  height: fit-content;
  height: -ms-fit-content;
  height: -moz-fit-content;
  width: var(--sh-notification-width);
  display: flex;
  flex-direction: column;
  position: absolute;
  z-index: 5;
}

/* positions */
:host,
:host([position=top-right]) {
  top: 1rem;
  bottom: auto;
  left: auto;
  right: 1rem;
}

:host([position=top-left]) {
  top: 1rem;
  bottom: auto;
  left: 1rem;
  right: auto;
}

:host([position=bottom-right]) {
  top: auto;
  bottom: 1rem;
  left: auto;
  right: 1rem;
}

:host([position=bottom-left]) {
  top: auto;
  bottom: 1rem;
  left: 1rem;
  right: auto;
}

:host([position=top-right]) ::slotted(*),
:host([position=top-left]) ::slotted(*) {
  margin-bottom: 0.5rem;
}

:host([position=bottom-right]) ::slotted(*),
:host([position=bottom-left]) ::slotted(*) {
  margin-top: 0.5rem;
}

/* mobile */
:host([mobile][position=top-right]),
:host([mobile][position=top-left]) {
  top: 4.5rem;
}

:host([mobile]) {
  width: calc(100% - 2rem);
}`;

  // ../sh-notifications/src/sh-notifications.js
  var SHNotifications = class extends resizeMixin(s4) {
    static get properties() {
      return {
        position: { type: String, reflect: true },
        mobile: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sharedStyles, sh_notification_lit_scss_default];
    }
    render() {
      return x` <slot></slot> `;
    }
    constructor() {
      super();
      this.position = "top-right";
    }
    handleResize() {
      this.mobile = windowSize.util.valueMatches(document.documentElement.clientWidth, "<", 640);
    }
  };
  customElements.define("sh-notifications", SHNotifications);

  // ../utils/html-document-modifier.js
  var HtmlDocumentModifier = class {
    static setHTMLAttribute(attribute, value) {
      document.documentElement.setAttribute(attribute, value);
    }
    static removeHTMLAttribute(attribute) {
      document.documentElement.removeAttribute(attribute);
    }
  };

  // ../utils/pull-to-refresh-mixin.js
  var pullToRefreshMixin = (superClass, { activationProp = "pulltorefresh", refreshingProp = "refreshing" }) => {
    class pullToRefreshMixinElement extends superClass {
      static get properties() {
        return {
          [activationProp]: { type: Boolean, reflect: true },
          [refreshingProp]: { type: Boolean, reflect: true }
        };
      }
      static get styles() {
        return [
          i`
          :host([${r(activationProp)}]) .spinner-parent-element {
            overflow-y: scroll;
            display: flex;
            flex-direction: column;
            scroll-snap-align: end;
            scroll-snap-type: y mandatory;
          }
          :host([${r(activationProp)}]) .spinner-parent-element::-webkit-scrollbar {
            display: none;
          }
          :host([${r(activationProp)}]) .ptr-area + * {
            scroll-snap-align: start;
            min-height: 100%;
          }
          :host([${r(activationProp)}]) .ptr-area {
            width: 100%;
            padding-top: 1rem;
          }
          :host([${r(activationProp)}][${r(refreshingProp)}]) .spinner-parent-element {
            scroll-snap-type: none;
          }
        `
        ];
      }
      renderSpinner(content) {
        return x`
        <sh-spinner class="ptr-area" size="s"></sh-spinner>
        <div class="body-element">${content}</div>
      `;
      }
      connectedCallback() {
        super.connectedCallback();
      }
      update(changedProperties) {
        super.update(changedProperties);
        if (this[activationProp]) {
          const spinnerParentElement = this.spinner.parentElement;
          spinnerParentElement.addEventListener("scroll", this.pullToRefresh.bind(this));
          !spinnerParentElement.classList.contains("spinner-parent-element") && (spinnerParentElement.className += " spinner-parent-element");
        } else {
          const spinnerParentElement = this.renderRoot.querySelector(".spinner-parent-element");
          spinnerParentElement && spinnerParentElement.classList.remove("spinner-parent-element");
          this[refreshingProp] = false;
        }
      }
      pullToRefresh() {
        var _a4;
        if (this.spinner) {
          if (((_a4 = this.spinner.parentElement) === null || _a4 === void 0 ? void 0 : _a4.scrollTop) <= 0) {
            this[refreshingProp] = true;
          } else {
            this[refreshingProp] = false;
          }
        }
      }
    }
    __decorate([i4("sh-spinner")], pullToRefreshMixinElement.prototype, "spinner", void 0);
    return pullToRefreshMixinElement;
  };

  // ../sh-page/src/sh-page.lit.scss.js
  var sh_page_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-page-body-wrapper-padding=1rem] - padding of body wrapper
   */
  --sh-page-body-wrapper-padding: 1rem;
}

:host {
  width: 100%;
  height: 100%;
  display: block;
}

:host([sh-vrt-mode]) {
  width: initial;
  height: initial;
  display: inline-block;
}

:host([sh-vrt-mode]) .page-content {
  /* background-color: initial; */
}

.page-wrapper {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 100%;
}

.page-content {
  display: flex;
  flex: 1;
  flex-direction: row;
  background-color: var(--base-1);
  transition: var(--transition-time) all ease-in-out;
  overflow: hidden;
}

:host([flat]) .page-content {
  background-color: var(--base-3);
}

.main-wrapper {
  overflow-y: auto;
  height: 100%;
  width: 100%;
}

.body-wrapper {
  flex: 1;
  height: 100%;
  overflow: hidden;
  padding: var(--sh-page-body-wrapper-padding);
  box-sizing: border-box;
  position: relative;
  display: flex;
  justify-content: center;
}

.body-wrapper[scrollable] {
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  overflow-y: auto;
}

:host([no-padding]) .body-wrapper {
  padding: 0;
}

.body-wrapper > ::slotted(*:not(sh-button)),
.body-wrapper > ::slotted(sh-button[size=full-width]) {
  width: 100%;
}

.body-wrapper > ::slotted(sh-button:not([icon-position])),
.body-wrapper > ::slotted(sh-badge),
.body-wrapper > ::slotted(sh-tag),
.body-wrapper > ::slotted(sh-tooltip) {
  width: fit-content;
  width: -webkit-fit-content;
  width: -moz-fit-content;
}`;

  // ../sh-page/src/sh-page.js
  var SHPage = class SHPage2 extends pullToRefreshMixin(s4, {}) {
    constructor() {
      super(...arguments);
      this.theme = "light";
      this.scrollable = false;
      this.flat = false;
      this.dicom = false;
    }
    static get styles() {
      return [sharedStyles, super.styles, sh_page_lit_scss_default];
    }
    update(changedProperties) {
      if (changedProperties.has("theme")) {
        this.defineTheme();
      }
      if (changedProperties.has("dicom")) {
        this.dicomObserver();
      }
      super.update(changedProperties);
    }
    render() {
      return x`
    <div class="page-wrapper">
      <slot name="access" id="access"></slot>
      <slot name="nav" id="nav"></slot>
      <div class="page-content">
        <slot name="left" id="left"></slot>
        <div class="main-wrapper">
          ${this.pulltorefresh ? this.renderSpinner(this.pageContentTemplate()) : this.pageContentTemplate()}
          </div>
          <slot name="right" id="right"> </slot>
        </div>
        <slot name="footer" id="footer"></slot>
      </div>
    </div>
    `;
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      const listOfProperties = ["theme", "scrollable", "flat", "dicom", "noPadding"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    pageContentTemplate() {
      return x`
      <div class="body-wrapper" ?scrollable="${this.scrollable}">
        <slot></slot>
      </div>
    `;
    }
    defineTheme() {
      if (this.theme) {
        HtmlDocumentModifier.setHTMLAttribute("theme", this.theme);
      } else {
        HtmlDocumentModifier.removeHTMLAttribute("theme");
      }
    }
    dicomObserver() {
      if (this.dicom) {
        HtmlDocumentModifier.setHTMLAttribute("dicom", "");
      } else {
        HtmlDocumentModifier.removeHTMLAttribute("dicom");
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHPage.prototype, "theme", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHPage.prototype, "scrollable", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHPage.prototype, "flat", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHPage.prototype, "dicom", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "no-padding" })], SHPage.prototype, "noPadding", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHPage.prototype, "pulltorefresh", void 0);
  SHPage = __decorate([e4("sh-page")], SHPage);

  // ../sh-pagination/src/sh-pagination.lit.scss.js
  var sh_pagination_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-pagination-wrapper-height=2rem] - height of the pagination wrapper
   */
  --sh-pagination-wrapper-height: 2rem;
  /* 
   * @cssprop [--sh-pagination-height=1.5rem] - height of the page number box
   */
  --sh-pagination-height: 1.5rem;
  /* 
   * @cssprop [--sh-pagination-width=1.25rem] - width of the page number box
   */
  --sh-pagination-width: 1.25rem;
  /* 
   * @cssprop [--sh-pagination-line-height=1.5rem] - line-height of the page number box
   */
  --sh-pagination-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-pagination-li-right-margin=0.5rem] - right margin of the li
   */
  --sh-pagination-li-right-margin: 0.5rem;
  /* 
   * @cssprop [--sh-pagination-border-radius=0.75rem] - border-radius of the li
   */
  --sh-pagination-border-radius: 0.75rem;
  /* 
   * @cssprop [--sh-pagination-prev-page-icon-right-margin=1rem] - right margin of the page icon
   */
  --sh-pagination-prev-page-icon-right-margin: 1rem;
  /* 
   * @cssprop [--sh-pagination-next-page-icon-left-margin=0.5rem] - left margin of the next page icon
   */
  --sh-pagination-next-page-icon-left-margin: 0.5rem;
  /* 
   * @cssprop [--sh-pagination-page-number-padding=0rem 0.125rem] - padding of the li containing page number
   */
  --sh-pagination-page-number-padding: 0rem 0.125rem;
}

:host {
  position: relative;
  width: fit-content;
  white-space: nowrap;
  list-style: none;
  display: flex;
  height: var(--sh-pagination-wrapper-height);
  margin: 0 auto;
  transition: all var(--transition-time) ease-in-out;
}

:host ul {
  display: inline-flex;
  list-style: none;
  margin: 0 auto;
  padding: 0;
  height: 100%;
  align-items: center;
}

:host ul li {
  text-align: center;
  width: fit-content;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  font: var(--title-1);
  line-height: var(--sh-pagination-line-height);
  color: var(--text-secondary);
  background: transparent;
  cursor: pointer;
  transition: all var(--transition-time) ease-in-out, var(--hover-transition-time) background, var(--hover-transition-time) color;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
}

:host ul li:not(:first-child):not(:last-child) {
  height: var(--sh-pagination-height);
  min-width: var(--sh-pagination-width);
  border-radius: var(--sh-pagination-border-radius);
  margin-right: var(--sh-pagination-li-right-margin);
  padding: var(--sh-pagination-page-number-padding);
}

:host ul li:first-child,
:host ul li:last-child {
  height: var(--sh-pagination-wrapper-height);
  width: var(--sh-pagination-wrapper-height);
}

:host li[active] {
  background: rgba(var(--ui-1), var(--opacity-6));
  color: var(--text-primary);
}

.prevPageIcon {
  margin-right: var(--sh-pagination-prev-page-icon-right-margin);
}

.nextPageIcon {
  margin-left: var(--sh-pagination-next-page-icon-left-margin);
}

:host ul li sh-icon {
  position: unset;
}

/* State Styles */
:host ul .sh-pagination-item[click-disabled] {
  pointer-events: none;
}

/* disabled styles */
.prevPageIcon.disabled,
.nextPageIcon.disabled {
  cursor: default;
  pointer-events: none;
}

/* Focus Styles - Accessibility */
:active {
  outline: 0;
}

/* hover */
:host(:not(.touch-device)) ul .sh-pagination-item:hover,
:host .sh-pagination-item.hover {
  background: rgba(var(--ui-1), var(--opacity-7));
  color: var(--text-primary);
}

.sh-pagination-item:focus-visible {
  outline: var(--focus-outline);
}`;

  // ../sh-pagination/src/sh-pagination.js
  var SHPagination = class SHPagination2 extends s4 {
    constructor() {
      super(...arguments);
      this.currentPage = 1;
    }
    static get styles() {
      return [extendInteractiveArea(), sh_pagination_lit_scss_default];
    }
    render() {
      return x`
      <ul id="ul">
        <li
          title="Previous Page"
          @click="${this.prevPage}"
          class="prevPageIcon ${this.currentPage <= 1 ? "disabled" : ""}"
          id="leftArrowWrapper"
        >
          <sh-icon
            icon="arrow-line-left-s"
            size="m"
            button
            role="button"
            ?disabled=${this.currentPage <= 1}
          ></sh-icon>
        </li>
        ${this.getPaginationItems()}
        <li
          title="Next Page"
          @click="${this.nextPage}"
          class="nextPageIcon ${this.currentPage >= this.pages ? "disabled" : ""}"
          id="rightArrowWrapper"
        >
          <sh-icon
            icon="arrow-line-right-s"
            size="m"
            button
            role="button"
            ?disabled=${this.currentPage >= this.pages}
          ></sh-icon>
        </li>
      </ul>
    `;
    }
    getPaginationItems() {
      const paginationValues = this.getPaginationValues();
      const paginationItems = [];
      for (let item = 0; item < paginationValues.length; item++) {
        paginationItems.push(x`<li
        class="sh-pagination-item"
        id="item"
        @click="${this.handleClick}"
        ?active=${paginationValues[item] === this.currentPage}
        ?click-disabled=${paginationValues[item].toString() === "..."}
        tabindex=${paginationValues[item] === this.currentPage ? "0" : "-1"}
        role="button"
        @keyup="${(e8) => {
          if (keyboardInteraction(e8, KEYCODE.SPACE) || keyboardInteraction(e8, KEYCODE.ENTER) || e8.code === "NumpadEnter") {
            const target = e8.target;
            target.click();
            this.focusCurrent();
          }
          if (keyboardInteraction(e8, KEYCODE.ARROW_LEFT) && item !== 0) {
            this.focusPreviousNumber(paginationValues, item, e8);
          }
          if (keyboardInteraction(e8, KEYCODE.ARROW_RIGHT) && item !== paginationValues.length - 1) {
            this.focusNextNumber(paginationValues, item, e8);
          }
        }}"
      >
        ${paginationValues[item]}
      </li>`);
      }
      return paginationItems;
    }
    focusCurrent() {
      this.updateComplete.then(() => {
        var _a4;
        const paginationItems = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".sh-pagination-item");
        const currentItem = Array.from(paginationItems).find((x2) => x2.innerText === this.currentPage.toString());
        currentItem === null || currentItem === void 0 ? void 0 : currentItem.focus();
      });
    }
    focusPreviousNumber(paginationValues, item, e8) {
      var _a4;
      const previousItemIndex = this.getPreviousFocusableItemIndex(paginationValues, item);
      if (previousItemIndex !== -1) {
        const target = e8.target;
        const paginationItem = (_a4 = target.parentElement) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".sh-pagination-item")[previousItemIndex];
        paginationItem.focus();
      }
    }
    focusNextNumber(paginationValues, item, e8) {
      var _a4;
      const nextItemIndex = this.getNextFocusableItemIndex(paginationValues, item);
      if (nextItemIndex !== -1) {
        const target = e8.target;
        const paginationItem = (_a4 = target.parentElement) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".sh-pagination-item")[nextItemIndex];
        paginationItem.focus();
      }
    }
    firstUpdated() {
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    update(changedProperties) {
      super.update(changedProperties);
      if (changedProperties.has("currentPage") || changedProperties.has("pages")) {
        this.currentPage = !this.currentPage ? 1 : this.currentPage;
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("pages")) {
        this.style.display = this.pages <= 1 ? "none" : "flex";
      }
      const listOfProperties = ["pages", "currentPage"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    getPaginationValues() {
      this.pages = !this.pages ? 1 : this.pages;
      let paginationValues = [];
      if (this.pages <= 7) {
        paginationValues = this.getPaginationValuesWhenPagesLessThanSeven();
      } else {
        paginationValues = this.getPaginationValuesWhenPagesGreaterThanSeven();
      }
      return paginationValues;
    }
    getPaginationValuesWhenPagesLessThanSeven() {
      const paginationValues = [];
      for (let page = 1; page <= this.pages; page++) {
        paginationValues.push(page);
      }
      return paginationValues;
    }
    getPaginationValuesWhenPagesGreaterThanSeven() {
      const fourthLastPage = this.pages - 3;
      let paginationValues = [];
      if (this.currentPage <= 4) {
        paginationValues = this.getPaginationValuesWhenCurrentPageLessthanFour();
      } else if (this.currentPage > 4 && this.currentPage < fourthLastPage) {
        paginationValues = this.getPaginationValuesWhenCurrentPageGreaterthanFour();
      } else {
        paginationValues = this.getPaginationValuesWhenCurrentPageGreaterthanFourthlast();
      }
      return paginationValues;
    }
    getPaginationValuesWhenCurrentPageLessthanFour() {
      const paginationValues = [];
      for (let page = 1; page <= 7; page++) {
        if (page <= 5) {
          paginationValues.push(page);
        } else if (page === 6) {
          paginationValues.push("...");
        } else {
          paginationValues.push(this.pages);
        }
      }
      return paginationValues;
    }
    getPaginationValuesWhenCurrentPageGreaterthanFour() {
      const paginationValues = [];
      for (let page = 1; page <= 5; page++) {
        if (page === 1) {
          paginationValues.push(page);
        } else if (page === 2 || page === 4) {
          paginationValues.push("...");
        } else if (page === 3) {
          for (let j = 1; j <= 3; j++) {
            switch (j) {
              case 1:
                paginationValues.push(this.currentPage - 1);
                break;
              case 2:
                paginationValues.push(this.currentPage);
                break;
              case 3:
                paginationValues.push(this.currentPage + 1);
                break;
            }
          }
        } else {
          paginationValues.push(this.pages);
        }
      }
      return paginationValues;
    }
    getPaginationValuesWhenCurrentPageGreaterthanFourthlast() {
      const paginationValues = [];
      const fourthLastPage = this.pages - 3;
      for (let page = 1; page <= 3; page++) {
        switch (page) {
          case 1:
            paginationValues.push(page);
            break;
          case 2:
            paginationValues.push("...");
            break;
          case 3:
            {
              let subValue = 1;
              for (let j = 1; j <= 5; j++) {
                paginationValues.push(fourthLastPage - subValue);
                --subValue;
              }
            }
            break;
        }
      }
      return paginationValues;
    }
    handleClick(e8) {
      const target = e8.target;
      const clickedItem = Number(target.innerText);
      const isNotANumber = isNaN(clickedItem);
      if (!isNotANumber) {
        this.currentPage = clickedItem;
        dispatchCustomEvent(this, "clicked-page-move");
      }
    }
    prevPage() {
      const prevCurrentPage = this.currentPage - 1;
      if (prevCurrentPage >= 1) {
        this.currentPage = prevCurrentPage;
        dispatchCustomEvent(this, "previous-page-move");
      }
    }
    nextPage() {
      const nextCurrentPage = this.currentPage + 1;
      if (nextCurrentPage <= this.pages) {
        this.currentPage = nextCurrentPage;
        dispatchCustomEvent(this, "next-page-move");
      }
    }
    getNextFocusableItemIndex(currentValues, itemIndex) {
      let nextItemIndex = -1;
      for (let i7 = itemIndex + 1; i7 <= currentValues.length - 1; ++i7) {
        if (currentValues[i7] !== "...") {
          nextItemIndex = i7;
          break;
        }
      }
      return nextItemIndex;
    }
    getPreviousFocusableItemIndex(currentValues, itemIndex) {
      let previousItemIndex = -1;
      for (let i7 = itemIndex - 1; i7 >= 0; --i7) {
        if (currentValues[i7] !== "...") {
          previousItemIndex = i7;
          break;
        }
      }
      return previousItemIndex;
    }
  };
  __decorate([n5({ type: Number, reflect: true })], SHPagination.prototype, "pages", void 0);
  __decorate([n5({ type: Number, reflect: true, attribute: "current-page" })], SHPagination.prototype, "currentPage", void 0);
  SHPagination = __decorate([e4("sh-pagination")], SHPagination);

  // ../utils/base-font-size.js
  var baseFontSize = 16;
  var calculatedBaseFontSize = getCalculatedBaseFontSize();
  function getCalculatedBaseFontSize() {
    const calculatedBaseFontSize2 = parseFloat(window.getComputedStyle(document.querySelector("html"), null).getPropertyValue("font-size"));
    return calculatedBaseFontSize2;
  }

  // ../sh-pane/src/sh-pane.lit.scss.js
  var sh_pane_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-pane-wrapper-width=22rem] - width of the pane
   */
  --sh-pane-wrapper-width: 22rem;
  /* 
   * @cssprop [--sh-pane-wrapper-padding=1rem] - padding of the head and body wrapper
   */
  --sh-pane-wrapper-padding: 1rem;
  /* 
   * @cssprop [--sh-pane-arrow-placement-padding=0.75rem] - padding of the arrow when it is placed on top or bottom
   */
  --sh-pane-arrow-placement-padding: 0.75rem;
  /* 
   * @cssprop [--sh-pane-arrow-position=-2rem] - position of the arrow from the left or right
   */
  --sh-pane-arrow-position: -2rem;
  /* 
   * @cssprop [--sh-pane-condensed-width=6.25rem] - max-width of the condensed wrapper
   */
  --sh-pane-condensed-width: 6.25rem;
  /* 
   * @cssprop [--sh-pane-body-wrapper-margin=0.5rem] - margin of the elements inside the body slot
   */
  --sh-pane-body-wrapper-margin: 0.5rem;
  /* 
   * @cssprop [--sh-pane-arrow-wrapper-padding=0.25rem 0] - padding of the arrow wrapper to center align the arrow icon
   */
  --sh-pane-arrow-wrapper-padding: 0.25rem 0;
  /* 
   * @cssprop [--sh-pane-border-radius-left=0rem 0.125rem 0.125rem 0rem] - border-radius of the left pane
   */
  --sh-pane-border-radius-left: 0rem 0.125rem 0.125rem 0rem;
  /* 
   * @cssprop [--sh-pane-border-radius-right=0.125rem 0rem 0rem 0.125rem] - border-radius of the right pane
   */
  --sh-pane-border-radius-right: 0.125rem 0rem 0rem 0.125rem;
  /* 
   * @cssprop [--sh-pane-box-shadow-left=0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1)] - box-shadow of the left pane
   */
  --sh-pane-box-shadow-left: 0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1);
  /* 
   * @cssprop [--sh-pane-box-shadow-right=-0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1)] - box-shadow of the right pane
   */
  --sh-pane-box-shadow-right: -0.125rem 0rem 0.25rem rgba(0, 0, 0, 0.1);
  /* 
   * @cssprop [--sh-pane-slot-child-margin-left=0.5rem] - Left margin of the items placed inside functions, footer slot
   */
  --sh-pane-slot-child-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-pane-functions-slot-last-child-margin=0rem 0rem 0 var(--sh-pane-slot-child-margin-left)] - Margin of the last item placed inside functions slot
   */
  --sh-pane-functions-slot-last-child-margin: 0rem 0rem 0 var(--sh-pane-slot-child-margin-left);
  /* 
   * @cssprop [--sh-pane-functions-slot-not-last-child-margin=0rem 0rem 0 var(--sh-pane-slot-child-margin-left)] - Margin of the all items except last placed inside functions slot
   */
  --sh-pane-functions-slot-not-last-child-margin: 0rem 0rem 0 var(--sh-pane-slot-child-margin-left);
  /* 
   * @cssprop [--sh-pane-arrow-icon-size=2rem] - size of the arrow icon
   */
  --sh-pane-arrow-icon-size: 2rem;
  /* 
   * @cssprop [--sh-pane-body-wrapper-line-height=1.25rem] - line-height of body-wrapper
   */
  --sh-pane-body-wrapper-line-height: 1.25rem;
}

:host {
  z-index: 2; /**
  Setting z-index is necessary here inorder to make the pane appear.

  Why the value is set to 2?

  Since
    Nav-bar has z-index=3,
    access-bar has z-index=4,
    a reasonable value of 2 is chosen. 

*/
  display: block;
  background-color: var(--base-2);
  transition: var(--transition-time) all ease-in-out;
  box-shadow: var(--shadow-navigation);
  width: unset;
  min-width: unset;
}

.pane-wrapper {
  width: var(--sh-pane-wrapper-width);
  height: 100%;
  display: flex;
  flex-direction: column;
  position: relative;
  transition: var(--transition-time) all ease-in-out;
}

.label-wrapper {
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  padding: var(--sh-pane-wrapper-padding);
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  align-items: center;
}

.header-wrapper {
  padding: var(--sh-pane-wrapper-padding);
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
}

.body-wrapper {
  flex: 1;
  padding: var(--sh-pane-wrapper-padding);
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  overflow-y: auto;
  -ms-overflow-style: -ms-autohiding-scrollbar;
  font: var(--body-1);
  line-height: var(--sh-pane-body-wrapper-line-height);
  color: var(--text-primary);
}

.body-wrapper > ::slotted(*:not(:last-child):not(sh-menu-item)) {
  margin-bottom: var(--sh-pane-body-wrapper-margin);
}

.condensed-wrapper > ::slotted(*:not(sh-menu-item)) {
  margin-bottom: var(--sh-pane-body-wrapper-margin);
}

.footer-wrapper {
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  padding: var(--sh-pane-wrapper-padding);
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: flex-end;
  align-items: center;
  box-sizing: border-box;
}

.footer-wrapper > ::slotted(sh-button[slot=footer]),
.footer-wrapper > ::slotted(sh-icon[slot=footer]),
.label-wrapper > ::slotted([slot=functions]) {
  margin-left: var(--sh-pane-slot-child-margin-left);
}

.label-wrapper > ::slotted(:not(:last-child)[slot=functions]) {
  margin: var(--sh-pane-functions-slot-not-last-child-margin);
}

.label-wrapper > ::slotted(sh-icon[slot=functions]:last-of-type) {
  margin: var(--sh-pane-functions-slot-last-child-margin);
}

.pane-label {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  color: var(--text-primary);
}

.header-wrapper > ::slotted(sh-tabs[slot=header]) {
  margin: -1rem 0 0 0;
}

.pane-wrapper[empty-header] .header-wrapper,
.pane-wrapper[empty-footer] .footer-wrapper {
  display: none;
}

.pane-wrapper:not([empty-header]) .body-wrapper {
  padding-top: 0rem;
}

.pane-wrapper:not([empty-footer]) .body-wrapper {
  padding-bottom: 0rem;
}

/* collapse / condense behavior */
:host([size=expanded]) .pane-wrapper {
  max-width: var(--sh-pane-wrapper-width);
}

:host([size=collapsed]) .pane-wrapper {
  max-width: 0rem;
}

:host([size=condensed]) .pane-wrapper {
  max-width: var(--sh-pane-condensed-width);
}

:host([size$=expanded]) .transition,
:host([size$=px]) .transition,
:host([size$="%"]) .transition,
:host([size$=rem]) .transition,
:host([size$=vw]) .transition {
  transition: var(--transition-time) opacity ease-in-out var(--transition-time);
}

:host([size=expanded]) .label-wrapper,
:host([size=expanded]) .header-wrapper,
:host([size=expanded]) .body-wrapper,
:host([size=expanded]) .footer-wrapper {
  width: var(--sh-pane-wrapper-width);
}

:host(:not([size=expanded]):not([size=resizable]:not([resizable])):not([size*=px]):not([size*=rem]):not([size*="%"]):not([size*=vw])) .label-wrapper,
:host(:not([size=expanded]):not([size=resizable]:not([resizable])):not([size*=px]):not([size*=rem]):not([size*="%"]):not([size*=vw])) .header-wrapper,
:host(:not([size=expanded]):not([size=resizable]:not([resizable])):not([size*=px]):not([size*=rem]):not([size*="%"]):not([size*=vw])) .body-wrapper,
:host(:not([size=expanded]):not([size=resizable]:not([resizable])):not([size*=px]):not([size*=rem]):not([size*="%"]):not([size*=vw])) .footer-wrapper {
  width: 0rem;
  max-height: 0rem;
  opacity: 0;
  transition: 0s all;
  pointer-events: none;
}

:host([size=condensed]) .condensed-wrapper {
  transition: var(--transition-time) opacity ease-in-out var(--transition-time);
  height: 100%;
  position: absolute;
  width: var(--sh-pane-condensed-width);
  padding: var(--sh-pane-wrapper-padding);
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  align-items: center;
  overflow-y: auto;
}

:host(:not([size=condensed])) .condensed-wrapper {
  opacity: 0;
  width: 0rem;
  height: 0rem;
}

.arrow-wrapper {
  padding: var(--sh-pane-arrow-wrapper-padding);
  position: absolute;
  transition: var(--transition-time) all ease-in-out;
  background-color: var(--base-2);
  transform: translateZ(0);
}

:host([slot=left]) .arrow-wrapper {
  right: var(--sh-pane-arrow-position);
  box-shadow: var(--sh-pane-box-shadow-left);
  border-radius: var(--sh-pane-border-radius-left);
}

:host([slot=right]) .arrow-wrapper {
  left: var(--sh-pane-arrow-position);
  box-shadow: var(--sh-pane-box-shadow-right);
  border-radius: var(--sh-pane-border-radius-right);
}

.arrow {
  --sh-icon-size-m: var(--sh-pane-arrow-icon-size);
}

/* arrow position */
:host([arrow-position=top]) .arrow-wrapper {
  top: var(--sh-pane-arrow-placement-padding);
}

:host([arrow-position=bottom]) .arrow-wrapper {
  bottom: var(--sh-pane-arrow-placement-padding);
}

:host([arrow-position=center]) .arrow-wrapper {
  top: calc(50% - (var(--sh-icon-size-m) + 0.5rem) / 2);
}

/* arrow */
:host([slot=right][size=condensed][behavior=condense]) .arrow,
:host([slot=right][size=collapsed][behavior=collapse]) .arrow,
:host([slot=right][size=collapsed][behavior=condense]) .arrow,
:host([slot=left][size=condensed][behavior=collapse]) .arrow,
:host([slot=left][size=expanded]) .arrow,
:host([slot=left][size$=px]) .arrow,
:host([slot=left][size$=rem]) .arrow,
:host([slot=left][size$=vw]) .arrow,
:host([slot=left][size$="%"]) .arrow {
  transform: rotateY(180deg);
  -webkit-transform: rotateY(180deg);
}

.resize-handle:active,
.resize-handle,
.resize-handle:hover {
  position: absolute;
  height: 100%;
  width: 0.125rem;
  display: block;
  cursor: ew-resize;
}

/* positioning */
:host([slot=left]) .resize-handle {
  right: 0rem;
}

:host([slot=right]) .resize-handle {
  left: 0rem;
}

:host([size=resizable]) .label-wrapper,
:host([size=resizable]) .header-wrapper,
:host([size=resizable]) .body-wrapper,
:host([size=resizable]) .footer-wrapper,
:host([size=resizable]) .condensed-wrapper,
:host([resizable]) .label-wrapper,
:host([resizable]) .header-wrapper,
:host([resizable]) .body-wrapper,
:host([resizable]) .footer-wrapper,
:host([resizable]) .condensed-wrapper {
  max-width: unset;
  width: 100%;
  -webkit-transition: all 0s linear;
  -o-transition: all 0s linear;
  transition: all 0s linear;
}

:host([size=resizable]),
:host([resizable]) {
  -webkit-transition: all 0s linear;
  -o-transition: all 0s linear;
  transition: all 0s linear;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
}

:host([size=resizable]) .pane-wrapper,
:host([resizable]) .pane-wrapper {
  -webkit-transition: all 0s linear;
  -o-transition: all 0s linear;
  transition: all 0s linear;
  width: var(--sh-pane-wrapper-width);
}

:host(:not([size=resizable]):not([resizable])) .resize-handle {
  display: none;
}

:host([is-Resize]) {
  cursor: ew-resize;
}

:host([label]) .body-wrapper {
  padding-top: 0rem;
}`;

  // ../sh-pane/src/sh-pane.js
  var SHPane = class SHPane2 extends s4 {
    constructor() {
      super(...arguments);
      this.size = "expanded";
      this.arrowPosition = "center";
      this.maxResizeWidth = `75%`;
      this.emptyFooter = true;
      this.emptyHeader = true;
      this.isResize = false;
    }
    static get styles() {
      return [sharedStyles, sh_pane_lit_scss_default];
    }
    render() {
      return x`
      <div
        class="pane-wrapper"
        ?empty-footer="${this.emptyFooter}"
        ?empty-header="${this.emptyHeader}"
        ?is-Resize="${this.isResize}"
        style="${o6(this.getWidth() || {})}"
      >
        <div class="header-wrapper transition">
          <slot
            name="header"
            id="header"
            @slotchange="${(e8) => this.updateHeaderSlotFlag(e8.target)}"
          ></slot>
        </div>
        ${!this.label || !this.emptyHeader ? "" : x` <div class="label-wrapper transition">
              <sh-text size="super-header" class="pane-label">${this.label}</sh-text>
              <slot name="functions" id="functions"></slot>
            </div>`}

        <div class="body-wrapper transition">
          <slot id="body"></slot>
        </div>
        <div class="footer-wrapper transition">
          <slot
            name="footer"
            id="footer"
            @slotchange="${(e8) => this.updateFooterSlotFlag(e8.target)}"
          ></slot>
        </div>
        ${this.behavior === "condense" || this.size === "condensed" ? x` <div class="condensed-wrapper">
              <slot name="condensed" id="condensed"></slot>
            </div>` : ""}
        ${this.behavior ? x` <div class="arrow-wrapper" @click="${() => this.handleExpand()}">
              <sh-icon icon="arrow-right-s" button="" class="arrow"></sh-icon>
            </div>` : ""}
        <div class="resize-handle"></div>
      </div>
    `;
    }
    firstUpdated() {
      var _a4;
      const resizeHandle = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".resize-handle");
      resizeHandle === null || resizeHandle === void 0 ? void 0 : resizeHandle.addEventListener("mousedown", () => {
        this.removeEventListenersFromDocument();
        if (this.size === "resizable" || this.resizable) {
          this.addEventListenersToDocument();
        }
      });
    }
    connectedCallback() {
      super.connectedCallback();
      this.documentMouseDownListener = this.documentMouseDownActions.bind(this);
      this.documentMouseUpListener = this.documentMouseUpActions.bind(this);
      this.documentMouseMoveListener = this.documentMouseMoveActions.bind(this);
      this.documentMouseOverListener = this.documentMouseOverActions.bind(this);
      this.documentDragStartListener = this.documentDragStartActions.bind(this);
      this.body = document.body;
      this.resizeObserver = new ResizeObserver((entries) => {
        for (const entry of entries) {
          this.hundredPercentWidth = entry.contentRect.width;
          this.handleMaxResizeChange();
        }
      });
      this.resizeObserver.observe(this.body);
    }
    disconnectedCallback() {
      var _a4;
      this.removeEventListenersFromDocument();
      (_a4 = this.resizeObserver) === null || _a4 === void 0 ? void 0 : _a4.disconnect();
      super.disconnectedCallback();
    }
    updated(changedProperties) {
      const listOfProperties = ["label", "size", "arrowPosition", "behavior"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      if (changedProperties.has("size")) {
        this.updateSize();
        const isNumberSize = /[0-9]*\.?[0-9]+(px|rem|vw)/.test(this.size) || /[0-9]*\.?[0-9]+(%)/.test(this.size);
        if (this.resizable && isNumberSize && this.resizedWidth) {
          this.resizedWidth = this.fixSize;
        }
      }
      if (changedProperties.has("maxResizeWidth")) {
        this.handleMaxResizeChange();
      }
    }
    getWidth() {
      if (this.size === "resizable" || this.resizable) {
        const isNumberSize = /[0-9]*\.?[0-9]+(px|rem|vw)/.test(this.size) || /[0-9]*\.?[0-9]+(%)/.test(this.size);
        if (this.resizedWidth) {
          return { "--sh-pane-wrapper-width": this.resizedWidth };
        } else if (this.resizable && isNumberSize) {
          return { "--sh-pane-wrapper-width": this.fixSize };
        } else {
          return;
        }
      } else if (/[0-9]*\.?[0-9]+(px|rem|vw)/.test(this.size) || /[0-9]*\.?[0-9]+(%)/.test(this.size)) {
        return { "--sh-pane-wrapper-width": this.fixSize };
      } else {
        return;
      }
    }
    updateSize() {
      if (/[0-9]*\.?[0-9]+(px|rem|vw)/.test(this.size)) {
        this.fixSize = this.size;
      } else if (/[0-9]*\.?[0-9]+(%)/.test(this.size)) {
        this.fixSize = `${parseInt(this.size, 10)}vw`;
      }
    }
    updateHeaderSlotFlag(slot) {
      const headerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyHeader = headerNodes === 0;
    }
    updateFooterSlotFlag(slot) {
      const headerNodes = slot.assignedNodes({
        flatten: true
      }).length;
      this.emptyFooter = headerNodes === 0;
    }
    documentMouseDownActions(e8) {
      var _a4;
      if (e8.composedPath()[0] === ((_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".resize-handle"))) {
        this.isResize = true;
      }
    }
    documentMouseMoveActions(e8) {
      this.setPaneWidth(e8);
    }
    documentMouseOverActions(e8) {
      this.setPaneWidth(e8);
    }
    documentMouseUpActions() {
      this.removeEventListenersFromDocument();
      this.isResize = false;
    }
    documentDragStartActions(e8) {
      if (this.isResize) {
        e8.preventDefault();
      }
    }
    setPaneWidth(e8) {
      const isLeftPane = this.getAttribute("slot") === "left" ? true : false;
      const defaultPane = 22;
      if (this.isResize) {
        let resizedWidth;
        if (isLeftPane) {
          resizedWidth = e8.clientX;
        } else {
          resizedWidth = this.hundredPercentWidth - e8.clientX;
        }
        if (resizedWidth >= this.maxResizeLimit) {
          resizedWidth = this.maxResizeLimit;
        } else if (this.size === "resizable" && resizedWidth / baseFontSize <= defaultPane) {
          resizedWidth = defaultPane * baseFontSize;
        }
        this.resizedWidth = `${resizedWidth}px`;
      }
    }
    addEventListenersToDocument() {
      document.body.addEventListener("mousedown", this.documentMouseDownListener);
      document.body.addEventListener("mouseup", this.documentMouseUpListener);
      document.body.addEventListener("mousemove", this.documentMouseMoveListener);
      document.body.addEventListener("mouseover", this.documentMouseOverListener);
      document.body.addEventListener("dragstart", this.documentDragStartListener);
    }
    removeEventListenersFromDocument() {
      document.body.removeEventListener("mouseup", this.documentMouseUpListener);
      document.body.removeEventListener("mousedown", this.documentMouseDownListener);
      document.body.removeEventListener("mousemove", this.documentMouseMoveListener);
      document.body.removeEventListener("mouseover", this.documentMouseOverListener);
      document.body.removeEventListener("dragstart", this.documentDragStartListener);
    }
    handleMaxResizeChange() {
      this.maxLimitChecker = document.createElement("div");
      document.body.appendChild(this.maxLimitChecker);
      this.maxLimitChecker.classList.add("max-resize-checker");
      this.maxLimitChecker.style.width = `${this.maxResizeWidth}`;
      this.maxResizeLimit = this.maxLimitChecker.getBoundingClientRect().width;
      document.body.removeChild(this.maxLimitChecker);
      this.maxLimitChecker = null;
    }
    handleExpand() {
      if (this.size === "expanded" || /[0-9]*\.?[0-9]+(px|%|rem|vw)/.test(this.size)) {
        if (this.behavior === "condense") {
          this.size = "condensed";
        } else if (this.behavior === "collapse") {
          this.size = "collapsed";
        }
      } else if (this.size === "collapsed" && this.behavior === "condense") {
        this.size = "condensed";
        this.behavior = "collapse";
      } else if (this.size === "condensed" && this.behavior === "collapse") {
        this.size = "collapsed";
        this.behavior = "condense";
      } else if (this.fixSize || this.resizedWidth) {
        if (this.resizedWidth) {
          this.size = this.resizedWidth;
        } else {
          this.size = this.fixSize;
        }
      } else {
        this.size = "expanded";
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHPane.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHPane.prototype, "behavior", void 0);
  __decorate([n5({ type: String, reflect: true })], SHPane.prototype, "size", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "arrow-position" })], SHPane.prototype, "arrowPosition", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "max-resize-width" })], SHPane.prototype, "maxResizeWidth", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHPane.prototype, "resizable", void 0);
  __decorate([n5({ type: Boolean })], SHPane.prototype, "emptyFooter", void 0);
  __decorate([n5({ type: Boolean })], SHPane.prototype, "emptyHeader", void 0);
  __decorate([n5({ type: Boolean })], SHPane.prototype, "isResize", void 0);
  __decorate([n5({ type: String })], SHPane.prototype, "resizedWidth", void 0);
  __decorate([n5({ type: String })], SHPane.prototype, "fixSize", void 0);
  SHPane = __decorate([e4("sh-pane")], SHPane);

  // ../sh-patient-illustration/src/patient-states.js
  var getMultiLayerPatientList = () => ["xp_all_in_one", "xp_adult_fluoro"];
  var getPatientStates = (image) => {
    switch (image) {
      case "xp_all_in_one":
        return _getXpAllInOneStates();
      case "xp_adult_fluoro":
        return _getXpAdultFluoroStates();
      default:
        return _getXpAllInOneStates();
    }
  };
  var _getXpAllInOneStates = () => {
    return {
      xp_skull: {
        hidden: ["xp_skull_selection"],
        disabled: ["xp_skull_bone"]
      },
      xp_upper_extremities: {
        hidden: ["xp_upper_extremities_selection"],
        disabled: ["xp_upper_extremities_bone"]
      },
      xp_thorax: {
        hidden: ["xp_thorax_selection"],
        disabled: ["xp_thorax_bone"],
        active: ["xp_thorax_1"]
      },
      xp_shoulder_girdle: {
        hidden: [
          "xp_shoulder_girdle_selection",
          "xp_shoulder_girdle_bone",
          "xp_shoulder_girdle_default",
          "xp_thorax_bone"
        ],
        disabled: []
      },
      xp_vertebral_column: {
        hidden: [
          "xp_vertebral_column_default",
          "xp_vertebral_column_bone",
          "xp_vertebral_column_selection",
          "xp_thorax_bone",
          "xp_clavicula_default"
        ],
        disabled: []
      },
      xp_lower_extremities: {
        hidden: ["xp_lower_extremities_selection"],
        disabled: ["xp_lower_extremities_bone"]
      },
      xp_abdomen: {
        hidden: ["xp_abdomen_selection"],
        disabled: [],
        active: ["xp_abdomen_1"]
      },
      xp_pelvis: {
        hidden: ["xp_pelvis_selection"],
        disabled: ["xp_pelvis_bone"]
      }
    };
  };
  var _getXpAdultFluoroStates = () => {
    return {
      xp_fluoro_head: {
        disabled: ["oral_cavity"],
        active: ["xp_fluoro_head"]
      },
      xp_fluoro_esophagus: {
        disabled: ["esophagus_1", "esophagus_2"],
        active: ["xp_fluoro_esophagus"]
      },
      xp_fluoro_lung: {
        disabled: ["lung_segments"],
        active: ["xp_fluoro_lung"]
      },
      xp_fluoro_upper_abdomen: {
        disabled: ["stomach_segments", "esophagus_2", "pancreas"],
        active: ["xp_fluoro_upper_abdomen"]
      },
      xp_fluoro_urinary_system: {
        disabled: ["bladder_ureter", "kidneys"],
        active: ["xp_fluoro_urinary_system"]
      },
      xp_fluoro_digestive_system: {
        disabled: ["small_intestine", "colon"],
        active: ["xp_fluoro_digestive_system"]
      },
      xp_fluoro_reproductive_system: {
        disabled: ["uterus", "bladder_ureter"],
        active: ["xp_fluoro_reproductive_system"]
      }
    };
  };

  // ../sh-patient-illustration/src/patient_illustration.js
  var getPatientIllustration = (image) => {
    switch (image) {
      case "ct_adult_vascular":
        return ctAdultVascular();
      case "ct_child_anatomical":
        return ctChildAnatomical();
      case "ct_child_vascular":
        return ctChildVascular();
      case "xp_all_in_one":
        return xpAllInOne();
      case "xp_adult_fluoro":
        return xpAdultFluoro();
      default:
        return ctAdultAnatomical();
    }
  };
  var ctAdultAnatomical = function ctAdultAnatomical2() {
    return x`<svg
    id="ct_adult_anatomical"
    hidden
    xmlns="http://www.w3.org/2000/svg"
    x="0"
    y="0"
    style="width:10rem; height:36.25rem;"
    viewBox="0 0 160 580"
    xml:space="preserve"
  >
    <path
      index="1"
      class="region"
      d="M57.873,10.693a24.7,24.7,0,0,0-2.932,5.65,32.341,32.341,0,0,0-1.824,8.447,40.015,40.015,0,0,0,.114,8.718c.107.876.2,1.519.206,1.522a.552.552,0,0,1-.127.445c-.116.131-.4.457-.566,1.728a20.906,20.906,0,0,0,.209,5.177,39.509,39.509,0,0,0,1.024,5.085l.224.883a25.6,25.6,0,0,0,2.132,5.7c.206.4.4.73.573,1.008a4.375,4.375,0,0,0,1.276,1.411,1.672,1.672,0,0,0,.388.2.834.834,0,0,0,.35.045,1.04,1.04,0,0,0,.65-.383.556.556,0,0,1,.237-.142.674.674,0,0,1,.078-.016.526.526,0,0,1,.639.467l.009.072c.041.319.225,1.661.586,3.376a57.194,57.194,0,0,0,3.13,9.73c3.635,8.143,8.94,12.272,15.768,12.272S92.16,77.963,95.8,69.82a57.557,57.557,0,0,0,2.864-8.584c.1-.409.193-.8.266-1.146.36-1.715.544-3.057.585-3.376l.009-.072a.553.553,0,0,1,.954-.309,1.476,1.476,0,0,0,.322.271.925.925,0,0,0,1.067-.133,5.828,5.828,0,0,0,1.848-2.419,25.533,25.533,0,0,0,2.133-5.7l.225-.887c.149-.583.28-1.092.4-1.632.206-.9.394-1.887.62-3.449A20.961,20.961,0,0,0,107.3,37.2h0a3.8,3.8,0,0,0-.443-1.571,1.148,1.148,0,0,0-.1-.133.612.612,0,0,1-.149-.469s.1-.646.206-1.522a40.016,40.016,0,0,0,.115-8.718,32.373,32.373,0,0,0-1.825-8.447,25.164,25.164,0,0,0-2.931-5.65,21.4,21.4,0,0,0-6.9-6.178c-4.219-2.327-9.063-3.41-15.245-3.41S68.991,2.188,64.772,4.515A21.383,21.383,0,0,0,57.873,10.693Z"
    />
    <path
      index="2"
      class="region"
      d="M70.7,121.021a4.674,4.674,0,0,0,0-5.625,4.2,4.2,0,0,1-1.06-2.812c0-4.81,4.661-8.724,10.39-8.724s10.391,3.914,10.391,8.724a4.208,4.208,0,0,1-1.06,2.812,4.67,4.67,0,0,0,0,5.625,4.208,4.208,0,0,1,1.06,2.812,4.4,4.4,0,0,1-.09.9h30.433l6.659-25.251a170.273,170.273,0,0,0-22.168-5.876c-6.141-1.308-9.392-2.036-10.379-3-2.125-2.076-.838-11.442.138-16.874C91.292,80.01,86.267,83.2,80.027,83.2s-11.273-3.184-14.993-9.457c.974,5.426,2.262,14.794.136,16.87-.988.965-4.238,1.693-10.379,3a170.189,170.189,0,0,0-22.158,5.873l6.659,25.254H69.727a4.4,4.4,0,0,1-.09-.9A4.2,4.2,0,0,1,70.7,121.021Z"
    />
    <path
      index="3"
      class="region"
      d="M80.027,104.86c-5.186,0-9.39,3.458-9.39,7.724,0,2.368,2,2.157,2,5.625s-2,3.256-2,5.624,2,2.157,2,5.625-2,3.257-2,5.625,2,2.157,2,5.625-2,3.256-2,5.624,2,2.157,2,5.625-2,3.257-2,5.625,2,2.157,2,5.625-2,3.256-2,5.624,2,2.157,2,5.625-2,3.257-2,5.625,2,2.157,2,5.625-2,3.256-2,5.624,2,2.157,2,5.625-2,3.257-2,5.625,2,2.157,2,5.625-2,3.256-2,5.624,2,2.157,2,5.625-2,3.257-2,5.625,2,2.157,2,5.625-2,3.256-2,5.624,2,2.157,2,5.625-2,3.257-2,5.625,2,2.157,2,5.625-2,3.256-2,5.624,2,2.157,2,5.625-2,3.256-2,5.625c0,4.266,4.2,7.724,9.39,7.724s9.391-3.458,9.391-7.724c0-2.369-2-2.157-2-5.625s2-3.256,2-5.625-2-2.157-2-5.624,2-3.257,2-5.625-2-2.157-2-5.625,2-3.256,2-5.625-2-2.156-2-5.624,2-3.257,2-5.625-2-2.157-2-5.625,2-3.256,2-5.625-2-2.156-2-5.624,2-3.257,2-5.625-2-2.157-2-5.625,2-3.256,2-5.625-2-2.156-2-5.624,2-3.257,2-5.625-2-2.157-2-5.625,2-3.256,2-5.625-2-2.156-2-5.624,2-3.257,2-5.625-2-2.157-2-5.625,2-3.256,2-5.625-2-2.156-2-5.624,2-3.257,2-5.625-2-2.157-2-5.625,2-3.256,2-5.625-2-2.156-2-5.624,2-3.257,2-5.625C89.418,108.318,85.213,104.86,80.027,104.86Z"
    />
    <path
      index="4"
      class="region"
      d="M155.375,156.748c-1.67-25.312-5.069-41.437-10.027-46.745-4.111-4.4-10.285-7.656-16.887-10.132l-6.7,25.416,8.628,31.461h24.989Z"
    />
    <path
      index="4"
      class="region"
      d="M29.667,156.748,38.3,125.287l-6.7-25.42C24.986,102.344,18.807,105.6,14.7,110c-4.958,5.308-8.357,21.433-10.027,46.745h25Z"
    />
    <path
      index="5"
      class="region"
      d="M157.242,301.323c-.107-.508-.213-.993-.318-1.452-.262-1.149-.514-2.14-.731-2.941-.086-.32-.168-.61-.241-.868-.184-.644-.322-1.086-.389-1.294l-.031-.1-.013-.039a.544.544,0,0,1-.029-.175c0-1.306.043-2.708.119-4.188.228-4.439.752-9.579,1.3-14.943.847-8.307,1.722-16.9,1.722-24.6,0-3.052-.1-5.971-.252-8.762-.1-1.86-.231-3.664-.372-5.413-.212-2.623-.453-5.121-.683-7.5-.481-4.985-.9-9.29-.9-13.129,0-.5.013-1.46.032-2.81.25-17.55.059-33.129-.547-46.579-.145-3-.313-5.923-.508-8.786H130.645a.537.537,0,0,1,.015.08c0,5.933.689,23.114,1.193,35.659.293,7.329.525,13.118.525,14.3,0,.68.022,1.72.057,3,.025.957.058,2.046.095,3.216.012.39.024.789.037,1.194.05,1.615.1,3.311.149,4.966s.086,3.269.11,4.72c.017.968.026,1.863.026,2.65,0,4.395,2.129,14.713,6.328,30.664.285,1.087.526,2.275.73,3.535.135.841.254,1.714.358,2.611.258,2.242.421,4.637.515,7.055.038.967.064,1.938.082,2.905q.012.724.018,1.445c.016,1.921,0,3.807-.042,5.595-.019.893-.044,1.762-.073,2.6-.043,1.254-.094,2.433-.147,3.51s-.11,2.054-.163,2.9c-.035.564-.069,1.07-.1,1.511-.046.661-.085,1.175-.112,1.512-.018.225-.031.373-.036.433a.549.549,0,0,1-.03.138,58.689,58.689,0,0,0-1.755,6.467c-.18.837-.354,1.73-.511,2.662a45.59,45.59,0,0,0-.677,7.466,52.411,52.411,0,0,0,1.064,11.51,17.843,17.843,0,0,0,.512,1.784c.09.258.183.5.278.713.475,1.086,1,1.658,1.516,1.658a1.642,1.642,0,0,0,1.432-.735,3.761,3.761,0,0,0,.516-1.963.553.553,0,1,1,1.1,0c0,2.031.045,3.872.126,5.541a54.457,54.457,0,0,0,1.072,9.087,22.636,22.636,0,0,0,.7,2.506q.125.359.255.679a11.36,11.36,0,0,0,.532,1.148q.137.254.275.477a6.806,6.806,0,0,0,.56.779,4.634,4.634,0,0,0,.845.792,3.756,3.756,0,0,0,2.377.661c2.022,0,8.537-15.328,8.537-28.215A77.7,77.7,0,0,0,157.242,301.323Z"
    />
    <path
      index="5"
      class="region"
      d="M3.583,213.049v.065c.019,1.349.033,2.307.033,2.809,0,.96-.026,1.949-.072,2.97-.117,2.553-.361,5.31-.648,8.321q-.086.9-.177,1.838c-.459,4.759-.965,9.994-1.189,15.748-.074,1.918-.118,3.893-.118,5.928,0,7.7.876,16.291,1.723,24.6.456,4.47.895,8.785,1.161,12.668.16,2.329.256,4.5.256,6.463a.518.518,0,0,1-.029.175l-.044.136c-.026.083-.065.2-.112.36s-.106.347-.172.572c-.165.562-.38,1.333-.621,2.28-.048.19-.1.387-.148.59-.35,1.424-.739,3.183-1.1,5.19a75.96,75.96,0,0,0-1.224,13.194c0,8.86,3.079,18.873,5.66,24.267A22.447,22.447,0,0,0,8.1,343.669a6.591,6.591,0,0,0,.861,1.11,1.567,1.567,0,0,0,.475.345.531.531,0,0,0,.2.045,3.74,3.74,0,0,0,3.221-1.453,6.686,6.686,0,0,0,.56-.779,10.453,10.453,0,0,0,.808-1.625,18.54,18.54,0,0,0,.733-2.268c.152-.583.295-1.222.428-1.921a50.067,50.067,0,0,0,.659-4.971q.063-.723.115-1.5.1-1.554.16-3.338t.057-3.814a.553.553,0,1,1,1.105,0c0,.451.094,2.7,1.948,2.7,1.657,0,3.37-5.86,3.37-15.665a57.577,57.577,0,0,0-2.942-16.595.549.549,0,0,1-.03-.138c-.016-.182-.1-1.141-.2-2.654-.15-2.27-.346-5.789-.435-9.81-.039-1.788-.058-3.674-.042-5.595.021-2.4.094-4.854.248-7.232.061-.952.135-1.891.224-2.81a48.727,48.727,0,0,1,1.232-7.508q1.18-4.486,2.143-8.376t1.7-7.176c1.649-7.3,2.48-12.364,2.48-15.113,0-1.181.022-2.605.055-4.151.023-1.031.051-2.116.082-3.219.046-1.655.1-3.351.149-4.966.038-1.217.074-2.371.1-3.411.02-.693.038-1.335.052-1.911.02-.862.033-1.575.033-2.085,0-.147,0-.367.01-.652s.017-.636.03-1.048c.02-.617.046-1.369.078-2.236.022-.578.046-1.207.071-1.881s.054-1.394.084-2.152.062-1.556.095-2.386q.024-.622.05-1.27c.035-.862.071-1.754.107-2.67.017-.413.034-.833.051-1.256.5-12.41,1.142-28.666,1.142-34.4a.537.537,0,0,1,.015-.08H4.6C3.632,173.021,3.279,191.565,3.583,213.049Z"
    />
    <path
      index="6"
      class="region"
      d="M120.845,125.737H90.078a6.626,6.626,0,0,1-.637.972,4.569,4.569,0,0,0,0,5.5,4.364,4.364,0,0,1,0,5.75,4.569,4.569,0,0,0,0,5.5,4.365,4.365,0,0,1,0,5.751,3.8,3.8,0,0,0-.92,2.749,4.772,4.772,0,0,0,.195,1.47h-.289c.191.443,2.095,3.476,2.095,4.156a4.344,4.344,0,0,1-1.081,2.875,4.569,4.569,0,0,0,0,5.5,4.365,4.365,0,0,1,0,5.751,4.569,4.569,0,0,0,0,5.5,4.364,4.364,0,0,1,0,5.75,4.569,4.569,0,0,0,0,5.5,4.365,4.365,0,0,1,0,5.751,4.569,4.569,0,0,0,0,5.5,4.34,4.34,0,0,1,1.081,2.875,4.018,4.018,0,0,1-.663,2.286h33c1.427-14.926,6.459-45.619,6.707-47.128v0l.024-.121Z"
    />
    <path
      index="6"
      class="region"
      d="M39.292,125.737h-.083l-8.748,31.9.019.1v0c.248,1.509,5.279,32.2,6.706,47.128H70.2a4.018,4.018,0,0,1-.664-2.286,4.342,4.342,0,0,1,1.081-2.875,4.569,4.569,0,0,0,0-5.5,4.365,4.365,0,0,1,0-5.751,4.569,4.569,0,0,0,0-5.5,4.364,4.364,0,0,1,0-5.75,4.569,4.569,0,0,0,0-5.5,4.365,4.365,0,0,1,0-5.751,4.569,4.569,0,0,0,0-5.5,4.344,4.344,0,0,1-1.081-2.875,13.768,13.768,0,0,1,1.272-3.133,3.712,3.712,0,0,0,.729-2.492,3.79,3.79,0,0,0-.92-2.749,4.365,4.365,0,0,1,0-5.751,4.569,4.569,0,0,0,0-5.5,4.364,4.364,0,0,1,0-5.75,4.569,4.569,0,0,0,0-5.5,6.708,6.708,0,0,1-.637-.972H39.292Z"
    />
    <path
      index="7"
      class="region"
      d="M122.481,210.79c0-1.188.1-2.839.274-4.819H89.074a4.662,4.662,0,0,0,.367,4.983,4.365,4.365,0,0,1,0,5.751,4.569,4.569,0,0,0,0,5.5,4.364,4.364,0,0,1,0,5.75,4.569,4.569,0,0,0,0,5.5,4.365,4.365,0,0,1,0,5.751,4.569,4.569,0,0,0,0,5.5,4.364,4.364,0,0,1,0,5.75c-.052.069-.1.137-.152.2h38.673C125.19,236,122.481,221.151,122.481,210.79Z"
    />
    <path
      index="7"
      class="region"
      d="M71.533,208.205a3.8,3.8,0,0,0-.553-2.234H37.289c.174,1.98.273,3.631.273,4.819,0,10.361-2.709,25.214-5.48,39.868H70.766l-.153-.2a4.364,4.364,0,0,1,0-5.75,4.569,4.569,0,0,0,0-5.5,4.365,4.365,0,0,1,0-5.751,4.569,4.569,0,0,0,0-5.5,4.364,4.364,0,0,1,0-5.75,4.569,4.569,0,0,0,0-5.5,4.365,4.365,0,0,1,0-5.751A3.79,3.79,0,0,0,71.533,208.205Z"
    />
    <path
      index="8"
      class="region"
      d="M128.442,253.2q-.135-.715-.271-1.433H88.706a4.839,4.839,0,0,0-.185,1.44,3.8,3.8,0,0,0,.92,2.749,4.365,4.365,0,0,1,0,5.751,4.569,4.569,0,0,0,0,5.5,4.34,4.34,0,0,1,1.081,2.875c0,4.868-4.708,8.828-10.5,8.828s-10.5-3.96-10.5-8.828a4.34,4.34,0,0,1,1.081-2.875,4.569,4.569,0,0,0,0-5.5,4.365,4.365,0,0,1,0-5.751,3.79,3.79,0,0,0,.92-2.749,4.839,4.839,0,0,0-.185-1.44H31.873q-.137.717-.272,1.433c-2.425,12.791-4.715,24.872-4.715,31.7,0,6.159.109,12.05.3,17.714H79.356c.072-3.857.112-7.293.114-10.169a.552.552,0,0,1,1.1,0c0,2.876.042,6.312.114,10.169h52.168c.192-5.664.3-11.555.3-17.714C133.157,278.068,130.867,265.987,128.442,253.2Z"
    />
    <path
      index="9"
      class="region"
      d="M118.839,398.807c4.742-18.771,12.306-48.752,13.979-95.1H80.709c.807,41.117,4.995,128.165,5.042,129.131a36.382,36.382,0,0,1-1.238,8.009,94.1,94.1,0,0,0-2.65,23.055c0,15.619,3.454,44.234,3.489,44.521a125.2,125.2,0,0,1-1.476,16.609,87.029,87.029,0,0,0-1.044,10.5c0,3.149.461,7.5.906,11.7.449,4.233.912,8.611.912,11.82,0,1.257-.108,2.816-.222,4.467-.36,5.2-.809,11.671,1.6,14.252A3.586,3.586,0,0,0,88.8,578.9c8.09,0,26.485-5.277,26.485-13.968,0-2.572-2.453-6.119-5.293-10.228-4.033-5.831-9.052-13.088-9.052-20.809,0-5.351,2.643-14.915,5.7-25.989,4.582-16.581,10.283-37.215,10.283-54.417a216.147,216.147,0,0,0-1.082-21.62c-.406-4.5-.79-8.741-.79-13.89C115.056,413.786,116.643,407.5,118.839,398.807Z"
    />
    <path
      index="9"
      class="region"
      d="M27.225,303.712c1.673,46.343,9.238,76.324,13.979,95.1,2.2,8.7,3.784,14.979,3.784,19.167,0,5.149-.384,9.394-.791,13.89a216.147,216.147,0,0,0-1.082,21.62c0,17.2,5.7,37.836,10.284,54.417,3.06,11.074,5.7,20.638,5.7,25.989,0,7.721-5.019,14.978-9.052,20.809-2.84,4.109-5.294,7.656-5.294,10.228,0,8.691,18.4,13.968,26.485,13.968a3.586,3.586,0,0,0,2.775-1.122c2.408-2.58,1.96-9.052,1.6-14.251-.114-1.651-.222-3.21-.222-4.467,0-3.209.464-7.587.912-11.82.445-4.206.906-8.554.906-11.7a87,87,0,0,0-1.043-10.5,125.523,125.523,0,0,1-1.48-16.542c.039-.354,3.493-28.97,3.493-44.588a94.1,94.1,0,0,0-2.65-23.055,36.467,36.467,0,0,1-1.239-7.982c.047-.991,4.236-88.041,5.043-129.158Z"
    />
    <path
      class="outline"
      d="M88.8,580a4.688,4.688,0,0,1-3.581-1.473c-2.737-2.931-2.27-9.668-1.9-15.081.113-1.631.22-3.173.22-4.391,0-3.15-.461-7.5-.906-11.7-.449-4.233-.912-8.611-.912-11.819a87.688,87.688,0,0,1,1.053-10.644,124.693,124.693,0,0,0,1.47-16.393c-.031-.222-3.493-28.9-3.493-44.588a95.079,95.079,0,0,1,2.677-23.3,35.706,35.706,0,0,0,1.212-7.738c-.04-.831-3.3-68.542-4.625-112.768C78.695,364.33,75.437,432.045,75.4,432.9a35.734,35.734,0,0,0,1.212,7.711,95.016,95.016,0,0,1,2.678,23.3c0,15.685-3.462,44.366-3.5,44.655a125.393,125.393,0,0,0,1.473,16.326,87.514,87.514,0,0,1,1.054,10.644c0,3.208-.464,7.586-.912,11.819-.445,4.206-.906,8.554-.906,11.7,0,1.218.107,2.76.219,4.391.375,5.413.842,12.149-1.894,15.081A4.69,4.69,0,0,1,71.241,580c-8.007,0-27.589-5.282-27.589-15.073,0-2.916,2.544-6.6,5.489-10.855C53.087,548.366,58,541.265,58,533.89c0-5.2-2.625-14.7-5.663-25.695-4.6-16.645-10.324-37.359-10.324-54.711A216.881,216.881,0,0,1,43.1,431.763c.421-4.663.786-8.69.786-13.789,0-4.05-1.573-10.277-3.75-18.9-5.368-21.251-14.352-56.818-14.352-114.185,0-6.928,2.3-19.059,4.734-31.9,2.785-14.692,5.942-31.344,5.942-42.2,0-7.514-4.138-34.494-6.081-46.746-.216,7.936-.7,20.028-1.08,29.487-.294,7.317-.526,13.1-.526,14.251,0,1.376-.087,4.187-.189,7.441-.133,4.3-.285,9.171-.285,12.3,0,4.493-2.141,14.905-6.364,30.946-2.913,11.105-1.12,33.75-1,35.166a58.671,58.671,0,0,1,2.982,16.895c0,2.8-.216,16.77-4.475,16.77a2.664,2.664,0,0,1-1.983-.788c-.411,17.434-4.354,19.76-7.811,19.76C6.236,346.274,0,329.036,0,316.954a80.153,80.153,0,0,1,3.449-22.585c-.008-5.157-.69-11.848-1.412-18.931C1.187,267.1.309,258.484.309,250.728c0-8.192.7-15.412,1.311-21.782.479-4.956.892-9.237.892-13.023,0-.5-.013-1.452-.033-2.794-.84-59.069,3.1-94.99,11.409-103.88C23.276,99.2,42.86,95.023,54.561,92.529,59.408,91.5,63.594,90.6,64.4,89.818c2.1-2.054-.3-15.8-1.18-19.6a58.64,58.64,0,0,1-3.181-9.9c-.227-1.078-.384-2-.482-2.634a2.041,2.041,0,0,1-1.989-.295,7.106,7.106,0,0,1-2.216-2.829,26.71,26.71,0,0,1-2.221-5.942l-.223-.878a40.4,40.4,0,0,1-1.047-5.2,21.962,21.962,0,0,1-.212-5.477,4.522,4.522,0,0,1,.662-2.1c-.04-.27-.106-.745-.176-1.318a41.115,41.115,0,0,1-.118-8.948A33.469,33.469,0,0,1,53.9,15.964a25.867,25.867,0,0,1,3.071-5.915,22.531,22.531,0,0,1,7.263-6.5C68.627,1.127,73.64,0,80.017,0s11.4,1.127,15.788,3.547a22.549,22.549,0,0,1,7.263,6.5,25.85,25.85,0,0,1,3.072,5.915,33.532,33.532,0,0,1,1.888,8.728,41.181,41.181,0,0,1-.119,8.948c-.07.574-.136,1.051-.175,1.32a4.541,4.541,0,0,1,.662,2.1,22.066,22.066,0,0,1-.212,5.477,40.357,40.357,0,0,1-1.046,5.2l-.224.883a26.529,26.529,0,0,1-2.223,5.942,7.087,7.087,0,0,1-2.215,2.829,2.038,2.038,0,0,1-1.988.295c-.1.634-.256,1.556-.482,2.634a58.43,58.43,0,0,1-3.2,9.952c-.846,3.637-3.28,17.476-1.158,19.548.805.786,4.991,1.678,9.838,2.711,11.7,2.494,31.285,6.669,40.673,16.72,8.3,8.89,12.248,44.811,11.408,103.88-.019,1.342-.033,2.3-.033,2.794,0,3.786.413,8.067.892,13.023.615,6.37,1.312,13.59,1.312,21.782,0,7.756-.879,16.375-1.729,24.71-.721,7.083-1.4,13.774-1.411,18.93a80.213,80.213,0,0,1,3.448,22.586c0,12.082-6.236,29.32-9.641,29.32-3.458,0-7.4-2.326-7.811-19.76a2.668,2.668,0,0,1-1.984.788c-4.259,0-4.475-13.97-4.475-16.77a58.632,58.632,0,0,1,2.983-16.895c.116-1.419,1.91-24.062-1-35.167-4.224-16.043-6.365-26.455-6.365-30.945,0-3.131-.151-8-.285-12.3-.1-3.254-.188-6.065-.188-7.441,0-1.155-.232-6.934-.526-14.251-.379-9.459-.864-21.552-1.08-29.487-1.943,12.252-6.082,39.232-6.082,46.746,0,10.856,3.157,27.508,5.942,42.2,2.435,12.844,4.734,24.975,4.734,31.9,0,57.367-8.984,92.934-14.351,114.185-2.178,8.619-3.751,14.846-3.751,18.9,0,5.1.364,9.126.787,13.789a217.24,217.24,0,0,1,1.086,21.721c0,17.352-5.724,38.066-10.323,54.711-3.039,11-5.663,20.494-5.663,25.695,0,7.375,4.91,14.476,8.855,20.182,2.946,4.26,5.49,7.939,5.49,10.855C116.392,574.718,96.809,580,88.8,580Zm-8.78-288.114a.552.552,0,0,1,.552.552c.018,33.176,5.126,139.337,5.177,140.405a36.382,36.382,0,0,1-1.238,8.009,94.1,94.1,0,0,0-2.65,23.055c0,15.619,3.454,44.234,3.489,44.521a125.2,125.2,0,0,1-1.476,16.609,87.029,87.029,0,0,0-1.044,10.5c0,3.149.461,7.5.906,11.7.449,4.233.912,8.611.912,11.82,0,1.257-.108,2.816-.222,4.467-.36,5.2-.809,11.671,1.6,14.252A3.586,3.586,0,0,0,88.8,578.9c8.09,0,26.485-5.277,26.485-13.968,0-2.572-2.453-6.119-5.293-10.228-4.033-5.831-9.052-13.088-9.052-20.809,0-5.351,2.643-14.915,5.7-25.989,4.582-16.581,10.284-37.215,10.284-54.417a216.092,216.092,0,0,0-1.083-21.62c-.406-4.5-.79-8.741-.79-13.89,0-4.188,1.587-10.47,3.783-19.167,5.356-21.2,14.318-56.685,14.318-113.914,0-6.824-2.29-18.906-4.715-31.7-2.93-15.46-5.961-31.446-5.961-42.406,0-9.859,6.792-51.293,7.082-53.052a.552.552,0,0,1,1.1.09c0,5.933.689,23.114,1.193,35.659.293,7.329.525,13.118.525,14.3,0,1.36.087,4.162.189,7.407.134,4.307.285,9.188.285,12.336,0,4.395,2.129,14.713,6.328,30.664,3.042,11.595,1.114,34.635,1.03,35.611a.551.551,0,0,1-.03.137,57.56,57.56,0,0,0-2.943,16.595c0,9.806,1.713,15.665,3.37,15.665,1.855,0,1.948-2.247,1.948-2.7a.553.553,0,1,1,1.1,0c.012,21.67,4.9,21.67,6.742,21.67,2.022,0,8.537-15.328,8.537-28.215a78.769,78.769,0,0,0-3.42-22.322.544.544,0,0,1-.029-.175c0-5.224.688-11.979,1.418-19.131.847-8.307,1.722-16.9,1.722-24.6,0-8.139-.694-15.33-1.307-21.676-.481-4.985-.9-9.29-.9-13.129,0-.5.014-1.46.033-2.81.824-57.938-3.121-94.557-11.11-103.11-9.151-9.8-28.522-13.926-40.1-16.393-6.14-1.309-9.391-2.037-10.379-3-3.035-2.963.86-20.67.934-20.815a57.151,57.151,0,0,0,3.118-9.7c.412-1.96.593-3.433.594-3.448a.553.553,0,0,1,.954-.309.925.925,0,0,0,1.389.138,5.828,5.828,0,0,0,1.848-2.419,25.533,25.533,0,0,0,2.133-5.7l.225-.887a39.75,39.75,0,0,0,1.023-5.08A20.97,20.97,0,0,0,107.3,37.2c-.164-1.271-.451-1.6-.545-1.7a.612.612,0,0,1-.149-.469s.1-.646.206-1.522a40.016,40.016,0,0,0,.115-8.718,32.414,32.414,0,0,0-1.825-8.447,25.164,25.164,0,0,0-2.931-5.65,21.4,21.4,0,0,0-6.9-6.178c-4.219-2.327-9.063-3.41-15.245-3.41S68.991,2.188,64.772,4.515a21.383,21.383,0,0,0-6.9,6.178,24.7,24.7,0,0,0-2.932,5.65,32.341,32.341,0,0,0-1.824,8.447,40.015,40.015,0,0,0,.114,8.718c.107.876.2,1.519.206,1.522a.552.552,0,0,1-.127.445c-.116.131-.4.457-.566,1.728a20.906,20.906,0,0,0,.209,5.177,39.509,39.509,0,0,0,1.024,5.085l.224.883a25.6,25.6,0,0,0,2.132,5.7,5.837,5.837,0,0,0,1.848,2.419.926.926,0,0,0,1.389-.138.553.553,0,0,1,.954.309c0,.015.182,1.488.595,3.448a57.194,57.194,0,0,0,3.13,9.73c.064.13,3.944,17.838.922,20.788-.988.965-4.239,1.693-10.379,3C43.217,96.077,23.846,100.205,14.7,110,6.706,118.556,2.76,155.175,3.584,213.114c.019,1.349.033,2.307.033,2.809,0,3.839-.415,8.144-.9,13.129-.612,6.346-1.307,13.537-1.307,21.676,0,7.7.876,16.291,1.723,24.6.729,7.152,1.417,13.907,1.417,19.131a.518.518,0,0,1-.029.175,78.79,78.79,0,0,0-3.419,22.322c0,12.887,6.514,28.215,8.537,28.215,1.84,0,6.73,0,6.741-21.67a.553.553,0,0,1,.553-.553h0a.552.552,0,0,1,.552.553c0,.451.094,2.7,1.948,2.7,1.657,0,3.37-5.859,3.37-15.665a57.577,57.577,0,0,0-2.942-16.595.551.551,0,0,1-.03-.137c-.084-.976-2.012-24.016,1.03-35.61,4.2-15.95,6.327-26.266,6.327-30.665,0-3.148.152-8.029.286-12.336.1-3.245.188-6.047.188-7.407,0-1.177.232-6.966.526-14.3.5-12.545,1.193-29.726,1.193-35.659a.552.552,0,0,1,1.1-.09c.289,1.759,7.081,43.193,7.081,53.052,0,10.96-3.031,26.946-5.961,42.406-2.425,12.791-4.715,24.873-4.715,31.7,0,57.229,8.963,92.713,14.318,113.914,2.2,8.7,3.784,14.979,3.784,19.167,0,5.149-.384,9.394-.791,13.89a216.147,216.147,0,0,0-1.082,21.62c0,17.2,5.7,37.836,10.284,54.417,3.06,11.074,5.7,20.638,5.7,25.989,0,7.721-5.019,14.978-9.052,20.809-2.84,4.109-5.294,7.656-5.294,10.228,0,8.691,18.4,13.968,26.485,13.968a3.586,3.586,0,0,0,2.775-1.122c2.408-2.58,1.96-9.052,1.6-14.251-.114-1.651-.222-3.21-.222-4.467,0-3.209.464-7.587.912-11.82.445-4.206.906-8.554.906-11.7a87,87,0,0,0-1.043-10.5,125.523,125.523,0,0,1-1.48-16.542c.039-.354,3.493-28.97,3.493-44.588a94.1,94.1,0,0,0-2.65-23.055,36.467,36.467,0,0,1-1.239-7.982c.052-1.1,5.16-107.256,5.178-140.432A.552.552,0,0,1,80.022,291.886Z"
    />
  </svg>`;
  };
  var xpAllInOne = function xpAllInOne2() {
    return x` <svg
    id="xp_all_in_one"
    hidden
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 194 580"
    style="width:12.125rem; height:36.25rem;"
  >
    <defs>
      <style>
        .bone,
        .region {
          isolation: isolate;
        }
      </style>
    </defs>
    <g id="default">
      <g id="xp_lower_extremities" index="xp_lower_extremities" class="region">
        <path
          d="M58.2,398.8c2.2,8.7,3.8,15,3.8,19.2s-.4,9.4-.8,13.9c-.7,7.2-1.1,14.4-1.1,21.6,0,17.2,5.7,37.8,10.3,54.4,3.1,11.1,5.7,20.7,5.7,26,0,7.7-5,15-9,20.8-2.8,4.1-5.3,7.7-5.3,10.3,0,8.7,18.4,14,26.5,14a4,4,0,0,0,2.7-1.2c2.4-2.6,2-9,1.6-14.3-.1-1.6-.2-3.2-.2-4.4a113.7,113.7,0,0,1,.9-11.9c.4-4.2.9-8.5.9-11.7a93.2,93.2,0,0,0-1-10.5,113.7,113.7,0,0,1-1.5-16.5c0-.3,3.5-29,3.5-44.6a93.8,93.8,0,0,0-2.6-23,31.1,31.1,0,0,1-1.3-8c0-1,4.4-91.3,5.1-131.4H44.1C45.6,349.1,53.4,379.7,58.2,398.8Z"
        />
        <path
          d="M102.8,432.9a36.1,36.1,0,0,1-1.3,8,93.3,93.3,0,0,0-2.6,23c0,15.6,3.4,44.2,3.5,44.5a131.4,131.4,0,0,1-1.6,16.6c-.5,3.5-.8,7-1,10.5a113.1,113.1,0,0,0,1,11.7c.4,4.2.9,8.6.9,11.8a39.1,39.1,0,0,1-.3,4.5c-.3,5.2-.8,11.6,1.6,14.2a3.9,3.9,0,0,0,2.8,1.2c8.1,0,26.5-5.3,26.5-14,0-2.6-2.5-6.2-5.3-10.3-4-5.8-9-13.1-9-20.8,0-5.3,2.7-14.9,5.7-26,4.6-16.6,10.3-37.2,10.3-54.4,0-7.2-.4-14.4-1.1-21.6-.4-4.5-.8-8.8-.8-13.9s1.6-10.5,3.8-19.2A423.6,423.6,0,0,0,150,301.5H97.7C98.4,341.6,102.7,431.9,102.8,432.9Z"
        />
      </g>
      <path
        id="xp_pelvis"
        index="xp_pelvis"
        class="region"
        d="M96.5,292.3a.6.6,0,0,1,.5-.6.6.6,0,0,1,.6.6h0c0,2.4,0,5.1.1,8.2H150c.1-5,.2-10.3.2-15.7s-2.3-18.9-4.7-31.7c-1.1-6-2.3-12-3.2-17.9H115v46.4H79V235.2H51.9c-1,5.9-2.2,12-3.3,18-2.4,12.8-4.7,24.9-4.7,31.7s.1,10.6.2,15.6H96.4C96.5,297.4,96.5,294.7,96.5,292.3Z"
      />
      <g id="xp_abdomen" class="region">
        <path d="M53.8,201.4a88,88,0,0,1,.8,9.4c0,6.5-1.1,14.7-2.5,23.4H79V201.4Z" />
        <path d="M142.1,234.2a148.5,148.5,0,0,1-2.5-23.5,81,81,0,0,1,.7-9.3H115v32.8Z" />
      </g>
      <g id="xp_upper_extremities" index="xp_upper_extremities" class="region">
        <path
          d="M20.3,214.1v2.5c0,3.9-.4,8.2-.9,13.2s-1.3,13.5-1.3,21.6a15.3,15.3,0,0,0,.1,1.8c1.1,24.1-.4,38.3-4.3,42s-9.3,19-11.2,24.6a13.8,13.8,0,0,1-.7,2,2.6,2.6,0,0,0,.9,3.2,1.9,1.9,0,0,0,2.4-.7c2.7-3.2,7-11.7,7-11.8a1.1,1.1,0,0,1,.7-.3.7.7,0,0,1,.4.7c-.6,3-3.3,24.1,1.6,29.9a3.1,3.1,0,0,0,2.8,1.3c4.4-.1,13.4-2.8,15.9-7.8,1.6-3.5,1.6-12.3,1.1-17.1-.3-3-2.1-26-2.2-28.6s2.6-16.7,5-28.8c.2-1.3.4-2.2.5-2.6.8-4.2,1.7-8.6,2.7-12.8,1.6-7.5,3.2-14.6,3.2-18.1s.1-8,.3-12.3.2-6.1.2-7.5.2-7,.5-14.5c.6-12.7,1.4-30.2,1.4-36.1a.4.4,0,0,1,.1-.3l4.1-20.1H23.4C21,155.6,19.9,181.5,20.3,214.1Z"
        />
        <path
          d="M192,321.8a13.8,13.8,0,0,1-.7-2c-1.9-5.5-6.8-20.3-11.2-24.6s-5.4-17.9-4.3-42c0-.9.1-1.5.1-1.8-.1-7.2-.5-14.5-1.3-21.7-.5-5-.9-9.2-.9-13.1V214c.4-32.5-.7-58.4-3.1-76.5H143.5l4.1,19.9c.1.1.1.2.1.4,0,5.9.8,23.4,1.4,36.1.3,7.5.6,13.4.6,14.5s.1,4.2.2,7.5.3,9.1.3,12.3,1.5,10.6,3.2,18.1c.9,4.2,1.8,8.6,2.6,12.8l.6,2.6c2.4,12,5.1,26.2,5,28.8s-2,25.7-2.3,28.6c-.5,4.8-.5,13.6,1.2,17.1,2.4,5.1,11.4,7.8,15.8,7.8a3.3,3.3,0,0,0,2.9-1.3c4.8-5.8,2.1-26.9,1.6-29.9a.5.5,0,0,1,.2-.6c.3-.1.5,0,.7.3s4.3,8.5,7,11.7a1.7,1.7,0,0,0,2.4.7A2.5,2.5,0,0,0,192,321.8Z"
        />
      </g>
      <g id="xp_thorax" index="xp_thorax" class="region">
        <path d="M53.7,200.4H79V118.8H55.4l-7.9,38.9h0C47.7,159.2,51.9,184.6,53.7,200.4Z" />
        <path d="M140.4,200.4c1.8-15.8,6-41.3,6.2-42.7l-7.9-38.9H115v81.6Z" />
      </g>
      <g id="xp_shoulder_girdle" index="xp_shoulder_girdle" class="region">
        <path
          d="M54.6,117.8H79V92l-7.2,1.6c-10.4,2.2-26,5.6-36,12.8a28.6,28.6,0,0,0-4.1,3.6c-3.5,3.7-6.2,12.9-8.2,26.8H50.7l3.8-18.2Z"
        />
        <path
          d="M158.2,106.4c-10-7.3-25.6-10.6-36-12.8L115,91.9v25.9h24.5l.2.8,3.7,18.2h27.1c-1.9-13.9-4.7-23.1-8.2-26.8A28.6,28.6,0,0,0,158.2,106.4Z"
        />
      </g>
      <path
        id="xp_vertebral_column"
        index="xp_vertebral_column"
        class="region"
        d="M111.1,79.3H82.8c.6,4.7.8,9.8-.7,11.3A5.6,5.6,0,0,1,80,91.7V280.6h34V91.6a4,4,0,0,1-2.1-1C110.4,89.1,110.6,84,111.1,79.3Z"
      />
      <path
        id="xp_skull"
        index="xp_skull"
        class="region"
        d="M115.9,60.1c.4-2,.6-3.5.6-3.5a.4.4,0,0,1,.4-.4.7.7,0,0,1,.6.1.8.8,0,0,0,1.2.2h.1a5.8,5.8,0,0,0,1.9-2.5,27.8,27.8,0,0,0,2.1-5.7l.3-.9c.4-1.6.7-3.3,1-5a30.5,30.5,0,0,0,.2-5.2c-.2-1.3-.5-1.6-.6-1.7s-.2-.3-.1-.5.1-.6.2-1.5a42.2,42.2,0,0,0,.1-8.7,34.8,34.8,0,0,0-1.8-8.5,27.3,27.3,0,0,0-3-5.6,19.6,19.6,0,0,0-6.9-6.2c-4.2-2.3-9-3.4-15.2-3.4S86,2.2,81.8,4.5a21.9,21.9,0,0,0-7,6.2,27,27,0,0,0-2.9,5.6,31.5,31.5,0,0,0-1.8,8.5,42.2,42.2,0,0,0,.1,8.7c.1.9.2,1.5.2,1.5a.9.9,0,0,1-.1.5c-.1.1-.4.4-.6,1.7a22.7,22.7,0,0,0,.2,5.2c.3,1.7.6,3.4,1,5.1l.3.8A23,23,0,0,0,73.3,54a6.4,6.4,0,0,0,1.8,2.5,1.1,1.1,0,0,0,1.4-.1h0a.7.7,0,0,1,.6-.1.4.4,0,0,1,.4.4s.2,1.5.6,3.5a54.8,54.8,0,0,0,3.1,9.7c0,.1.9,4,1.5,8.5h28.6c.6-4.5,1.5-8.5,1.5-8.5A57.5,57.5,0,0,0,115.9,60.1Z"
      />
    </g>
    <g id="subselection">
      <path
        id="outline"
        class="outline"
        d="M105.8,580a4.8,4.8,0,0,1-3.6-1.5c-2.7-2.9-2.3-9.6-1.9-15,.1-1.7.2-3.2.2-4.5a112.3,112.3,0,0,0-.9-11.7c-.4-4.2-.9-8.6-.9-11.8a76.2,76.2,0,0,1,1.1-10.6,128.1,128.1,0,0,0,1.4-16.4c0-.2-3.5-28.9-3.5-44.6a101.6,101.6,0,0,1,2.7-23.3,33.4,33.4,0,0,0,1.2-7.7c0-.9-3.3-68.6-4.6-112.8-1.3,44.3-4.6,111.9-4.6,112.8a33.4,33.4,0,0,0,1.2,7.7,101.6,101.6,0,0,1,2.7,23.3c0,15.7-3.5,44.4-3.5,44.7a128.1,128.1,0,0,0,1.4,16.3,76.2,76.2,0,0,1,1.1,10.6c0,3.2-.5,7.6-.9,11.9a108.4,108.4,0,0,0-.9,11.7c0,1.2.1,2.7.2,4.4.4,5.4.8,12.1-1.9,15a4.8,4.8,0,0,1-3.6,1.5c-8,0-27.6-5.3-27.6-15.1,0-2.9,2.6-6.6,5.5-10.8,4-5.7,8.9-12.8,8.9-20.2,0-5.2-2.7-14.7-5.7-25.7C64.7,491.6,59,470.8,59,453.5c0-7.3.4-14.5,1.1-21.7.4-4.7.8-8.7.8-13.8s-1.6-10.3-3.8-18.9c-5.3-21.3-14.3-56.8-14.3-114.2,0-6.9,2.3-19.1,4.7-31.9,2.8-14.7,5.9-31.3,5.9-42.2,0-7.5-4.1-34.6-6-46.8-.3,8-.8,20.4-1.3,30-.3,7.5-.6,13.3-.6,14.5s-.1,4.2-.2,7.4-.2,9.2-.2,12.3-1.5,10.5-3.3,18.4c-.9,4.2-1.9,8.6-2.6,12.8l-.6,2.6c-1.4,7-5.1,25.7-5,28.5s2,25.7,2.3,28.5c.5,5.1.4,14-1.3,17.7-2.7,5.8-12.4,8.4-16.8,8.5a4.6,4.6,0,0,1-3.7-1.8c-4.3-5-3.2-20.3-2.3-27.5A65.4,65.4,0,0,1,6.2,325a3,3,0,0,1-3.9,1A3.6,3.6,0,0,1,1,321.4l.7-1.9c1.8-5.6,6.8-20.6,11.4-25,2.6-2.5,5.3-11.6,4-41.2,0-.9-.1-1.6-.1-1.8a197.8,197.8,0,0,1,1.4-21.8c.4-5,.8-9.3.8-13v-2.6c-.5-41.6,1.1-93.5,11.7-104.8a29.3,29.3,0,0,1,4.2-3.7c10.2-7.4,26-10.8,36.4-13,4.9-1,9-2,9.9-2.7s-.3-15.8-1.2-19.6a58.2,58.2,0,0,1-3.2-10l-.5-2.6a2.1,2.1,0,0,1-2-.3,6.7,6.7,0,0,1-2.2-2.8,25.4,25.4,0,0,1-2.2-6l-.3-.9c-.4-1.7-.7-3.4-1-5.2a24.4,24.4,0,0,1-.2-5.4,4.8,4.8,0,0,1,.7-2.1,11.5,11.5,0,0,0-.2-1.4,44,44,0,0,1-.1-8.9A32.2,32.2,0,0,1,70.9,16,25.5,25.5,0,0,1,74,10.1a21.7,21.7,0,0,1,7.3-6.5C85.6,1.1,90.6,0,97,0s11.4,1.1,15.8,3.6A23.3,23.3,0,0,1,123.1,16a32.2,32.2,0,0,1,1.9,8.7,45.1,45.1,0,0,1-.1,9,10.5,10.5,0,0,0-.2,1.3,5.2,5.2,0,0,1,.7,2.1,20.4,20.4,0,0,1-.3,5.5,31.8,31.8,0,0,1-1,5.2l-.2.9a26.3,26.3,0,0,1-2.2,5.9,7.6,7.6,0,0,1-2.2,2.8,1.8,1.8,0,0,1-2,.3c-.1.7-.3,1.6-.5,2.7a61.2,61.2,0,0,1-3.2,10c-.9,3.6-3.3,17.4-1.2,19.5s5,1.7,9.9,2.7c10.4,2.3,26.2,5.6,36.4,13a30,30,0,0,1,4.2,3.7c10.6,11.3,12.2,63.3,11.7,104.9v2.5c0,3.8.4,8.1.9,13,.6,6.4,1.3,13.6,1.3,21.8a15.3,15.3,0,0,1-.1,1.8c-1.3,29.7,1.4,38.8,4,41.2,4.6,4.5,9.6,19.4,11.4,25,.3.9.6,1.6.7,2a3.6,3.6,0,0,1-1.3,4.5,3.1,3.1,0,0,1-3.9-1,76.5,76.5,0,0,1-5.6-9.1c.9,7.2,2,22.5-2.3,27.5a4.3,4.3,0,0,1-3.6,1.8h-.1c-4.4-.1-14.1-2.7-16.8-8.5-1.7-3.7-1.8-12.6-1.3-17.7.3-2.8,2.1-26,2.3-28.5s-3.6-21.5-5-28.5a17.4,17.4,0,0,1-.5-2.6c-.8-4.2-1.8-8.6-2.7-12.8-1.8-7.9-3.3-14.7-3.3-18.4s-.1-8-.2-12.3-.2-6-.2-7.4-.3-7-.6-14.5c-.4-9.6-1-22-1.2-30-2,12.2-6.1,39.3-6.1,46.8,0,10.9,3.1,27.5,5.9,42.2,2.4,12.8,4.7,25,4.7,31.9,0,57.4-9,92.9-14.3,114.2-2.2,8.6-3.8,14.8-3.8,18.9s.4,9.1.8,13.8c.7,7.2,1.1,14.4,1.1,21.7,0,17.3-5.7,38.1-10.3,54.7-3,11-5.7,20.5-5.7,25.7,0,7.4,4.9,14.5,8.9,20.2,3,4.2,5.5,7.9,5.5,10.8C133.4,574.7,113.8,580,105.8,580ZM97,291.7a.6.6,0,0,1,.6.6h0c0,33,5.1,139.5,5.1,140.5a36,36,0,0,1-1.2,8,99.7,99.7,0,0,0-2.7,23c0,15.7,3.5,44.3,3.5,44.6a116.4,116.4,0,0,1-1.5,16.6c-.5,3.5-.8,7-1,10.5a113.1,113.1,0,0,0,1,11.7c.4,4.2.9,8.6.9,11.8a39.1,39.1,0,0,1-.3,4.5c-.3,5.2-.8,11.6,1.6,14.2a3.9,3.9,0,0,0,2.8,1.2c8.1,0,26.5-5.3,26.5-14,0-2.6-2.5-6.2-5.3-10.3-4-5.8-9-13.1-9-20.8,0-5.3,2.6-14.9,5.7-26,4.6-16.6,10.3-37.2,10.3-54.4,0-7.2-.4-14.4-1.1-21.6-.4-4.5-.8-8.8-.8-13.9s1.6-10.5,3.8-19.2c5.4-21.2,14.3-56.7,14.3-113.9,0-6.8-2.3-18.9-4.7-31.7-2.9-15.5-5.9-31.4-5.9-42.4s6.7-51.3,7-53a.6.6,0,0,1,.6-.5.5.5,0,0,1,.5.6c0,5.9.8,23.4,1.4,36.1.3,7.5.6,13.4.6,14.5s.1,4.2.2,7.5.3,9.1.3,12.3,1.5,10.6,3.2,18.1c.9,4.2,1.8,8.6,2.6,12.8l.6,2.6c2.4,12,5.1,26.2,5,28.8s-2,25.7-2.3,28.6c-.5,4.8-.5,13.6,1.2,17.1,2.4,5.1,11.4,7.8,15.8,7.8a3.3,3.3,0,0,0,2.9-1.3c4.8-5.8,2.1-26.9,1.6-29.9a.5.5,0,0,1,.3-.7.8.8,0,0,1,.7.3c0,.1,4.3,8.6,7,11.8a1.9,1.9,0,0,0,2.4.7,2.5,2.5,0,0,0,.9-3.1,20.5,20.5,0,0,1-.7-2c-1.9-5.6-6.8-20.4-11.2-24.6s-5.4-17.9-4.3-42.1c0-.9.1-1.5.1-1.7-.1-7.3-.5-14.5-1.3-21.7-.5-5-.9-9.3-.9-13.1V214c.7-58.5-3.3-95.5-11.4-104.1a23,23,0,0,0-4.1-3.5c-10-7.3-25.6-10.6-36-12.9-6.1-1.3-9.3-2-10.3-3-3-3,.8-20.6.9-20.8A52.3,52.3,0,0,0,116,60c.4-2,.6-3.4.6-3.4a.7.7,0,0,1,.4-.5.7.7,0,0,1,.6.2.9.9,0,0,0,1.3.2.1.1,0,0,1,.1-.1,6.1,6.1,0,0,0,1.8-2.4,27.8,27.8,0,0,0,2.1-5.7l.3-.9c.4-1.7.7-3.4,1-5.1a29.8,29.8,0,0,0,.2-5.2,3.3,3.3,0,0,0-.6-1.7.6.6,0,0,1-.1-.4l.2-1.6a42.1,42.1,0,0,0,.1-8.7,30,30,0,0,0-1.8-8.4,25.9,25.9,0,0,0-3-5.7,20.3,20.3,0,0,0-6.9-6.1C108,2.2,103.2,1.1,97,1.1S86,2.2,81.8,4.5a21.9,21.9,0,0,0-7,6.2,27,27,0,0,0-2.9,5.6,31.5,31.5,0,0,0-1.8,8.5,42.2,42.2,0,0,0,.1,8.7c.1.9.2,1.5.2,1.5a.9.9,0,0,1-.1.5c-.1.1-.4.4-.6,1.7a22.7,22.7,0,0,0,.2,5.2c.3,1.7.6,3.4,1,5.1l.3.8A23,23,0,0,0,73.3,54a6.4,6.4,0,0,0,1.8,2.5,1.1,1.1,0,0,0,1.4-.1h0a.7.7,0,0,1,.6-.1.4.4,0,0,1,.4.4s.2,1.5.6,3.5a54.8,54.8,0,0,0,3.1,9.7c.1.1,3.9,17.9.9,20.8-1,1-4.2,1.7-10.4,3-10.3,2.2-26,5.6-36,12.8a34.2,34.2,0,0,0-4,3.6c-8,8.6-12.1,45.6-11.4,104.1v2.5c0,3.9-.4,8.2-.9,13.2s-1.3,13.5-1.3,21.6a15.3,15.3,0,0,0,.1,1.8c1.1,24.1-.4,38.3-4.3,42s-9.3,19-11.2,24.6a13.8,13.8,0,0,1-.7,2,2.6,2.6,0,0,0,.9,3.2,2,2,0,0,0,2.5-.7c2.6-3.2,6.9-11.7,7-11.8a.7.7,0,0,1,.6-.3.7.7,0,0,1,.4.7c-.6,3-3.3,24.1,1.6,29.9a3.1,3.1,0,0,0,2.8,1.3c4.4,0,13.4-2.7,15.9-7.8,1.6-3.5,1.6-12.3,1.1-17.1-.3-3-2.1-26-2.2-28.6s2.6-16.7,5-28.8c.2-1.3.4-2.2.5-2.6.8-4.2,1.7-8.6,2.7-12.8,1.6-7.5,3.2-14.6,3.2-18.1s.1-8,.3-12.4.1-6,.1-7.4.3-7,.6-14.5c.6-12.7,1.4-30.2,1.4-36.1a.6.6,0,1,1,1.1-.1c.3,1.8,7.1,43.2,7.1,53s-3,27-6,42.4c-2.4,12.8-4.7,24.9-4.7,31.7,0,57.2,9,92.7,14.3,113.9,2.2,8.7,3.8,15,3.8,19.2s-.4,9.4-.8,13.9c-.7,7.2-1.1,14.4-1.1,21.6,0,17.2,5.7,37.9,10.3,54.4,3.1,11.1,5.7,20.7,5.7,26,0,7.7-5,15-9,20.8-2.8,4.1-5.3,7.7-5.3,10.3,0,8.7,18.4,14,26.5,14a4,4,0,0,0,2.7-1.2c2.4-2.6,2-9,1.6-14.3-.1-1.6-.2-3.2-.2-4.4a113.7,113.7,0,0,1,.9-11.9c.4-4.2.9-8.5.9-11.7a93.2,93.2,0,0,0-1-10.5,113.7,113.7,0,0,1-1.5-16.5c0-.3,3.5-29,3.5-44.6a93.8,93.8,0,0,0-2.6-23,31.1,31.1,0,0,1-1.3-8c0-1.1,5.2-107.6,5.2-140.6A.6.6,0,0,1,97,291.7Z"
      />

      <g id="xp_clavicula_default" class="bone" disabled>
        <path
          d="M83.2,111.9c1.8,2,6,.4,6.7-2.1s-.2-2.5-1.9-3.2c-15-6-22.8-5.6-35.4-3.5-4.1.7-5.9,1.4-6.1,2.1s.8.9,1.3,2-.2,1.8.2,2.3,4.1-.9,7.7-1.4C64.5,106.9,79,107.2,83.2,111.9Z"
        />
        <path
          d="M110.8,111.9c-1.8,2-6,.4-6.7-2.1s.2-2.5,1.9-3.2c15-6,22.8-5.6,35.4-3.5,4.1.7,5.9,1.4,6.1,2.1s-.8.9-1.3,2,.2,1.8-.2,2.3-4.1-.9-7.7-1.4C129.5,106.9,115,107.2,110.8,111.9Z"
        />
      </g>
      <g id="xp_skull_bone" class="bone" disabled>
        <path
          d="M114.7,54.6c0-.4-.3-.3-.6-.3-1.9,0-4.6.1-4.7.8s-.2.8-.4,1.2-.8,5.2-2,6.5-3.2,3.5-10,3.5h0c-6.7,0-10-3.5-10-3.5s-1.6-4.9-2-6.5l-.3-1.2c-.2-.7-2.8-.8-4.7-.8-.3,0-.5,0-.6.3s-.6,4.2.9,5S81,68.5,83.8,70s4.6,8.2,13.3,8.3h0c8.6,0,9.1-6.2,13.2-8.3s2.1-9.6,3.5-10.4S114.7,54.8,114.7,54.6Z"
        />
        <path
          d="M115.7,13.6A22.6,22.6,0,0,0,97,3.7h0a23,23,0,0,0-18.7,9.9C74.8,18.4,73.8,26.4,74,31s2.9,21.8,5.4,22.2,5.7.1,6.2,1.6,1.1,4.6,2.1,5.6S93.2,63,97,63h0c3.8,0,8-1.2,9.3-2.6s2-5.3,2.1-5.6,4.4-1.3,6.2-1.6S119.8,36.7,120,31,119.2,18.4,115.7,13.6Zm-31,32.3c-2.3-.2-3.2-1.9-3.2-7.1s2.8-4.5,7.5-5.4c1-.2,3.1-.8,4.2,1.2s.6,4.6-.4,6.5S87.1,46,84.7,45.9Zm13.1,8.2-.8-.2h0l-.7.2c-3.8,1.7-3.4-1.8-2.8-5.1s1.3-5,2-5.8,1,0,1.5,0h0c.5,0,.9-.7,1.5,0s1.5,3,2,5.8S101.6,55.8,97.8,54.1Zm11.5-8.2c-2.3.1-7-2.8-8-4.8s-1.3-4.8-.4-6.5,3.3-1.4,4.2-1.2c4.6.9,7.4,1.3,7.4,5.4S111.6,45.7,109.3,45.9Z"
        />
      </g>
      <g id="xp_skull_selection" hidden>
        <path
          id="xp_skull_2"
          index="xp_skull_2"
          class="region"
          d="M75.2,56.5a1,1,0,0,0,1.3,0h.1c.1-.2.4-.2.6-.2s.4.2.4.5.2,1.5.6,3.4a54.5,54.5,0,0,0,3,9.7c0,.1,1,4,1.6,8.4h28.4c.6-4.5,1.6-8.4,1.6-8.5a47.3,47.3,0,0,0,3-9.7c.4-2,.6-3.4.6-3.5a.7.7,0,0,1,.4-.5c.2-.1.4,0,.6.2a1.1,1.1,0,0,0,1.4.2h0a3.9,3.9,0,0,0,1.6-2H73.6A3.6,3.6,0,0,0,75.2,56.5Z"
        />
        <path
          id="xp_skull_1"
          index="xp_skull_1"
          class="region"
          d="M69.8,37.2a30.1,30.1,0,0,0,.1,5.2,45.9,45.9,0,0,0,1,5.1l.2.9a23,23,0,0,0,1.8,5H121a23,23,0,0,0,1.8-5l.2-.9a45.9,45.9,0,0,0,1-5.1,18.2,18.2,0,0,0,.2-5.2c-.2-1.3-.4-1.6-.6-1.7a.8.8,0,0,1-.2-.5l.2-1.5a36.2,36.2,0,0,0,.1-8.7,31.5,31.5,0,0,0-1.8-8.5,22.9,22.9,0,0,0-2.9-5.6,22.8,22.8,0,0,0-6.9-6.2c-4.2-2.3-9-3.4-15.2-3.4S86.1,2.2,81.8,4.5a21.8,21.8,0,0,0-7,6.2,42.5,42.5,0,0,0-2.9,5.6,30.7,30.7,0,0,0-1.8,8.5,42.2,42.2,0,0,0,.1,8.7c.1.9.2,1.5.2,1.5s0,.3-.1.4A2.6,2.6,0,0,0,69.8,37.2Z"
        />
      </g>
      <g id="xp_upper_extremities_bone" class="bone" disabled>
        <path
          d="M6.1,316.2c-.2-.3-.3.2-.3.4a5.9,5.9,0,0,0-.2,1.4,2.8,2.8,0,0,1-.4,1.2,1.7,1.7,0,0,0-.5,1.2c0,.4.3.7.7.4a2,2,0,0,0,.6-.9l.6-1.2a4.7,4.7,0,0,1,.9-.6c.4-.3.7-.6.4-.7A3.6,3.6,0,0,1,6.1,316.2Z"
        />
        <path
          d="M22.9,317.4a.7.7,0,0,0,.4-.5,3.3,3.3,0,0,0,0-1.7,14,14,0,0,1,.4-8.1l.5-1.7a1.5,1.5,0,0,0,0-1.3c-.4-.8-1.1-.7-1.7-.5l-.8.6a3.2,3.2,0,0,0-.4,2.7,8.7,8.7,0,0,1-.1,3.6,34,34,0,0,1-.7,3.4c-.3.9-1,2.1-.5,3h0A2.8,2.8,0,0,0,22.9,317.4Z"
        />
        <path
          d="M16.3,300a10.5,10.5,0,0,0-.8-1.1c-.5-.6-.9-1.1-1.4-.3a16.2,16.2,0,0,0-1.1,2.8,12,12,0,0,1-1.6,2.7c-.6.6-1.4,1-1.8,1.8a1.3,1.3,0,0,0-.1.6c-.1,0-.1.1,0,.2a2.9,2.9,0,0,0,1.6,1.5,2.2,2.2,0,0,0,2.2,0,.3.3,0,0,0,.1-.2,3.8,3.8,0,0,0,.1-1.5,12.4,12.4,0,0,1,.4-1.6,7.1,7.1,0,0,1,1.8-2.7c.4-.4,1.5-.5,1.4-1.2A2,2,0,0,0,16.3,300Z"
        />
        <path
          d="M10.2,308.8c-.7-.3-.8-.8-1.2-1.1s-.5.4-.6.7a21.3,21.3,0,0,1-1,4.9c-.2.5-1.4,1.4-1.3,1.8a4.4,4.4,0,0,0,2.5,1.7c.3-.1.2-.7.2-.9a5.8,5.8,0,0,1,.5-2.6,8,8,0,0,1,1.5-2.1c.5-.4,1.3-.7,1.4-1.6S11.1,309.2,10.2,308.8Z"
        />
        <path
          d="M19.7,301.5c-1.2-.2-2.2-.1-2.5,1a7.6,7.6,0,0,0,.1,1.5,13.1,13.1,0,0,1-.5,3.9c-.3,1.3-.3,2.7-.7,4s-1.4,2.3-1.9,3.5a1.7,1.7,0,0,0-.1,1.2.8.8,0,0,0,.7.5,8.5,8.5,0,0,0,2.3.3,1.1,1.1,0,0,0,.7-.3,3,3,0,0,0,.4-1,13.4,13.4,0,0,0-.1-2,10.4,10.4,0,0,1,0-2.5,12,12,0,0,1,1.4-5c.3-.7.7-1.3,1-1.9a3.7,3.7,0,0,0,.8-1.5C21.5,302,20.6,301.7,19.7,301.5Z"
        />
        <path
          d="M28.8,316a1.1,1.1,0,0,0,.3-1.1,5.4,5.4,0,0,0-.7-1.3,8.5,8.5,0,0,1-.4-3.2c-.1-.8-.3-2.6-.3-3.4s.5-2.4.2-3.4-2-1-2.7-.5-.2,1.7.1,2.5a5,5,0,0,1,.3,1.6,15.2,15.2,0,0,1,.1,6,4.3,4.3,0,0,0,0,1.6,1.6,1.6,0,0,0,.8,1.2,4.1,4.1,0,0,0,1.6.3A1.1,1.1,0,0,0,28.8,316Z"
        />
        <path
          d="M33.9,321.6a4.5,4.5,0,0,1-2.3.3.5.5,0,0,1-.3-.5c.1-.5.4-1,.5-1.4a4.6,4.6,0,0,0-.5-2l-.9-1.8c-.1-.4-.1-.8.1-.8l1.4.4h0l1.3-.4c.1,0,.1.6,0,.8a4.9,4.9,0,0,0-.1,1.2,7.7,7.7,0,0,0,.2,1.5l.3.9C33.9,320.4,34.4,321.4,33.9,321.6Z"
        />
        <path
          d="M34,326.6c.4-.2,0-.8-.1-1.1a1.6,1.6,0,0,1-.5-1.1c0-.5.3-.9.2-1.3s-.6-.5-.9-.4-1.2-.2-1.4,0,.2.9.4,1.1a3.1,3.1,0,0,1,.3,1.3,2.4,2.4,0,0,0,0,1.2v.2A2,2,0,0,0,34,326.6Z"
        />
        <path
          d="M29,326.2a.5.5,0,0,0,.3-.5,5.8,5.8,0,0,0-.6-1.7,16.5,16.5,0,0,1-.4-3.1,26.8,26.8,0,0,1,.7-2.7c.1-.9-.4-1-1.2-1H27c-.6,0-1.5-.2-1.7.6s.3,2,.7,2.7a5.4,5.4,0,0,1,.5,2.8,11,11,0,0,0-.6,2.6c0,.2.1.3.3.4A5.3,5.3,0,0,0,29,326.2Z"
        />
        <path
          d="M28.6,327.5l-.9.2h-.1l-1.3-.2h-.2c-.7.5-.2,1.1.2,1.8a5.2,5.2,0,0,1,.3,2.5,5.5,5.5,0,0,0-.2,2.2c.2.6,1.1.5,1.5.6s1.2.3,1.2-.4-.5-1.4-.5-2.1-.2-1.3-.2-2,.5-1.1.5-1.8S28.8,327.5,28.6,327.5Z"
        />
        <path
          d="M16.6,327.3a1.5,1.5,0,0,0,.4-.9c.2-.9-.4-1.8-.5-2.7a3.9,3.9,0,0,1,.3-2.4c.4-.7,1.3-1.5.9-2.3a1.1,1.1,0,0,0-1.4-.7c-1.4.2-2.3-.5-2.4.5a13.5,13.5,0,0,0,.4,2.8,5.7,5.7,0,0,1,.2,2.6,4,4,0,0,1-.3,1.5c-.1.4-.4.8-.3,1.2s.1.2.1.3A2.7,2.7,0,0,0,16.6,327.3Z"
        />
        <path
          d="M16.3,335.2a3.1,3.1,0,0,1-1.3.3c-.2.1-.4,0-.5,0l-.4-.2H14c-.4.6.6,1.2.6,1.9s-.1,1.9.8,1.9a1.1,1.1,0,0,0,.8-.7,1.6,1.6,0,0,0-.2-1.2c-.2-.3-.4-.6-.2-.9a3.6,3.6,0,0,0,.7-1C16.5,335.1,16.3,335.2,16.3,335.2Z"
        />
        <path
          d="M14.7,334.8a2.7,2.7,0,0,0,1.7-.6,5.2,5.2,0,0,0-.2-1.1,3.1,3.1,0,0,1-.3-1.9c.2-.8,1.6-2.8.6-3l-2,.3c-.6,0-.8.4-.7,1s.5.9.6,1.6a5.8,5.8,0,0,1-.2,1.9v1.3h0A1,1,0,0,0,14.7,334.8Z"
        />
        <path
          d="M20.8,335.7h2a.2.2,0,0,0,.2-.2c.3-.5-.1-1.5-.1-2.1a7.6,7.6,0,0,1-.3-2.1c0-.7.4-1.1.5-1.7s0-.9-.7-.8l-1,.2c-.4,0-.7-.2-1-.1s-.6,1-.3,1.5,1,1.2.9,2.1a5.9,5.9,0,0,1-.5,2.3S19.9,335.6,20.8,335.7Z"
        />
        <path
          d="M42,217.7c.7-3.5-3.7-6.7-4.1-11.6s2.2-67.7,4.4-71.8a12.1,12.1,0,0,1,2.9-3.5,9.6,9.6,0,0,0,3.3-10.3c-1.2-4.3-4.2-6-7.6-6a4.2,4.2,0,0,0-3.9,2.6c-1.2-.3-3.5-.2-3.8,2a59.5,59.5,0,0,0,.2,14c.6,4.8-1.3,42.9-1.7,53.2s-1.5,17.1-4.1,20.7-5.8,4.7-5.6,8.1,3.6,6.3,6.3,5.2,2-1.2,2.6-1.3.6-.6,1.3.1a7.8,7.8,0,0,0,2.4,1.6C37,221.5,41.2,222.2,42,217.7Z"
        />
        <path
          d="M22.8,337.7c.2-.4.6-.8.2-1.2s-.7,0-1.1,0h-.3c-.3,0-1,0-1.1.5s.4.7.6,1a2.8,2.8,0,0,1,.4,1.3,2.2,2.2,0,0,0,.2,1.4.9.9,0,0,0,1,.6,1.2,1.2,0,0,0,.7-1C23.3,339.4,22.5,338.6,22.8,337.7Z"
        />
        <path
          d="M28.8,336.6a1.1,1.1,0,0,0,.2-.8c-.1-.4-.6-.4-1-.2h-.4c-.3,0-.8,0-1,.4s.4.7.5.9a2,2,0,0,1,.4,1.3c0,.4-.1.9.1,1.2s.5.7.9.6a1.1,1.1,0,0,0,.7-1C29.2,338.2,28.5,337.4,28.8,336.6Z"
        />
        <path
          d="M34.3,327.4c-.3-.1-.7.3-1,.2l-.4-.2c-.3,0-.8-.2-.9.1s.3.6.4.9a3.6,3.6,0,0,1,.2,1.1,3.4,3.4,0,0,0,0,1c.2.4.4.6.8.6a.8.8,0,0,0,.7-.8c0-.6-.6-1.4-.2-2S34.7,327.5,34.3,327.4Z"
        />
        <path
          d="M23.4,319.9c.1-.8-.4-1.2-1.2-1.4a1.7,1.7,0,0,0-1.8.2c-.7.4-.3,1.2-.2,1.8a7.8,7.8,0,0,1,.4,2.6c-.1.9-.1,1.8-.2,2.7a1.7,1.7,0,0,1-.1.7c0,.7-.1,1.4.7,1.5a2.3,2.3,0,0,0,2.1-.7c.4-.7-.1-1.3-.2-2a8.2,8.2,0,0,1-.1-2.7C22.9,321.6,23.3,320.8,23.4,319.9Z"
        />
        <path
          d="M33.1,314.5c.6-.9.1-2-.4-2.8a8,8,0,0,1-.9-3,19.5,19.5,0,0,1-.3-3.4c0-.6.1-1,.1-1.6a2.4,2.4,0,0,0,0-1.2c-.5-.8-1.9-.6-2.5-.3s-.5,1.4,0,2.3a15.2,15.2,0,0,1,1.1,7,3.5,3.5,0,0,0,.3,3,1.6,1.6,0,0,0,2.4.1Z"
        />
        <path
          d="M32.9,223.5a4.1,4.1,0,0,0,3.6.4c1.1-.5,1.9-.8,1.9.5s-1.4,2.2-2,8.8-1.5,20.2-1.3,25.2-1.5,15.9-2.2,20.7-1.3,5.7-1.2,7.8a14.2,14.2,0,0,1-.4,4.5.8.8,0,0,1-.9.4l-1.1-.3c-1.3-.7-2.4-2-1.6-5.5,1.1-5.6,1.9-11.3,2.5-17.1.3-4-.4-16.9-.7-21.1l-.7-13.4c-.6,3.5-1.9,10.4-3.2,17.4s0,32.4,1,37.3a5.9,5.9,0,0,1,.2,1.4.6.6,0,0,1-.6.5h0a10.4,10.4,0,0,0-2.5,0,18.6,18.6,0,0,0-4.2,1.2,1.1,1.1,0,0,1-1.4-.6v-.2a23.4,23.4,0,0,1,.3-3.8c.3-2.8,1.7-8.6,1.9-15.3s.2-19.8,2.7-30.7c2-8.7,2.5-13.8,1-15.9s-1.1-3.3,1.3-2.8a3.7,3.7,0,0,0,2.9,0,5.5,5.5,0,0,1,2.5-.7A7.7,7.7,0,0,1,32.9,223.5Z"
        />
        <path
          d="M31.4,295.4a2,2,0,0,0-.8-1.2,17.4,17.4,0,0,0-6-.8,11.9,11.9,0,0,0-3.6.9l-1,.6a13.8,13.8,0,0,1-2.4,1.4,1.8,1.8,0,0,0-1.2,1.2v.4h0a10.7,10.7,0,0,0,1.5,2.2h1.2a4.2,4.2,0,0,1,2.7.6l.3.3a2.5,2.5,0,0,0,2.1.8,7.9,7.9,0,0,0,2.2-.6,8.1,8.1,0,0,1,2.2-.7c1-.1,1.4.1,2.4,0s.5-4.5.5-4.5S31.4,295.7,31.4,295.4Z"
        />
        <path
          d="M187.9,316.2c.3-.3.3.2.4.4s.1.9.1,1.4a2.1,2.1,0,0,0,.5,1.2,1.6,1.6,0,0,1,.4,1.2c0,.4-.3.7-.6.4a1.6,1.6,0,0,1-.7-.9l-.6-1.2c-.2-.3-.6-.4-.9-.6s-.6-.6-.4-.7A3.6,3.6,0,0,0,187.9,316.2Z"
        />
        <path
          d="M171.1,317.4a.7.7,0,0,1-.4-.5,3.2,3.2,0,0,1,.1-1.7,14,14,0,0,0-.5-8.1l-.5-1.7a1.5,1.5,0,0,1,0-1.3c.4-.8,1.1-.7,1.8-.5l.7.6a2.9,2.9,0,0,1,.4,2.7,8.7,8.7,0,0,0,.1,3.6,34,34,0,0,0,.7,3.4c.3.9,1,2.1.6,3h0A3,3,0,0,1,171.1,317.4Z"
        />
        <path
          d="M177.7,300a10.5,10.5,0,0,1,.8-1.1c.5-.6.9-1.1,1.5-.3s.7,1.9,1.1,2.9a10.1,10.1,0,0,0,1.6,2.6c.5.7,1.4,1,1.7,1.9a.8.8,0,0,1,.2.5v.2a4.4,4.4,0,0,1-1.7,1.6,2.6,2.6,0,0,1-2.1,0l-.2-.3a6.1,6.1,0,0,1-.1-1.4,4.2,4.2,0,0,0-.4-1.6,6.2,6.2,0,0,0-1.7-2.8c-.4-.3-1.6-.5-1.5-1.2S177.5,300.2,177.7,300Z"
        />
        <path
          d="M183.8,308.8c.7-.3.8-.8,1.2-1.1s.5.4.6.7a21.3,21.3,0,0,0,1,4.9c.2.5,1.4,1.4,1.3,1.8a4.4,4.4,0,0,1-2.5,1.7c-.3-.1-.2-.7-.2-.9a4.7,4.7,0,0,0-.5-2.6,8,8,0,0,0-1.5-2.1c-.5-.4-1.3-.7-1.4-1.6S182.9,309.2,183.8,308.8Z"
        />
        <path
          d="M174.3,301.5c1.3-.2,2.3-.1,2.5,1V304a10.4,10.4,0,0,0,.4,3.9c.3,1.3.3,2.7.7,4s1.4,2.3,1.9,3.5a1.7,1.7,0,0,1,.1,1.2.8.8,0,0,1-.7.5,8.5,8.5,0,0,1-2.3.3,1.1,1.1,0,0,1-.7-.3,1.7,1.7,0,0,1-.3-1,6.7,6.7,0,0,1,0-2,10.4,10.4,0,0,0,0-2.5,12,12,0,0,0-1.4-5c-.3-.7-.7-1.3-1-1.9a3.7,3.7,0,0,1-.8-1.5C172.5,302,173.4,301.7,174.3,301.5Z"
        />
        <path
          d="M165.2,316a1.1,1.1,0,0,1-.3-1.1,8.3,8.3,0,0,1,.7-1.3,11.3,11.3,0,0,0,.5-3.2c0-.8.2-2.6.2-3.4s-.5-2.4-.2-3.4,2-1,2.8-.5.1,1.7-.2,2.5a11,11,0,0,0-.3,1.6,15.2,15.2,0,0,0-.1,6,4.3,4.3,0,0,1,0,1.6,1.4,1.4,0,0,1-.8,1.2,4,4,0,0,1-1.5.3A1.1,1.1,0,0,1,165.2,316Z"
        />
        <path
          d="M160.1,321.6a4.5,4.5,0,0,0,2.3.3.5.5,0,0,0,.3-.5c-.1-.5-.4-1-.5-1.4a4.6,4.6,0,0,1,.5-2l.9-1.8c.1-.4.2-.8-.1-.8l-1.4.4h0a4.2,4.2,0,0,1-1.2-.4c-.2,0-.2.6-.1.8a4.9,4.9,0,0,1,.1,1.2,7.7,7.7,0,0,1-.2,1.5,3.2,3.2,0,0,1-.3.9C160.1,320.4,159.6,321.4,160.1,321.6Z"
        />
        <path
          d="M160,326.6c-.4-.2-.1-.8.1-1.1a1.6,1.6,0,0,0,.5-1.1c0-.5-.3-.9-.2-1.3s.5-.5.9-.4,1.1-.2,1.4,0-.2.9-.4,1.1a6.1,6.1,0,0,0-.3,1.3,2.4,2.4,0,0,1,0,1.2v.2A2,2,0,0,1,160,326.6Z"
        />
        <path
          d="M165,326.2a.5.5,0,0,1-.3-.5,5.8,5.8,0,0,1,.6-1.7,10.9,10.9,0,0,0,.3-3.1,13.1,13.1,0,0,0-.6-2.7c-.2-.9.4-1,1.2-1h.8c.6,0,1.5-.2,1.7.6s-.3,2-.7,2.7a4.5,4.5,0,0,0-.5,2.8,11,11,0,0,1,.6,2.6c0,.2-.1.3-.3.4A5.3,5.3,0,0,1,165,326.2Z"
        />
        <path
          d="M165.4,327.5l.9.2h.1l1.3-.2h.2c.7.5.2,1.1-.2,1.8a5.2,5.2,0,0,0-.3,2.5,5.5,5.5,0,0,1,.2,2.2c-.2.6-1.1.5-1.5.6s-1.2.3-1.2-.4.5-1.4.5-2.1.2-1.3.2-2-.5-1.1-.5-1.8S165.2,327.5,165.4,327.5Z"
        />
        <path
          d="M177.4,327.3a2.5,2.5,0,0,1-.4-.9c-.2-.9.4-1.8.6-2.7a4.9,4.9,0,0,0-.4-2.4c-.4-.7-1.3-1.5-.9-2.3a1.1,1.1,0,0,1,1.4-.7c1.5.2,2.4-.5,2.4.5a9,9,0,0,1-.4,2.8,7.4,7.4,0,0,0-.2,2.6,8,8,0,0,0,.3,1.5c.1.4.4.8.3,1.2a.4.4,0,0,1-.1.3A2.7,2.7,0,0,1,177.4,327.3Z"
        />
        <path
          d="M177.8,335.2a2.4,2.4,0,0,0,1.2.3c.2.1.4,0,.5,0l.4-.2h.1c.4.6-.6,1.2-.6,1.9s.1,1.9-.8,1.9a1.1,1.1,0,0,1-.8-.7,1.6,1.6,0,0,1,.2-1.2c.2-.3.4-.6.2-.9a3.6,3.6,0,0,1-.7-1C177.5,335.1,177.8,335.2,177.8,335.2Z"
        />
        <path
          d="M179.4,334.8a2.4,2.4,0,0,1-1.7-.6,1.5,1.5,0,0,1,.2-1.1,4,4,0,0,0,.2-1.9c-.1-.8-1.5-2.8-.5-3l1.9.3c.6,0,.8.4.7,1s-.4.9-.5,1.6a5.9,5.9,0,0,0,.1,1.9v.2a2,2,0,0,1,0,1.1h0A1.2,1.2,0,0,1,179.4,334.8Z"
        />
        <path
          d="M173.2,335.7h-2c-.1,0-.1-.1-.2-.2s.1-1.5.2-2.1a14.9,14.9,0,0,0,.2-2.1c0-.7-.4-1.1-.5-1.7s0-.9.7-.8l1,.2c.4,0,.7-.2,1-.1s.6,1,.2,1.5-.9,1.2-.8,2.1a5.9,5.9,0,0,0,.5,2.3S174.1,335.6,173.2,335.7Z"
        />
        <path
          d="M171.2,337.7c-.2-.4-.6-.8-.2-1.2s.7,0,1.1,0h.3c.3,0,1,0,1.1.5s-.4.7-.6,1a2.8,2.8,0,0,0-.4,1.3,2.2,2.2,0,0,1-.2,1.4.9.9,0,0,1-1,.6,1.2,1.2,0,0,1-.7-1C170.7,339.4,171.6,338.6,171.2,337.7Z"
        />
        <path
          d="M165.2,336.6a1.1,1.1,0,0,1-.2-.8c.1-.4.6-.4,1-.2h.4c.3,0,.8,0,1,.4s-.4.7-.5.9a2.8,2.8,0,0,0-.4,1.3,2.5,2.5,0,0,1-.1,1.2c-.2.3-.5.7-.9.6a1.1,1.1,0,0,1-.7-1C164.8,338.2,165.6,337.4,165.2,336.6Z"
        />
        <path
          d="M159.7,327.4c.4-.1.8.3,1,.2l.4-.2c.4,0,.8-.2.9.1s-.2.6-.3.9a2,2,0,0,0-.3,1.1c0,.3.2.7,0,1s-.4.6-.8.6a1,1,0,0,1-.7-.8c0-.6.6-1.4.2-2S159.3,327.5,159.7,327.4Z"
        />
        <path
          d="M170.6,319.9c-.1-.8.4-1.2,1.2-1.4a1.7,1.7,0,0,1,1.8.2c.7.4.3,1.2.2,1.8a7.8,7.8,0,0,0-.4,2.6,24.5,24.5,0,0,1,.2,2.7c0,.2.1.5.1.7s.2,1.4-.7,1.5a2.4,2.4,0,0,1-2.1-.7c-.4-.7.1-1.3.3-2a8.2,8.2,0,0,0,0-2.7C171.1,321.6,170.7,320.8,170.6,319.9Z"
        />
        <path
          d="M161,314.5c-.7-.9-.1-2,.3-2.8a10.6,10.6,0,0,0,1-3,19.5,19.5,0,0,0,.3-3.4,7.8,7.8,0,0,0-.2-1.6,1.7,1.7,0,0,1,.1-1.2c.4-.8,1.8-.6,2.5-.3s.4,1.4,0,2.3a13,13,0,0,0-1.1,7c.1,1,.4,2.1-.3,3a1.6,1.6,0,0,1-2.4.1Z"
        />
        <path
          d="M161.2,223.5a4.4,4.4,0,0,1-3.7.4c-1.1-.5-1.9-.8-1.9.5s1.5,2.2,2,8.8,1.6,20.2,1.3,25.2,1.5,15.9,2.2,20.7,1.3,5.7,1.2,7.8a14.2,14.2,0,0,0,.4,4.5.8.8,0,0,0,.9.4l1.1-.3c1.3-.7,2.4-2,1.6-5.5a159.9,159.9,0,0,1-2.4-17.1c-.4-4,.3-16.9.6-21.1l.7-13.4c.6,3.5,1.9,10.4,3.2,17.4s0,32.4-1,37.3a5.9,5.9,0,0,0-.2,1.4.6.6,0,0,0,.6.5h0a11.3,11.3,0,0,1,2.6,0,19.3,19.3,0,0,1,4.1,1.2,1,1,0,0,0,1.4-.4v-.4a23.4,23.4,0,0,0-.3-3.8c-.3-2.8-1.7-8.6-1.9-15.3s-.2-19.8-2.7-30.7c-2-8.7-2.5-13.8-1-15.9s1.1-3.3-1.3-2.8a3.4,3.4,0,0,1-2.8,0,5.9,5.9,0,0,0-2.6-.7A6.3,6.3,0,0,0,161.2,223.5Z"
        />
        <path
          d="M162.6,295.4a2,2,0,0,1,.8-1.2,17.7,17.7,0,0,1,6-.8,10.6,10.6,0,0,1,3.6.9l1,.6a13.8,13.8,0,0,0,2.4,1.4,1.8,1.8,0,0,1,1.2,1.2c.1.2.1.3,0,.4h0a7.4,7.4,0,0,1-1.4,2.2h-1.3a4,4,0,0,0-2.6.6l-.4.3a2.4,2.4,0,0,1-2.1.8,8.3,8.3,0,0,1-2.1-.6,8.8,8.8,0,0,0-2.3-.7c-1-.1-1.4.1-2.3,0s-.6-4.5-.6-4.5S162.6,295.7,162.6,295.4Z"
        />
        <path
          d="M152,217.7c-.7-3.5,3.7-6.7,4.1-11.6s-2.3-67.7-4.4-71.8a12.1,12.1,0,0,0-2.9-3.5,9.6,9.6,0,0,1-3.3-10.3c1.2-4.3,4.2-6,7.6-6a4.2,4.2,0,0,1,3.9,2.6c1.2-.3,3.4-.2,3.8,2a59.5,59.5,0,0,1-.2,14c-.7,4.8,1.3,42.9,1.7,53.2s1.5,17.1,4.1,20.7,5.8,4.7,5.6,8.1-3.6,6.3-6.3,5.2-2-1.2-2.6-1.3-.6-.6-1.3.1a7.2,7.2,0,0,1-2.5,1.6C157,221.5,152.8,222.2,152,217.7Z"
        />
      </g>
      <g id="xp_upper_extremities_selection" hidden>
        <g id="xp_upper_extremities_4" index="xp_upper_extremities_4" class="region">
          <path
            d="M181,312.2c.3-.1.5,0,.7.3s4.3,8.5,7,11.7a1.7,1.7,0,0,0,2.4.7,2.5,2.5,0,0,0,.9-3.1,10.3,10.3,0,0,1-.7-2c-1.9-5.6-6.8-20.3-11.2-24.6-2-1.9-3.3-6.4-4-13.5H160.3a52.8,52.8,0,0,1,1.1,8.9c-.1,2.4-1.9,25.6-2.2,28.5-.5,4.8-.5,13.7,1.2,17.1,2.4,5.1,11.4,7.8,15.8,7.9a3.4,3.4,0,0,0,2.8-1.4c4.9-5.8,2.2-26.9,1.6-29.9A.7.7,0,0,1,181,312.2Z"
          />
          <path
            d="M13.9,295.3c-4.4,4.2-9.3,19-11.2,24.5l-.6,2a2.5,2.5,0,0,0,.8,3.2,2,2,0,0,0,2.5-.7c2.6-3.2,6.9-11.7,7-11.8a.5.5,0,0,1,.6-.2c.3,0,.4.3.4.6-.6,3-3.3,24.1,1.6,29.9a3.1,3.1,0,0,0,2.8,1.3c4.4,0,13.4-2.7,15.9-7.8,1.6-3.5,1.6-12.3,1.1-17.1-.3-2.9-2.1-26.1-2.2-28.6a66.1,66.1,0,0,1,1.1-8.8H18C17.2,288.8,15.9,293.4,13.9,295.3Z"
          />
        </g>
        <g id="xp_upper_extremities_3" index="xp_upper_extremities_3" class="region">
          <path
            d="M153.3,246.3c.9,4.3,1.8,8.7,2.6,12.9l.6,2.6c1.2,6.3,2.6,13.2,3.6,18.7h15.8a226.1,226.1,0,0,1-.1-27.3v-1.8c0-5-.2-9.6-.6-14H151.4C151.9,240.2,152.6,243.2,153.3,246.3Z"
          />
          <path
            d="M18.2,253.2a226.1,226.1,0,0,1-.1,27.3H33.9c1-5.5,2.4-12.4,3.6-18.7.3-1.3.5-2.3.6-2.6.7-4.2,1.7-8.6,2.6-12.9s1.4-6.1,1.9-8.9H18.8c-.4,4.4-.6,9-.6,14Z"
          />
        </g>
        <g id="xp_upper_extremities_2" index="xp_upper_extremities_2" class="region">
          <path
            d="M174.5,229.8c-.4-5-.9-9.3-.9-13.2v-2.5c.1-5.4.1-10.5.1-15.5H149.2c.2,5.2.4,9,.4,9.9s.1,4.1.2,7.4.3,9.2.3,12.3a52.7,52.7,0,0,0,1,8.1h24C174.9,234,174.7,231.9,174.5,229.8Z"
          />
          <path
            d="M44.2,215.9c.1-3.3.2-6.1.2-7.4s.2-4.7.4-9.9H20.2c0,5,.1,10.1.1,15.5v2.5c0,3.9-.4,8.2-.9,13.2-.2,2-.4,4.2-.6,6.5h24a42.7,42.7,0,0,0,1.1-8.1C43.9,225.1,44.1,220.2,44.2,215.9Z"
          />
        </g>
        <g id="xp_upper_extremities_1" index="xp_upper_extremities_1" class="region">
          <path
            d="M31.7,110c-7.3,7.8-11.3,38.6-11.4,87.5H44.8c0-1.1.1-2.3.2-3.5.5-11.4,1.2-28.9,1.3-36.2-.1-1.9,11.4-33.4-4.3-55.2a57.3,57.3,0,0,0-6.2,3.8A28.6,28.6,0,0,0,31.7,110Z"
          />
          <path
            d="M162.3,110c7.3,7.8,11.3,38.6,11.5,87.5H149.2c-.1-1.1-.1-2.3-.2-3.5-.5-11.4-1.2-28.9-1.3-36.2.1-1.9-11.4-33.4,4.2-55.2a43.9,43.9,0,0,1,6.3,3.8A28.6,28.6,0,0,1,162.3,110Z"
          />
        </g>
      </g>
      <g id="xp_thorax_bone" class="bone" disabled>
        <path
          d="M72.3,205c2.9-2.1,8-5.4,10-7.6a71.7,71.7,0,0,0,4.5-6.3c1.3-1.9,1.9-3.3.8-3.9s-2.7,1.1-3.7,2.1-3.7,4.7-6,6.8-7,5.2-10.4,8-5.9,5.7-5.4,7.4S69.4,207.1,72.3,205Z"
        />
        <path
          d="M121.9,205c-2.9-2.1-8-5.4-10-7.6a71.7,71.7,0,0,1-4.5-6.3c-1.3-1.9-1.9-3.3-.8-3.9s2.7,1.1,3.7,2.1,3.7,4.7,6,6.8,7,5.2,10.4,8,5.9,5.7,5.4,7.4S124.8,207.1,121.9,205Z"
        />
        <path
          d="M86.7,104.1c1.3-.1,2.4-2.8,0-3.3a59.6,59.6,0,0,0-10.3.8,75.1,75.1,0,0,1,9.6,2.5Z"
        />
        <path
          d="M107.3,104.1h.6a67.9,67.9,0,0,1,9.6-2.5,58.9,58.9,0,0,0-10.3-.9C104.8,101.3,106,104,107.3,104.1Z"
        />
        <path
          d="M141.1,156.2c-.1-1.8-3.8-3.4-3.8-3.4s4.5-1.7,4.5-4.2-7-6.5-7-6.5,4-.9,4.3-4.4-4.3-5-4.3-5a3.8,3.8,0,0,0,2.4-3.8c-.1-2.8-4.7-5.9-4.7-5.9s3.2-1.3,2.4-3.8-8.5-6.4-8.5-6.4a7.3,7.3,0,0,0,.3-3,40.6,40.6,0,0,0-5.1.4c0,1.3-.4,2.9-3.2,3.2l-11.7.4h-.9a6.8,6.8,0,0,1-2.3-1.8c-.9-1.1-.8-3.2-2-3.6s-2.1.2-4.4.2-3.8-.4-4.5-.2-1.1,2.5-2,3.6a6.8,6.8,0,0,1-2.3,1.8h-.9l-11.7-.4c-2.7-.3-3.2-1.9-3.2-3.2l-5.1-.4a7.3,7.3,0,0,0,.3,3s-7.2,2.6-8.5,6.4,2.4,3.8,2.4,3.8-4.6,3.1-4.8,6a3.7,3.7,0,0,0,2.4,3.7s-4.5,2.3-4.2,5,4.3,4.4,4.3,4.4-7,3.1-7,6.5,4.5,4.2,4.5,4.2-3.7,1.6-3.9,3.4c-.3,3.8,3.8,5.3,3.8,5.3s-4,2.2-3.6,5.3c.3,1.5,2.6,3.5,2.6,3.5s-2.8,2.8-2.3,6a6.3,6.3,0,0,0,2.6,4.1s-2.8,2.8-2,6,4.4,3.8,4.4,3.8-1.6,4.1-1.3,6c.9,4.8,6.1,4.2,7.6,4.1a13.1,13.1,0,0,0,7.4-3.7,43.6,43.6,0,0,0,3.1-3.5,35.7,35.7,0,0,0,6.8-4,56.2,56.2,0,0,0,5.4-5.5c1.6-1.7,2.3-3,1.3-3.7s-2.8.6-4,1.5-1.8,1.6-3.1,2.8l1.2-2c2.3-4.2,5.2-5,6.6-10.4.5-2,.4-6.3,3.6-11,.8,3.5,2,6.5,3.7,6.7h.7c1.6-.2,2.9-3.2,3.7-6.7,3.2,4.7,3.1,9,3.6,11,1.4,5.4,4.3,6.2,6.6,10.4l.9,1.5-2.6-2.3c-1.2-.9-3-2.3-4-1.6s-.2,2,1.3,3.8a70.1,70.1,0,0,0,5.4,5.5,32.5,32.5,0,0,0,6.5,3.8,47.7,47.7,0,0,0,3.2,3.7,13.1,13.1,0,0,0,7.4,3.7c1.4.1,6.7.8,7.6-4.1.3-1.9-1.2-5.8-1.3-6s3.7-.5,4.4-3.7-2-6-2-6a7.2,7.2,0,0,0,2.6-4.2c.5-3.2-2.3-6-2.3-6s2.3-2,2.6-3.5-3.6-5.3-3.6-5.3S141.5,160,141.1,156.2ZM70.5,115.7a26.7,26.7,0,0,0,6.8,1.5l9.2.5a6.7,6.7,0,0,0,2.2,4.1l.3.3c-3.7,0-12.5-.1-17-.8C63.6,120,70.5,115.7,70.5,115.7Zm-3.1,8.9a99.3,99.3,0,0,0,12.2,1.6c3.4.3,8.3.2,10.8.2.2,1.6.5,3.4.6,5.3-4.9-.1-15.9-.5-20-1.1C60,128.9,67.4,124.6,67.4,124.6Zm-1.8,10.1s5.6,1,8.6,1.2a137.4,137.4,0,0,0,17.1.2c0,1.5.1,3.1.1,4.6H91c-4.3.4-17.7.8-21.6.2-12.7-2.2-3.8-6.2-3.8-6.2Zm-.3,9.5s4.7,1,7.6,1.3a105.3,105.3,0,0,0,18.6-.8v3.5c-6.5,3.4-16.9,4.5-23.4,3.1-14.7-3-2.8-7.1-2.8-7.1Zm-6.1,28.7,2.6.6a27.7,27.7,0,0,0,5,1,30.4,30.4,0,0,0,7.4-.4c2.2-.4,3-.8,5.4-1.1s1.3,1.3-1,3.2-10.4,4.3-18,2.3c-5.1-1.4-1.4-5.6-1.4-5.6Zm-.5,12.7c-.9-1,0-2.7,0-2.7a36.7,36.7,0,0,0,7.4,1.1,29.4,29.4,0,0,0,10.6-1.7c2.8-.7,1.4.7.7,1.3s-4.6,4-11.8,4.2c-2.3.1-6-1-6.9-2.2Zm7.5,10c-2.5.8-4.2-.6-4-1.6a5.2,5.2,0,0,1,.6-1.6,16.7,16.7,0,0,0,6.7.7C71.4,192.7,68.8,194.8,66.2,195.6Zm17-30.1c-2.4,2.9-10.4,6.1-19.9,4.3-7.7-1.6-1.9-5.8-1.9-5.8a34,34,0,0,0,9.5,1.3c4.8-.2,8.8-1,11.3-2.3s2.4.8,1,2.4Zm.1-7.5c-5.4,3.2-12.7,3.3-16,2.8-11.5-1.6-6.5-6.2-6.5-6.2a91.8,91.8,0,0,0,9.1,1.9c3,.3,10.4.2,13.7-.9,1.4-.5,1,1.5-.4,2.4Zm7.9-1.1c-1.2.6-4,.6-2.7-1a30,30,0,0,1,3.2-3c.1,1,.2,2.2.4,3.4l-.9.6Zm14.1-35.1a6.7,6.7,0,0,0,2.2-4.1l9.2-.5a26.7,26.7,0,0,0,6.8-1.5s6.9,4.3-1.4,5.6c-4.6.7-13.4.8-17,.8l.2-.3Zm-1.6,4.6c2.5,0,7.3,0,10.8-.2a100.3,100.3,0,0,0,12.1-1.6s7.4,4.3-3.6,6c-4,.6-15.1,1-20,1.1a40.8,40.8,0,0,1,.6-5.3Zm-.9,9.7a137.7,137.7,0,0,0,17.1-.2c3-.2,8.6-1.2,8.6-1.2s8.8,4-3.9,6.2c-4,.7-17.2.2-21.6-.2h-.4c0-1.5.1-3.1.1-4.6Zm-.2,8.6a103.8,103.8,0,0,0,18.5.8c2.9-.3,7.7-1.3,7.7-1.3s11.9,4.1-2.8,7.1c-6.5,1.3-16.9.3-23.5-3.1v-3.5Zm.2,12.2-.8-.6c.2-1.2.3-2.4.4-3.4a30,30,0,0,1,3.2,3c1.3,1.6-1.5,1.6-2.8,1Zm7.6-1.3c3.3,1.1,10.8,1.2,13.8.9a91.8,91.8,0,0,0,9.1-1.9s5,4.6-6.5,6.2c-3.4.5-10.6.3-16-2.9-1.4-.8-1.8-2.8-.4-2.3Zm.5,9.9c-1.4-1.7-1.5-3.8,1-2.5s6.4,2.1,11.2,2.3a34,34,0,0,0,9.5-1.3s5.9,4.3-1.9,5.8c-9.4,1.8-17.5-1.4-19.9-4.4Zm17,30.1c-2.7-.8-5.2-2.9-3.3-2.5a16.7,16.7,0,0,0,6.7-.7,5.2,5.2,0,0,1,.6,1.6c.1,1-1.6,2.4-4.1,1.6Zm7.5-10c-.9,1.2-4.6,2.3-6.9,2.2-7.2-.2-10.6-3.2-11.8-4.2s-2-2,.7-1.3a28.4,28.4,0,0,0,10.5,1.7,36.7,36.7,0,0,0,7.4-1.1s.9,1.7,0,2.7Zm-2-7.1c-7.6,2-15.7-.3-18-2.3s-3.3-3.5-.9-3.2,3.1.7,5.3,1.1a31.5,31.5,0,0,0,7.5.4,29.5,29.5,0,0,0,5-1l2.6-.6s3.6,4.2-1.5,5.6Z"
        />
      </g>
      <g id="xp_thorax_selection" hidden>
        <path
          id="xp_thorax_1"
          index="xp_thorax_1"
          class="region"
          d="M133.3,96.1H60.7a99,99,0,0,0-17.6,6.1c16.1,22.6,5.6,51.1,4,55.1l.4.4c.3,1.8,7,43.2,7,53,0,1.4,0,2.9-.1,4.5h85.2c-.1-1.6-.1-3-.1-4.5,0-9.8,6.7-51.2,7-53l.4-.4c-1.7-4-12.5-32.6,3.8-55.2A99.5,99.5,0,0,0,133.3,96.1Z"
        />
      </g>
      <g id="xp_shoulder_girdle_default" class="bone" disabled>
        <path
          d="M156.7,109.8A37.7,37.7,0,0,0,151,107c-1.3-.5-2.4-.5-3.1.2s-.7,2.1-.4,3.3-3.1,2.2-4.1,2-2.7-2.2-4.4-2.7-4.1.8-5.4.9-2.6-.1-4.6-.2v1c2.5,1.1,6.8,3.5,8,7a4.8,4.8,0,0,1-.9,4.6c1.5,1.5,3.2,3.5,3.3,5.8a6.2,6.2,0,0,1-.9,3.6c1.5,1.3,3,3.2,2.8,5.5a7.2,7.2,0,0,1-2,4.2l1.8,1.4c3.5-7.2,5.5-12.7,4.3-13.8a9.1,9.1,0,0,1-2-4.2,14.1,14.1,0,0,1,2.1-8.7c1.4-2.2,4.8-4.6,11-3.2C158.8,114.1,158.4,110.9,156.7,109.8Z"
        />
        <path
          d="M48.7,129.7c-1.2,1.1.8,6.7,4.2,13.8a13.3,13.3,0,0,1,1.9-1.4,6.2,6.2,0,0,1-2-4.2c-.3-2.3,1.3-4.2,2.8-5.5a6.2,6.2,0,0,1-1-3.5c.1-2.3,1.8-4.4,3.4-5.8a4.7,4.7,0,0,1-.9-4.7c1.1-3.4,5.5-5.8,8-7v-1c-2,.1-3.9.3-4.6.2s-3.7-1.4-5.4-.8-3.3,2.6-4.4,2.7-4.4-.7-4.1-2,.3-2.7-.4-3.4-1.8-.6-3.1-.2a61.9,61.9,0,0,0-5.8,2.8c-1.6,1.1-2.1,4.3.3,3.8,6.2-1.3,9.6,1.1,11,3.3a14,14,0,0,1,2.1,8.7A9.1,9.1,0,0,1,48.7,129.7Z"
        />
      </g>
      <g id="xp_shoulder_girdle_bone" class="bone" hidden>
        <path
          d="M83.2,111.9c1.8,2,6,.4,6.7-2.1s-.2-2.5-1.9-3.2c-15-6-22.8-5.6-35.4-3.5-4.1.7-5.9,1.4-6.1,2.1s.8.9,1.3,2-.2,1.8.2,2.3,4.1-.9,7.7-1.3C64.5,106.9,79,107.2,83.2,111.9Z"
        />
        <path
          d="M110.8,111.9c-1.8,2-6,.4-6.7-2.1s.2-2.5,1.9-3.2c15-6,22.8-5.6,35.4-3.5,4.1.7,5.9,1.4,6.1,2.1s-.8.9-1.3,2,.2,1.8-.2,2.3-4.1-.9-7.7-1.3C129.5,106.9,115,107.2,110.8,111.9Z"
        />
        <path
          d="M156.4,113.6c-6.1-1.4-9.5,1-10.9,3.3a14,14,0,0,0-2.2,8.7,8.8,8.8,0,0,0,2,4.1c1.4,1.3-1.5,8.5-6,17.3-1.9,3.7-8.8,16.7-11.6,15-1.3-.8-6.5-4-9.7-31.6-1.4-12,2.7-19.6,6.1-19.9s8.2.4,9.5.2,3.6-1.4,5.4-.9,3.3,2.7,4.3,2.8,4.5-.7,4.2-2-.3-2.7.4-3.4,1.8-.6,3.1-.2a50.3,50.3,0,0,1,5.7,2.8C158.4,110.9,158.8,114.1,156.4,113.6Z"
        />
        <path
          d="M37.6,113.6c6.1-1.4,9.5,1,10.9,3.3a14,14,0,0,1,2.2,8.7,8.8,8.8,0,0,1-2,4.1c-1.4,1.3,1.5,8.5,6,17.3,1.9,3.7,8.8,16.7,11.6,15s6.5-4,9.7-31.6c1.4-12-2.7-19.6-6.1-19.9s-8.2.4-9.5.2-3.6-1.4-5.4-.9-3.3,2.7-4.3,2.8-4.5-.7-4.2-2,.3-2.7-.4-3.4-1.8-.6-3.1-.2a50.3,50.3,0,0,0-5.7,2.8C35.6,110.9,35.2,114.1,37.6,113.6Z"
        />
      </g>
      <g id="xp_shoulder_girdle_selection" hidden>
        <path
          class="bone"
          disabled
          d="M72.3,205c2.9-2.1,8-5.4,10-7.6a71.7,71.7,0,0,0,4.5-6.3c1.3-1.9,1.9-3.3.8-3.9s-2.7,1.1-3.7,2.1-3.7,4.7-6,6.8-7,5.2-10.4,8-5.9,5.7-5.4,7.4S69.4,207.1,72.3,205Z"
        />
        <path
          class="bone"
          disabled
          d="M121.9,205c-2.9-2.1-8-5.4-10-7.6a71.7,71.7,0,0,1-4.5-6.3c-1.3-1.9-1.9-3.3-.8-3.9s2.7,1.1,3.7,2.1,3.7,4.7,6,6.8,7,5.2,10.4,8,5.9,5.7,5.4,7.4S124.8,207.1,121.9,205Z"
        />
        <path
          class="bone"
          disabled
          d="M86.7,104.1c1.3-.1,2.4-2.8,0-3.3a59.6,59.6,0,0,0-10.3.8,75.1,75.1,0,0,1,9.6,2.5Z"
        />
        <path
          class="bone"
          disabled
          d="M107.3,104.1h.6a67.9,67.9,0,0,1,9.6-2.5,58.9,58.9,0,0,0-10.3-.9C104.8,101.3,106,104,107.3,104.1Z"
        />
        <path
          class="bone"
          disabled
          d="M137.4,161.5s4.1-1.5,3.8-5.3c-.2-1.1-1.7-2.2-2.8-2.9-6.3,11-8.9,11-10.1,11h0a2.3,2.3,0,0,1-1.8-.5,8.6,8.6,0,0,1-2.9-2.8c-3.7,0-8.8-.7-12.8-3.1-1.4-.8-1.8-2.8-.4-2.3s7.4,1.1,10.9,1a37.1,37.1,0,0,1-1.6-4.7c-5.8,0-12.5-1.3-17.2-3.7v-3.5a102.1,102.1,0,0,0,15.6.9,43.8,43.8,0,0,1-.8-4.4c-5.3,0-11.6-.3-14.3-.5h-.4c0-1.5,0-3.1.1-4.6q6.9.3,13.8,0c-.3-1.6-.5-3.2-.7-5l-12.8.6a38.8,38.8,0,0,1,.6-5.3c2.5,0,7.4,0,10.8-.2h1.1a31,31,0,0,1,.2-4.3l-10.7.3.3-.3a6.9,6.9,0,0,0,2.2-4.2c2.6,0,7.1-.3,9-.4a17.4,17.4,0,0,1,1.4-3.8l-11.3.4h-.9a7.1,7.1,0,0,1-2.3-1.9c-.9-1.1-.8-3.2-2-3.6s-2.1.2-4.4.2-3.8-.4-4.5-.2-1.1,2.5-2,3.6a7.1,7.1,0,0,1-2.3,1.9h-.9L76,113.4a17.4,17.4,0,0,1,1.4,3.8c2,.1,6.5.4,9,.4a6.6,6.6,0,0,0,2.3,4.2c0,.1.1.2.2.3l-10.7-.3a31,31,0,0,1,.2,4.3h1.1c3.4.2,8.3.2,10.8.2a38.8,38.8,0,0,1,.6,5.3l-12.8-.6c-.2,1.8-.4,3.4-.6,5,4.5.2,9.1.2,13.7,0,.1,1.5.1,3.1.1,4.6H91c-2.7.2-9,.5-14.3.5-.2,1.6-.5,3-.8,4.4a102.1,102.1,0,0,0,15.6-.9v3.5c-4.7,2.4-11.4,3.7-17.2,3.7a37.1,37.1,0,0,1-1.6,4.7c3.5.1,8.4-.2,10.9-1s1,1.5-.4,2.3c-4,2.4-9.1,3.1-12.8,3.1a9.6,9.6,0,0,1-2.9,2.8,2.4,2.4,0,0,1-1.8.5c-1.2,0-3.8,0-10.1-11-1.1.7-2.7,1.8-2.8,2.9-.3,3.8,3.8,5.3,3.8,5.3s-4,2.2-3.5,5.3c.2,1.5,2.5,3.5,2.5,3.5s-2.8,2.8-2.3,6a6.7,6.7,0,0,0,2.6,4.1s-2.7,2.8-2,6,4.4,3.8,4.4,3.8-1.6,4.1-1.3,6c.9,4.8,6.2,4.2,7.7,4.1a13.1,13.1,0,0,0,7.3-3.7,43.9,43.9,0,0,0,3.2-3.6,36.9,36.9,0,0,0,6.6-3.9,70.1,70.1,0,0,0,5.4-5.5c1.6-1.7,2.3-3,1.3-3.8s-2.8.7-4,1.5l-2.8,2.6,1-1.7c2.3-4.2,5.2-5,6.6-10.4.5-2,.4-6.3,3.6-11,.8,3.5,2.1,6.5,3.7,6.7h.7c1.7-.2,2.9-3.2,3.7-6.7,3.2,4.6,3.1,9,3.6,11,1.4,5.4,4.3,6.1,6.6,10.4l1,1.7-2.8-2.6c-1.2-.8-3-2.3-4-1.5s-.2,2,1.3,3.8a70.1,70.1,0,0,0,5.4,5.5,44,44,0,0,0,6.6,3.9,43.9,43.9,0,0,0,3.2,3.6,13.1,13.1,0,0,0,7.4,3.7c1.5.1,6.7.7,7.6-4.2.3-1.8-1.2-5.7-1.3-5.9s3.7-.6,4.4-3.8-2-6-2-6a6.5,6.5,0,0,0,2.6-4.1c.5-3.3-2.3-6-2.3-6s2.3-2,2.6-3.5C141.4,163.7,137.4,161.5,137.4,161.5ZM59.2,172.9l2.6.6a21,21,0,0,0,5,.9,26.1,26.1,0,0,0,7.4-.3c2.2-.4,3-.8,5.4-1.1s1.3,1.3-.9,3.2-10.5,4.3-18,2.3C55.5,177.1,59.2,172.9,59.2,172.9Zm-.5,12.7c-.9-1,0-2.7,0-2.7a36.7,36.7,0,0,0,7.4,1.1,29.4,29.4,0,0,0,10.6-1.7c2.8-.7,1.4.7.7,1.3s-4.6,4-11.8,4.2C63.3,187.9,59.6,186.8,58.7,185.6Zm7.5,10c-2.5.8-4.2-.6-4-1.6a5.2,5.2,0,0,1,.6-1.6,16.7,16.7,0,0,0,6.7.7C71.4,192.7,68.8,194.8,66.2,195.6Zm17-30.1c-2.4,2.9-10.4,6.1-19.8,4.3-7.8-1.6-1.9-5.8-1.9-5.8a32.8,32.8,0,0,0,9.4,1.3c4.8-.2,8.8-1,11.3-2.3s2.4.8,1,2.4Zm8-8.6c-1.2.6-4,.6-2.7-1a30,30,0,0,1,3.2-3c.1,1,.2,2.2.4,3.4l-.9.6Zm11.7,0-.9-.6c.2-1.2.3-2.4.4-3.4a30,30,0,0,1,3.2,3c1.3,1.6-1.5,1.6-2.8,1Zm8,8.6c-1.4-1.7-1.5-3.8,1-2.5s6.4,2.1,11.2,2.3a34,34,0,0,0,9.5-1.3s5.9,4.3-1.9,5.8c-9.4,1.8-17.5-1.4-19.9-4.4Zm17,30.1c-2.7-.8-5.2-2.9-3.3-2.5a16.7,16.7,0,0,0,6.7-.7,5.2,5.2,0,0,1,.6,1.6c.1,1-1.6,2.4-4.1,1.6Zm7.5-10c-.9,1.2-4.6,2.3-6.9,2.2-7.2-.2-10.6-3.2-11.8-4.2s-2-2,.7-1.3a28.4,28.4,0,0,0,10.5,1.7,36.7,36.7,0,0,0,7.4-1.1s.9,1.7,0,2.7Zm-2-7.1c-7.6,2-15.7-.3-18-2.3s-3.3-3.5-.9-3.2,3.1.7,5.3,1.1a31.5,31.5,0,0,0,7.5.4,29.5,29.5,0,0,0,5-1l2.6-.6s3.6,4.2-1.5,5.6Z"
        />
        <path
          id="xp_shoulder_girdle_2"
          index="xp_shoulder_girdle_2"
          class="region"
          d="M171,141.1c-1.4-12-3.4-21-5.8-26.5H28.8c-2.5,5.5-4.4,14.5-5.8,26.5Z"
        />
        <path
          id="xp_shoulder_girdle_1"
          index="xp_shoulder_girdle_1"
          class="region"
          d="M82.2,90.6c-1,1-4.3,1.7-10.4,3-10.4,2.2-26,5.6-36,12.8a28.6,28.6,0,0,0-4.1,3.6,13.6,13.6,0,0,0-2.4,3.5H164.7a13.6,13.6,0,0,0-2.4-3.5,28.6,28.6,0,0,0-4.1-3.6c-10-7.2-25.6-10.6-36-12.8-6.1-1.3-9.3-2-10.3-3s-1.3-6.5-.8-11.3H82.9C83.5,84.1,83.6,89.2,82.2,90.6Z"
        />
      </g>
      <g id="xp_vertebral_column_default" class="bone" disabled>
        <path
          d="M103.8,96.4c-.8.2-2.1.8-2.1,0s1.1-1.5-.9-1.6H93.2c-2,.1-.9,1.1-.9,1.6s-1.3.2-2.1,0-1.6,1.2,0,1.3,2.7.4,2.6,1.1,2,1.2,4.2,1.2,4.3-.2,4.2-1.2,1-.9,2.6-1.1S104.6,96.2,103.8,96.4Z"
        />
        <path
          d="M104.3,184.8c-.8.3-2.2,1.1-2.2,0s1.1-2-1-2.2H92.8c-2.1.3-.9,1.6-1,2.2s-1.4.3-2.2,0a.9.9,0,1,0,0,1.8c1.7.3,2.9.5,2.8,1.6s2.1,1.6,4.5,1.6,4.6-.3,4.5-1.6,1.2-1.3,2.9-1.6a.8.8,0,0,0,.9-.8A1,1,0,0,0,104.3,184.8Z"
        />
        <path
          d="M103.6,177.1c-.8.2-2,1-2,0s1-1.7-.9-2H93.3c-1.9.2-.8,1.4-.8,2s-1.3.2-2,0a.8.8,0,0,0-.8.8.8.8,0,0,0,.8.9h0c1.5.2,2.6.4,2.5,1.3s1.9,1.5,4,1.5,4.2-.3,4-1.5,1-1.1,2.6-1.3a.8.8,0,0,0,.8-.9A.8.8,0,0,0,103.6,177.1Z"
        />
        <path
          d="M102.8,85.6c-.7.1-1.8.6-1.8,0s.9-1.1-.8-1.3H93.8c-1.7.2-.8.9-.8,1.3s-1.1.1-1.8,0-1.3.9,0,1.1,2.3.2,2.2.8,1.7,1,3.6,1,3.6-.2,3.5-1,.9-.7,2.3-.8S103.4,85.5,102.8,85.6Z"
        />
        <path
          d="M102.8,80.6c-.7.1-1.8.6-1.8,0s.9-1.2-.8-1.3H93.8c-1.7.1-.8.9-.8,1.3s-1.1.1-1.8,0-1.3.9,0,1,2.3.3,2.2.9,1.7,1,3.6,1,3.6-.2,3.5-1,.9-.8,2.3-.9S103.4,80.4,102.8,80.6Z"
        />
        <path
          d="M102.8,90.8c-.7.1-1.8.7-1.8,0s.9-1.3-.8-1.4H93.8c-1.7.1-.8,1-.8,1.4s-1.1.1-1.8,0-1.3,1,0,1.1,2.3.3,2.2,1,1.7,1,3.6,1,3.6-.2,3.5-1,.9-.8,2.3-1S103.4,90.6,102.8,90.8Z"
        />
        <path
          d="M106.3,193.3c-.9.3-3.7,1.2-3.7,0s1.2-2.2-1.1-2.4h-9c-2.3.2-1,1.7-1,2.4s-2.8.3-3.7,0a1,1,0,0,0,0,2c1.8.3,4.4.5,4.3,1.7s2.3,1.8,5,1.8,5-.4,5-1.8,2.5-1.4,4.3-1.7a1,1,0,0,0,1-1.1,1.2,1.2,0,0,0-1.1-.9Z"
        />
        <path
          d="M109.7,233.2c-1.3.4-5,1.7-5.1,0s1.7-2.9-1.4-3.3H90.8c-3.1.4-1.4,2.3-1.4,3.3s-3.8.4-5.1,0a1.3,1.3,0,0,0-1.3,1.4,1.4,1.4,0,0,0,1.3,1.4c2.6.3,6,.6,5.9,2.2s3.2,2.5,6.8,2.5,6.9-.5,6.7-2.5,3.4-1.9,6-2.2a1.4,1.4,0,0,0,1.3-1.4A1.3,1.3,0,0,0,109.7,233.2Z"
        />
        <path
          d="M107.1,212.2c-1,.3-4,1.4-4,0s1.4-2.3-1.1-2.6H92.1c-2.5.3-1.1,1.8-1.1,2.6s-3,.3-4.1,0a1.2,1.2,0,0,0-1.2,1,1.1,1.1,0,0,0,1,1.2h.2c2,.3,4.8.6,4.7,1.8s2.5,2,5.4,2,5.5-.3,5.4-2,2.7-1.5,4.8-1.8a1.1,1.1,0,0,0,1.2-1,1.3,1.3,0,0,0-1.1-1.2Z"
        />
        <path
          d="M108.1,222.2c-1.1.3-4.4,1.5-4.4,0s1.5-2.6-1.3-2.9H91.6c-2.8.3-1.3,2-1.3,2.9s-3.3.4-4.4,0a1.3,1.3,0,0,0-1.3,1.2,1.2,1.2,0,0,0,1.2,1.2h.1c2.2.3,5.3.6,5.2,2s2.7,2.2,5.9,2.2,6-.5,5.9-2.2,3-1.7,5.2-2a1.4,1.4,0,0,0,1.8-.5,1.2,1.2,0,0,0-.3-1.7A3.4,3.4,0,0,0,108.1,222.2Z"
        />
        <path
          d="M107.1,202.5c-1,.3-4,1.4-4,0s1.4-2.3-1.1-2.6H92.1c-2.5.3-1.1,1.8-1.1,2.6s-3,.3-4.1,0a1.2,1.2,0,0,0-1.2,1,1.1,1.1,0,0,0,1,1.2h.2c2,.3,4.8.5,4.7,1.8s2.5,2,5.4,2,5.5-.4,5.4-2,2.7-1.5,4.8-1.8a1.1,1.1,0,0,0,1.2-1,1.3,1.3,0,0,0-1.1-1.2Z"
        />
        <path
          d="M114.7,240.3c-1.7-5.4-5.3-2-8,1.3a16.1,16.1,0,0,1-5,4,10,10,0,0,1-9.2,0,16.1,16.1,0,0,1-5-4c-2.7-3.4-6.4-6.7-8-1.3s-.8,10.6,3,13-.5,5.7,2.7,8.8,1.7,5,4.7,6.3,1.2,5,3,6.2-.1,3.5,1.2,4,1.3,2,3,2,2.2-1.6,3-2,.2-3.3,1.3-4,1-5.4,3-6.2,1.6-3.4,4.7-6.3,0-7,2.7-8.8S116.6,246.6,114.7,240.3Z"
        />
        <path
          d="M101.3,100.9H92.7c-2.2.2-.7,3.7-.4,4.5s2.2,1.3,4.7,1.3,4.4-.3,4.7-1.3S103.5,101.1,101.3,100.9Z"
        />
        <path
          d="M104.4,170.2a.7.7,0,0,0-.8-.5c-.8.2-2,1-2,0s1-1.8-.9-2H93.3c-1.9.2-.8,1.3-.8,2s-1.3.2-2,0a.6.6,0,0,0-.8.5.6.6,0,0,1-.1.4c0,.3.3.6.9.7s2.6.4,2.5,1.4,1.9,1.4,4,1.4,4.2-.3,4-1.4,1-1.2,2.6-1.4a1,1,0,0,0,.9-.7Z"
        />
      </g>
      <g id="xp_vertebral_column_bone" class="bone" hidden>
        <path
          d="M103.8,97.6c-.8.2-2.1.8-2.1,0s1.1-1.4-.9-1.6H93.2c-2,.2-.9,1.1-.9,1.6s-1.3.2-2.1,0-1.6,1.2,0,1.3,2.7.4,2.6,1.2,2,1.2,4.2,1.2,4.3-.3,4.2-1.2,1-1,2.6-1.2S104.6,97.4,103.8,97.6Z"
        />
        <path
          d="M104.3,183.5c-.8.3-2.2,1.1-2.2,0s1.1-2-1-2.2H92.8c-2.1.3-.9,1.6-1,2.2s-1.4.3-2.2,0a.9.9,0,0,0-.9.9.9.9,0,0,0,.9,1c1.7.2,2.9.4,2.8,1.5s2.1,1.6,4.5,1.6,4.6-.3,4.5-1.6,1.2-1.3,2.9-1.5a.9.9,0,0,0,.9-.9A1.1,1.1,0,0,0,104.3,183.5Z"
        />
        <path
          d="M103,146c-.7.2-1.8.9-1.8,0s.9-1.6-.8-1.8H93.9c-1.7.2-.8,1.3-.8,1.8s-1.2.2-1.8,0a.8.8,0,0,0-.8.7.9.9,0,0,0,.8.8c1.3.1,2.3.3,2.2,1.2s1.7,1.3,3.6,1.3,3.7-.3,3.6-1.3,1-1,2.3-1.2a.8.8,0,0,0,.7-.8A.7.7,0,0,0,103,146Z"
        />
        <path
          d="M102.9,153c-.7.2-1.8.9-1.8,0s.9-1.6-.8-1.8H93.7c-1.7.2-.7,1.3-.7,1.8s-1.2.2-1.8,0a.8.8,0,0,0-.8.7.9.9,0,0,0,.8.8c1.3.2,2.3.3,2.2,1.2S95.1,157,97,157s3.7-.3,3.6-1.3,1-1,2.3-1.2a.8.8,0,0,0,.7-.8A.7.7,0,0,0,102.9,153Z"
        />
        <path
          d="M103.2,160.2c-.7.2-1.9,1-1.9,0s1-1.7-.8-1.8h-7c-1.8.1-.8,1.2-.8,1.8s-1.2.2-1.9,0a.8.8,0,0,0-.9.7c-.1.4.3.8.7.9h.2c1.4.2,2.4.3,2.4,1.3s1.7,1.3,3.8,1.3,3.9-.2,3.8-1.3,1-1.2,2.4-1.3a.8.8,0,0,0,.9-.8A.8.8,0,0,0,103.2,160.2Z"
        />
        <path
          d="M103.2,119.2c-.7.2-1.9,1-1.9,0s1-1.6-.8-1.8h-7c-1.8.2-.8,1.3-.8,1.8s-1.2.3-1.9,0a.8.8,0,0,0-.9.7.7.7,0,0,0,.7.9h.2c1.4.2,2.4.4,2.4,1.3s1.7,1.4,3.8,1.4,3.9-.3,3.8-1.4,1-1.1,2.4-1.3a.9.9,0,0,0,1.1-.5.9.9,0,0,0-.5-1Z"
        />
        <path
          d="M103.6,175.5c-.8.2-2,1-2,0s1-1.7-.9-2H93.3c-1.9.2-.8,1.4-.8,2s-1.3.3-2,0a.8.8,0,0,0-.8.8.8.8,0,0,0,.8.9h0c1.5.2,2.6.4,2.5,1.3s1.9,1.5,4,1.5,4.2-.3,4-1.5,1-1.1,2.6-1.3a.9.9,0,0,0,1-.8A.9.9,0,0,0,103.6,175.5Z"
        />
        <path
          d="M103.6,111.6c-.8.2-2,1-2,0s1-1.8-.9-2H93.3c-1.9.2-.8,1.4-.8,2s-1.3.2-2,0a.8.8,0,0,0,0,1.6h0c1.5.2,2.6.4,2.5,1.4s1.9,1.5,4,1.5,4.2-.3,4-1.5,1-1.2,2.6-1.4a.8.8,0,0,0,.9-.8A.8.8,0,0,0,103.6,111.6Z"
        />
        <path
          d="M103.6,104.2c-.8.2-2,1-2,0s1-1.8-.9-2H93.3c-1.9.2-.8,1.3-.8,2s-1.3.2-2,0a.8.8,0,0,0,0,1.6h0c1.5.2,2.6.4,2.5,1.4s1.9,1.5,4,1.5,4.2-.3,4-1.5,1-1.2,2.6-1.4a.8.8,0,0,0,0-1.6Z"
        />
        <path
          d="M103.6,167.7c-.8.3-2,1-2,0s1-1.7-.9-2H93.3c-1.9.3-.8,1.4-.8,2s-1.3.3-2,0a.8.8,0,0,0-.8.9.8.8,0,0,0,.8.8h0c1.5.2,2.6.4,2.5,1.4s1.9,1.4,4,1.4,4.2-.3,4-1.4,1-1.2,2.6-1.4a.9.9,0,0,0,1-.8A.9.9,0,0,0,103.6,167.7Z"
        />
        <path
          d="M102.3,139.3c-.6.2-1.6.8-1.7,0s.9-1.4-.7-1.6h-6c-1.5.2-.6,1.1-.6,1.6s-1,.2-1.7,0a.7.7,0,0,0-.7.6.6.6,0,0,0,.6.7h.1c1.2.2,2.1.4,2.1,1.1s1.5,1.2,3.2,1.2,3.3-.2,3.2-1.2.9-.9,2-1.1.8-.1.8-.5a.7.7,0,0,0-.5-.8Z"
        />
        <path
          d="M102.3,132.9c-.6.1-1.6.7-1.7,0s.9-1.5-.7-1.6h-6c-1.5.1-.6,1.1-.6,1.6s-1,.1-1.7,0a.6.6,0,0,0-.7.5c-.1.4.2.7.6.8h.1c1.2.1,2.1.3,2.1,1s1.5,1.2,3.2,1.2,3.3-.2,3.2-1.2.9-.9,2-1,.8-.2.8-.6a.6.6,0,0,0-.5-.7Z"
        />
        <path
          d="M102.3,126.4c-.6.1-1.6.8-1.7,0s.9-1.5-.7-1.6h-6c-1.5.1-.6,1.1-.6,1.6s-1,.1-1.7,0a.6.6,0,0,0-.6.6.7.7,0,0,0,.6.7c1.2.2,2.1.3,2.1,1.1s1.5,1.2,3.2,1.2,3.3-.3,3.2-1.2.9-.9,2-1.1a.8.8,0,0,0,.8-.6.7.7,0,0,0-.6-.7Z"
        />
        <path
          d="M102.8,86c-.7.1-1.8.6-1.8,0s.9-1.1-.8-1.3H93.8c-1.7.2-.8.9-.8,1.3s-1.1.1-1.8,0-1.3.9,0,1.1,2.3.2,2.2.8,1.7,1,3.6,1,3.6-.2,3.5-1,.9-.7,2.3-.8S103.4,85.9,102.8,86Z"
        />
        <path
          d="M102.8,80.6c-.7.1-1.8.6-1.8,0s.9-1.2-.8-1.3H93.8c-1.7.1-.8.9-.8,1.3s-1.1.1-1.8,0-1.3.9,0,1,2.3.3,2.2.9,1.7,1,3.6,1,3.6-.2,3.5-1,.9-.8,2.3-.9S103.4,80.4,102.8,80.6Z"
        />
        <path
          d="M102.8,91.6c-.7.1-1.8.7-1.8,0s.9-1.3-.8-1.4H93.8c-1.7.1-.8,1-.8,1.4s-1.1.1-1.8,0-1.3,1,0,1.1,2.3.3,2.2,1,1.7,1,3.6,1,3.6-.2,3.5-1,.9-.8,2.3-1S103.4,91.4,102.8,91.6Z"
        />
        <path
          d="M106.3,192.3c-.9.2-3.7,1.2-3.7,0s1.2-2.2-1.1-2.4h-9c-2.3.2-1,1.6-1,2.4s-2.8.3-3.7,0a.9.9,0,0,0-1,1,1,1,0,0,0,1,1c1.8.2,4.4.5,4.3,1.6s2.3,1.9,5,1.9,5-.4,5-1.9,2.5-1.4,4.3-1.6a1.1,1.1,0,0,0,1-1.1C107.3,192.7,106.8,192.2,106.3,192.3Z"
        />
        <path
          d="M109.7,233.2c-1.3.4-5,1.7-5.1,0s1.7-2.9-1.4-3.3H90.8c-3.1.4-1.4,2.3-1.4,3.3s-3.8.4-5.1,0a1.3,1.3,0,0,0-1.3,1.4,1.4,1.4,0,0,0,1.3,1.4c2.6.3,6,.6,5.9,2.2s3.2,2.5,6.8,2.5,6.9-.5,6.7-2.5,3.4-1.9,6-2.2a1.4,1.4,0,0,0,1.3-1.4A1.3,1.3,0,0,0,109.7,233.2Z"
        />
        <path
          d="M107.1,211.7c-1,.3-4,1.4-4,0s1.4-2.3-1.1-2.6H92.1c-2.5.3-1.1,1.8-1.1,2.6s-3,.3-4.1,0a1.2,1.2,0,0,0-1.2,1,1.1,1.1,0,0,0,1,1.2h.2c2,.3,4.8.5,4.7,1.8s2.5,2,5.4,2,5.5-.4,5.4-2,2.7-1.5,4.8-1.8a1.1,1.1,0,0,0,1.2-1,1.3,1.3,0,0,0-1.1-1.2Z"
        />
        <path
          d="M108.1,222c-1.1.3-4.4,1.5-4.4,0s1.5-2.6-1.3-2.9H91.6c-2.8.3-1.3,2-1.3,2.9s-3.3.3-4.4,0a1.2,1.2,0,0,0-1.4,1.1,1.3,1.3,0,0,0,1.1,1.3h.3c2.2.3,5.3.6,5.2,2s2.7,2.2,5.9,2.2,6-.4,5.9-2.2,3-1.7,5.2-2,1.8-.2,1.8-1.2a1.7,1.7,0,0,0-1.8-1.7Z"
        />
        <path
          d="M107.1,201.8c-1,.2-4,1.3-4,0s1.4-2.4-1.1-2.7H92.1c-2.5.3-1.1,1.8-1.1,2.7s-3,.2-4.1,0a1,1,0,0,0-1.2.9,1.1,1.1,0,0,0,1,1.2h.2c2,.3,4.8.6,4.7,1.9s2.5,2,5.4,2,5.5-.4,5.4-2,2.7-1.6,4.8-1.9a1.1,1.1,0,0,0,1.2-1,1.3,1.3,0,0,0-1.1-1.2Z"
        />
        <path
          d="M114.7,239.2c-1.7-5.4-5.3-2-8,1.3a16.1,16.1,0,0,1-5,4,10,10,0,0,1-9.2,0,16.1,16.1,0,0,1-5-4c-2.7-3.4-6.4-6.7-8-1.3s-.8,10.6,3,13S82,258,85.2,261s1.7,5,4.7,6.3,1.2,5,3,6.2,0,3.5,1.3,4.1,1.3,2,3,2,2.2-1.7,3-2,.2-3.4,1.2-4.1,1-5.4,3-6.2,1.6-3.4,4.7-6.3,0-7,2.7-8.8S116.6,245.5,114.7,239.2Z"
        />
      </g>
      <g id="xp_vertebral_column_selection" hidden>
        <path
          class="bone"
          disabled
          d="M86.2,104.1h.7c1.3-.1,2.4-2.7,0-3.3a70.4,70.4,0,0,0-10.3.8A96.3,96.3,0,0,1,86.2,104.1Z"
        />
        <path
          class="bone"
          disabled
          d="M108.1,104.1h-.7c-1.3-.1-2.4-2.7,0-3.3a70.4,70.4,0,0,1,10.3.8A96.3,96.3,0,0,0,108.1,104.1Z"
        />
        <path
          class="bone"
          disabled
          d="M147.5,105.2c-.2-.7-2-1.4-6.1-2.1-12.6-2.1-20.4-2.5-35.4,3.5l-.5.3a2.1,2.1,0,0,1,.4.6c.8,1.5,1.8,3.4,2.6,5.3a3.3,3.3,0,0,0,2.3-.9c4.2-4.8,18.7-5,27.6-3.8,3.5.5,7.1,2,7.6,1.4s-.2-1.5.2-2.3S147.8,106,147.5,105.2Z"
        />
        <path
          class="bone"
          disabled
          d="M85.6,112.8c.8-1.9,1.8-3.8,2.5-5.3l.5-.6-.6-.3c-15-6-22.8-5.6-35.4-3.5-4,.7-5.8,1.4-6.1,2.1s.8.9,1.4,2-.3,1.8.2,2.3,4.1-.9,7.6-1.4c8.9-1.2,23.3-1,27.6,3.8A2.8,2.8,0,0,0,85.6,112.8Z"
        />
        <path
          class="bone"
          disabled
          d="M141.3,156.2c-.2-1.8-3.8-3.4-3.8-3.4s4.5-1.7,4.4-4.2-7-6.5-7-6.5,4-.9,4.4-4.4-4.3-5-4.3-5a3.8,3.8,0,0,0,2.4-3.8c-.2-2.8-4.7-5.9-4.7-5.9s3.2-1.3,2.3-3.8-8.5-6.4-8.5-6.4a5.9,5.9,0,0,0,.4-3,40.7,40.7,0,0,0-5.2.4c0,1.3-.4,2.9-3.2,3.2l-9.6.4a12.3,12.3,0,0,1,.8,3.8l7.2-.4a26.7,26.7,0,0,0,6.8-1.5s6.9,4.4-1.4,5.6a132.9,132.9,0,0,1-14,.8,41.4,41.4,0,0,0-2,4.3h8.3a121.5,121.5,0,0,0,12.1-1.7s7.4,4.3-3.5,6c-3.6.5-12.6.9-18,1a15,15,0,0,0-.2,2.2v2.4c4.6.2,12.6-.1,15-.3s8.6-1.2,8.6-1.2,8.8,4-3.8,6.2c-3.5.6-14.3.3-19.8,0V145a97.5,97.5,0,0,0,16.2.5c2.9-.3,7.7-1.3,7.7-1.3s11.9,4.1-2.8,7.1a40.6,40.6,0,0,1-21-2v6l.6.6c.7.9.2,1.2-.6,1.3.1,5.6.2,11.5.4,16.6s4,4.8,5.9,8.4l1.2,2-3.1-2.8c-1.2-.9-3-2.3-4-1.5s-.2,2,1.3,3.7a71.4,71.4,0,0,0,5.4,5.6,57.7,57.7,0,0,0,6.8,4l3.1,3.4a13.1,13.1,0,0,0,7.4,3.7c1.5.1,6.7.8,7.6-4.1.3-1.8-1.2-5.8-1.3-6s3.7-.5,4.4-3.7-2-6-2-6a6.7,6.7,0,0,0,2.6-4.2c.5-3.3-2.3-6-2.3-6s2.3-2,2.6-3.5-3.6-5.3-3.6-5.3S141.7,160,141.3,156.2Zm-30.7-.6c3.3,1.1,10.7,1.2,13.7.9a91.8,91.8,0,0,0,9.1-1.9s5,4.6-6.5,6.2c-3.3.5-10.6.3-16-2.9-1.3-.8-1.7-2.8-.3-2.3Zm.4,9.8c-1.4-1.6-1.5-3.7,1-2.4s6.5,2.1,11.2,2.3a33.5,33.5,0,0,0,9.5-1.3s5.9,4.2-1.9,5.8C121.4,171.6,113.4,168.4,111,165.4Zm16.9,30.2c-2.6-.8-5.1-2.9-3.2-2.5a17.1,17.1,0,0,0,6.7-.7,4.4,4.4,0,0,1,.6,1.6c.2,1-1.5,2.4-4.1,1.6Zm7.6-10c-.9,1.1-4.6,2.3-6.9,2.2-7.2-.2-10.6-3.2-11.9-4.3s-2-2,.8-1.2A28.8,28.8,0,0,0,128,184a36.7,36.7,0,0,0,7.4-1.1s1,1.7.1,2.7Zm-2-7.1c-7.7,2-15.7-.3-18-2.3s-3.3-3.5-1-3.2,3.2.7,5.4,1.1a26.4,26.4,0,0,0,7.4.3,21,21,0,0,0,5-.9l2.7-.6s3.6,4.2-1.5,5.6Z"
        />
        <path
          class="bone"
          disabled
          d="M69.6,140.9c-12.7-2.2-3.9-6.2-3.9-6.2s5.7,1,8.6,1.2,10.1.5,14.7.3v-2.4a13.4,13.4,0,0,0-.1-2.1c-5.5-.2-14.2-.6-17.7-1.1-11-1.7-3.6-6-3.6-6,4,.8,8.1,1.3,12.2,1.7h8a41.4,41.4,0,0,0-2-4.3,124.4,124.4,0,0,1-13.7-.8c-8.4-1.2-1.5-5.6-1.5-5.6a26.5,26.5,0,0,0,6.9,1.5l6.9.4a12.3,12.3,0,0,1,.8-3.8l-9.4-.3c-2.8-.4-3.2-1.9-3.2-3.3a41.2,41.2,0,0,0-5.1-.3,7.7,7.7,0,0,0,.3,3s-7.2,2.5-8.5,6.3,2.4,3.8,2.4,3.8-4.6,3.1-4.7,6a3.7,3.7,0,0,0,2.4,3.7s-4.5,2.3-4.2,5.1,4.3,4.4,4.3,4.4-7,3-7,6.5,4.5,4.1,4.5,4.1-3.7,1.7-3.9,3.5c-.3,3.8,3.8,5.3,3.8,5.3s-4,2.2-3.6,5.2,2.6,3.6,2.6,3.6-2.8,2.7-2.3,6a6.5,6.5,0,0,0,2.6,4.1s-2.8,2.8-2,6,4.4,3.8,4.4,3.8-1.6,4.1-1.3,5.9c.9,4.9,6.1,4.3,7.6,4.2a13.1,13.1,0,0,0,7.4-3.7,47.7,47.7,0,0,0,3.2-3.7,35.6,35.6,0,0,0,6.5-3.8,54.9,54.9,0,0,0,5.3-5.5c1.6-1.8,2.4-3,1.4-3.8s-2.8.7-4,1.5l-2.6,2.4.9-1.5c1.8-3.5,4.1-4.6,5.6-7.8.2-5.3.3-11.4.4-17.2-.6-.2-.9-.6-.3-1.3l.3-.3c0-2.2,0-4.2.1-6.2a42.1,42.1,0,0,1-20.8,1.9c-14.7-3-2.8-7.1-2.8-7.1s4.7,1,7.7,1.3A103.9,103.9,0,0,0,89,145v-4.1C83.5,141.2,73,141.5,69.6,140.9Zm-10.3,32,2.6.6a21.9,21.9,0,0,0,5,.9,27,27,0,0,0,7.5-.3c2.2-.4,3-.8,5.3-1.1s1.3,1.3-.9,3.2-10.4,4.2-18,2.3c-5.1-1.4-1.5-5.6-1.5-5.6Zm-.5,12.7c-.8-1,.1-2.7.1-2.7a36.7,36.7,0,0,0,7.4,1.1,28.8,28.8,0,0,0,10.5-1.7c2.9-.7,1.5.7.8,1.3s-4.7,4-11.9,4.2c-2.3.1-5.9-1-6.9-2.2Zm7.6,10c-2.6.8-4.3-.6-4.1-1.6a5.2,5.2,0,0,1,.6-1.6,17.1,17.1,0,0,0,6.7.7c1.9-.4-.6,1.7-3.2,2.5Zm17-30.2c-2.4,2.9-10.5,6.2-19.9,4.4-7.7-1.6-1.9-5.9-1.9-5.9a30.6,30.6,0,0,0,9.4,1.4c4.8-.2,8.8-1,11.3-2.3s2.4.8,1,2.4ZM60.9,154.6a73.2,73.2,0,0,0,9.1,1.8c3,.4,10.5.3,13.8-.8,1.4-.5,1,1.5-.3,2.3-5.5,3.2-12.7,3.4-16,2.9-11.6-1.6-6.6-6.2-6.6-6.2Z"
        />
        <rect
          id="xp_vertebral-column_4"
          index="xp_vertebral-column_4"
          class="region"
          x="77"
          y="242.3"
          width="40.1"
          height="39.09"
        />
        <rect
          id="xp_vertebral-column_3"
          index="xp_vertebral-column_3"
          class="region"
          x="77"
          y="189.7"
          width="40.1"
          height="51.52"
        />
        <rect
          id="xp_vertebral-column_2"
          index="xp_vertebral-column_2"
          class="region"
          x="77"
          y="102.4"
          width="40.1"
          height="86.21"
        />
        <path
          id="xp_vertebral-column_1"
          index="xp_vertebral-column_1"
          class="region"
          d="M117,92.5c-2.8-.7-4.5-1.3-5.1-1.9s-1.4-6.5-.8-11.2H82.9c.6,4.7.8,9.8-.7,11.2s-2.3,1.2-5.2,1.9v8.8h40Z"
        />
      </g>
      <g id="xp_lower_extremities_bone" class="bone" disabled>
        <path
          d="M87.9,571c-1.1-.4-2.7-.5-3.4.4a1.1,1.1,0,0,0-.2.8c0,.6.7.8.8,1.4s-.6,1.2-.7,1.8,1.7,1.6,2.5,1.2.5-1,.7-1.6.7-.6,1-1.1a2.1,2.1,0,0,0-.5-2.8Z"
        />
        <path
          d="M79.9,548.2c-.7.4-.4,1.1-.5,1.9a31,31,0,0,1-1.1,5.1l-.3.8a1.3,1.3,0,0,0,.5,1.7.8.8,0,0,0,.7.2,2.3,2.3,0,0,0,1.1-.3c.6-.4.6-.7.5-1.4-.4-3.2,1.4-6.7,1-7.4a1.2,1.2,0,0,0-1.7-.7Z"
        />
        <path
          d="M71.7,564.2c0-.1-.3-.2-.3-.1s.1,1.5-.4,2.4a16.2,16.2,0,0,1-1,1.8c-.2.3-.4.4-.5.8s.1.8,0,1.2-.3.7-.1,1a.5.5,0,0,0,.8,0c.5-.6.1-1.4,1-1.6a4.8,4.8,0,0,0,0-1.2,7.3,7.3,0,0,1,.5-.9c.3-.6.4-1.3,1-1.5s.7,0,1-.4.1-.6-.2-.9l-.8-.2c-.5,0-.8.1-.9-.2S71.8,564.3,71.7,564.2Z"
        />
        <path
          d="M69.5,563.2c-.4-.6-.7,0-1.3-.3v-.2l-.4-.3c-.9.3.2,1.4-.3,2.1l-1,1.7c-.2.3-.5.3-.5.7a4,4,0,0,0,0,1.1c0,.3-.3.5-.1.9s.4.2.6,0,.2-1.3,1-1.4,0-.8.1-1.1a2.2,2.2,0,0,1,.5-.8c.3-.5.4-1.1,1-1.3s.4.1.5-.3A.8.8,0,0,0,69.5,563.2Z"
        />
        <path
          d="M66.1,562.8c-.4.1-.5.5-.7.8l-.3.6c-.1.2,0,.4-.1.7s-.4.6-.8,1-.3.2-.4,0a.7.7,0,0,1,.1-.6c.1-.2,0-.5,0-.8s.2-.2.4-.4l.6-1.1c.4-.5-.3-1.2.3-1.4h.2c0,.1.1.2.1.3s.7-.1,1,.3S66.9,562.6,66.1,562.8Z"
        />
        <path
          d="M75.4,571.6a7.5,7.5,0,0,0,.1-2.6,1,1,0,0,1,.5-.8,1.7,1.7,0,0,1,1.2-.4,1.8,1.8,0,0,1,.9.4.9.9,0,0,1,.3,1l-.3.8c-.4,1.2-.6,2.4-1,3.6s-1.7,1.2-2.2.2A2.5,2.5,0,0,1,75.4,571.6Z"
        />
        <path
          d="M86,536.2c1.6.2,3.3,1.1,3.5,2.7a6.1,6.1,0,0,0,2.3,3.7,3.6,3.6,0,0,1,1.2,2.8c.1,1.8.1,5.3-1.7,5.2a3.5,3.5,0,0,1-2.7-1.7c-1-1-2.7-1.3-4.9-1.1s-3.2-1.4-5.1-1.2-2.4,1-3.7,1.4-1.9-1.1-.9-2a24.9,24.9,0,0,1,3-1.9c2.8-1.6,2-4.6,2.4-5.8S84.1,536.1,86,536.2Z"
        />
        <path
          d="M89.3,563.7c.7,1.1,1.5,2.8.1,2.8a7.7,7.7,0,0,0-2.2-2.2c-.9-.4-2,.5-3,1.6s-.3-.1-.4-.3.3-2.8.4-3.9-.5-2.6-1-4,.1-2.1.1-2.1,1.9-2,3.7-1.6a1.9,1.9,0,0,1,1.1.7,3.5,3.5,0,0,1,1,2.2,10.1,10.1,0,0,1-.2,3A4.6,4.6,0,0,0,89.3,563.7Z"
        />
        <path
          d="M83.1,554.3c0,.1.1.1.2.1h0a4.6,4.6,0,0,1,2.7-1.5c1.3-.2,3.2,1.3,3.5,1.7s.5-.5.4-.9-1.2-3.5-2.3-4.1a5,5,0,0,0-3.8-.2,2.7,2.7,0,0,0-1.3,1.3,2.8,2.8,0,0,0-.2,2A5.3,5.3,0,0,0,83.1,554.3Z"
        />
        <path
          d="M75,556.2c-.3-.2,2-7.9,2-7.9l.5-.3c1.5-.4,1.2.1,1.2.1-1.3,2.5-1.5,7.4-1.8,7.9S76.4,557.1,75,556.2Z"
        />
        <path
          d="M71.9,552.3l1-2.4H73c.1,0,.7-.3.6.1s-.9,2.5-.9,2.5a18.7,18.7,0,0,0-.7,1.8c-.1.1-.6.2-.7,0S71.7,552.8,71.9,552.3Z"
        />
        <path
          d="M75.6,549.6c-.1.3-1.8,5.8-1.8,6s-.6,0-.8-.3.2-1.4.4-2.1V553s1-3.1,1-3.3S75.8,549.2,75.6,549.6Z"
        />
        <path
          d="M77.5,564.5l-.9.2c-.1.1-.2,0-.3-.1h0c-.3-1.1.9-2,1-3.2s-.4-2.8,1.3-2.4h1.3c.3.2.6.3.5.7l-.4,5.2s-.1.4-.8.1l-.5-.3Z"
        />
        <path
          d="M72.4,562.6a6.1,6.1,0,0,1,.5-1.2,5.4,5.4,0,0,1,.5-1.1,5,5,0,0,0,.8-1.2c.2-.4,0-1.2.5-1.3a1.7,1.7,0,0,1,1.4.2c.1.3-.2.8-.4,1.3l-1.5,2.9c-.4,1-.3,1.4-.7,1.4l-.8-.4A.9.9,0,0,1,72.4,562.6Z"
        />
        <path
          d="M75.8,566.2s-.5.4-.4.6a.4.4,0,0,0,.4.3,2.7,2.7,0,0,1,1.5-.3,3.5,3.5,0,0,1,1.6.8c.3.2.5-.3.5-.8a1,1,0,0,0-.6-1l-.7-.2a4.4,4.4,0,0,0-2.3.6"
        />
        <path
          d="M73.1,557.3a8.9,8.9,0,0,1-1.6,2.2,4.7,4.7,0,0,0-.7,1.2,3.7,3.7,0,0,1-.6,1.4c-.3,0-1.5-.2-1.5-.4s3.1-5,3.4-5.3S73.3,556.6,73.1,557.3Z"
        />
        <path d="M67.4,561.2c-.2,0-1.5-.2-1.6-.5s1.5-2.1,2.5-2.9,1.1-2,2.1-2.5,1.2.1.9.6l-3.5,5Z" />
        <path
          d="M87.8,569.8h.3s1.6-.5,1.2-1.6-2-2.8-2.5-2.7-.7-.1-1.9,1.3a4.7,4.7,0,0,0-.6,1.5,1,1,0,0,0,.5,1H86a4.1,4.1,0,0,1,1.5.7Z"
        />
        <path
          d="M137.5,275.4c-2.9.1-2.1,2.7-3.6,2s-.2-2.6.3-3.9.1-3.9-1.8-4.6-6.2,1.8-7.4,4.1a15.8,15.8,0,0,0-1.6,8c.4,2.7,3.4,1.6,5.6,2.2s2.4,5.4,1.2,8.3-1.9,3.9-.9,7.4-3,27.2-5.8,46.9c-2,13.4-5.9,34.6-9,47.3-1.4,5.4-4.7,15.1-6,16.7-3.8,4.2-4.7,8.3-3,14.3,1,4,3.5,4.9,5.4,4.5s1.5-2.1,1.1-3.1-1.8-4.2-1.3-7.3a7.2,7.2,0,0,1,8.3-5.7,7,7,0,0,1,3.3,1.7c2.2,1.9,3,5.4,2.2,8.6s-1.4,2.9-1,4.2,2.9,1.1,5.2-.9c.7-.7,2-2.1,1-8.7s-4-6.2-4.5-12.1,5.9-46.8,7.2-54.7,6.4-45.1,6.6-46.7c.4-3.6,4-7.7,5.1-13C146.9,277.6,140.4,275.3,137.5,275.4Z"
        />
        <path
          d="M106.1,571c1.1-.4,2.7-.5,3.4.4a1.1,1.1,0,0,1,.2.8c0,.6-.7.8-.8,1.4s.6,1.2.8,1.8-1.8,1.6-2.6,1.2-.4-1-.7-1.6-.6-.6-1-1.1a2.1,2.1,0,0,1,.5-2.8Z"
        />
        <path
          d="M114.1,548.2c.7.4.4,1.1.5,1.9a31,31,0,0,0,1.1,5.1l.3.8a1.2,1.2,0,0,1-.5,1.7.8.8,0,0,1-.7.2,2.3,2.3,0,0,1-1.1-.3,1.2,1.2,0,0,1-.5-1.4c.4-3.2-1.4-6.7-1-7.4a1.4,1.4,0,0,1,1.8-.7Z"
        />
        <path
          d="M122.3,564.2c.1-.1.3-.2.3-.1s-.1,1.5.4,2.4a16.2,16.2,0,0,0,1,1.8c.2.3.5.4.5.8a4.8,4.8,0,0,1,0,1.2c.1.4.3.7.1,1s-.5.2-.7,0-.1-1.4-1-1.6,0-.8-.1-1.2a2.6,2.6,0,0,0-.5-.9c-.3-.6-.4-1.3-1-1.5s-.7,0-.9-.4-.1-.6.2-.9l.7-.2c.5,0,.8.1.9-.2S122.2,564.3,122.3,564.2Z"
        />
        <path
          d="M124.5,563.2c.4-.6.7,0,1.3-.3v-.2l.4-.3c.9.3-.1,1.4.3,2.1l1,1.7c.2.3.4.3.5.7a4,4,0,0,1,0,1.1c0,.3.3.5.1.9s-.4.2-.6,0-.2-1.3-1-1.4,0-.8-.1-1.1a5.6,5.6,0,0,0-.5-.8c-.3-.5-.4-1.1-1-1.3s-.4.1-.5-.3A.8.8,0,0,1,124.5,563.2Z"
        />
        <path
          d="M127.9,562.8c.4.1.5.5.7.8l.3.6c.1.2,0,.4.1.7s.4.6.8,1,.3.2.4,0a.7.7,0,0,0-.1-.6c-.1-.2,0-.5,0-.8s-.3-.2-.4-.4L129,563c-.3-.5.4-1.2-.2-1.4h-.3a.4.4,0,0,1-.1.3c-.3.2-.7-.1-1,.3S127.1,562.6,127.9,562.8Z"
        />
        <path
          d="M118.6,571.6a7.5,7.5,0,0,1-.1-2.6,1,1,0,0,0-.5-.8,1.7,1.7,0,0,0-1.2-.4,1.2,1.2,0,0,0-.8.4.8.8,0,0,0-.4,1l.3.8c.5,1.2.6,2.4,1,3.6s1.7,1.2,2.2.2A2.5,2.5,0,0,0,118.6,571.6Z"
        />
        <path
          d="M108,536.2c-1.6.2-3.3,1.1-3.5,2.7a6.1,6.1,0,0,1-2.3,3.7,3.3,3.3,0,0,0-1.2,2.8c0,1.8-.1,5.3,1.7,5.2a3.7,3.7,0,0,0,2.7-1.7c.9-1,2.7-1.3,4.9-1.1s3.1-1.4,5-1.2,2.4,1,3.8,1.4,1.8-1.1.8-2l-2.9-2c-2.8-1.5-2-4.6-2.4-5.7S109.9,536.1,108,536.2Z"
        />
        <path
          d="M128.6,430.8c.4-1.3-.4-2.5-1.1-2.2-2.6,1-3.3,1.1-5,.3s-2.9,1.2-4.9,1.3-3-2-4.2-1.2-4.1,1.7-6,.8a.9.9,0,0,0-1.1.1,2,2,0,0,0-1.2,1.6c-.1.9.3,2.2,1.8,4.7,6.4,10.9,3.5,31,2.5,45.4-3,39.5-6.4,39.6-7.3,52.2-.1,1,.6,2.5,1.4,2.6s3-1.2,5.3-1.3a28.5,28.5,0,0,1,6.5,1.1c2,.8.4-3.6,0-7.3-1.2-9,3.6-48.9,4.4-55.2s2.6-26.1,3.4-30S127.5,434.8,128.6,430.8Z"
        />
        <path
          d="M104.7,563.7c-.7,1.1-1.5,2.8-.1,2.8a7.7,7.7,0,0,1,2.2-2.2c.9-.4,2,.5,3,1.6s.3-.1.4-.3-.3-2.8-.4-3.9.5-2.6.9-4-.1-2.1-.1-2.1-1.8-2-3.6-1.6a1.9,1.9,0,0,0-1.1.7,3,3,0,0,0-1,2.2,10.1,10.1,0,0,0,.2,3C105.4,561.4,105.6,562.4,104.7,563.7Z"
        />
        <path
          d="M111,554.3h-.3a4.6,4.6,0,0,0-2.7-1.5c-1.3-.2-3.2,1.3-3.5,1.7s-.5-.5-.4-.9,1.2-3.5,2.4-4.1a4.7,4.7,0,0,1,3.7-.2,2.7,2.7,0,0,1,1.3,1.3,2.8,2.8,0,0,1,.2,2A5.1,5.1,0,0,1,111,554.3Z"
        />
        <path
          d="M119,556.2c.3-.2-2-7.9-2-7.9l-.5-.3c-1.5-.4-1.2.1-1.2.1,1.3,2.5,1.5,7.4,1.8,7.9S117.6,557.1,119,556.2Z"
        />
        <path
          d="M122.1,552.3l-1-2.4H121c-.1,0-.7-.3-.6.1s.9,2.5.9,2.5l.7,1.8c.1.1.6.2.7,0S122.3,552.8,122.1,552.3Z"
        />
        <path
          d="M118.4,549.6c.1.3,1.8,5.8,1.8,6s.6,0,.8-.3-.2-1.4-.4-2.1V553s-.9-3.1-1-3.3S118.2,549.2,118.4,549.6Z"
        />
        <path
          d="M116.5,564.5l.9.2a.2.2,0,0,0,.3-.1h0c.3-1.1-.9-2-1-3.2s.4-2.8-1.3-2.4h-1.3c-.3.2-.5.3-.5.7l.4,5.2s.1.4.8.1l.5-.3Z"
        />
        <path
          d="M121.6,562.6a6.1,6.1,0,0,0-.5-1.2,5.4,5.4,0,0,0-.5-1.1,4.7,4.7,0,0,1-.7-1.2c-.2-.4-.1-1.2-.6-1.3a1.7,1.7,0,0,0-1.4.2c-.1.3.2.8.4,1.3l1.5,2.9c.4,1,.3,1.4.7,1.4l.9-.4A1.4,1.4,0,0,0,121.6,562.6Z"
        />
        <path
          d="M118.2,566.2s.5.4.4.6a.4.4,0,0,1-.4.3,2.7,2.7,0,0,0-1.5-.3,3.5,3.5,0,0,0-1.6.8c-.3.2-.5-.3-.5-.8a1.1,1.1,0,0,1,.6-1l.7-.2a4.4,4.4,0,0,1,2.3.6"
        />
        <path
          d="M121,557.3c.3,1,1,1.4,1.5,2.2a2.9,2.9,0,0,1,.7,1.2c.2.4.5,1.3.7,1.4s1.5-.2,1.5-.4a53.7,53.7,0,0,0-3.5-5.3C121.7,556.1,120.7,556.6,121,557.3Z"
        />
        <path
          d="M126.6,561.2c.2,0,1.5-.2,1.6-.5s-1.5-2.1-2.5-2.9-1.1-2-2.1-2.5-1.2.1-.9.6l3.5,5Z"
        />
        <path
          d="M106.2,569.8h-.3s-1.6-.5-1.2-1.6,2-2.8,2.5-2.7.7-.1,1.9,1.3a4.7,4.7,0,0,1,.6,1.5,1,1,0,0,1-.5,1H108a4.1,4.1,0,0,0-1.5.7Z"
        />
        <path
          d="M112.1,418.3c.8-3.9,6-4,7.8-3.3s3.6,3.8,3.5,6.2-2.3,7.4-5.9,7.2S111.1,423.4,112.1,418.3Z"
        />
        <path
          d="M56.5,275.4c2.9.1,2.1,2.7,3.5,2s.3-2.6-.2-3.9-.1-3.9,1.8-4.6,6.2,1.8,7.4,4.1a15.8,15.8,0,0,1,1.6,8c-.4,2.7-3.4,1.6-5.6,2.2s-2.4,5.4-1.2,8.3,1.9,3.9.8,7.4,3,27.2,5.9,46.9c2,13.4,5.9,34.6,9,47.3,1.3,5.4,4.7,15.1,6,16.7,3.8,4.2,4.7,8.3,3,14.3-1,4-3.5,4.9-5.4,4.5s-1.5-2.1-1.1-3.1,1.8-4.2,1.3-7.3a7.2,7.2,0,0,0-8.3-5.7,7.8,7.8,0,0,0-3.4,1.7,8.7,8.7,0,0,0-2.1,8.6c.5,2.1,1.4,2.9,1,4.2s-2.9,1.1-5.2-.9c-.7-.7-2-2.1-1.1-8.7s4-6.2,4.6-12.1-5.9-46.8-7.2-54.7-6.4-45.1-6.6-46.7c-.4-3.6-4.1-7.7-5.2-13C47.1,277.6,53.6,275.3,56.5,275.4Z"
        />
        <path
          d="M65.4,430.8c-.4-1.3.4-2.5,1-2.2,2.7,1,3.4,1.1,5,.3s3,1.2,5,1.3,3-2,4.1-1.2,4.2,1.7,6.1.8a.9.9,0,0,1,1.1.1,2,2,0,0,1,1.2,1.6c.1.9-.4,2.2-1.8,4.7-6.4,10.9-3.5,31-2.5,45.4,3,39.5,6.4,39.6,7.3,52.2.1,1-.6,2.5-1.4,2.6s-3-1.2-5.3-1.3a28.5,28.5,0,0,0-6.5,1.1c-2,.8-.4-3.6,0-7.3,1.2-9-3.6-48.9-4.4-55.2s-2.6-26.1-3.4-30S66.5,434.8,65.4,430.8Z"
        />
        <path
          d="M81.9,418.3c-.8-3.9-6-4-7.8-3.3s-3.6,3.8-3.5,6.2,2.3,7.4,5.9,7.2S82.9,423.4,81.9,418.3Z"
        />
      </g>
      <g id="xp_lower_extremities_selection" hidden>
        <g id="xp_lower_extremities_5" index="xp_lower_extremities_5" class="region">
          <path
            d="M103,577.8a3.9,3.9,0,0,0,2.8,1.1c8.1,0,26.5-5.3,26.5-14,0-2.6-2.5-6.1-5.3-10.2s-5.5-7.9-7.3-12.4H100.2c.2,1.6.3,3.3.5,4.9a110.1,110.1,0,0,1,.9,11.8c0,1.3-.1,2.8-.2,4.5C101,568.7,100.6,575.2,103,577.8Z"
          />
          <path
            d="M74.3,542.3c-1.8,4.5-4.7,8.7-7.3,12.4s-5.3,7.7-5.3,10.2c0,8.7,18.4,14,26.5,14a3.6,3.6,0,0,0,2.8-1.1c2.4-2.6,2-9,1.6-14.3-.1-1.6-.2-3.2-.2-4.4a113.7,113.7,0,0,1,.9-11.9c.2-1.6.3-3.3.5-4.9Z"
          />
        </g>
        <g id="xp_lower_extremities_4" index="xp_lower_extremities_4" class="region">
          <path
            d="M117.9,533.9c0-5.4,2.7-14.9,5.7-26,1.3-4.7,2.7-9.7,4-14.9H100.7c.8,8.6,1.6,15.3,1.6,15.4a115.1,115.1,0,0,1-1.5,16.6c-.5,3.5-.8,7-1,10.5,0,1.6.2,3.6.4,5.7h19.1A23,23,0,0,1,117.9,533.9Z"
          />
          <path
            d="M93.2,525a115,115,0,0,1-1.5-16.5c0-.2.8-6.9,1.6-15.5H66.4c1.3,5.2,2.7,10.2,4,14.9,3,11,5.7,20.6,5.7,26a23,23,0,0,1-1.4,7.3H93.9q.3-3.2.3-5.7A93.2,93.2,0,0,0,93.2,525Z"
          />
        </g>
        <g id="xp_lower_extremities_3" index="xp_lower_extremities_3" class="region">
          <path
            d="M98.8,463.9c0,7.8.9,18.9,1.8,28h27.3c3.2-12.8,6-26.5,6-38.5v-1.7H99.5C99.1,455.7,98.8,459.8,98.8,463.9Z"
          />
          <path
            d="M60.1,453.5c0,12,2.8,25.7,6,38.5H93.4c.9-9.2,1.8-20.3,1.8-28,0-4.1-.3-8.2-.7-12.3H60.1Z"
          />
        </g>
        <g id="xp_lower_extremities_2" index="xp_lower_extremities_2" class="region">
          <path
            d="M132,418c0-4.2,1.6-10.5,3.8-19.2.3-1,.5-2.2.8-3.3H101c.9,21.2,1.7,37,1.7,37.4a36.9,36.9,0,0,1-1.2,8c-.6,2.6-1.3,5.7-1.9,9.7h34.3c-.1-8.1-.6-13.7-1.1-18.7S132,423.1,132,418Z"
          />
          <path
            d="M58.2,398.8c2.2,8.7,3.8,15,3.8,19.2s-.4,9.4-.8,13.9-1,10.7-1.1,18.7H94.3a90.8,90.8,0,0,0-1.8-9.7,36,36,0,0,1-1.2-8c0-.4.7-16.2,1.7-37.4H57.3Z"
          />
        </g>
        <path
          id="xp_lower_extremities_1"
          index="xp_lower_extremities_1"
          class="region"
          d="M147.7,265.6H46.3c-1.4,7.9-2.4,14.8-2.4,19.3,0,53.4,7.8,87.9,13.2,109.5H93c1.5-34.3,3.4-82,3.4-102.1a.6.6,0,0,1,.6-.6.6.6,0,0,1,.5.6h0c0,20.1,1.9,67.8,3.4,102.1h36c5.4-21.6,13.2-56.1,13.2-109.5C150.1,280.4,149.1,273.5,147.7,265.6Z"
        />
      </g>
      <g id="xp_abdomen_selection" hidden>
        <path
          id="xp_abdomen_1"
          index="xp_abdomen_1"
          class="region"
          d="M145.4,253.2c-2.9-15.5-5.9-31.4-5.9-42.4,0-7.5,3.9-33.4,5.9-46.1H48.6c2,12.7,6,38.6,6,46.1,0,11-3,27-6,42.4-2.4,12.8-4.7,24.9-4.7,31.7s.1,12.6.3,18.6H96.3c.1-4.4.1-8,.1-11.2a.6.6,0,0,1,.6-.6.6.6,0,0,1,.5.6h0c0,3.1,0,6.8.2,11.2h52.1c.2-6,.3-12,.3-18.6S147.9,266,145.4,253.2Z"
        />
      </g>
      <path
        id="xp_pelvis_bone"
        class="bone"
        disabled
        d="M131.1,230.6c-9.7-1.8-14.8,2.5-15.1,7-.5,7,4,18.9,1.2,24.8a36.2,36.2,0,0,1-12,14.3c-1.9,1.3-4.1,2.7-5.3,4.9a18.2,18.2,0,0,1-5.7,0c-1.3-2.2-3.5-3.6-5.4-4.9a36.2,36.2,0,0,1-12-14.3c-2.8-5.9,1.7-17.8,1.2-24.8-.3-4.5-5.4-8.8-15.1-7-6.2,1.1-11.4,5.2-11.4,12.5s1.6,18.7,12.1,23.5c4.4,2,7.2,4.3,8,8.6,1.3,6.3-.5,12.7.5,16.7,1.7,6.4,5.9,8.7,11.7,8.6s8.8-5.3,10.4-10.2c0-.1.1-.3.1-.4a4.7,4.7,0,0,0,2.7,1.2h0a4.5,4.5,0,0,0,2.7-1.2v.4c1.6,5,4.8,10.2,10.4,10.2s10-2.2,11.7-8.6c1-4-.8-10.4.5-16.7.8-4.3,3.6-6.6,8-8.6,10.6-4.8,12.1-16.6,12.1-23.5S137.3,231.7,131.1,230.6ZM84.8,293.9c-2.5,1.3-3.7-3.1-4.7-4.8s-3.4-4.3-2.6-7.1,4-2.2,6.3-1.2a9.4,9.4,0,0,1,4.4,5.9C88.4,289,87.1,292.7,84.8,293.9Zm29.1-4.8c-1,1.6-2.2,6.1-4.8,4.8s-3.6-4.9-3.3-7.2a9.4,9.4,0,0,1,4.4-5.9c2.2-1,5.4-1.7,6.2,1.2s-1.1,5-2.5,7.1Z"
      />
      <g id="xp_pelvis_selection" hidden>
        <path
          id="xp_pelvis_2"
          index="xp_pelvis_2"
          class="region"
          d="M47.2,260.5c-1.8,10-3.3,18.9-3.3,24.4s.1,12.8.3,18.7H96.3c.1-4.3.1-8.2.1-11.3a.6.6,0,1,1,1.2,0h0c0,3.1,0,7,.1,11.3h52.1c.2-6,.3-12.2.3-18.7s-1.5-14.4-3.3-24.4Z"
        />
        <path
          id="xp_pelvis_1"
          index="xp_pelvis_1"
          class="region"
          d="M145.4,253.2c-1.5-8.2-3.1-16.6-4.3-24.3H52.9c-1.2,7.7-2.8,16-4.3,24.3l-1.2,6.2h99.2Z"
        />
      </g>
    </g>
    <g id="back-to-default">
      <path
        class="transparent"
        d="M132.7,35c2.8,14.1-5.4,24.2-7.2,22.7-.6,9.6-11.6,24.5-2.5,27.2,67.2,14.7,54.9,14.1,61.4,152.4.6,56-1.5,39.4,9.6,69.1V0H121.7C130.8,7.8,134.4,21.6,132.7,35Z"
      />
      <path
        class="transparent"
        d="M12.2,157.3c4.9-50.3-.5-60.8,56.7-71.9,12.1.3-.4-21.2-.4-27.7-8.6-2.9-8.1-17.8-7.2-22.7C60.7,18.8,63.2,6.8,71.6,0H0V305.8C7.8,288.4,10,296.1,12.2,157.3Z"
      />
      <path class="transparent" d="M37.8,228.7c-1-1-.7-.9-.8,0Z" />
      <path
        class="transparent"
        d="M155.4,346.3c-3.9,35.2-8.9,41.9-14,68.2.7,41.5,7,38.8-13.7,113.6-9.4,20,50.4,50-27.3,51.9H194V334.6C184.1,346.2,177.7,360.1,155.4,346.3Z"
      />
      <path
        class="transparent"
        d="M52.6,564.9c2.7-10.4,16.6-22.4,14.3-32.7-4.6-27.9-21.4-60.9-14.1-111.3-2-27.1-10.8-37.2-14.2-74.6C16.7,355.9,21.1,357,0,335V580H100.3C84.6,579.6,58,582.8,52.6,564.9Z"
      />
    </g>
  </svg>`;
  };
  var ctAdultVascular = function ctAdultVascular2() {
    return x`<svg
    id="ct_adult_vascular"
    hidden
    xmlns="http://www.w3.org/2000/svg"
    x="0"
    y="0"
    style="width:10rem; height:36.25rem;"
    viewBox="0 0 160 580"
  >
    <path
      index="1"
      class="region"
      d="M80.016,82.092c6.838,0,12.143-4.129,15.778-12.272a57.507,57.507,0,0,0,2.833-8.462c.114-.453.217-.886.3-1.268.155-.735.277-1.4.369-1.948.154-.912.225-1.491.226-1.5a.554.554,0,0,1,.378-.459.548.548,0,0,1,.575.15,1.509,1.509,0,0,0,.323.271.783.783,0,0,0,.328.112,1.14,1.14,0,0,0,.738-.245,5.836,5.836,0,0,0,1.849-2.419,25.573,25.573,0,0,0,2.132-5.7l.223-.878a39.624,39.624,0,0,0,1.025-5.09c.037-.255.07-.508.1-.757A19.217,19.217,0,0,0,107.3,37.2a3.808,3.808,0,0,0-.443-1.572,1.044,1.044,0,0,0-.1-.133.608.608,0,0,1-.148-.469l0-.031c.021-.137.109-.725.2-1.491a40.078,40.078,0,0,0,.116-8.718,32.414,32.414,0,0,0-1.826-8.447,24.659,24.659,0,0,0-2.93-5.65,21.382,21.382,0,0,0-6.9-6.177c-4.219-2.328-9.063-3.411-15.245-3.411S68.99,2.188,64.772,4.516a21.363,21.363,0,0,0-6.9,6.177,24.689,24.689,0,0,0-2.931,5.65,32.409,32.409,0,0,0-1.825,8.447,40.079,40.079,0,0,0,.115,8.718c.093.766.18,1.354.2,1.491l0,.031a.553.553,0,0,1-.127.445,1.2,1.2,0,0,0-.114.147,3.75,3.75,0,0,0-.453,1.582c-.005.042-.008.091-.013.134a19.851,19.851,0,0,0,.122,4.285c.03.25.064.5.1.758a39.639,39.639,0,0,0,1.025,5.089l.224.878a25.523,25.523,0,0,0,2.132,5.7,5.828,5.828,0,0,0,1.848,2.419.926.926,0,0,0,1.389-.138.54.54,0,0,1,.238-.142.624.624,0,0,1,.075-.016.6.6,0,0,1,.092-.019.553.553,0,0,1,.549.486c0,.015.182,1.489.595,3.448a57.1,57.1,0,0,0,3.13,9.73C67.884,77.963,73.188,82.092,80.016,82.092Z"
    />
    <path
      index="2"
      class="region"
      d="M54.791,93.61a170.189,170.189,0,0,0-22.158,5.873l6.659,25.254h81.469l6.659-25.251a170.273,170.273,0,0,0-22.168-5.876c-6.141-1.308-9.392-2.036-10.379-3-2.126-2.076-.838-11.442.138-16.874C91.291,80.01,86.267,83.2,80.027,83.2s-11.273-3.184-14.993-9.457c.974,5.426,2.261,14.794.136,16.87C64.182,91.574,60.932,92.3,54.791,93.61Z"
    />
    <path
      index="3"
      class="region"
      d="M19.833,293.8c-.083-.975-2.011-24.015,1.03-35.608,4.2-15.952,6.328-26.268,6.328-30.665,0-3.148.152-8.029.286-12.336.1-3.245.188-6.048.188-7.407,0-1.178.232-6.966.526-14.3.5-12.545,1.193-29.726,1.193-35.659a.518.518,0,0,1,.027-.143v-.008c.007-.022.009-.045.018-.066L38.3,125.287l-6.7-25.42C24.986,102.344,18.807,105.6,14.7,110,6.706,118.556,2.76,155.175,3.583,213.113c.02,1.349.033,2.308.033,2.81,0,3.839-.415,8.144-.9,13.128-.613,6.346-1.307,13.539-1.307,21.677,0,7.7.875,16.291,1.722,24.6.73,7.152,1.418,13.906,1.418,19.131a.555.555,0,0,1-.029.176,78.778,78.778,0,0,0-3.419,22.321c0,12.888,6.514,28.215,8.537,28.215,1.84,0,6.729,0,6.741-21.67a.552.552,0,1,1,1.1,0c0,.451.094,2.7,1.949,2.7,1.657,0,3.37-5.86,3.37-15.666a57.578,57.578,0,0,0-2.943-16.6A.549.549,0,0,1,19.833,293.8Z"
    />
    <path
      index="3"
      class="region"
      d="M155.519,294.633a.555.555,0,0,1-.029-.176c0-5.225.688-11.979,1.418-19.131.846-8.307,1.722-16.9,1.722-24.6,0-8.138-.694-15.331-1.307-21.677-.481-4.984-.9-9.289-.9-13.128,0-.5.014-1.461.033-2.81.824-57.938-3.122-94.557-11.111-103.11-4.111-4.4-10.285-7.656-16.888-10.132l-6.7,25.416,8.884,32.395a.455.455,0,0,1,.007.09.5.5,0,0,1,.01.056c0,5.933.69,23.114,1.193,35.659.294,7.329.526,13.117.526,14.3,0,1.359.087,4.162.188,7.407.134,4.307.285,9.188.285,12.336,0,4.4,2.13,14.713,6.328,30.664,3.041,11.594,1.114,34.634,1.03,35.609a.6.6,0,0,1-.029.138,57.523,57.523,0,0,0-2.944,16.6c0,9.806,1.714,15.666,3.37,15.666,1.855,0,1.949-2.247,1.949-2.7a.553.553,0,1,1,1.1,0c.011,21.67,4.9,21.67,6.741,21.67,2.023,0,8.537-15.327,8.537-28.215A78.778,78.778,0,0,0,155.519,294.633Z"
    />
    <path
      index="4"
      class="region"
      d="M120.765,125.842H39.288L30.5,157.877c.279,1.7,2.359,14.447,4.189,27.237H125.35c1.838-12.846,3.928-25.644,4.193-27.262Zm-14.219,38.971c-2.034,6.8-17.309,4.469-22.5,3.114a21.285,21.285,0,0,1-4.391-1.721,8.813,8.813,0,0,1-.236,2.448c-.382.876-1.868,1.189-3.132,1.189s-2.749-.313-3.132-1.189a10.783,10.783,0,0,1-.257-3.161,27.291,27.291,0,0,0-.354-4.963,7.36,7.36,0,0,1-.737-1.092C69.6,155.224,70,146,72.56,141.745a19.579,19.579,0,0,0,.489-4.967,8.881,8.881,0,0,1,.259-2.8c.381-.877,1.867-1.19,3.131-1.19s2.751.313,3.132,1.19a11.31,11.31,0,0,1,.258,3.261c.009.761.02,1.6.06,2.37,9.654-2.337,13.449.045,16.774,2.923C103.42,148.377,108.223,159.208,106.546,164.813Z"
    />
    <path
      index="5"
      class="region"
      d="M79.394,164.8a20.532,20.532,0,0,0,4.931,2.053c5.944,1.553,19.526,3.111,21.163-2.36,1.543-5.158-3.186-15.627-9.548-21.134-2.677-2.317-6.009-5.2-16.422-2.527a.554.554,0,0,1-.458-.086.548.548,0,0,1-.23-.4c-.079-.962-.093-2.1-.105-3.1a15.316,15.316,0,0,0-.167-2.834,4.529,4.529,0,0,0-4.237,0,10.706,10.706,0,0,0-.168,2.38,19.937,19.937,0,0,1-.559,5.347.525.525,0,0,1-.056.12c-2.387,3.9-2.788,12.773-.752,16.664a7.108,7.108,0,0,0,.7,1.02.57.57,0,0,1,.1.21A26.732,26.732,0,0,1,74,165.479a14.111,14.111,0,0,0,.166,2.734,4.535,4.535,0,0,0,4.238,0,21.764,21.764,0,0,0,.161-2.931.556.556,0,0,1,.827-.477Z"
    />
    <path
      index="6"
      class="region"
      d="M79.349,302.957c.076-4,.118-7.556.12-10.52a.553.553,0,0,1,1.105,0c0,2.964.044,6.518.12,10.52h52.15c.2-5.771.313-11.778.313-18.064,0-6.824-2.29-18.9-4.714-31.7-2.931-15.461-5.962-31.447-5.962-42.408,0-4.239,1.256-14.318,2.711-24.57H34.851c1.454,10.251,2.71,20.331,2.71,24.57,0,10.961-3.03,26.947-5.961,42.408-2.424,12.791-4.715,24.872-4.715,31.7,0,6.286.114,12.293.314,18.064Z"
    />
    <path
      index="3"
      class="region"
      d="M132.806,304.062H80.715c.824,41.258,4.989,127.817,5.036,128.781a36.32,36.32,0,0,1-1.239,8.009,94.094,94.094,0,0,0-2.65,23.054c0,15.619,3.454,44.235,3.489,44.522a125.009,125.009,0,0,1-1.475,16.607,86.838,86.838,0,0,0-1.044,10.5c0,3.15.46,7.5.906,11.7.448,4.233.912,8.611.912,11.819,0,1.257-.108,2.817-.223,4.467-.36,5.2-.808,11.672,1.6,14.253A3.587,3.587,0,0,0,88.8,578.9c8.09,0,26.485-5.278,26.485-13.969,0-2.571-2.453-6.118-5.294-10.225-4.032-5.833-9.051-13.09-9.051-20.811,0-5.351,2.643-14.916,5.7-25.991,4.582-16.58,10.283-37.214,10.283-54.415a216.205,216.205,0,0,0-1.082-21.621c-.406-4.5-.791-8.74-.791-13.889,0-4.188,1.587-10.47,3.784-19.167C123.569,380.083,131.108,350.207,132.806,304.062Z"
    />
    <path
      index="3"
      class="region"
      d="M75.531,440.852a36.4,36.4,0,0,1-1.24-7.982c.047-.988,4.212-87.55,5.037-128.808H27.237c1.7,46.145,9.237,76.021,13.967,94.745,2.2,8.7,3.783,14.979,3.783,19.167,0,5.149-.384,9.394-.791,13.889a216.205,216.205,0,0,0-1.082,21.621c0,17.2,5.7,37.835,10.284,54.415,3.06,11.075,5.7,20.64,5.7,25.991,0,7.721-5.019,14.978-9.052,20.811-2.84,4.107-5.293,7.654-5.293,10.225,0,8.691,18.4,13.969,26.485,13.969a3.586,3.586,0,0,0,2.774-1.121c2.408-2.581,1.961-9.053,1.6-14.253-.114-1.65-.222-3.21-.222-4.467,0-3.208.463-7.586.912-11.819.445-4.206.906-8.554.906-11.7a87.014,87.014,0,0,0-1.043-10.5,125.492,125.492,0,0,1-1.48-16.54c.039-.354,3.492-28.971,3.492-44.589A94.106,94.106,0,0,0,75.531,440.852Z"
    />
    <path
      class="vascular"
      d="M86.576,181.56c-.57,2.35-1.1,4.56-1.57,6.64,7.34,1.63,8.38,4.64,9.38,7.56.67,1.93,1.29,3.75,3.69,5.38a.557.557,0,0,1-.31,1.01.5.5,0,0,1-.31-.1,10.235,10.235,0,0,1-4.11-5.94c-.99-2.86-1.85-5.36-8.57-6.83-1.06,4.9-1.67,9.09-1.26,12.68a61.346,61.346,0,0,1,.14,7.22c3.84.63,7.26-.24,10.59-1.09,5.24-1.34,10.67-2.72,16.38,2.93a1.1,1.1,0,0,1-.78,1.89,1.132,1.132,0,0,1-.78-.32c-4.82-4.77-8.99-3.7-14.28-2.36-3.31.85-7.01,1.79-11.2,1.18-.11,2.93-.28,6.16-.48,9.36a17.143,17.143,0,0,0,4.82,5.52c2.18,1.86,4.44,3.78,5.42,7.07a.556.556,0,0,1-.37.69.414.414,0,0,1-.16.02.564.564,0,0,1-.53-.39c-.89-2.98-2.92-4.72-5.07-6.55a22.009,22.009,0,0,1-4.24-4.37c-.52,7.73-1.15,14.8-1.28,16.24,15.73,18.05,22.72,31.29,24.82,46.95,1.88,13.94,1.35,33.12.89,50.04-.26,9.44-.51,18.36-.24,24.54.74,17.1,1.53,40.89,1.53,56.34,0,15.27-5.34,61.2-7.1,76.29a326.019,326.019,0,0,0-2.72,41.69,36.537,36.537,0,0,0,10.03,25.36,1.1,1.1,0,1,1-1.5,1.62,38.085,38.085,0,0,1-10.74-26.99,325.791,325.791,0,0,1,2.74-41.93c1.44-12.41,5.31-45.7,6.63-65.51-1.62,6.94-3.98,18.35-6.99,38.71-1.19,8.07-2.36,15.43-3.5,22.54-3.2,20.06-5.73,35.9-5.42,48.41.41,16.07,10.43,22.15,10.53,22.21a.544.544,0,0,1,.2.75.55.55,0,0,1-.48.28.6.6,0,0,1-.28-.08c-.43-.26-10.65-6.46-11.07-23.13-.32-12.62,2.22-28.5,5.43-48.61,1.14-7.11,2.31-14.47,3.5-22.53,3.89-26.3,6.7-37.71,8.21-43.84.07-.29.14-.56.21-.83.07-1.65.11-3.14.11-4.41,0-15.42-.79-39.16-1.53-56.25-.27-6.25-.02-15.21.24-24.69.46-16.84.98-35.92-.87-49.68a62.945,62.945,0,0,0-5.27-18.29c1.23,9.45.55,16.59-.22,24.62a155.782,155.782,0,0,0-.82,25.99.549.549,0,0,1-.52.58h-.03a.556.556,0,0,1-.55-.52,157.036,157.036,0,0,1,.83-26.15c.85-8.91,1.58-16.7-.3-27.81-3.87-7.41-9.5-15.14-17.46-24.27-7.94,9.09-13.33,16.39-16.96,23.36-2.08,11.6-1.32,19.57-.45,28.72a157.186,157.186,0,0,1,.82,26.15.549.549,0,0,1-.55.52h-.03a.555.555,0,0,1-.52-.58,154.709,154.709,0,0,0-.82-25.99c-.79-8.24-1.48-15.54-.12-25.36a59.656,59.656,0,0,0-4.71,18c-1.58,14-1.49,33.7-1.4,51.09.05,9.77.09,18.21-.17,24.31-.74,17.09-1.53,40.83-1.53,56.25,0,1.27.04,2.76.11,4.41.07.27.14.55.21.83,1.51,6.13,4.32,17.55,8.21,43.84,1.19,8.06,2.36,15.41,3.5,22.52,3.21,20.12,5.75,36,5.43,48.62-.42,16.67-10.64,22.87-11.07,23.13a.6.6,0,0,1-.28.08.55.55,0,0,1-.48-.28.544.544,0,0,1,.2-.75c.1-.06,10.12-6.18,10.53-22.21.31-12.51-2.22-28.36-5.42-48.41-1.14-7.12-2.31-14.48-3.5-22.54-3.01-20.36-5.37-31.77-6.99-38.71,1.32,19.8,5.19,53.1,6.63,65.51a325.674,325.674,0,0,1,2.74,41.93,38.085,38.085,0,0,1-10.74,26.99,1.1,1.1,0,0,1-.75.3,1.071,1.071,0,0,1-.81-.36,1.1,1.1,0,0,1,.06-1.56,36.537,36.537,0,0,0,10.03-25.36,325.9,325.9,0,0,0-2.72-41.69c-1.76-15.09-7.1-61.04-7.1-76.29,0-15.45.79-39.24,1.53-56.34.26-6.05.22-14.47.17-24.21-.09-17.45-.18-37.22,1.41-51.35,1.83-16.19,7.68-27.48,23.93-46.08.06-.7,1.49-16.44,1.9-27.5-4.25.65-7.99-.3-11.35-1.16-5.28-1.35-9.46-2.41-14.28,2.36a1.091,1.091,0,0,1-.77.32,1.1,1.1,0,0,1-.78-1.89c5.71-5.65,11.13-4.27,16.38-2.93,3.4.87,6.91,1.75,10.87,1.04a56.749,56.749,0,0,0-.12-6.79c-.67-5.94,1.01-12.83,3.13-21.57.3-1.22.61-2.5.92-3.81a35.427,35.427,0,0,1-8.84,1.26,29.189,29.189,0,0,1-7.69-1.12,20.063,20.063,0,0,0-4.94-.81h-.07a.555.555,0,0,1,0-1.11,20.875,20.875,0,0,1,5.28.85c3.8.95,8.08,2.02,16.55-.29.63-2.66,1.25-5.47,1.82-8.4,1,.19,2.11.38,3.27.54-.53,2.76-1.12,5.41-1.71,7.93,7.42,4.02,10.85,4.02,15.96,3.99,1.9-.01,4.07-.02,6.76.17a.556.556,0,0,1-.04,1.11c-.01,0-.03-.01-.04-.01-2.64-.19-4.79-.17-6.68-.17-5.21.03-8.74.03-16.22-3.97C87.316,178.52,86.936,180.09,86.576,181.56Z"
    />
    <path
      class="vascular"
      d="M151.946,324.04a1.091,1.091,0,0,1-1.02.69,1.059,1.059,0,0,1-.42-.09,1.1,1.1,0,0,1-.6-1.43c.04-.11,4.43-11.64-.84-42.43-2.02-11.78-1.56-26.46-1.16-39.41.34-10.99.64-20.49-.55-26.25-.49-2.35-1.26-5.05-2.16-8.17-.75-2.6-1.57-5.5-2.36-8.63-.38,7.64-1.63,15.81-2.69,22.72-.66,4.34-1.24,8.09-1.43,10.69-.58,7.89,1.37,16.54,3.83,27.5l.1.42c6.42,28.53-2.12,45.23-2.21,45.4a.544.544,0,0,1-.49.29.616.616,0,0,1-.26-.06.558.558,0,0,1-.23-.75c.09-.16,8.43-16.54,2.11-44.63l-.09-.43c-2.49-11.04-4.45-19.77-3.86-27.82.19-2.65.77-6.42,1.44-10.78,1.26-8.2,2.78-18.17,2.78-26.87a88.811,88.811,0,0,1-2.02-23.43l.16-2.76c1.11-19.52,2.5-43.8-16.65-49.44-14.85-4.38-24.59-.29-29.01,12.09a7.979,7.979,0,0,1,1.81,1.9,9.694,9.694,0,0,1,1.54,5.57,16.722,16.722,0,0,1-.35,3.26,1.516,1.516,0,0,1-.04.19c-.02.08-.03.16-.05.24-.13.56-.38,1.58-.63,2.33-.22-.2-.44-.4-.66-.59a16.409,16.409,0,0,0-3.13-2.27c.7-2.73.58-4.89-.34-6.25a4.137,4.137,0,0,0-3.13-1.69,3.664,3.664,0,0,0-3.17.97c-1.17,1.16-1.72,3.25-1.52,5.76.01.15.02.29.04.44a2.209,2.209,0,0,1-4.39.49.86.86,0,0,1-.01-.16c-.42-4.05.56-7.48,2.78-9.67a7.579,7.579,0,0,1,1.09-.89c-8.08-16.42-22.31-21.75-42.34-15.82-13.47,3.99-25.41,13.57-21.6,56.26a77.534,77.534,0,0,1-2.01,24.65c.13,8.41,1.57,17.86,2.77,25.69.67,4.36,1.25,8.13,1.44,10.78.59,8.05-1.37,16.78-3.85,27.82l-.1.43c-6.32,28.09,2.03,44.47,2.11,44.63a.558.558,0,0,1-.23.75.583.583,0,0,1-.26.06.544.544,0,0,1-.49-.29c-.09-.17-8.62-16.87-2.21-45.4l.1-.42c2.46-10.96,4.41-19.61,3.83-27.5-.19-2.6-.77-6.35-1.43-10.69-1.03-6.7-2.23-14.59-2.64-22.02-.75,2.8-1.54,5.39-2.26,7.76-.97,3.19-1.81,5.95-2.3,8.34-1.2,5.76-.9,15.26-.56,26.25.4,12.95.86,27.63-1.16,39.41-5.27,30.79-.88,42.32-.83,42.43a1.1,1.1,0,0,1-.62,1.43.978.978,0,0,1-.41.09,1.091,1.091,0,0,1-1.02-.69c-.2-.48-4.7-12.07.7-43.63,1.98-11.57,1.53-26.13,1.13-38.97-.34-11.13-.64-20.75.6-26.77.52-2.49,1.37-5.29,2.36-8.53,2.7-8.91,6.41-21.11,5.14-35.41-3.2-35.79,3.52-52.76,23.18-58.58,14.47-4.28,26.33-2.8,35.1,4.24-.03-1.26-.04-2.99-.05-5.31-.04-8.38-.1-22.4-1.62-28.77-.43-1.8-.86-3.64-1.29-5.5-8.37-11.79-8.47-26.2-8.47-26.34a.55.55,0,0,1,1.1,0,50.854,50.854,0,0,0,6.67,23.26c-2.49-11.35-4.35-23.43-2.05-34.68a1.108,1.108,0,0,1,2.17.45c-2.8,13.65.82,28.87,4.02,42.3,1.58,6.62,1.64,20.25,1.68,29.27.02,3.48.04,6.77.16,7.31a.163.163,0,0,0,0,.07,38.934,38.934,0,0,1,7.52,10.65c.14-.05.3-.08.45-.12-1.85-10.42-5.41-38.38-3.31-47.18,3.19-13.43,6.82-28.64,4.02-42.3a1.108,1.108,0,0,1,.86-1.31,1.091,1.091,0,0,1,1.3.86c2.31,11.25.45,23.33-2.05,34.68a50.937,50.937,0,0,0,6.68-23.26.55.55,0,1,1,1.1,0c0,.14-.1,14.55-8.47,26.34-.43,1.86-.86,3.7-1.29,5.5-2,8.4,1.58,36.34,3.35,46.39a9.549,9.549,0,0,1,3.56.68c4.88-13.25,15.77-17.79,31.61-13.13,20.83,6.13,19.33,32.46,18.23,51.68l-.15,2.76c-.79,14.46,2.73,26.71,5.29,35.65.91,3.17,1.7,5.9,2.2,8.33,1.25,6.02.95,15.64.6,26.77-.4,12.84-.85,27.4,1.13,38.97C156.646,311.97,152.146,323.56,151.946,324.04Z"
    />
    <path
      class="outline"
      d="M88.8,580a4.691,4.691,0,0,1-3.582-1.473c-2.736-2.931-2.27-9.668-1.895-15.082.113-1.631.22-3.173.22-4.391,0-3.149-.461-7.5-.906-11.7-.449-4.233-.912-8.611-.912-11.82a87.514,87.514,0,0,1,1.054-10.644A124.867,124.867,0,0,0,84.25,508.5c-.031-.221-3.492-28.9-3.492-44.589a95.062,95.062,0,0,1,2.677-23.3,35.7,35.7,0,0,0,1.212-7.738c-.04-.83-3.3-68.541-4.626-112.77-1.326,44.229-4.585,111.945-4.626,112.8a35.794,35.794,0,0,0,1.213,7.711,95.062,95.062,0,0,1,2.677,23.3c0,15.685-3.462,44.368-3.5,44.656a125.566,125.566,0,0,0,1.474,16.325,87.716,87.716,0,0,1,1.054,10.644c0,3.209-.464,7.587-.913,11.82-.445,4.206-.905,8.554-.905,11.7,0,1.218.107,2.76.219,4.391.375,5.414.842,12.151-1.894,15.082A4.691,4.691,0,0,1,71.241,580c-8.007,0-27.59-5.282-27.59-15.074,0-2.916,2.544-6.594,5.49-10.854C53.086,548.366,58,541.265,58,533.89c0-5.2-2.624-14.7-5.663-25.7-4.6-16.645-10.323-37.359-10.323-54.71A216.846,216.846,0,0,1,43.1,431.763c.421-4.662.785-8.69.785-13.789,0-4.05-1.573-10.277-3.75-18.9-5.368-21.251-14.351-56.818-14.351-114.185,0-6.928,2.3-19.059,4.734-31.9,2.785-14.692,5.942-31.344,5.942-42.2,0-7.513-4.138-34.493-6.081-46.744-.217,7.935-.7,20.027-1.081,29.486-.293,7.317-.525,13.1-.525,14.251,0,1.377-.088,4.187-.189,7.441-.133,4.3-.285,9.171-.285,12.3,0,4.492-2.142,14.9-6.365,30.946-2.912,11.105-1.119,33.747-1,35.165a58.64,58.64,0,0,1,2.983,16.895c0,2.8-.216,16.771-4.475,16.771a2.672,2.672,0,0,1-1.984-.788c-.41,17.434-4.353,19.76-7.81,19.76C6.236,346.274,0,329.037,0,316.954a80.2,80.2,0,0,1,3.448-22.585c-.007-5.157-.69-11.849-1.412-18.93C1.187,267.1.308,258.485.308,250.728c0-8.192.7-15.412,1.312-21.782.478-4.957.892-9.238.892-13.023,0-.5-.014-1.452-.033-2.794-.84-59.069,3.1-94.99,11.409-103.88C23.276,99.2,42.86,95.024,54.561,92.53c4.846-1.033,9.032-1.925,9.838-2.712,2.1-2.054-.3-15.8-1.181-19.6a58.7,58.7,0,0,1-3.181-9.9c-.226-1.078-.383-2-.481-2.634a2.045,2.045,0,0,1-1.99-.295,7.093,7.093,0,0,1-2.215-2.83,26.636,26.636,0,0,1-2.222-5.941l-.222-.874a40.428,40.428,0,0,1-1.047-5.2,21.978,21.978,0,0,1-.213-5.477,4.532,4.532,0,0,1,.663-2.1c-.04-.27-.106-.745-.176-1.318a41.12,41.12,0,0,1-.118-8.948A33.414,33.414,0,0,1,53.9,15.964a25.825,25.825,0,0,1,3.071-5.915,22.51,22.51,0,0,1,7.263-6.5C68.626,1.127,73.64,0,80.016,0s11.4,1.127,15.789,3.548a22.51,22.51,0,0,1,7.263,6.5,25.867,25.867,0,0,1,3.071,5.915,33.451,33.451,0,0,1,1.888,8.728,41.119,41.119,0,0,1-.119,8.948c-.069.574-.135,1.05-.175,1.32a4.538,4.538,0,0,1,.663,2.1,22.024,22.024,0,0,1-.213,5.477,40.385,40.385,0,0,1-1.048,5.206l-.222.874a26.586,26.586,0,0,1-2.222,5.941,7.084,7.084,0,0,1-2.215,2.83,2.043,2.043,0,0,1-1.989.295c-.1.633-.255,1.556-.482,2.634a58.511,58.511,0,0,1-3.2,9.952c-.843,3.64-3.27,17.486-1.159,19.548.8.787,4.991,1.679,9.838,2.712,11.7,2.494,31.286,6.667,40.673,16.719,8.3,8.89,12.249,44.811,11.409,103.88-.019,1.342-.033,2.3-.033,2.794,0,3.785.413,8.066.892,13.023.615,6.37,1.312,13.59,1.312,21.782,0,7.757-.879,16.375-1.729,24.711-.721,7.081-1.4,13.773-1.411,18.93a80.179,80.179,0,0,1,3.448,22.585c0,12.083-6.237,29.32-9.642,29.32-3.457,0-7.4-2.326-7.811-19.76a2.668,2.668,0,0,1-1.984.788c-4.259,0-4.474-13.97-4.474-16.771a58.642,58.642,0,0,1,2.982-16.895c.117-1.416,1.91-24.061-1-35.166-4.223-16.042-6.364-26.453-6.364-30.945,0-3.131-.152-8-.285-12.3-.1-3.254-.189-6.064-.189-7.441,0-1.155-.232-6.934-.525-14.251-.38-9.459-.865-21.551-1.081-29.487-1.943,12.252-6.081,39.232-6.081,46.745,0,10.857,3.157,27.509,5.942,42.2,2.434,12.844,4.734,24.975,4.734,31.9,0,57.367-8.984,92.934-14.352,114.185-2.177,8.619-3.75,14.846-3.75,18.9,0,5.1.364,9.127.787,13.789a217.205,217.205,0,0,1,1.086,21.721c0,17.351-5.724,38.065-10.323,54.71-3.039,11-5.664,20.495-5.664,25.7,0,7.375,4.91,14.476,8.856,20.182,2.946,4.26,5.49,7.938,5.49,10.854C116.392,574.718,96.809,580,88.8,580ZM80.021,291.885a.553.553,0,0,1,.553.552c.017,33.178,5.125,139.338,5.177,140.406a36.32,36.32,0,0,1-1.239,8.009,94.094,94.094,0,0,0-2.65,23.054c0,15.619,3.454,44.235,3.489,44.522a125.009,125.009,0,0,1-1.475,16.607,86.838,86.838,0,0,0-1.044,10.5c0,3.15.46,7.5.905,11.7.449,4.233.913,8.611.913,11.819,0,1.257-.108,2.817-.223,4.467-.36,5.2-.808,11.672,1.6,14.253A3.587,3.587,0,0,0,88.8,578.9c8.09,0,26.485-5.278,26.485-13.969,0-2.571-2.453-6.118-5.294-10.225-4.032-5.833-9.051-13.09-9.051-20.811,0-5.351,2.643-14.916,5.7-25.991,4.582-16.58,10.283-37.214,10.283-54.415a216.205,216.205,0,0,0-1.082-21.621c-.406-4.5-.791-8.74-.791-13.889,0-4.188,1.587-10.47,3.784-19.167,5.356-21.2,14.318-56.685,14.318-113.914,0-6.824-2.29-18.9-4.714-31.7-2.931-15.461-5.962-31.447-5.962-42.408,0-9.858,6.792-51.292,7.081-53.051a.561.561,0,0,1,.59-.461.552.552,0,0,1,.507.551c0,5.933.69,23.114,1.193,35.659.294,7.329.526,13.118.526,14.3,0,1.359.087,4.162.187,7.407.135,4.307.286,9.188.286,12.336,0,4.4,2.13,14.713,6.329,30.664,3.04,11.594,1.113,34.634,1.029,35.609a.548.548,0,0,1-.029.138,57.523,57.523,0,0,0-2.944,16.6c0,9.806,1.714,15.666,3.37,15.666,1.855,0,1.949-2.247,1.949-2.7a.553.553,0,0,1,1.1,0c.011,21.67,4.9,21.67,6.741,21.67,2.023,0,8.537-15.327,8.537-28.215a78.778,78.778,0,0,0-3.419-22.321.555.555,0,0,1-.029-.176c0-5.225.688-11.979,1.417-19.131.847-8.307,1.723-16.9,1.723-24.6,0-8.138-.694-15.331-1.307-21.677-.481-4.984-.9-9.289-.9-13.128,0-.5.014-1.461.033-2.81.824-57.938-3.122-94.557-11.111-103.11-9.15-9.8-28.522-13.926-40.1-16.393-6.141-1.308-9.392-2.036-10.379-3-3.022-2.951.857-20.659.929-20.806a57.2,57.2,0,0,0,3.122-9.713c.412-1.959.593-3.433.595-3.448a.554.554,0,0,1,.378-.459.548.548,0,0,1,.575.15.928.928,0,0,0,1.39.138,5.845,5.845,0,0,0,1.848-2.419,25.573,25.573,0,0,0,2.132-5.7l.223-.878a39.624,39.624,0,0,0,1.025-5.09A20.862,20.862,0,0,0,107.3,37.2c-.164-1.27-.451-1.6-.545-1.7a.608.608,0,0,1-.148-.469s.1-.647.205-1.522a40.078,40.078,0,0,0,.116-8.718,32.414,32.414,0,0,0-1.826-8.447,24.659,24.659,0,0,0-2.93-5.65,21.4,21.4,0,0,0-6.9-6.177c-4.219-2.328-9.063-3.411-15.245-3.411S68.99,2.188,64.772,4.516a21.375,21.375,0,0,0-6.9,6.177,24.689,24.689,0,0,0-2.931,5.65,32.409,32.409,0,0,0-1.825,8.447,40.079,40.079,0,0,0,.115,8.718c.106.875.2,1.518.206,1.522a.553.553,0,0,1-.127.445c-.116.131-.4.458-.567,1.728a20.928,20.928,0,0,0,.21,5.178,39.494,39.494,0,0,0,1.024,5.089l.224.878a25.472,25.472,0,0,0,2.132,5.7,5.828,5.828,0,0,0,1.848,2.419.926.926,0,0,0,1.389-.138.553.553,0,0,1,.954.309c0,.015.182,1.489.594,3.448a57.2,57.2,0,0,0,3.131,9.73c.063.13,3.943,17.838.921,20.789-.988.965-4.238,1.693-10.379,3C43.217,96.077,23.846,100.205,14.7,110,6.706,118.556,2.76,155.175,3.583,213.113c.02,1.349.033,2.308.033,2.81,0,3.839-.415,8.144-.9,13.128-.613,6.346-1.307,13.539-1.307,21.677,0,7.7.875,16.291,1.722,24.6.73,7.152,1.418,13.906,1.418,19.131a.555.555,0,0,1-.029.176,78.778,78.778,0,0,0-3.419,22.321c0,12.888,6.514,28.215,8.537,28.215,1.84,0,6.729,0,6.741-21.67a.552.552,0,0,1,.552-.552h0a.552.552,0,0,1,.552.552c0,.451.094,2.7,1.949,2.7,1.657,0,3.37-5.86,3.37-15.666a57.578,57.578,0,0,0-2.943-16.6.549.549,0,0,1-.03-.138c-.083-.975-2.011-24.015,1.03-35.608,4.2-15.952,6.328-26.268,6.328-30.665,0-3.148.152-8.029.286-12.336.1-3.245.188-6.048.188-7.407,0-1.177.232-6.966.526-14.3.5-12.545,1.193-29.726,1.193-35.659a.552.552,0,0,1,1.1-.09c.289,1.759,7.08,43.193,7.08,53.051,0,10.961-3.03,26.947-5.961,42.408-2.424,12.791-4.715,24.872-4.715,31.7,0,57.229,8.963,92.713,14.319,113.914,2.2,8.7,3.783,14.979,3.783,19.167,0,5.149-.384,9.394-.791,13.889a216.205,216.205,0,0,0-1.082,21.621c0,17.2,5.7,37.835,10.284,54.415,3.06,11.075,5.7,20.64,5.7,25.991,0,7.721-5.019,14.978-9.052,20.811-2.84,4.107-5.293,7.654-5.293,10.225,0,8.691,18.4,13.969,26.485,13.969a3.586,3.586,0,0,0,2.774-1.121c2.408-2.581,1.961-9.052,1.6-14.253-.114-1.65-.222-3.21-.222-4.467,0-3.208.463-7.586.912-11.819.445-4.206.906-8.554.906-11.7a87.014,87.014,0,0,0-1.043-10.5,125.492,125.492,0,0,1-1.48-16.54c.039-.354,3.492-28.971,3.492-44.589a94.106,94.106,0,0,0-2.649-23.054,36.4,36.4,0,0,1-1.24-7.982c.052-1.1,5.161-107.255,5.178-140.433A.552.552,0,0,1,80.021,291.885Z"
    />
  </svg>`;
  };
  var ctChildAnatomical = function ctChildAnatomical2() {
    return x`<svg
    id="ct_child_anatomical"
    hidden
    xmlns="http://www.w3.org/2000/svg"
    x="0"
    y="0"
    style="width:10.89375rem; height:36.25rem;"
    viewBox="0 0 174.3 580"
    xml:space="preserve"
  >
    <path
      index="1"
      class="region"
      d="M87.135,113c23.94-.02,28.869-30.28,28.916-30.586a.524.524,0,0,1,.561-.468l.1,0c3.414,0,5.945-4.961,6.783-6.6a30.583,30.583,0,0,0,3.309-11.208,15.289,15.289,0,0,0,.087-2.147,4.263,4.263,0,0,0-.873-2.915,1.232,1.232,0,0,0-.742-.382c-.08-.009-.141-.01-.147-.01a.56.56,0,0,1-.608-.651c2.415-12.774.63-27.142-4.656-37.5-.566-1.107-1.206-2.241-1.932-3.377-.544-.853-1.135-1.707-1.778-2.552q-.642-.846-1.355-1.676C109.334,6.569,100.694,1.111,87.146,1.105c-12.385.006-20.668,4.556-26.178,10.187A35.164,35.164,0,0,0,58.113,14.6q-.644.846-1.219,1.7a40.229,40.229,0,0,0-2.491,4.23c-5.286,10.355-7.071,24.723-4.656,37.5a.553.553,0,0,1-.143.484.539.539,0,0,1-.476.166,1.19,1.19,0,0,0-.878.393,2.928,2.928,0,0,0-.69,1.438,11.125,11.125,0,0,0-.1,3.625A30.263,30.263,0,0,0,48.6,69.961a32.349,32.349,0,0,0,2.173,5.381c.846,1.656,3.42,6.751,6.883,6.6h.016c.014,0,.026.006.04.007a.526.526,0,0,1,.506.461c0,.006.008.051.019.115C58.593,84.578,63.955,112.976,87.135,113Z"
    />
    <path
      index="2"
      class="region"
      d="M141,130.965a161.709,161.709,0,0,0-15.862-5.128c-7.58-2.153-13.568-3.853-16-6.711-2.095-2.462-1.783-9.539-.69-16.066-4.562,6.021-11.343,11.031-21.307,11.04-9.963-.009-16.744-5.019-21.306-11.04,1.093,6.527,1.405,13.605-.69,16.066-2.434,2.858-8.422,4.558-16,6.711A162.186,162.186,0,0,0,33.3,130.954L43.52,150.609H78.357a4.349,4.349,0,0,0,.388-2.013,4.015,4.015,0,0,0-.946-2.879,4.3,4.3,0,0,1-1.055-2.845c0-4.885,4.661-8.86,10.39-8.86s10.391,3.975,10.391,8.86a4.3,4.3,0,0,1-1.055,2.845,4.011,4.011,0,0,0-.946,2.879,4.349,4.349,0,0,0,.388,2.013h34.871Z"
    />
    <path
      index="3"
      class="region"
      d="M87.134,135.012c-5.186,0-9.39,3.519-9.39,7.86,0,2.41,2,2.195,2,5.724s-2,3.314-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.195,2,5.725-2,3.313-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.2,2,5.724-2,3.314-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.2,2,5.724-2,3.314-2,5.724,2,2.195,2,5.725-2,3.313-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724,2,2.195,2,5.724-2,3.314-2,5.724c0,4.341,4.2,7.861,9.39,7.861s9.391-3.52,9.391-7.861c0-2.41-2-2.195-2-5.724s2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.725-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724-2-2.2-2-5.724,2-3.314,2-5.725-2-2.194-2-5.724,2-3.314,2-5.724-2-2.195-2-5.724,2-3.314,2-5.724C96.525,138.531,92.321,135.012,87.134,135.012Z"
    />
    <path
      index="4"
      class="region"
      d="M42.588,151.211,32.275,131.374c-6.809,2.822-13.3,6.61-18.07,12.263-3.5,4.151-7.346,14.616-9.276,39.406H32.362Z"
    />
    <path
      index="4"
      class="region"
      d="M160.064,143.637c-4.763-5.645-11.244-9.431-18.043-12.251l-10.307,19.826,10.194,31.831H169.34C167.41,158.253,163.566,147.788,160.064,143.637Z"
    />
    <path
      index="5"
      class="region"
      d="M3.8,235.386c.023,1.33.039,2.279.039,2.779a113.543,113.543,0,0,1-.978,12.207,172.83,172.83,0,0,0-1.423,20.12c0,7.149.954,16.143,1.877,24.842.794,7.486,1.544,14.558,1.544,19.414a.547.547,0,0,1-.039.2,63.387,63.387,0,0,0-3.718,20.692c0,11.333,6.848,26.167,9.351,26.167,2.209,0,7.382,0,7.4-20.088a.552.552,0,1,1,1.1,0c0,.412.105,2.467,2.173,2.467,2.122,0,3.721-6.239,3.721-14.512,0-7.591-3.167-15.3-3.2-15.371a.561.561,0,0,1-.043-.231c.007-.225.756-22.627,2.821-33.923.475-2.6,1.013-5.417,1.557-8.269,1.79-9.37,3.641-19.058,3.641-22.942,0-2.926.166-7.461.311-11.462.11-3.013.205-5.615.205-6.876,0-1.1.253-6.474.574-13.282.548-11.651,1.3-27.607,1.3-33.115a.574.574,0,0,1,.019-.1c0-.021,0-.041.007-.061H4.854C3.888,196.983,3.435,213.73,3.8,235.386Z"
    />
    <path
      index="5"
      class="region"
      d="M169.445,314.951a.567.567,0,0,1-.038-.2c0-4.856.749-11.928,1.543-19.414.924-8.7,1.878-17.693,1.878-24.842a173.05,173.05,0,0,0-1.423-20.12,113.543,113.543,0,0,1-.978-12.207c0-.5.016-1.449.039-2.779.368-21.656-.085-38.4-1.051-51.343H142.227c.006.024,0,.048.008.072a.563.563,0,0,1,.018.091c0,5.508.75,21.464,1.3,33.115.321,6.808.574,12.186.574,13.282,0,1.261.095,3.863.205,6.876.147,4,.312,8.536.312,11.462,0,3.882,1.848,13.562,3.637,22.923.546,2.859,1.084,5.681,1.561,8.288,2.065,11.3,2.813,33.7,2.82,33.923a.544.544,0,0,1-.042.231,46.477,46.477,0,0,0-3.2,15.371c0,8.273,1.6,14.512,3.721,14.512,2.069,0,2.173-2.055,2.173-2.467a.553.553,0,1,1,1.105,0c.012,20.088,5.185,20.088,7.395,20.088,2.5,0,9.351-14.834,9.351-26.167A63.373,63.373,0,0,0,169.445,314.951Z"
    />
    <path
      index="6"
      class="region"
      d="M43.51,151.609,33.089,184.05a.48.48,0,0,1,.024.063c.264,1.548,6.177,36.295,6.748,47.544l0,.046H77.6c.037-.051.075-.1.112-.152a4.753,4.753,0,0,0,0-5.635,4.465,4.465,0,0,1,0-5.814,4.752,4.752,0,0,0,0-5.634,4.465,4.465,0,0,1,0-5.814,4.752,4.752,0,0,0,0-5.634,4.465,4.465,0,0,1,0-5.814,4.752,4.752,0,0,0,0-5.634,4.465,4.465,0,0,1,0-5.814c.1-.14.481-.775.884-1.473a5.415,5.415,0,0,0,.146-1.344,6.726,6.726,0,0,0-.043-.754l-.106,0a3.786,3.786,0,0,0-.881-2.062,4.464,4.464,0,0,1,0-5.813,4.753,4.753,0,0,0,0-5.635,4.464,4.464,0,0,1,0-5.813,4.753,4.753,0,0,0,0-5.635,4.434,4.434,0,0,1-1.076-2.907,4.266,4.266,0,0,1,.933-2.711H43.51Z"
    />
    <path
      index="6"
      class="region"
      d="M96.7,151.609a4.266,4.266,0,0,1,.933,2.711,4.439,4.439,0,0,1-1.076,2.907,4.749,4.749,0,0,0,0,5.635,4.464,4.464,0,0,1,0,5.813,4.749,4.749,0,0,0,0,5.635,4.464,4.464,0,0,1,0,5.813c-.084.113-.164.225-.242.338l-.124,0a3.959,3.959,0,0,0-.664,2.484A5.259,5.259,0,0,0,95.7,184.4c.438.708.782,1.255.856,1.356a4.465,4.465,0,0,1,0,5.814,4.748,4.748,0,0,0,0,5.634,4.465,4.465,0,0,1,0,5.814,4.748,4.748,0,0,0,0,5.634,4.465,4.465,0,0,1,0,5.814,4.748,4.748,0,0,0,0,5.634,4.465,4.465,0,0,1,0,5.814,4.749,4.749,0,0,0,0,5.635c.037.049.075.1.112.152h37.739l0-.043c.57-11.247,6.484-46,6.748-47.547a.569.569,0,0,1,.024-.065l-10.389-32.439H96.7Z"
    />
    <path
      index="7"
      class="region"
      d="M95.628,274.526a3.923,3.923,0,0,0,.926,2.817,4.442,4.442,0,0,1,1.076,2.907,4.306,4.306,0,0,1-.975,2.769h45.254c-.5-2.693-1.03-5.469-1.567-8.285-2.941-15.414-5.982-31.352-5.982-41.536,0-.119,0-.261.007-.39H97.314a4.189,4.189,0,0,1,.316,1.649,4.437,4.437,0,0,1-1.076,2.907,4.749,4.749,0,0,0,0,5.635,4.464,4.464,0,0,1,0,5.813,4.749,4.749,0,0,0,0,5.635,4.465,4.465,0,0,1,0,5.814,4.748,4.748,0,0,0,0,5.634,4.465,4.465,0,0,1,0,5.814A3.923,3.923,0,0,0,95.628,274.526Z"
    />
    <path
      index="7"
      class="region"
      d="M32.36,283.019H77.614a4.306,4.306,0,0,1-.975-2.769,4.436,4.436,0,0,1,1.076-2.907,4.752,4.752,0,0,0,0-5.634,4.465,4.465,0,0,1,0-5.814,4.752,4.752,0,0,0,0-5.634,4.465,4.465,0,0,1,0-5.814,4.753,4.753,0,0,0,0-5.635,4.464,4.464,0,0,1,0-5.813,4.753,4.753,0,0,0,0-5.635,4.432,4.432,0,0,1-1.076-2.907,4.189,4.189,0,0,1,.316-1.649H39.9c0,.129.007.271.007.39,0,10.184-3.041,26.122-5.982,41.536C33.389,277.55,32.861,280.326,32.36,283.019Z"
    />
    <path
      index="8"
      class="region"
      d="M86.274,337.178q.163-5.358.308-10.941a.553.553,0,0,1,1.105,0q.144,5.586.308,10.941h56.1c.616-9.567.98-19.976.98-31.312,0-4.745-1.289-12.693-2.958-21.742H95.953a4.425,4.425,0,0,0-.325,1.85,3.923,3.923,0,0,0,.926,2.817,4.465,4.465,0,0,1,0,5.814,4.749,4.749,0,0,0,0,5.635,4.436,4.436,0,0,1,1.076,2.906c0,4.944-4.709,8.965-10.5,8.965s-10.5-4.021-10.5-8.965a4.431,4.431,0,0,1,1.076-2.906,4.753,4.753,0,0,0,0-5.635,4.465,4.465,0,0,1,0-5.814,3.928,3.928,0,0,0,.925-2.817,4.409,4.409,0,0,0-.325-1.85H32.154c-1.669,9.049-2.959,17-2.959,21.742,0,11.336.365,21.745.981,31.312Z"
    />
    <path
      index="9"
      class="region"
      d="M144.022,338.282H88.028c1.7,55.271,4.788,91.888,8.775,103.675.443,1.309-.024,3.987-.732,8.04a131.433,131.433,0,0,0-2.378,23.49c0,14.518,1.666,37.993,1.683,38.229,0,5.226-.5,11.176-.933,16.425-.355,4.253-.662,7.926-.662,10.518,0,2.933.279,6.989.548,10.91.27,3.941.55,8.016.55,10.988,0,.94-.055,2.067-.113,3.259-.224,4.635-.53,10.982,2.067,13.707a4.573,4.573,0,0,0,3.5,1.372c8.829,0,28.907-4.886,28.907-12.934,0-2.358-2.576-5.645-5.559-9.45-4.251-5.425-9.542-12.176-9.542-19.378,0-4.985,2.794-13.875,6.029-24.169,4.839-15.393,10.86-34.55,10.86-50.511a171.145,171.145,0,0,0-1.179-20.07,115.616,115.616,0,0,1-.862-12.912c0-3.892,1.41-9.729,3.363-17.806A403.426,403.426,0,0,0,144.022,338.282Z"
    />
    <path
      index="9"
      class="region"
      d="M78.2,450c-.708-4.053-1.175-6.731-.732-8.04,3.987-11.787,7.073-48.4,8.774-103.675H30.247a403.426,403.426,0,0,0,11.669,73.383c1.952,8.077,3.363,13.914,3.363,17.806a115.616,115.616,0,0,1-.862,12.912,171.145,171.145,0,0,0-1.179,20.07c0,15.961,6.021,35.118,10.86,50.511,3.235,10.294,6.029,19.184,6.029,24.169,0,7.2-5.291,13.953-9.543,19.378-2.982,3.805-5.558,7.092-5.558,9.45,0,8.048,20.077,12.934,28.907,12.934a4.574,4.574,0,0,0,3.5-1.372c2.6-2.725,2.29-9.072,2.066-13.707-.057-1.192-.112-2.319-.112-3.259,0-2.972.28-7.047.55-10.988.269-3.921.547-7.977.547-10.91,0-2.592-.306-6.265-.661-10.518-.438-5.249-.935-11.2-.935-16.386.019-.275,1.685-23.751,1.685-38.268A131.433,131.433,0,0,0,78.2,450Z"
    />
    <path
      class="outline"
      d="M100.336,580a5.7,5.7,0,0,1-4.3-1.714c-2.924-3.07-2.6-9.69-2.37-14.523.057-1.179.111-2.292.111-3.206,0-2.934-.279-6.989-.548-10.911-.27-3.941-.549-8.016-.549-10.987,0-2.638.308-6.332.665-10.61.436-5.227.931-11.152.931-16.294-.016-.2-1.685-23.711-1.685-38.268a132.37,132.37,0,0,1,2.4-23.68c.654-3.747,1.127-6.453.774-7.5-4.76-14.069-7.286-57.52-8.623-97.4-1.336,39.876-3.862,83.327-8.622,97.4-.353,1.043.12,3.749.774,7.5a132.464,132.464,0,0,1,2.395,23.68c0,14.557-1.669,38.072-1.687,38.307,0,5.1.5,11.028.933,16.255.357,4.278.665,7.972.665,10.61,0,2.971-.279,7.046-.549,10.987-.27,3.922-.548,7.977-.548,10.911,0,.914.054,2.027.111,3.206.234,4.833.554,11.453-2.37,14.523a5.7,5.7,0,0,1-4.3,1.714c-8.71,0-30.012-4.92-30.012-14.039,0-2.74,2.685-6.165,5.794-10.132,4.147-5.291,9.307-11.875,9.307-18.7,0-4.816-2.77-13.63-5.978-23.837-4.861-15.466-10.911-34.713-10.911-50.843a172.314,172.314,0,0,1,1.185-20.187,113.118,113.118,0,0,0,.856-12.8c0-3.76-1.4-9.543-3.332-17.547-4.769-19.738-12.751-52.774-12.751-106.058,0-6.44,2.307-18.534,4.751-31.339,2.8-14.648,5.962-31.249,5.962-41.329,0-6.944-3.935-31.693-5.81-43.085-.238,7.374-.763,18.526-1.174,27.26-.32,6.794-.572,12.16-.572,13.23,0,1.281-.1,3.892-.206,6.916-.145,3.991-.31,8.516-.31,11.422,0,3.988-1.86,13.724-3.658,23.14-.545,2.852-1.083,5.668-1.559,8.269-1.973,10.794-2.737,31.871-2.8,33.644a46.625,46.625,0,0,1,3.237,15.683c0,7.2-1.264,15.616-4.826,15.616a3.058,3.058,0,0,1-2.209-.814c-.438,16.269-4.714,18.436-8.463,18.436C6.763,362.915,0,346.882,0,335.643a64.732,64.732,0,0,1,3.757-21c-.011-4.8-.752-11.793-1.538-19.2C1.293,286.723.336,277.7.336,270.492a173.764,173.764,0,0,1,1.43-20.244,112.927,112.927,0,0,0,.971-12.083c0-.5-.016-1.439-.038-2.76-1.1-64.687,5.191-86,10.662-92.48,8.957-10.618,23.659-14.8,35.472-18.15,7.109-2.02,13.247-3.763,15.463-6.366,1.715-2.014,1.734-8.812.051-17.334a52.778,52.778,0,0,1-7.14-18.04c-3.892-.28-6.436-5.267-7.418-7.192A31.566,31.566,0,0,1,46.366,64.25c-.307-2.951.077-4.968,1.14-6a2.4,2.4,0,0,1,1.047-.606c-2.294-12.855-.446-27.215,4.866-37.619C58.082,10.9,67.714.01,87.122,0c19.433.01,29.065,10.9,33.728,20.029,5.311,10.4,7.16,24.764,4.865,37.619a2.393,2.393,0,0,1,1.047.606c1.064,1.028,1.448,3.045,1.141,5.995a31.593,31.593,0,0,1-3.424,11.594c-.981,1.925-3.526,6.911-7.417,7.192a52.8,52.8,0,0,1-7.14,18.04c-1.683,8.522-1.664,15.32.051,17.334,2.216,2.6,8.354,4.346,15.462,6.366,11.813,3.355,26.516,7.532,35.473,18.15,5.47,6.484,11.761,27.793,10.662,92.48-.022,1.321-.038,2.264-.038,2.76a112.927,112.927,0,0,0,.971,12.083,173.764,173.764,0,0,1,1.43,20.244c0,7.207-.957,16.231-1.883,24.958-.786,7.4-1.528,14.4-1.538,19.2a64.732,64.732,0,0,1,3.757,21c0,11.239-6.763,27.272-10.456,27.272-3.749,0-8.025-2.167-8.463-18.436a3.058,3.058,0,0,1-2.209.814c-3.562,0-4.826-8.412-4.826-15.616a46.625,46.625,0,0,1,3.237-15.683c-.061-1.773-.825-22.851-2.8-33.644-.476-2.6-1.014-5.417-1.559-8.269-1.8-9.416-3.658-19.152-3.658-23.14,0-2.906-.165-7.431-.311-11.422-.11-3.024-.206-5.635-.206-6.916,0-1.07-.252-6.436-.572-13.23-.411-8.734-.935-19.886-1.173-27.26-1.875,11.393-5.81,36.141-5.81,43.085,0,10.08,3.167,26.681,5.962,41.329,2.444,12.805,4.751,24.9,4.751,31.339,0,53.284-7.982,86.32-12.751,106.058-1.935,8-3.332,13.787-3.332,17.547a112.886,112.886,0,0,0,.856,12.8,172.314,172.314,0,0,1,1.185,20.187c0,16.13-6.05,35.377-10.911,50.843-3.208,10.207-5.978,19.021-5.978,23.837,0,6.821,5.16,13.4,9.307,18.7,3.109,3.967,5.793,7.392,5.793,10.132C130.347,575.08,109.046,580,100.336,580Zm-13.2-254.3a.553.553,0,0,1,.553.539c1.608,62,4.846,103.1,9.116,115.72.443,1.309-.024,3.987-.732,8.04a131.433,131.433,0,0,0-2.378,23.49c0,14.518,1.666,37.993,1.683,38.229,0,5.226-.5,11.176-.933,16.425-.355,4.253-.662,7.926-.662,10.518,0,2.933.279,6.989.548,10.91.27,3.942.55,8.016.55,10.988,0,.94-.055,2.067-.113,3.259-.224,4.635-.53,10.982,2.067,13.707a4.573,4.573,0,0,0,3.5,1.372c8.829,0,28.907-4.886,28.907-12.934,0-2.358-2.576-5.645-5.559-9.45-4.251-5.425-9.542-12.176-9.542-19.378,0-4.985,2.794-13.875,6.029-24.169,4.839-15.393,10.86-34.55,10.86-50.511a171.145,171.145,0,0,0-1.179-20.07,115.616,115.616,0,0,1-.862-12.912c0-3.892,1.41-9.729,3.363-17.806,4.757-19.69,12.72-52.647,12.72-105.8,0-6.335-2.3-18.38-4.731-31.132-2.941-15.414-5.982-31.352-5.982-41.536,0-9.161,6.518-47.459,6.8-49.085a.542.542,0,0,1,.591-.457.552.552,0,0,1,.506.55c0,5.508.751,21.464,1.3,33.115.32,6.808.573,12.186.573,13.282,0,1.261.095,3.863.205,6.876.146,4,.312,8.536.312,11.462,0,3.883,1.85,13.567,3.638,22.933.546,2.855,1.084,5.673,1.56,8.278,2.065,11.3,2.813,33.7,2.821,33.923a.561.561,0,0,1-.043.231,46.488,46.488,0,0,0-3.2,15.371c0,8.273,1.6,14.511,3.721,14.511,2.068,0,2.173-2.054,2.173-2.466a.552.552,0,1,1,1.1,0c.013,20.088,5.186,20.088,7.395,20.088,2.5,0,9.351-14.834,9.351-26.167a63.387,63.387,0,0,0-3.718-20.692.547.547,0,0,1-.039-.2c0-4.856.75-11.928,1.544-19.415.923-8.7,1.877-17.692,1.877-24.841a172.83,172.83,0,0,0-1.423-20.12,113.543,113.543,0,0,1-.978-12.207c0-.5.016-1.449.039-2.779,1.093-64.345-5.054-85.409-10.4-91.749-8.739-10.36-23.261-14.485-34.93-17.8-7.58-2.153-13.568-3.853-16-6.711-2.346-2.756-1.678-11.3-.271-18.373a.559.559,0,0,1,.081-.2,51.432,51.432,0,0,0,7.11-18.147.524.524,0,0,1,.561-.468l.1,0c3.414,0,5.945-4.961,6.783-6.6a30.583,30.583,0,0,0,3.309-11.208c.35-3.363-.343-4.615-.787-5.062a1.182,1.182,0,0,0-.888-.392.56.56,0,0,1-.608-.651c2.415-12.774.63-27.142-4.656-37.5C115.343,11.674,106,1.114,87.146,1.105,68.273,1.114,58.926,11.674,54.4,20.532c-5.286,10.355-7.071,24.723-4.656,37.5a.553.553,0,0,1-.143.484.539.539,0,0,1-.475.166,1.19,1.19,0,0,0-.879.393c-.444.447-1.136,1.7-.786,5.063a30.584,30.584,0,0,0,3.309,11.207c.846,1.656,3.42,6.751,6.883,6.6a.529.529,0,0,1,.562.468,51.511,51.511,0,0,0,7.11,18.147.559.559,0,0,1,.081.2c1.407,7.075,2.074,15.617-.272,18.373-2.433,2.858-8.421,4.558-16,6.711-11.669,3.315-26.191,7.44-34.931,17.8-5.349,6.34-11.495,27.4-10.4,91.749.023,1.33.039,2.28.039,2.779a113.543,113.543,0,0,1-.978,12.207,172.83,172.83,0,0,0-1.423,20.12c0,7.149.954,16.143,1.877,24.841.794,7.487,1.544,14.559,1.544,19.415a.547.547,0,0,1-.039.2,63.387,63.387,0,0,0-3.718,20.692c0,11.333,6.847,26.167,9.351,26.167,2.209,0,7.382,0,7.394-20.088a.554.554,0,0,1,.553-.553h0a.553.553,0,0,1,.552.553c0,.412.105,2.466,2.173,2.466,2.121,0,3.721-6.238,3.721-14.511a46.488,46.488,0,0,0-3.2-15.371.561.561,0,0,1-.043-.231c.008-.225.755-22.628,2.821-33.923.476-2.6,1.014-5.423,1.559-8.278,1.789-9.366,3.639-19.05,3.639-22.933,0-2.926.165-7.461.311-11.462.11-3.013.205-5.615.205-6.876,0-1.1.253-6.474.574-13.282.548-11.651,1.3-27.607,1.3-33.115a.552.552,0,0,1,.506-.55.545.545,0,0,1,.591.457c.277,1.626,6.8,39.924,6.8,49.085,0,10.184-3.041,26.122-5.982,41.536-2.433,12.752-4.732,24.8-4.732,31.132,0,53.152,7.963,86.109,12.721,105.8,1.952,8.077,3.363,13.914,3.363,17.806a115.616,115.616,0,0,1-.862,12.912,171.145,171.145,0,0,0-1.179,20.07c0,15.961,6.021,35.118,10.86,50.511,3.235,10.294,6.029,19.184,6.029,24.169,0,7.2-5.291,13.953-9.543,19.378-2.982,3.805-5.558,7.092-5.558,9.45,0,8.048,20.077,12.934,28.907,12.934a4.574,4.574,0,0,0,3.5-1.372c2.6-2.725,2.29-9.072,2.066-13.707-.057-1.192-.112-2.319-.112-3.259,0-2.972.28-7.046.55-10.988.269-3.921.547-7.977.547-10.91,0-2.592-.306-6.265-.661-10.518-.438-5.249-.935-11.2-.935-16.386.019-.275,1.685-23.751,1.685-38.268A131.433,131.433,0,0,0,78.2,450c-.708-4.053-1.175-6.731-.732-8.04,4.27-12.623,7.507-53.721,9.116-115.72A.553.553,0,0,1,87.134,325.7Z"
    />
  </svg>`;
  };
  var ctChildVascular = function ctChildVascular2() {
    return x`<svg
    id="ct_child_vascular"
    hidden
    xmlns="http://www.w3.org/2000/svg"
    x="0"
    y="0"
    style="width:10.89375rem; height:36.25rem;"
    viewBox="0 0 174.3 580"
    xml:space="preserve"
  >
    <path
      index="1"
      class="region"
      d="M87.134,113c23.942-.02,28.87-30.28,28.917-30.586a.549.549,0,0,1,.562-.468c3.481.125,6.038-4.943,6.883-6.6a30.6,30.6,0,0,0,3.31-11.208c.043-.424.071-.814.084-1.173,0-.091,0-.164,0-.251,0-.255.009-.51,0-.733-.006-.139-.021-.253-.031-.38-.011-.147-.019-.3-.036-.436s-.042-.24-.063-.358c-.019-.1-.034-.214-.056-.3-.026-.11-.057-.2-.086-.295-.024-.077-.045-.163-.07-.232s-.065-.15-.1-.222-.054-.13-.082-.183-.066-.108-.1-.161-.058-.1-.087-.137-.066-.08-.1-.117-.051-.061-.075-.085a1.232,1.232,0,0,0-.206-.158c-.037-.026-.076-.063-.111-.083a1.235,1.235,0,0,0-.244-.1c-.009,0-.02-.009-.029-.011a.97.97,0,0,0-.291-.034.508.508,0,0,1-.085-.011.544.544,0,0,1-.38-.156.552.552,0,0,1-.142-.484c2.414-12.773.63-27.141-4.657-37.5C115.344,11.674,106,1.114,87.146,1.105,69.453,1.113,60.131,10.4,55.309,18.854q-.481.846-.9,1.678c-5.287,10.356-7.072,24.723-4.657,37.5a.553.553,0,0,1-.143.484.539.539,0,0,1-.475.166,1.183,1.183,0,0,0-.879.393,2.935,2.935,0,0,0-.691,1.438,11.16,11.16,0,0,0-.095,3.625,30.137,30.137,0,0,0,1.691,7.495,32.947,32.947,0,0,0,1.619,3.712c.845,1.656,3.376,6.693,6.883,6.6h.016a.552.552,0,0,1,.48.28h0a.569.569,0,0,1,.065.187C58.265,82.715,63.208,112.975,87.134,113Z"
    />
    <path
      index="2"
      class="region"
      d="M43.52,150.609h87.263L141,130.965a161.811,161.811,0,0,0-15.863-5.128c-7.58-2.153-13.568-3.853-16-6.711-2.1-2.462-1.784-9.539-.691-16.066-4.562,6.021-11.343,11.031-21.307,11.04-9.963-.009-16.744-5.019-21.305-11.04,1.093,6.527,1.4,13.605-.691,16.066-2.434,2.858-8.421,4.558-16,6.711A162.273,162.273,0,0,0,33.3,130.954Z"
    />
    <path
      index="3"
      class="region"
      d="M25.987,271.883c1.79-9.37,3.64-19.058,3.64-22.942,0-2.926.166-7.461.312-11.462.11-3.013.2-5.615.2-6.876,0-1.1.253-6.474.573-13.282.548-11.651,1.3-27.607,1.3-33.115a.5.5,0,0,1,.02-.1.49.49,0,0,1,.007-.067l10.545-32.826L32.275,131.374c-6.808,2.822-13.3,6.61-18.07,12.263-5.349,6.34-11.495,27.4-10.4,91.749.022,1.33.038,2.279.038,2.779a113.543,113.543,0,0,1-.978,12.207,173.05,173.05,0,0,0-1.423,20.12c0,7.149.955,16.143,1.877,24.842.794,7.486,1.544,14.558,1.544,19.414a.546.546,0,0,1-.038.2,63.342,63.342,0,0,0-3.719,20.692c0,11.333,6.848,26.167,9.351,26.167,2.209,0,7.383,0,7.4-20.088a.553.553,0,1,1,1.105,0c0,.412.1,2.467,2.173,2.467,2.121,0,3.721-6.239,3.721-14.512a46.477,46.477,0,0,0-3.2-15.371.561.561,0,0,1-.043-.231c.008-.225.756-22.627,2.821-33.923C24.9,277.551,25.442,274.735,25.987,271.883Z"
    />
    <path
      index="3"
      class="region"
      d="M169.446,314.951a.547.547,0,0,1-.039-.2c0-4.856.75-11.928,1.544-19.414.923-8.7,1.877-17.693,1.877-24.842a172.83,172.83,0,0,0-1.423-20.12,113.8,113.8,0,0,1-.978-12.207c0-.5.017-1.449.039-2.779,1.093-64.345-5.053-85.409-10.4-91.749-4.762-5.645-11.244-9.431-18.043-12.251l-10.307,19.826,10.513,32.826a.5.5,0,0,1,.008.077.473.473,0,0,1,.018.091c0,5.508.751,21.464,1.3,33.115.32,6.808.574,12.186.574,13.282,0,1.261.095,3.863.2,6.876.146,4,.311,8.536.311,11.462,0,3.882,1.849,13.562,3.637,22.923.546,2.859,1.085,5.681,1.561,8.288,2.065,11.3,2.813,33.7,2.821,33.923a.577.577,0,0,1-.042.231,46.448,46.448,0,0,0-3.2,15.371c0,8.273,1.6,14.512,3.721,14.512,2.068,0,2.173-2.055,2.173-2.467a.552.552,0,1,1,1.1,0c.012,20.088,5.185,20.088,7.395,20.088,2.5,0,9.352-14.834,9.352-26.167A63.4,63.4,0,0,0,169.446,314.951Z"
    />
    <path
      index="4"
      class="region"
      d="M130.714,151.713H43.587L33.136,184.248c.317,1.862,3.288,19.39,5.189,33.366h97.619c1.9-13.981,4.873-31.514,5.189-33.367Zm-15.981,39.232c-2.153,7.193-18.341,4.716-23.842,3.281a22.639,22.639,0,0,1-4.7-1.849,9.516,9.516,0,0,1-.248,2.64c-.4.915-1.962,1.241-3.293,1.241s-2.9-.326-3.293-1.242a11.442,11.442,0,0,1-.271-3.341,28.889,28.889,0,0,0-.378-5.282,7.879,7.879,0,0,1-.783-1.159c-2.336-4.467-1.913-14.245.8-18.751a20.8,20.8,0,0,0,.522-5.285,9.449,9.449,0,0,1,.271-2.964c.4-.915,1.962-1.242,3.294-1.242s2.895.327,3.293,1.243a12.1,12.1,0,0,1,.27,3.445c.01.823.022,1.731.065,2.56,10.263-2.492,14.289.035,17.815,3.086C111.415,173.527,116.509,185.006,114.733,190.945Z"
    />
    <path
      index="5"
      class="region"
      d="M85.927,190.974a21.884,21.884,0,0,0,5.242,2.183c6.321,1.65,20.761,3.3,22.505-2.529,1.642-5.486-3.384-16.614-10.145-22.467-2.846-2.465-6.391-5.531-17.462-2.69a.563.563,0,0,1-.457-.086.548.548,0,0,1-.23-.4c-.084-1.02-.1-2.224-.113-3.287a16.26,16.26,0,0,0-.178-3.019,4.788,4.788,0,0,0-4.561,0,11.337,11.337,0,0,0-.18,2.54,21.162,21.162,0,0,1-.592,5.665A.493.493,0,0,1,79.7,167c-2.538,4.141-2.964,13.581-.8,17.72a7.591,7.591,0,0,0,.75,1.088.57.57,0,0,1,.1.21,28.351,28.351,0,0,1,.436,5.642,14.716,14.716,0,0,0,.179,2.915,4.784,4.784,0,0,0,4.561,0,22.8,22.8,0,0,0,.173-3.111.57.57,0,0,1,.278-.481A.555.555,0,0,1,85.927,190.974Z"
    />
    <path
      index="6"
      class="region"
      d="M86.292,336.562q.153-5.066.29-10.325a.553.553,0,0,1,1.105,0c.091,3.517.188,6.951.289,10.325h56.155c.592-9.4.943-19.6.943-30.7,0-6.334-2.3-18.38-4.732-31.132-2.941-15.414-5.982-31.352-5.982-41.536a139.428,139.428,0,0,1,1.435-14.479H38.474A139.525,139.525,0,0,1,39.91,233.2c0,10.184-3.042,26.122-5.983,41.536-2.433,12.752-4.731,24.8-4.731,31.132,0,11.1.35,21.3.943,30.7Z"
    />
    <path
      index="3"
      class="region"
      d="M144.063,337.666H88.008c1.706,56.326,4.732,92.28,8.8,104.291.444,1.31-.025,3.987-.732,8.04a131.455,131.455,0,0,0-2.378,23.49c0,14.517,1.667,37.993,1.684,38.228,0,5.228-.495,11.178-.934,16.427-.355,4.253-.662,7.925-.662,10.517,0,2.933.279,6.989.547,10.91.271,3.941.551,8.016.551,10.988,0,.94-.054,2.067-.113,3.259-.224,4.635-.53,10.981,2.067,13.707a4.574,4.574,0,0,0,3.5,1.372c8.829,0,28.906-4.886,28.906-12.934,0-2.358-2.576-5.645-5.559-9.45-4.251-5.425-9.542-12.176-9.542-19.378,0-4.985,2.794-13.875,6.03-24.169,4.838-15.393,10.859-34.55,10.859-50.511a171.145,171.145,0,0,0-1.179-20.07,115.6,115.6,0,0,1-.862-12.911c0-3.892,1.41-9.73,3.363-17.808A403.313,403.313,0,0,0,144.063,337.666Z"
    />
    <path
      index="3"
      class="region"
      d="M78.2,450c-.708-4.053-1.175-6.731-.732-8.04,4-11.831,7.1-48.672,8.794-104.291H30.206a403.4,403.4,0,0,0,11.71,74c1.952,8.078,3.363,13.916,3.363,17.808a115.6,115.6,0,0,1-.862,12.911,171.145,171.145,0,0,0-1.179,20.07c0,15.961,6.021,35.118,10.86,50.511,3.235,10.294,6.029,19.184,6.029,24.169,0,7.2-5.291,13.953-9.543,19.378-2.982,3.805-5.557,7.092-5.557,9.45,0,8.048,20.077,12.934,28.906,12.934a4.571,4.571,0,0,0,3.5-1.372c2.6-2.725,2.29-9.072,2.066-13.706-.057-1.192-.112-2.32-.112-3.26,0-2.972.28-7.047.55-10.988.269-3.921.547-7.977.547-10.91,0-2.592-.306-6.264-.661-10.517-.438-5.249-.934-11.2-.934-16.387.018-.275,1.685-23.751,1.685-38.268A131.439,131.439,0,0,0,78.2,450Z"
    />
    <path
      class="vascular"
      d="M123.165,236.72a1.1,1.1,0,0,1-1.56.14c-5.86-4.86-11.17-3.73-17.32-2.41-4.02.86-8.5,1.82-13.58,1.12-.12,2.92-.33,6.13-.58,9.22,1.14,2.48,3,4.07,4.92,5.71,2.18,1.85,4.44,3.78,5.42,7.07a.556.556,0,0,1-.37.69.875.875,0,0,1-.16.02.555.555,0,0,1-.53-.39c-.89-2.99-2.92-4.72-5.08-6.55a21.777,21.777,0,0,1-4.36-4.56c-.43,5.13-.91,9.63-1.12,11.49,16.94,19.38,26.48,33.02,28.25,48.7,1.6,14.13,1.5,33.91,1.42,51.35-.05,9.74-.09,18.16.17,24.21.73,17.1,1.52,40.88,1.52,56.34,0,15.37-4.46,61.24-7.1,76.35-6.06,34.8,7.08,44.81,7.21,44.9a1.1,1.1,0,1,1-1.28,1.8c-.59-.42-14.44-10.74-8.11-47.08,2.55-14.6,6.81-58.03,7.06-74.55-.06.48-.12.94-.19,1.44-1.52,11.49-3.81,28.85-7.82,49.4-4.03,20.71-6.05,35.02-6.35,45.03-.62,21.11,6.82,23.03,6.9,23.04a.566.566,0,0,1,.42.66.547.547,0,0,1-.54.44c-.03,0-.07-.01-.11-.01-.34-.07-8.42-1.97-7.77-24.16.3-10.07,2.32-24.44,6.37-45.21,4-20.52,6.29-37.86,7.81-49.34.5-3.81.91-6.9,1.25-9.11-.16-15.08-.84-34.99-1.48-49.85-.26-6.1-.22-14.54-.17-24.31.08-17.38.18-37.09-1.4-51.09a48.8,48.8,0,0,0-4.74-15.81c1.3,10.2.41,18.89-.53,28.01-.87,8.43-1.77,17.15-1.14,28.05a.565.565,0,0,1-.52.59h-.04a.556.556,0,0,1-.55-.52c-.63-10.99.27-19.76,1.15-28.23,1.03-9.99,2.01-19.46.06-30.95-4.68-8.62-11.86-17.71-21.46-28.69-9.62,11-16.8,20.1-21.49,28.72-1.94,11.48-.96,20.94.07,30.92.87,8.47,1.78,17.24,1.14,28.23a.549.549,0,0,1-.55.52h-.03a.552.552,0,0,1-.52-.59c.63-10.9-.27-19.62-1.14-28.05-.94-9.11-1.83-17.79-.53-27.99a48.592,48.592,0,0,0-4.74,15.79c-1.58,14-1.49,33.7-1.4,51.09.05,9.77.09,18.21-.17,24.31-.64,14.86-1.32,34.77-1.49,49.85.35,2.21.76,5.3,1.26,9.12,1.52,11.48,3.81,28.82,7.81,49.33,4.05,20.76,6.07,35.13,6.37,45.21.65,22.19-7.43,24.09-7.78,24.16-.03,0-.07.01-.11.01a.546.546,0,0,1-.54-.45.559.559,0,0,1,.43-.65c.11-.02,7.51-1.98,6.89-23.04-.29-10.02-2.31-24.33-6.35-45.03-4-20.55-6.3-37.91-7.81-49.39-.07-.5-.13-.97-.19-1.45.24,16.51,4.51,59.95,7.05,74.55,6.34,36.34-7.51,46.66-8.1,47.08a1.107,1.107,0,0,1-1.29-1.8c.23-.17,13.26-10.23,7.22-44.9-2.64-15.11-7.11-60.98-7.11-76.35,0-15.46.79-39.24,1.53-56.34.26-6.06.22-14.47.17-24.21-.09-17.45-.18-37.22,1.41-51.35,1.78-15.69,11.36-29.35,28.38-48.81.3-2.74,1.51-14.07,1.87-22.61-5.13.74-9.67-.23-13.73-1.1-6.14-1.32-11.46-2.46-17.32,2.41a1.084,1.084,0,0,1-.7.26,1.1,1.1,0,0,1-.85-.4,1.109,1.109,0,0,1,.14-1.56c6.69-5.55,12.76-4.25,19.2-2.87,4.16.89,8.45,1.79,13.34,1a47.369,47.369,0,0,0-.13-5.64c-.68-5.93,1-12.83,3.13-21.56.39-1.61.8-3.31,1.21-5.06a44.9,44.9,0,0,1-10.51,1.4,36.252,36.252,0,0,1-8.6-1.12,24.869,24.869,0,0,0-5.44-.81h-.21a.555.555,0,0,1,0-1.11,25.916,25.916,0,0,1,5.89.84c4.15.93,9.26,2.06,19.16-.41q.69-2.97,1.34-6.17c1,.2,2.1.39,3.26.55-.4,2.02-.83,3.99-1.26,5.88,8.25,3.95,12.09,3.94,17.81,3.92,2.15-.01,4.57-.02,7.58.18a.55.55,0,0,1-.03,1.1h-.04c-2.97-.19-5.37-.18-7.5-.17-5.81.02-9.76.03-18.08-3.93-.46,1.98-.92,3.89-1.36,5.69q-.72,2.94-1.34,5.59c7.13,1.64,8.16,4.61,9.15,7.5.67,1.93,1.29,3.76,3.69,5.38a.55.55,0,0,1,.14.77.53.53,0,0,1-.45.24.561.561,0,0,1-.31-.09,10.264,10.264,0,0,1-4.11-5.94c-.98-2.83-1.83-5.3-8.35-6.78-1.19,5.36-1.92,9.89-1.48,13.74a48.068,48.068,0,0,1,.14,6.06c4.77.71,8.97-.18,13.05-1.05,6.43-1.38,12.51-2.68,19.19,2.87A1.11,1.11,0,0,1,123.165,236.72Z"
    />
    <path
      class="vascular"
      d="M164.468,302.707c-1.98-11.562-1.528-26.123-1.128-38.968.346-11.132.646-20.746-.6-26.769-.518-2.5-1.383-5.313-2.386-8.572-2.738-8.9-6.488-21.1-5.111-35.36,2.111-21.878-5.325-41.15-18.5-47.959-10.794-5.575-24.208-2.269-37.836,9.268a10.419,10.419,0,0,0-2.04-.457,9.175,9.175,0,0,0-1.566-.047c-1.341-11.869-1.773-34.566.405-43.706.4-1.7.793-3.49,1.168-5.338.009-.01.023-.015.031-.026,8.458-11.8,10.037-32.062,10.052-32.265a.552.552,0,0,0-1.1-.081c-.014.188-1.39,17.833-8.432,29.539,2.707-14.522,4.23-32.178,1.947-43.312A1.1,1.1,0,0,0,97.2,59.1c2.666,13-.022,35.306-3.649,50.526-2.237,9.389-1.8,32.6-.435,44.607a7.685,7.685,0,0,0-1.069.453,57.25,57.25,0,0,0-6.526-6.01c-.206-4.632-2.62-29.962-4.785-39.05C77.112,94.4,74.423,72.1,77.09,59.1a1.1,1.1,0,0,0-2.164-.444c-2.284,11.134-.761,28.79,1.946,43.312-7.039-11.7-8.418-29.351-8.432-29.539a.552.552,0,0,0-1.1.081c.015.2,1.594,20.469,10.051,32.265.009.011.023.016.032.026.374,1.848.764,3.643,1.167,5.338,1.947,8.169,4.057,29.679,4.6,36.824-11.5-7.992-24.521-9.826-36.559-4.735-18.041,7.628-28.907,28.042-27.038,50.8,1.178,14.329-2.493,26.537-5.173,35.451-.971,3.229-1.809,6.017-2.322,8.5-1.246,6.023-.947,15.637-.6,26.769.4,12.845.852,27.406-1.128,38.968-5.407,31.568-.9,43.154-.706,43.632a1.1,1.1,0,0,0,2.048-.83c-.045-.112-4.438-11.636.836-42.429,2.017-11.782,1.561-26.46,1.158-39.41-.342-10.992-.638-20.485.556-26.252.493-2.384,1.319-5.129,2.274-8.308.725-2.412,1.52-5.067,2.276-7.932.412,7.48,1.62,15.42,2.654,22.161.664,4.341,1.239,8.09,1.43,10.691.581,7.889-1.367,16.542-3.831,27.5l-.1.426c-6.417,28.523,2.122,45.23,2.209,45.4a.552.552,0,0,0,.978-.513c-.085-.162-8.438-16.509-2.109-44.639l.1-.427C22.631,270.725,24.594,262,24,253.949c-.194-2.645-.772-6.413-1.44-10.777-1.21-7.9-2.665-17.443-2.779-25.909A79.415,79.415,0,0,0,21.8,192.841c-1.791-21.8,8.536-41.324,25.7-48.58,14.5-6.132,29.965-1.856,42.726,11.7-.054.051-.113.094-.166.147-2.1,2.08-3.11,5.28-2.83,9.08.01.24.03.49.06.74a2.208,2.208,0,1,0,4.39-.48c-.03-.34-.06-.68-.07-1a6.93,6.93,0,0,1,1.56-5.2,3.639,3.639,0,0,1,3.16-.98,4.2,4.2,0,0,1,3.13,1.69c.85,1.27,1.02,3.2.49,5.65a16.2,16.2,0,0,1,3.58,2.55l.23.2c.1-.28.21-.62.32-1.05,1.29-5.03.2-8.12-.96-9.82a7.85,7.85,0,0,0-2.049-2.066c12.642-10.426,24.9-13.421,34.661-8.382,12.384,6.4,19.343,24.8,17.317,45.784a75.444,75.444,0,0,0,2,24.855c-.154,8.363-1.576,17.726-2.767,25.494-.668,4.362-1.246,8.13-1.44,10.774-.592,8.052,1.371,16.776,3.856,27.82l.1.427c6.32,28.093-2.024,44.477-2.11,44.639a.552.552,0,1,0,.978.513c.088-.165,8.626-16.872,2.21-45.4l-.1-.426c-2.465-10.955-4.412-19.608-3.832-27.5.191-2.6.766-6.348,1.43-10.687,1.021-6.66,2.21-14.488,2.636-21.888.743,2.737,1.523,5.275,2.235,7.593.986,3.2,1.838,5.973,2.333,8.37,1.194,5.767.9,15.26.557,26.252-.4,12.95-.86,27.628,1.158,39.41,5.274,30.793.881,42.317.837,42.426a1.1,1.1,0,0,0,.607,1.439,1.09,1.09,0,0,0,.416.082,1.107,1.107,0,0,0,1.024-.688C165.368,345.861,169.874,334.275,164.468,302.707Z"
    />
    <path
      class="outline"
      d="M100.337,580a5.694,5.694,0,0,1-4.3-1.715c-2.924-3.069-2.6-9.689-2.37-14.522.057-1.179.111-2.292.111-3.206,0-2.934-.279-6.989-.547-10.911-.271-3.941-.55-8.016-.55-10.987,0-2.638.308-6.332.665-10.609.436-5.228.931-11.153.931-16.295-.015-.2-1.685-23.711-1.685-38.268a132.381,132.381,0,0,1,2.4-23.68c.654-3.745,1.127-6.453.774-7.5-4.759-14.067-7.286-57.519-8.623-97.4-1.335,39.876-3.862,83.327-8.622,97.4-.353,1.043.12,3.749.774,7.5a132.381,132.381,0,0,1,2.395,23.68c0,14.557-1.669,38.072-1.686,38.307,0,5.1.5,11.028.932,16.256.357,4.277.665,7.971.665,10.609,0,2.971-.279,7.046-.549,10.987-.27,3.922-.548,7.977-.548,10.911,0,.914.054,2.028.111,3.206.234,4.834.554,11.454-2.37,14.523a5.7,5.7,0,0,1-4.3,1.714c-8.709,0-30.011-4.92-30.011-14.039,0-2.74,2.685-6.165,5.793-10.132,4.147-5.291,9.307-11.875,9.307-18.7,0-4.816-2.77-13.63-5.978-23.837-4.861-15.466-10.911-34.713-10.911-50.843a172.3,172.3,0,0,1,1.185-20.187,113.116,113.116,0,0,0,.856-12.794c0-3.76-1.4-9.544-3.332-17.548-4.769-19.739-12.751-52.775-12.751-106.058,0-6.439,2.308-18.534,4.751-31.339,2.8-14.648,5.963-31.249,5.963-41.329,0-6.944-3.936-31.693-5.811-43.085-.238,7.373-.762,18.525-1.173,27.26-.32,6.794-.573,12.16-.573,13.23,0,1.281-.1,3.892-.205,6.916-.146,3.991-.311,8.516-.311,11.422,0,3.989-1.86,13.729-3.66,23.149-.544,2.85-1.081,5.662-1.557,8.26-1.972,10.793-2.737,31.871-2.8,33.644a46.625,46.625,0,0,1,3.237,15.683c0,7.2-1.264,15.617-4.825,15.617a3.063,3.063,0,0,1-2.21-.813c-.438,16.265-4.714,18.434-8.463,18.434C6.763,362.915,0,346.882,0,335.643a64.69,64.69,0,0,1,3.758-21c-.011-4.8-.753-11.793-1.538-19.2C1.294,286.723.337,277.7.337,270.492a173.764,173.764,0,0,1,1.43-20.244,112.927,112.927,0,0,0,.971-12.083c0-.5-.017-1.439-.039-2.76-1.1-64.687,5.191-86,10.662-92.48,8.958-10.618,23.66-14.8,35.473-18.15,7.108-2.02,13.246-3.763,15.462-6.366,1.716-2.013,1.734-8.811.051-17.334a52.822,52.822,0,0,1-7.14-18.04c-3.892-.281-6.436-5.267-7.417-7.192A31.622,31.622,0,0,1,46.366,64.25c-.307-2.951.077-4.968,1.14-6a2.4,2.4,0,0,1,1.047-.606c-2.294-12.854-.445-27.214,4.867-37.619C58.082,10.9,67.714.01,87.123,0c19.432.01,29.064,10.9,33.727,20.029,5.311,10.405,7.161,24.765,4.866,37.619a2.385,2.385,0,0,1,1.046.606c1.064,1.028,1.448,3.045,1.142,5.995a31.628,31.628,0,0,1-3.425,11.594c-.981,1.925-3.525,6.911-7.417,7.192a52.8,52.8,0,0,1-7.139,18.039c-1.684,8.523-1.665,15.322.05,17.335,2.216,2.6,8.355,4.346,15.462,6.366,11.814,3.355,26.516,7.532,35.473,18.15,5.47,6.484,11.762,27.793,10.663,92.48-.023,1.321-.039,2.264-.039,2.76a112.927,112.927,0,0,0,.971,12.083,173.764,173.764,0,0,1,1.43,20.244c0,7.207-.957,16.231-1.883,24.958-.785,7.4-1.528,14.4-1.538,19.2a64.739,64.739,0,0,1,3.757,21c0,11.239-6.763,27.272-10.456,27.272-3.749,0-8.025-2.169-8.463-18.434a3.062,3.062,0,0,1-2.209.813c-3.563,0-4.826-8.413-4.826-15.617a46.59,46.59,0,0,1,3.238-15.683c-.062-1.773-.826-22.851-2.8-33.644-.476-2.6-1.014-5.423-1.559-8.279-1.8-9.411-3.656-19.144-3.656-23.13,0-2.906-.165-7.431-.311-11.422-.111-3.024-.206-5.635-.206-6.916,0-1.07-.253-6.436-.572-13.23-.412-8.734-.936-19.886-1.174-27.26-1.875,11.392-5.81,36.141-5.81,43.085,0,10.08,3.167,26.681,5.962,41.329,2.444,12.805,4.752,24.9,4.752,31.339,0,53.283-7.983,86.319-12.752,106.058-1.935,8-3.332,13.788-3.332,17.548a112.879,112.879,0,0,0,.857,12.794,172.56,172.56,0,0,1,1.184,20.187c0,16.13-6.05,35.377-10.91,50.843-3.209,10.207-5.979,19.021-5.979,23.837,0,6.821,5.16,13.4,9.307,18.7,3.109,3.967,5.793,7.392,5.793,10.132C130.347,575.08,109.046,580,100.337,580Zm-13.2-254.3a.553.553,0,0,1,.553.539c1.632,62.9,4.785,102.915,9.116,115.72.444,1.31-.025,3.987-.732,8.04a131.548,131.548,0,0,0-2.378,23.49c0,14.517,1.667,37.993,1.684,38.228,0,5.228-.495,11.178-.934,16.427-.355,4.253-.662,7.925-.662,10.517,0,2.933.279,6.989.547,10.91.271,3.942.551,8.016.551,10.988,0,.94-.054,2.067-.113,3.259-.224,4.635-.53,10.981,2.067,13.707a4.574,4.574,0,0,0,3.5,1.372c8.829,0,28.906-4.886,28.906-12.934,0-2.358-2.576-5.645-5.559-9.45-4.251-5.425-9.542-12.176-9.542-19.378,0-4.985,2.794-13.875,6.03-24.169,4.838-15.393,10.859-34.55,10.859-50.511a171.145,171.145,0,0,0-1.179-20.07,115.6,115.6,0,0,1-.862-12.911c0-3.892,1.41-9.73,3.363-17.808,4.758-19.691,12.721-52.647,12.721-105.8,0-6.334-2.3-18.38-4.732-31.132-2.941-15.414-5.982-31.352-5.982-41.536,0-9.161,6.518-47.459,6.8-49.085a.552.552,0,0,1,1.1.093c0,5.508.751,21.464,1.3,33.115.32,6.808.574,12.186.574,13.282,0,1.261.095,3.863.2,6.876.146,4,.311,8.536.311,11.462,0,3.882,1.849,13.562,3.637,22.923.546,2.859,1.085,5.681,1.561,8.288,2.065,11.3,2.813,33.7,2.821,33.923a.577.577,0,0,1-.042.231,46.448,46.448,0,0,0-3.2,15.371c0,8.273,1.6,14.512,3.721,14.512,2.068,0,2.173-2.055,2.173-2.467a.552.552,0,1,1,1.1,0c.012,20.088,5.185,20.088,7.395,20.088,2.5,0,9.352-14.834,9.352-26.167a63.4,63.4,0,0,0-3.719-20.692.547.547,0,0,1-.039-.2c0-4.856.75-11.928,1.544-19.414.923-8.7,1.877-17.693,1.877-24.842a172.83,172.83,0,0,0-1.423-20.12,113.8,113.8,0,0,1-.978-12.207c0-.5.017-1.449.039-2.779,1.093-64.345-5.053-85.409-10.4-91.749-8.74-10.36-23.262-14.485-34.931-17.8-7.58-2.153-13.568-3.853-16-6.711-2.345-2.755-1.677-11.3-.27-18.373a.541.541,0,0,1,.081-.2,51.442,51.442,0,0,0,7.109-18.147.549.549,0,0,1,.562-.468c3.481.125,6.038-4.943,6.883-6.6a30.6,30.6,0,0,0,3.31-11.208c.349-3.363-.344-4.615-.787-5.062a1.182,1.182,0,0,0-.889-.392.563.563,0,0,1-.467-.177.551.551,0,0,1-.14-.474c2.414-12.773.63-27.141-4.657-37.5C115.344,11.674,106,1.114,87.146,1.105,68.273,1.114,58.926,11.674,54.4,20.532c-5.287,10.356-7.072,24.723-4.657,37.5a.553.553,0,0,1-.143.484.539.539,0,0,1-.475.166,1.183,1.183,0,0,0-.879.393c-.444.447-1.136,1.7-.786,5.063a30.578,30.578,0,0,0,3.31,11.207c.845,1.656,3.376,6.693,6.883,6.6a.562.562,0,0,1,.562.468,51.5,51.5,0,0,0,7.109,18.147.559.559,0,0,1,.081.2c1.407,7.076,2.074,15.618-.271,18.373-2.434,2.858-8.421,4.558-16,6.711-11.668,3.315-26.191,7.44-34.931,17.8-5.349,6.34-11.495,27.4-10.4,91.749.022,1.33.038,2.279.038,2.779a113.543,113.543,0,0,1-.978,12.207,173.05,173.05,0,0,0-1.423,20.12c0,7.149.955,16.143,1.877,24.842.794,7.486,1.544,14.558,1.544,19.414a.546.546,0,0,1-.038.2,63.342,63.342,0,0,0-3.719,20.692c0,11.333,6.848,26.167,9.351,26.167,2.209,0,7.383,0,7.4-20.088a.553.553,0,0,1,.552-.553h0a.553.553,0,0,1,.553.553c0,.412.1,2.467,2.173,2.467,2.121,0,3.721-6.239,3.721-14.512a46.477,46.477,0,0,0-3.2-15.371.561.561,0,0,1-.043-.231c.008-.225.756-22.627,2.821-33.923.475-2.6,1.013-5.417,1.558-8.269,1.79-9.37,3.64-19.058,3.64-22.942,0-2.926.166-7.461.312-11.462.11-3.013.2-5.615.2-6.876,0-1.1.253-6.474.573-13.282.548-11.651,1.3-27.607,1.3-33.115a.552.552,0,0,1,1.1-.093c.277,1.626,6.8,39.924,6.8,49.085,0,10.184-3.042,26.122-5.983,41.536-2.433,12.752-4.731,24.8-4.731,31.132,0,53.151,7.962,86.107,12.72,105.8,1.952,8.078,3.363,13.916,3.363,17.808a115.6,115.6,0,0,1-.862,12.911,171.145,171.145,0,0,0-1.179,20.07c0,15.961,6.021,35.118,10.86,50.511,3.235,10.294,6.029,19.184,6.029,24.169,0,7.2-5.291,13.953-9.543,19.378-2.982,3.805-5.557,7.092-5.557,9.45,0,8.048,20.077,12.934,28.906,12.934a4.571,4.571,0,0,0,3.5-1.372c2.6-2.725,2.29-9.072,2.066-13.706-.057-1.192-.112-2.32-.112-3.26,0-2.972.28-7.046.55-10.988.269-3.921.547-7.977.547-10.91,0-2.592-.306-6.264-.661-10.517-.438-5.249-.934-11.2-.934-16.387.018-.275,1.684-23.751,1.684-38.268A131.455,131.455,0,0,0,78.2,450c-.708-4.053-1.175-6.731-.732-8.04,4.27-12.623,7.507-53.721,9.116-115.72A.552.552,0,0,1,87.134,325.7Z"
    />
  </svg>`;
  };
  var xpAdultFluoro = function xpAdultFluoro2() {
    return x`<svg
    id="xp_adult_fluoro"
    hidden
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    viewBox="0 0 254 918"
    style="width:15.875rem; height:57.375rem;"
  >
    <defs>
      <style>
        .bone,
        .region,
        .organ {
          isolation: isolate;
        }
      </style>
    </defs>
    <g id="default"></g>
    <path
      class="outline"
      d="M140.4,918c-2.316,0-4.222-.783-5.663-2.328-4.326-4.634-3.588-15.287-2.995-23.844,.178-2.579,.347-5.016,.347-6.942,0-4.981-.728-11.855-1.432-18.504-.71-6.693-1.442-13.615-1.442-18.686,0-4.508,.772-10.217,1.666-16.829,1.089-8.054,2.323-17.184,2.323-25.919-.049-.35-5.521-45.697-5.521-70.494,0-18.096,2.446-28.927,4.232-36.837,1.07-4.74,1.916-8.486,1.916-12.233-.064-1.313-5.215-108.367-7.312-178.29-2.097,69.925-7.249,176.985-7.314,178.332,0,3.705,.847,7.451,1.917,12.191,1.787,7.91,4.233,18.741,4.233,36.837,0,24.798-5.474,70.145-5.528,70.6,.006,8.629,1.24,17.758,2.329,25.813,.894,6.611,1.666,12.321,1.666,16.829,0,5.071-.733,11.993-1.442,18.686-.704,6.649-1.432,13.523-1.432,18.504,0,1.926,.169,4.363,.347,6.942,.593,8.558,1.331,19.208-2.994,23.844-1.441,1.545-3.347,2.328-5.664,2.328-12.659,0-43.62-8.351-43.62-23.831,0-4.611,4.022-10.427,8.68-17.163,6.238-9.02,14.001-20.247,14.001-31.907,0-8.223-4.149-23.239-8.953-40.625-7.272-26.316-16.322-59.066-16.322-86.499,0-15.352,.913-25.439,1.718-34.341,.667-7.372,1.243-13.74,1.243-21.801,0-6.403-2.487-16.249-5.929-29.876-8.487-33.598-22.69-89.831-22.69-180.529,0-10.954,3.636-30.133,7.485-50.44,4.403-23.229,9.394-49.557,9.394-66.721,0-11.88-6.542-54.536-9.614-73.906-.342,12.547-1.109,31.665-1.708,46.62-.464,11.567-.831,20.704-.831,22.53,0,2.177-.138,6.621-.299,11.765-.212,6.796-.451,14.5-.451,19.45,0,7.104-3.385,23.565-10.062,48.926-4.605,17.557-1.77,53.36-1.585,55.598,.451,1.317,4.715,14.081,4.715,26.712,0,4.428-.341,26.514-7.075,26.514-1.387,0-2.403-.5-3.136-1.245-.649,27.563-6.883,31.24-12.349,31.24-5.384,0-15.244-27.252-15.244-46.355,0-18.359,4.921-34.069,5.452-35.708-.012-8.153-1.091-18.732-2.232-29.93-1.343-13.178-2.733-26.805-2.733-39.068,0-12.951,1.102-24.366,2.074-34.438,.756-7.836,1.41-14.604,1.41-20.589,0-.79-.021-2.297-.052-4.418-1.328-93.39,4.909-150.183,18.037-164.238,14.842-15.891,45.806-22.492,64.306-26.435,7.663-1.633,14.281-3.044,15.555-4.287,3.325-3.247-.47-24.98-1.867-30.985-2.074-4.68-4.177-11.607-5.029-15.655-.358-1.704-.606-3.163-.761-4.165-.983,.414-2.06,.26-3.145-.466-1.274-.853-2.321-2.191-3.503-4.474-.962-1.862-2.373-4.861-3.512-9.394l-.353-1.388c-.645-2.515-1.07-4.177-1.655-8.224-.489-3.373-.611-6.53-.336-8.659,.241-1.863,.658-2.779,1.046-3.325-.062-.426-.167-1.178-.277-2.084-.577-4.765-.635-9.128-.187-14.147,.454-5.079,1.402-9.464,2.984-13.799,1.78-4.875,4.167-8.39,4.856-9.353,4.069-5.677,8.941-8.877,11.483-10.279,6.939-3.826,14.865-5.608,24.946-5.608s18.024,1.782,24.963,5.608c4.39,2.422,8.468,6.072,11.483,10.279,.689,.961,3.076,4.475,4.856,9.353,1.582,4.334,2.53,8.719,2.985,13.799,.448,5.016,.39,9.379-.188,14.147-.111,.907-.216,1.661-.277,2.086,.397,.563,.808,1.479,1.046,3.323,.275,2.124,.153,5.281-.335,8.659-.584,4.043-1.009,5.703-1.653,8.217l-.355,1.395c-1.142,4.541-2.552,7.537-3.514,9.394-1.18,2.283-2.228,3.621-3.502,4.474-1.084,.726-2.161,.879-3.145,.466-.155,1.002-.403,2.461-.762,4.165-.857,4.078-2.985,11.079-5.063,15.735-1.337,5.751-5.186,27.629-1.832,30.905,1.274,1.243,7.892,2.654,15.555,4.287,18.499,3.943,49.463,10.543,64.305,26.435,13.128,14.055,19.365,70.848,18.037,164.237-.031,2.122-.052,3.629-.052,4.419,0,5.985,.653,12.753,1.41,20.589,.972,10.071,2.074,21.487,2.074,34.438,0,12.263-1.389,25.89-2.733,39.068-1.141,11.198-2.22,21.777-2.232,29.929,.53,1.639,5.452,17.349,5.452,35.709,0,19.102-9.86,46.355-15.244,46.355-5.466,0-11.7-3.678-12.349-31.24-.733,.745-1.749,1.245-3.136,1.245-6.733,0-7.075-22.086-7.075-26.514,0-12.633,4.265-25.398,4.715-26.712,.184-2.243,3.019-38.043-1.586-55.599-6.677-25.365-10.062-41.826-10.062-48.925,0-4.95-.24-12.653-.451-19.45-.159-5.144-.298-9.589-.298-11.765,0-1.826-.367-10.963-.831-22.53-.6-14.955-1.366-34.075-1.708-46.62-3.072,19.37-9.615,62.026-9.615,73.906,0,17.164,4.991,43.492,9.394,66.721,3.849,20.307,7.485,39.486,7.485,50.44,0,90.699-14.204,146.932-22.69,180.529-3.442,13.627-5.929,23.473-5.929,29.876,0,8.061,.576,14.429,1.243,21.801,.805,8.902,1.718,18.99,1.718,34.341,0,27.433-9.05,60.183-16.321,86.499-4.804,17.387-8.953,32.402-8.953,40.625,0,11.66,7.763,22.887,14,31.907,4.657,6.736,8.68,12.552,8.68,17.163,0,15.479-30.961,23.831-43.62,23.831Zm-13.882-455.519c.482,0,.873,.391,.873,.873,.027,52.453,8.103,220.297,8.185,221.986,0,3.985-.864,7.814-1.958,12.662-1.768,7.828-4.189,18.55-4.189,36.451,0,24.694,5.46,69.935,5.515,70.389,.006,8.958-1.237,18.149-2.333,26.26-.885,6.548-1.649,12.203-1.649,16.593,0,4.979,.728,11.853,1.432,18.502,.71,6.693,1.442,13.615,1.442,18.688,0,1.987-.171,4.452-.351,7.063-.57,8.22-1.278,18.451,2.53,22.533,1.113,1.192,2.548,1.772,4.386,1.772,12.79,0,41.873-8.343,41.873-22.084,0-4.066-3.879-9.675-8.369-16.17-6.376-9.219-14.31-20.694-14.31-32.9,0-8.46,4.178-23.582,9.016-41.089,7.243-26.215,16.258-58.839,16.258-86.035,0-15.273-.909-25.32-1.711-34.183-.643-7.108-1.25-13.82-1.25-21.96,0-6.622,2.509-16.554,5.982-30.304,8.467-33.519,22.638-89.621,22.638-180.101,0-10.79-3.621-29.891-7.455-50.115-4.633-24.442-9.424-49.717-9.424-67.045,0-15.587,10.738-81.095,11.196-83.876,.072-.449,.488-.762,.932-.729,.454,.038,.803,.416,.803,.871,0,9.381,1.09,36.544,1.886,56.379,.464,11.587,.832,20.739,.832,22.6,0,2.15,.137,6.581,.298,11.712,.212,6.808,.451,14.526,.451,19.503,0,6.949,3.366,23.261,10.004,48.481,4.809,18.331,1.761,54.759,1.629,56.301-.006,.073-.022,.147-.047,.217-.046,.131-4.653,13.274-4.653,26.238,0,15.503,2.709,24.767,5.328,24.767,2.932,0,3.081-3.553,3.081-4.266,0-.483,.391-.873,.873-.873s.873,.391,.873,.873c.019,34.261,7.748,34.261,10.658,34.261,3.198,0,13.497-24.233,13.497-44.608,0-19.009-5.353-35.13-5.407-35.292-.03-.089-.045-.183-.045-.278,0-8.259,1.088-18.939,2.241-30.246,1.339-13.134,2.723-26.716,2.723-38.891,0-12.867-1.098-24.238-2.066-34.27-.761-7.881-1.417-14.688-1.417-20.757,0-.794,.021-2.31,.052-4.443,1.302-91.602-4.936-149.497-17.566-163.02-14.468-15.491-45.094-22.018-63.393-25.919-9.709-2.069-14.848-3.22-16.41-4.745-4.799-4.686,1.359-32.68,1.477-32.91,2.01-4.507,4.09-11.352,4.929-15.34,.652-3.099,.937-5.428,.94-5.452,.041-.338,.275-.621,.598-.726,.324-.106,.678-.014,.91,.237,.687,.741,1.324,.804,2.195,.218,.715-.478,1.621-1.307,2.923-3.824,.922-1.782,2.274-4.654,3.371-9.019l.356-1.402c.629-2.459,1.046-4.083,1.617-8.032,.466-3.228,.586-6.211,.331-8.187-.26-2.008-.713-2.524-.862-2.693-.171-.194-.274-.485-.235-.741,0-.006,.157-1.023,.325-2.408,.563-4.642,.619-8.893,.183-13.782-.441-4.924-1.358-9.168-2.886-13.356-1.353-3.71-3.282-7.047-4.634-8.933-3.869-5.397-8.494-8.436-10.907-9.767-6.67-3.678-14.329-5.392-24.103-5.392s-17.449,1.713-24.118,5.392c-2.414,1.33-7.039,4.368-10.908,9.767-.656,.915-2.93,4.267-4.634,8.933-1.529,4.188-2.446,8.432-2.885,13.356-.438,4.892-.381,9.143,.182,13.782,.168,1.385,.324,2.402,.325,2.408,.039,.252-.035,.51-.201,.704-.183,.207-.635,.722-.895,2.731-.256,1.979-.135,4.963,.331,8.186,.571,3.955,.988,5.58,1.619,8.04l.355,1.395c1.095,4.357,2.448,7.234,3.371,9.019,1.301,2.518,2.208,3.346,2.922,3.824,.873,.583,1.51,.523,2.196-.218,.231-.252,.586-.343,.91-.237,.323,.105,.556,.388,.598,.726,.003,.023,.288,2.352,.94,5.452,.839,3.991,2.921,10.836,4.95,15.383,.101,.206,6.234,28.202,1.457,32.867-1.562,1.526-6.701,2.676-16.41,4.745-18.299,3.9-48.926,10.428-63.394,25.919-12.63,13.523-18.869,71.418-17.566,163.021,.031,2.133,.052,3.649,.052,4.443,0,6.069-.657,12.876-1.417,20.757-.969,10.032-2.066,21.403-2.066,34.27,0,12.175,1.384,25.757,2.723,38.891,1.153,11.307,2.241,21.987,2.241,30.246,0,.096-.015,.189-.046,.278-.054,.162-5.406,16.283-5.406,35.292,0,20.375,10.299,44.608,13.497,44.608,2.91,0,10.64,0,10.658-34.261,0-.483,.391-.873,.873-.873h0c.483,0,.873,.391,.873,.873,0,.713,.148,4.266,3.081,4.266,2.619,0,5.328-9.264,5.328-24.767,0-12.964-4.606-26.106-4.652-26.238-.025-.07-.041-.143-.047-.217-.132-1.542-3.181-37.97,1.628-56.3,6.638-25.217,10.004-41.528,10.004-48.482,0-4.977,.241-12.695,.452-19.503,.159-5.131,.298-9.561,.298-11.712,0-1.861,.367-11.013,.832-22.6,.796-19.834,1.886-46.998,1.886-56.379,0-.455,.349-.833,.803-.871,.446-.032,.86,.281,.932,.729,.457,2.781,11.195,68.289,11.195,83.876,0,17.329-4.791,42.603-9.424,67.045-3.834,20.224-7.455,39.325-7.455,50.115,0,90.48,14.17,146.582,22.638,180.101,3.473,13.75,5.982,23.682,5.982,30.304,0,8.14-.607,14.852-1.25,21.96-.802,8.863-1.711,18.91-1.711,34.183,0,27.196,9.015,59.82,16.259,86.035,4.838,17.508,9.016,32.629,9.016,41.089,0,12.206-7.935,23.681-14.31,32.9-4.491,6.495-8.37,12.104-8.37,16.17,0,13.741,29.083,22.084,41.873,22.084,1.839,0,3.273-.58,4.387-1.774,3.807-4.08,3.098-14.311,2.529-22.531-.181-2.611-.351-5.076-.351-7.063,0-5.073,.733-11.995,1.442-18.688,.704-6.649,1.432-13.523,1.432-18.502,0-4.391-.764-10.045-1.649-16.593-1.097-8.111-2.339-17.301-2.339-26.154,.061-.559,5.522-45.802,5.522-70.494,0-17.902-2.421-28.624-4.189-36.451-1.095-4.848-1.96-8.677-1.96-12.619,.083-1.731,8.159-169.575,8.187-222.028,0-.483,.391-.873,.873-.873Z"
    />
    <!-- highlight_7 -->
    <g id="uterus" class="organ" disabled>
      <path
        d="M122.43,452.568l-.723-.532c-.025,.327-.046,.655-.072,.98-.166,2.093-.113,4.191-.247,6.283-.078,1.22-.75,3.192,.372,4.132,.595,.498,1.482,.478,2.266,.267l-.051-.352-1.545-10.777Z"
      />
      <path
        d="M128.993,463.345l-.048,.337c.798,.228,1.718,.26,2.329-.252,1.122-.94,.45-2.912,.372-4.132-.134-2.092-.081-4.19-.247-6.283-.026-.325-.047-.653-.072-.98l-.796,.586-1.538,10.724Z"
      />
      <path
        d="M154.634,424.991c-.573-2.457-3.704-2.005-5.568-1.926-1.678,.071-3.353,.2-5.023,.385-1.688,.187-3.374,.591-5.082,.453-2.315-.187-4.432-1.245-6.631-1.898-1.776-.527-9.85-.527-11.626,0-2.199,.653-4.316,1.711-6.631,1.898-1.708,.138-3.394-.266-5.082-.453-1.669-.185-3.345-.314-5.023-.385-1.864-.079-4.995-.531-5.568,1.926-.276,1.184,.028,2.555,.242,3.738,.154,.853,.405,1.884,1.174,2.399,1.051,.704,2.391,.163,3.252-.581,.512-.442,1.106-1.053,1.213-1.751,.14-.91-.487-1.009-1.192-1.161-.777-.167-2.293-.984-1.845-1.996,.279-.63,1.348-.759,1.946-.82,.813-.083,1.633-.019,2.447,.023,1.123,.058,2.248,.326,3.337,.589,1.42,.343,2.846,.736,4.202,1.283,.471,.19,1.083,.36,1.359,.828,.331,.56,.199,1.32,.294,1.936,.16,1.031,.41,2.055,.727,3.048,.572,1.794,1.413,3.498,2.507,5.031,.711-1.04,1.625-1.939,2.738-2.625,1.521-.938,3.285-1.434,5.101-1.434h1.228c1.816,0,3.579,.496,5.101,1.434,1.113,.687,2.027,1.585,2.738,2.625,1.094-1.533,1.935-3.237,2.507-5.031,.317-.994,.567-2.017,.727-3.048,.096-.616-.036-1.376,.294-1.936,.276-.468,.888-.638,1.359-.828,1.356-.547,2.782-.94,4.202-1.283,1.089-.263,2.214-.531,3.337-.589,.814-.042,1.633-.106,2.447-.023,.598,.061,1.667,.19,1.946,.82,.448,1.012-1.068,1.829-1.845,1.996-.705,.151-1.331,.25-1.192,1.161,.107,.699,.702,1.309,1.213,1.751,.861,.744,2.201,1.286,3.252,.581,.769-.515,1.02-1.547,1.174-2.399,.214-1.183,.518-2.554,.242-3.738Z"
      />
    </g>
    <!-- higlight_6 -->
    <g id="colon" class="organ" disabled>
      <path
        d="M126.517,420.03c1.416,0,4.862,.045,6.263,.461,.737,.219,1.457,.477,2.153,.727,1.43,.514,2.781,.999,4.156,1.11,.199,.016,.397,.023,.595,.023,.862,0,1.749-.131,2.689-.269,.102-.015,.203-.026,.305-.041-.244-.156-.501-.294-.777-.404-.276-.11-.564-.191-.861-.248-.098-.019-.201-.02-.3-.033-.203-.027-.405-.053-.615-.055-.19-.002-.384,.014-.579,.031-.098,.009-.193,.008-.292,.021-.298,.041-.599,.102-.902,.189l-.606,.171c-.827-2.086-2.443-3.521-4.325-3.521-.337,0-.666,.047-.984,.133-1.612-1.21-3.673-1.937-5.921-1.937-3.699,0-6.887,1.972-8.402,4.826,.692-.249,1.406-.505,2.139-.723,1.401-.416,4.847-.461,6.263-.461Z"
      />
      <path
        d="M88.846,414.867c.785,2.006,2.371,3.687,4.545,4.496,.818,.305,1.729-.112,2.033-.93,.305-.818-.112-1.729-.93-2.033-.749-.279-1.368-.739-1.857-1.303-.345,.026-.695,.042-1.051,.042-.955,0-1.875-.097-2.739-.273Z"
      />
      <path
        d="M86.026,361.685c-2.347,1.828-4.027,5.014-4.027,8.644,0,.811,.087,1.648,.259,2.488l.097,.477-.353,.332c-.691,.653-1.514,1.723-1.514,3.117,0,.775,.262,1.539,.78,2.272l.401,.569-.466,.518c-.769,.854-1.176,1.81-1.176,2.766,0,.937,.37,1.839,1.098,2.681l.494,.571-.494,.571c-.729,.842-1.098,1.743-1.098,2.681,0,1.017,.452,2.025,1.309,2.914,0,0,.523,.544,.523,.544-.769,.992-1.427,1.952-1.352,3.273,.063,1.126,.641,2.066,1.433,2.834l.575,.557-.507,.62c-.66,.806-.994,1.67-.994,2.568,0,1.253,.689,2.492,1.94,3.49l.586,.467c-.592,1.03-1.077,2.015-.923,3.244,.203,1.621,1.426,2.86,2.768,3.674,1.958,1.187,4.361,1.642,6.629,1.573,3.225-.097,8.588-1.694,8.588-5.757,0-1.637-1.072-3.112-2.786-4.161,.596-1.036,1.052-2.028,.819-3.264-.233-1.239-1.079-2.047-1.942-2.883,0,0,.507-.62,.507-.62,.763-.932,1.134-2.091,.91-3.294-.217-1.164-.963-1.914-1.749-2.729l.463-.598c.603-.777,.909-1.604,.909-2.452,0-.937-.37-1.839-1.099-2.681,0,0-.495-.571-.495-.571,.784-.905,1.512-1.783,1.579-3.041,.064-1.206-.502-2.111-1.168-3.053,.371-.411,.756-.817,1.05-1.29,.143-.23,.278-.466,.417-.699-.021,.036,1.647,.623,1.799,.656,.863,.19,1.757,.201,2.623,.027,0,0,.527-.106,.527-.106,1.035,1.319,2.183,2.446,3.814,2.987,1.692,.561,3.59,.447,5.163-.402l.603-.325s.459,.509,.459,.509c1.262,1.399,3.084,2.293,4.97,2.39,.945,.049,1.9-.108,2.771-.481,.66-.283,1.607-.81,1.868-1.536,.018-.049,.045-.107,.039-.161,1.599,2.562,7.464,3.319,9.318-.011-.026,.046,.578,.702,.665,.782,.333,.309,.767,.552,1.17,.755,.831,.417,1.752,.657,2.683,.687,1.849,.06,3.653-.73,4.971-2.008l.383-.372c2.464,.846,5.063,.472,7.035-1.273l.372-.329s.472,.15,.472,.15c1.225,.393,2.555,.402,3.783,.02l.671-.208c.516,.915,1.094,1.728,1.915,2.402-.001-.001-.498,.575-.549,.635-.729,.842-1.098,1.745-1.098,2.682s.37,1.839,1.098,2.681l.494,.571-.494,.571c-.729,.842-1.098,1.743-1.098,2.681,0,1.024,.456,2.035,1.319,2.926l.533,.549s-.475,.6-.475,.6c-.559,.706-.918,1.529-.93,2.44-.013,.946,.351,1.809,.93,2.543,0,0,.371,.47,.371,.47-.493,.833-.909,1.64-.862,2.642,.045,.949,.477,1.793,1.089,2.501l.494,.571-.494,.571c-.729,.842-1.098,1.743-1.098,2.681,0,.856,.308,1.685,.918,2.466l.465,.595-.523,.545c-.756,.788-1.276,1.757-1.285,2.87-.005,.625,.151,1.249,.44,1.802,.245,.469,.605,.87,.929,1.286l-.522,.544c-.516,.539-.864,1.123-1.074,1.724,.762,.537,1.273,1.296,1.505,2.293,.326,1.396,.053,2.868-.166,4.051l-.06,.327c-.223,1.233-.616,2.605-1.849,3.432-.581,.389-1.265,.595-1.979,.595-1.074,0-2.236-.472-3.187-1.294-.657-.568-1.551-1.466-1.742-2.707-.14-.915,.038-2.052,1.525-2.673-.306,.007-.612,.024-.918,.041l-.319,.017c-.993,.051-2.038,.303-3.048,.547-1.132,.273-2.607,.658-3.981,1.212l-.247,.096c-.105,.04-.247,.094-.347,.14-.016,.128-.022,.322-.026,.463-.009,.29-.022,.576-.063,.841-.166,1.072-.43,2.178-.783,3.286-.392,1.23-.908,2.399-1.516,3.51,.026-.004,.049-.002,.075-.006l.602-.095,.297,.533c.779,1.399,2.169,2.306,3.766,2.446,1.249,.11,2.538-.222,3.641-.803l.707-.373c.312,.485,.591,.975,.998,1.392,.451,.462,.994,.836,1.59,1.087,1.126,.474,2.385,.461,3.549,.144l.198-.055,.201,.041c.845,.165,1.714,.25,2.582,.25,4.521,0,8.392-2.248,8.813-5.116l.084-.574,.562-.145c3.341-.859,5.586-2.957,5.586-5.222,0-.675-.198-1.343-.586-1.985l-.389-.641,.576-.481c.834-.695,1.828-1.849,1.828-3.397,0-.854-.308-1.682-.917-2.463l-.464-.597,.522-.544c.849-.886,1.298-1.888,1.298-2.902,0-.856-.308-1.684-.918-2.464l-.465-.595,.523-.545c.848-.886,1.296-1.888,1.296-2.901,0-.937-.37-1.839-1.098-2.681l-.494-.571,.494-.571c.729-.842,1.098-1.743,1.098-2.681,0-.867-.315-1.704-.936-2.492l-.371-.469,.305-.516c.376-.634,.566-1.29,.566-1.948,0-1.023-.456-2.035-1.319-2.926l-.531-.549,.474-.6c.621-.786,.936-1.624,.936-2.492,0-.937-.37-1.839-1.098-2.681l-.494-.571,.494-.571c.729-.842,1.098-1.743,1.098-2.681,0-1.094-.513-2.161-1.484-3.09l-.601-.574,.544-.627c.729-.842,1.098-1.745,1.098-2.682s-.371-1.842-1.101-2.684l-.373-.429,.245-.516c.737-1.553,1.127-3.32,1.127-5.109,0-3.305-1.613-7.281-4.399-9.214-2.077-1.44-4.942-1.49-7.379-1.558-2.904-.081-5.84,.243-8.608,1.152-.761,.25-1.508,.544-2.238,.885-.846,.396-1.51,.822-2.198,1.433l-.473-.153c-.321-.103-.64-.177-.957-.229-2.118-.351-4.213,.504-5.727,1.971l-.383,.371s-.505-.172-.505-.172c-2.397-.817-5.006-.033-6.79,1.689l-.528,.508-.592-.433c-1.235-.902-2.784-1.348-4.309-1.268-1.308,.069-2.411,.566-3.511,1.232,0,0-.479-.406-.479-.406-2.028-1.718-5.057-2.151-7.422-.881l-.602,.324-.458-.508c-1.441-1.595-3.276-2.473-5.166-2.473-.373,0-.776,.044-1.233,.136l-.527,.106-.331-.423c-.671-.857-1.448-1.512-2.257-2.035-4.583-2.966-14.22-1.502-18.502,1.832Z"
      />
    </g>
    <!-- highlight_6 -->
    <g id="small_intestine" class="organ" disabled>
      <path
        d="M129.623,399.455c-1.746,0-3.162,1.416-3.162,3.162v12.193c.019,0,.037-.004,.056-.004,1.058,0,2.102,.156,3.106,.432v-11.041c0-.873,.708-1.581,1.581-1.581h1.531c1.746,0,3.162-1.416,3.162-3.162v-6.249h1.544v5.477c0,2.172,1.761,3.933,3.933,3.933s3.933-1.761,3.933-3.933v-5.477h1.544v9.374c0,.873-.708,1.581-1.581,1.581h-10.171c-2.172,0-3.933,1.761-3.933,3.933s1.761,3.933,3.933,3.933h11.752v1.544h-10.183c-1.876,0-3.439,1.316-3.833,3.073,.195-.022,.391-.035,.586-.035,.87,0,1.704,.226,2.475,.627v-.503h10.183c2.172,0,3.933-1.761,3.933-3.933h0c0-2.173-1.761-3.934-3.933-3.934h-11.752v-1.543h12.523c1.746,0,3.162-1.416,3.162-3.162v-10.183c0-2.172-1.761-3.933-3.933-3.933h0c-2.172,0-3.933,1.761-3.933,3.933v5.477h-1.543v-5.477c0-2.172-1.761-3.933-3.933-3.933h0c-2.172,0-3.933,1.761-3.933,3.933v3.896c0,.873-.708,1.581-1.581,1.581h-1.531Z"
      />
      <path
        d="M124.917,394.749c-1.746,0-3.162,1.416-3.162,3.162v17.919c.989-.444,2.048-.763,3.162-.913v-15.425c0-.873,.708-1.581,1.581-1.581h1.532c1.746,0,3.162-1.416,3.162-3.162v-10.183c0-.021-.006-.041-.006-.062-.9,.506-1.973,.79-3.156,.852v7.812c0,.873-.708,1.581-1.581,1.581h-1.532Z"
      />
      <path
        d="M151.618,421.431c.997-.02,1.874-.502,2.44-1.241,.054-.073,.094-.153,.152-.224-.603-.929-.907-1.92-.907-2.953,0-1.253,.462-2.47,1.343-3.55-.602-.928-.907-1.92-.907-2.955,0-1.07,.338-2.087,.98-3.038v-.427c-.642-.951-.98-1.968-.98-3.038,0-.798,.188-1.581,.559-2.335-.661-.967-.996-2.004-.996-3.09,0-1.049,.311-2.051,.926-2.986-.896-1.087-1.366-2.315-1.366-3.581,0-1.149,.374-2.241,1.114-3.252-.713-.974-1.078-2.025-1.104-3.129-.402-.185-.845-.295-1.316-.295h-14.079s-.004-.001-.006-.001c-.164,.018-.328,.043-.493,.049-.104,.004-.208,.006-.312,.006-.142,0-.284-.004-.425-.012-.184-.01-.368-.022-.552-.046-.275-.035-.547-.091-.819-.155l-.096-.022c-.141-.032-.281-.065-.422-.108-.293-.09-.58-.207-.867-.332l-.08-.032c-.114-.045-.228-.092-.341-.149-.119-.06-.217-.132-.33-.194v.996c0,1.746,1.416,3.162,3.162,3.162h14.111c.856,0,1.549,.694,1.549,1.549v26.646c0,.873-.708,1.581-1.581,1.581h-12.642c.47,.451,.899,.976,1.261,1.584,.147-.028,.295-.053,.445-.074,.105-.014,.209-.022,.368-.03,.226-.02,.452-.037,.73-.037h.009c.272,.004,.536,.034,.847,.073,.117,.01,.233,.023,.346,.044,.406,.078,.792,.19,1.146,.332,.354,.141,.695,.318,1.045,.542l1.138,.729h5.383c.32-.016,.636-.036,.971-.036,.209,0,.398,.018,.595,.029Z"
      />
      <path
        d="M103.481,421.457c.194,.011,.38,.022,.555,.03,1.708,.073,3.434,.205,5.13,.393,.499,.055,.997,.129,1.496,.202,.94,.138,1.827,.269,2.689,.269,.198,0,.397-.007,.595-.023,.666-.054,1.327-.198,1.993-.388l.779-1.468c.826-1.556,2.044-2.831,3.494-3.787v-18.806c0-1.729-1.401-3.13-3.13-3.13h-.007v-4.68c0-1.746-1.416-3.162-3.162-3.162h-14.092v-1.544h17.216c.873,0,1.581,.708,1.581,1.581v2.328c0,2.173,1.761,3.934,3.934,3.934s3.934-1.761,3.934-3.934v-3.964c-1.147-.141-2.219-.504-3.133-1.028-.007,.096-.029,.188-.029,.286v5.478h-1.544v-4.681c0-.262-.041-.513-.102-.757-.139,.061-.28,.124-.402,.172l-.12,.048c-.099,.04-.2,.075-.369,.133-.305,.106-.615,.194-.984,.275-.106,.024-.212,.047-.319,.064-.401,.067-.774,.104-1.142,.111l-.06,.005h-.079c-.06,0-.119-.003-.18-.009-.46-.01-.938-.066-1.423-.165-.134-.028-.266-.064-.398-.103l-.1-.029c-.38-.104-.728-.223-1.062-.366-.176-.075-.349-.156-.522-.243-.323-.164-.647-.358-.991-.595l-.095-.063c-.114-.075-.227-.151-.337-.236-.328-.254-.623-.51-.893-.774-.228,.101-.472,.196-.743,.289-.104,.036-.209,.07-.313,.101-.466,.139-.883,.23-1.284,.279-.299,.035-.589,.05-.875,.05-.137,0-.273-.003-.41-.009-.107-.005-.213-.011-.32-.02-.473-.04-.889-.105-1.28-.203-.391-.1-.778-.234-1.22-.421-.101-.043-.201-.088-.301-.135-.389-.183-.714-.365-1.021-.562h-3.843c-.462,0-.898,.094-1.31,.241,.012,.142,.03,.284,.03,.427,0,1.15-.374,2.241-1.115,3.252,.74,1.01,1.115,2.102,1.115,3.252,0,.153-.02,.304-.034,.455,.413,.147,.851,.242,1.314,.242h13.32v4.705c0,1.733,1.405,3.137,3.137,3.137v20.385c0,.856-.694,1.549-1.549,1.549h-14.111v-1.543h10.183c2.173,0,3.934-1.761,3.934-3.934s-1.761-3.934-3.934-3.934h-8.614v-1.544h9.411c1.723,0,3.111-1.426,3.125-3.149l.025-1.568h0c.014-1.739-1.398-3.162-3.137-3.162l-.013-6.236c-.003-1.747-1.421-3.162-3.168-3.162h-5.471c-2.172,0-3.933,1.761-3.933,3.933s1.761,3.933,3.933,3.933h.772v1.544h-4.499c.182,.54,.295,1.094,.295,1.66,0,.507-.104,1.007-.257,1.502h3.689c2.173,0,3.934-1.761,3.934-3.934s-1.761-3.934-3.934-3.934h-.772v-1.543h4.665c.874,0,1.582,.707,1.584,1.581l.013,6.264c.002,.858,.698,1.553,1.556,1.553h1.581l-.013,1.556h-8.614c-.899,0-1.718,.314-2.381,.822,.524,.885,.832,1.838,.832,2.824,0,1.164-.382,2.252-1.05,3.221,.694,.616,1.597,1.001,2.598,1.001h8.614v1.544h-10.183c-2.172,0-3.933,1.761-3.933,3.933,0,1.07,.431,2.038,1.124,2.748,.737-.275,1.619-.419,2.659-.419,.507,0,1.009,.028,1.469,.055Z"
      />
    </g>
    <!-- highlight_5 -->
    <g id="kidneys" class="organ" disabled>
      <path
        d="M107.755,360.576c.265-1.346,.447-2.693,.394-4.271-.372-5.235-3.975-5.744-5.666-5.747-.035,0-.069-.001-.103-.001-.19-.002-.375-.011-.552-.022,0,0,0,.002,0,.003,.267,.554,.275,1.84,.014,2.885-.204,.816-.404,1.644-.463,2.315,.165,.005,.368,.004,.508-.008,.026-.002,.051,0,.077-.004,3.802-.048,4.366,1.166,4.129,3.315,.593,.445,1.16,.94,1.664,1.535Z"
      />
      <path
        d="M148.646,357.745c-.662-4.447-2.164-7.155,3.492-7.084,.026,.003,.051,.001,.077,.004,.171,.015,.341,.015,.508,.006-.059-.671-.259-1.498-.463-2.313-.261-1.045-.254-2.334,.014-2.887-.178,.012-.362,.02-.552,.022-.034,0-.068,.001-.103,.001-1.691,.003-5.294,.512-5.666,5.747-.111,3.278,.766,5.568,1.376,8.922,.479-.307,.987-.556,1.513-.762-.049-.555-.113-1.11-.194-1.656Z"
      />
      <path
        d="M101.683,357.08c-.186-.413-.332-.778-.332-.987,0-.714,.249-1.708,.489-2.669,.263-1.052,.255-2.354-.019-2.901-.148-.296,.129-.633,.45-.954,.125-.125,.266-.256,.418-.397,1.194-1.109,3.191-2.965,2.126-6.549-.795-2.672-3.496-4.399-6.883-4.399-1.866,0-3.66,.563-4.922,1.544-1.753,1.363-5.923,5.317-6.794,12.573-.286,2.382,.072,4.758,.751,6.897,2.949-1.569,6.999-2.568,10.81-2.568,1.414,0,2.714,.15,3.905,.41Z"
      />
      <path
        d="M151.677,344.405c.042,.04,.091,.084,.13,.123,.321,.321,.598,.659,.45,.954-.273,.547-.282,1.848-.019,2.901,.24,.962,.489,1.956,.489,2.67,0,.273-.247,.807-.509,1.373-.371,.803-.834,1.803-.978,2.811-.141,.988,.064,2.162,.429,3.223,2.293-.659,4.78-1.012,7.427-1.012,1.363,0,2.776,.089,4.2,.266,.655,.081,1.378,.197,2.112,.378,1.624-2.859,2.93-6.817,2.453-10.789-.533-4.442-2.297-7.62-3.99-9.744-2.156,1.702-4.467,3.206-6.878,4.464-1.862,.971-3.62,1.75-5.317,2.384Z"
      />
    </g>
    <!-- highlight_5 highlight_7 -->
    <path
      id="bladder_ureter"
      class="organ"
      disabled
      d="M131.402,436.278c-1.224-.755-2.672-1.199-4.271-1.199h-1.228c-1.598,0-3.047,.444-4.271,1.199-4.816,2.971-4.813,10.199-.246,13.559l2.514,1.85,1.64,9.853h1.888l1.632-9.799,2.588-1.904c4.567-3.361,4.57-10.588-.246-13.559Z"
    />
    <path
      id="liver"
      class="organ"
      disabled
      d="M156.344,283.84c-9.3-3.528-59.101-7.057-71.856,2.233-11.103,8.085-13.849,21.568-8.396,41.218l.033,.119-.002,.124c-.14,11.284,2.755,14.181,3.098,14.483,4.272,2.096,7.847-1.638,11.308-5.253,1.444-1.508,2.808-2.931,4.207-3.92,.601-.424,1.306-.895,2.082-1.413,3.829-2.553,9.581-6.392,12.353-11.345-.035-.346-.046-.696-.014-1.053-.179-.492-.277-.966-.297-1.437-.052-1.176,.304-2.322,1.031-3.342,.066-.296,.159-.585,.276-.864,.43-1.028,1.207-1.918,2.256-2.589,.726-.796,1.607-1.396,2.582-1.758,.923-.886,2.029-1.467,3.245-1.704,1.006-.782,2.186-1.245,3.444-1.348,.169-.014,.338-.021,.505-.021,.687,0,1.375,.114,2.052,.34,.649-.256,1.329-.415,2.032-.473,.14-.011,.286-.014,.432-.017,2.223-1.498,4.825-3.173,7.909-4.969,9.317-5.428,21.67-9.034,26.946-10.575,1.121-.327,1.945-.568,2.384-.719,.365-.128,.757-.349,.759-.585,0-.08-.069-1.987-8.37-5.133Z"
    />
    <!-- highlight_4 -->
    <path
      id="pancreas"
      class="organ"
      disabled
      d="M159.569,309.819c-.456-.759-1.838-1.151-2.718-1.173-.833-.021-1.694,.142-1.944,.32-.623-.717-2.301-1.146-3.21-1.071-.362,.03-1.18,.146-1.486,.312-.609-.447-1.988-.688-2.725-.627-.5,.041-1.305,.22-1.708,.495-.649-.383-1.989-.585-2.755-.522-.636,.052-1.548,.289-2.047,.639-.878-.624-2.387-.97-3.492-.879-.757,.062-1.919,.331-2.518,.727-.797-.353-2.217-.541-3.132-.465-.669,.055-1.697,.248-2.263,.526-.847-.387-2.049-.593-3.023-.513-.769,.063-1.484,.286-2.122,.631-.762-.357-1.597-.549-2.467-.477-1.096,.09-2.069,.553-2.838,1.26-1.211,.127-2.257,.713-3.043,1.577-.95,.27-1.767,.831-2.395,1.583-.807,.469-1.447,1.107-1.785,1.913-.126,.3-.205,.607-.242,.916-.622,.744-.972,1.615-.931,2.54,.02,.453,.158,.878,.346,1.285-.174,.931-.025,1.865,.506,2.681,.09,.138,.212,.25,.319,.375,.343,.854,.943,1.586,1.809,2.07,.9,.503,1.947,.671,3.004,.552,.658,.246,1.366,.357,2.093,.298,.833-.068,1.584-.368,2.24-.809,.864-.021,1.7-.218,2.419-.662,.443-.273,.787-.626,1.081-1.01,.888-.313,1.653-.817,2.165-1.539,.31-.436,.48-.917,.574-1.412,.165,.002,.327,.025,.495,.011,1.008-.083,2.591-.458,3.36-1.008,.589,.163,1.205,.247,1.842,.195,1.078-.088,2.589-.504,3.371-1.135,.551,.177,1.611,.265,2.211,.215,1.135-.093,2.576-.63,3.317-1.42,.545,.24,1.472,.366,2.082,.316,.738-.061,1.999-.363,2.548-.816,.473,.228,1.331,.348,1.859,.305,.843-.069,2.234-.525,2.764-1.201,.265,.064,1.02,.102,1.298,.079,.771-.064,2.253-.477,2.72-1.091,.357,.244,1.546,.406,2.278,.34,.778-.07,2.002-.522,2.324-1.193,.09-.02,1.783-.524,1.786-1.694,.004-1.107-1.196-1.449-1.967-1.445Z"
    />
    <!-- highlight_4 -->
    <g id="stomach_segments" class="organ" disabled>
      <path
        d="M179.367,299.662c-.72-4.776-2.87-9.277-6.543-12.48-4.019-3.504-9.472-4.97-14.618-5.941-1.549-.292-3.106-.537-4.665-.769-3.698-.549-7.414-1.046-11.043-1.964-1.805-.456-3.586-1.017-5.304-1.739-1.224-.514-2.561-1.076-3.659-1.889-2.333-.171-4.665-.267-6.97-.267-1.518,0-3.049,.047-4.583,.121,.201,1.333,.56,2.633,1.201,3.867,14.094,.24,28.747,1.838,33.842,3.77,6.253,2.37,9.412,4.6,9.39,6.629-.006,.533-.25,1.51-1.825,2.062-.47,.162-1.286,.4-2.463,.744-4.03,1.177-12.235,3.578-19.976,7.063,.987,2.331,1.837,4.707,2.324,7.182,.43,.063,.87,.159,1.276,.295,.749-.265,1.494-.333,1.605-.342,.116-.01,.241-.015,.375-.015,.568,0,1.685,.117,2.633,.512,.505-.117,1.002-.166,1.204-.183,.109-.009,.225-.014,.346-.014,.817,0,2.221,.256,3.298,.9,.625-.127,1.237-.143,1.492-.143l.187,.002c.826,.021,2.414,.32,3.447,1.241,.586,.102,1.36,.352,1.962,.956,.536,.538,.819,1.232,.816,2.007-.005,1.676-1.398,2.618-2.384,3.024-.881,.972-2.38,1.362-3.166,1.433-.155,.014-.324,.021-.502,.021-.196,0-.898-.012-1.612-.166-1.027,.608-2.342,.851-2.898,.897-.088,.007-.206,.012-.342,.012-.005,0-.249,0-.557-.018-.984,.707-2.332,1.06-3.162,1.128-.112,.009-.233,.014-.361,.014-.39,0-.923-.049-1.444-.173-.917,.427-2.024,.622-2.602,.67-.13,.011-.27,.016-.416,.016-.403,0-.92-.044-1.437-.152-1.076,.739-2.466,1.151-3.547,1.24-.15,.012-.321,.019-.506,.019-.417,0-.988-.035-1.53-.123-1.067,.591-2.469,.935-3.546,1.024-.171,.014-.341,.021-.51,.021-.395,0-.8-.038-1.211-.113-.943,.461-2.111,.722-2.931,.841-.128,.285-.281,.552-.46,.804-.591,.832-1.448,1.499-2.495,1.946-.371,.422-.771,.763-1.211,1.034-.801,.494-1.727,.786-2.757,.872-.82,.476-1.693,.754-2.602,.828-.173,.014-.344,.021-.515,.021-.641,0,.079,2.768,.817,4.477,1.269,2.938,2.928,5.416,5.351,7.567,.453,.402,.935,.771,1.418,1.137-3.304,7.558-3.482,16.107-.525,23.788,.173-.035,.346-.07,.519-.091,.132-.016,.263-.024,.395-.03l.076-.004c.164-.009,.328-.016,.492-.016l.135,.002c.236,.006,.472,.029,.707,.056l.091,.01c.139,.015,.277,.031,.417,.057,.265,.049,.507,.117,.725,.178l.096,.026c.123,.032,.246,.066,.367,.108,.288,.1,.543,.22,.769,.325l.069,.03c.103,.043,.205,.089,.306,.141,.222,.117,.438,.243,.645,.375,.225-.191,.469-.38,.739-.572,.107-.076,.216-.147,.324-.217,.259-.167,.532-.308,.807-.448-1.799-6.503-1.461-13.385,.954-19.631,4.323,1.297,8.878,1.54,13.282,.495,3.107-.738,6.07-1.999,8.902-3.477,2.439-1.272,4.725-2.771,6.844-4.465,5.273-4.214,9.515-9.634,12.513-15.778,.49-1.005,.942-2.029,1.352-3.07,2.141-5.448,3.252-11.825,2.366-17.699Z"
      />
      <path
        d="M133.535,274.881c-.289-.214-.572-.433-.819-.687-.298-.306-.558-.647-.789-1.007-1.78-.099-3.567-.154-5.362-.154-1.589,0-3.172,.049-4.75,.127,.037,.529,.088,1.055,.167,1.575,1.534-.074,3.065-.121,4.583-.121,2.304,0,4.636,.096,6.97,.267Z"
      />
    </g>
    <!-- highlight_3 -->
    <g id="lung_segments" class="organ" disabled>
      <path
        d="M139.211,203.081c-.035,10.43,.489,26.919,.489,26.919,.361,8.942,.869,17.484,1.387,24.61,.081,1.126,.642,8.226,.881,10.821,.416,4.51,4.45,8.692,9.183,9.521l1.653,.286c9.23,1.587,14.801,2.544,29.458,14.022,.481,.376,.939,.75,1.377,1.107,1.837,1.501,3.289,2.686,4.391,2.419,.635-.152,1.2-.806,1.728-2,1.456-3.295,2.306-23.211,2.063-41.814-.012-.956-.029-1.931-.029-1.931-.1-5.616-.345-15.667-1.403-24.245-.086-.694-.223-1.58-.223-1.58-3.802-25.424-18.395-46.436-31.179-54.265-3.486-2.135-6.73-3.219-9.564-3.219-1.153,0-2.239,.18-3.244,.542-4.094,1.474-6.004,12.971-6.68,27.993l-.287,10.813Z"
      />
      <path
        d="M113.553,192.269c-.675-15.022-2.586-26.52-6.68-27.993-1.005-.362-2.091-.542-3.244-.542-2.834,0-6.079,1.085-9.565,3.219-12.784,7.829-27.376,28.841-31.179,54.265,0,0-.138,.886-.223,1.58-1.058,8.578-1.303,18.629-1.403,24.245,0,0-.018,.975-.029,1.931-.243,18.603,.606,38.519,2.063,41.814,.528,1.194,1.093,1.848,1.728,2,1.102,.267,2.555-.919,4.391-2.419,.438-.357,.896-.731,1.377-1.107,14.656-11.479,20.228-12.436,29.458-14.022l1.653-.286c4.733-.83,8.767-5.012,9.183-9.521,.24-2.595,.8-9.695,.881-10.821,.518-7.125,1.026-15.667,1.387-24.61,0,0,.525-16.506,.49-26.936l-.287-10.796Z"
      />
    </g>
    <!-- highlight_2 highlight_4 -->
    <path
      id="esophagus_1"
      class="organ"
      disabled
      d="M122.517,132.042v44.948c-.374,4.423-2.285,8.614-5.444,11.773l-3.52,3.505,.287,10.796,12.676-11.982,12.695,11.999,.287-10.813-3.537-3.537c-3.159-3.159-5.07-7.325-5.444-11.743v-44.948c-1.299,.196-2.634,.3-4.008,.3s-2.698-.104-3.992-.299Z"
    />
    <path
      id="esophagus_2"
      class="organ"
      disabled
      d="M130.9,268.892c-.076-1.693,.072-3.403,.11-5.096,.056-2.493,.161-4.985,.161-7.478v-56.949l-4.675-4.429-4.736,4.487v68.39c0,1.776-.067,3.579,.055,5.344,1.578-.078,3.16-.127,4.75-.127,1.795,0,3.582,.055,5.362,.154-.039-.06-.084-.116-.12-.177-.78-1.312-.84-2.646-.907-4.118Z"
    />
    <!-- highlight_1 -->
    <path
      id="oral_cavity"
      class="organ"
      disabled
      d="M142.202,116.344c-.031-10.195-7.053-5.49-15.716-5.49s-15.685-4.705-15.654,5.49c.014,4.73,4.968,8.694,11.685,9.845v4.335c1.292,.21,2.622,.317,3.992,.317s2.711-.108,4.008-.319v-4.333c6.725-1.151,11.699-5.115,11.685-9.846Z"
    />
    <path
      id="xp_fluoro_reproductive_system"
      index="xp_fluoro_reproductive_system"
      class="region"
      d="M125.644,463.355c0-.483,.391-.873,.873-.873s.873,.391,.873,.873c.003,6.297,.123,14.262,.33,23.398h82.048c.483-11.156,.758-22.906,.758-35.327,0-7.696-1.846-19.63-4.294-33.173H46.801c-2.448,13.544-4.294,25.478-4.294,33.173,0,12.421,.275,24.171,.758,35.327H125.314c.208-9.137,.327-17.101,.33-23.398Z"
    />
    <path
      id="xp_fluoro_digestive_system"
      index="xp_fluoro_digestive_system"
      class="region"
      d="M203.066,401.345c-2.123-11.202-4.27-22.563-5.977-33.26H55.945c-1.707,10.697-3.854,22.058-5.977,33.26-.993,5.24-1.97,10.399-2.876,15.363H205.942c-.905-4.964-1.883-10.123-2.876-15.363Z"
    />
    <path
      id="xp_fluoro_urinary_system"
      index="xp_fluoro_urinary_system"
      class="region"
      d="M193.708,337.176H59.326c-.231,8.454-1.441,18.525-3.13,29.328H196.838c-1.69-10.803-2.9-20.874-3.13-29.328Z"
    />
    <path
      id="xp_fluoro_upper_abdomen"
      index="xp_fluoro_upper_abdomen"
      class="region"
      d="M56.355,304.493c1.725,12.827,3.036,24.365,3.036,29.811,0,.419-.016,.863-.021,1.291H193.664c-.005-.428-.021-.873-.021-1.291,0-5.457,1.317-17.035,3.047-29.895-18.689-18.539-43.236-29.794-70.125-29.794s-51.51,11.29-70.21,29.879Z"
    />
    <g id="xp_fluoro_lung" index="xp_fluoro_lung" class="region">
      <path
        d="M99.141,146.06s-.001,0-.002,0c-1.371,.418-3.079,.851-5.148,1.328-.016,.004-.033,.008-.049,.011-.483,.111-.986,.225-1.508,.342-.066,.015-.134,.03-.201,.045-.479,.107-.974,.216-1.486,.327-.099,.022-.196,.043-.296,.065-.515,.112-1.047,.227-1.595,.345-.088,.019-.173,.037-.261,.056-.635,.136-1.288,.276-1.968,.421-.075,.016-.154,.033-.23,.049-.548,.117-1.106,.236-1.675,.357-.177,.038-.36,.077-.539,.116-.511,.109-1.029,.221-1.555,.335-.209,.045-.421,.091-.633,.137-.516,.112-1.04,.227-1.569,.343-.203,.045-.407,.089-.612,.135-.62,.137-1.249,.278-1.884,.421-.108,.025-.215,.048-.324,.073-1.563,.354-3.169,.727-4.807,1.122-.049,.012-.098,.024-.147,.036-.748,.181-1.503,.366-2.264,.556-.128,.032-.257,.064-.385,.097-.709,.178-1.422,.361-2.139,.547-.124,.032-.248,.064-.372,.097-.791,.207-1.587,.419-2.386,.637-.032,.009-.064,.017-.096,.026-2.576,.705-5.185,1.468-7.789,2.297-.098,.031-.196,.063-.294,.094-.761,.244-1.521,.493-2.28,.749-.113,.038-.226,.076-.339,.114-.799,.271-1.597,.548-2.392,.833-.045,.016-.09,.031-.135,.048-1.738,.624-3.462,1.28-5.16,1.973-1.896,.773-3.753,1.597-5.568,2.461,21.296,29.84,11.118,70.626,7.766,84.051-.324,1.297-.653,2.617-.791,3.329,.014,.019,.034,.032,.047,.052,0,0,0,0,0,0,.055,.091,.095,.194,.113,.306,.012,.071,.032,.197,.057,.348,.033,.203,.078,.478,.133,.812,.116,.709,.278,1.708,.478,2.95,.005,.031,.01,.062,.015,.093,.033,.202,.066,.409,.101,.624,.026,.158,.051,.319,.078,.483,.026,.163,.053,.331,.08,.5,.023,.142,.045,.281,.069,.428,.037,.233,.076,.474,.115,.717,.018,.114,.036,.224,.054,.339,.042,.263,.086,.535,.129,.81,.019,.119,.037,.234,.057,.355,.047,.296,.096,.603,.145,.911,.019,.121,.038,.239,.058,.362,.13,.817,.266,1.676,.407,2.57,.01,.064,.02,.13,.031,.194,.063,.401,.127,.808,.193,1.223,.015,.094,.03,.19,.045,.285,.056,.354,.112,.712,.169,1.076,.025,.158,.05,.317,.075,.477,.055,.354,.111,.711,.168,1.073,.023,.15,.047,.3,.07,.451,.062,.395,.124,.795,.187,1.199,.015,.094,.029,.186,.044,.281,.16,1.031,.324,2.088,.491,3.17,.006,.04,.012,.079,.018,.119,.263,1.709,.534,3.477,.809,5.29,.002,.016,.005,.033,.007,.049,.275,1.811,.554,3.666,.835,5.549,0,.006,.002,.012,.003,.018,.944,6.33,1.906,12.981,2.777,19.378,16.296-15.895,36.19-25.771,57.514-28.625v-127.838h-14.463Z"
      />
      <path
        d="M153.893,146.06s.001,0,.002,0c1.371,.418,3.079,.851,5.148,1.328,.016,.004,.033,.008,.049,.011,.483,.111,.986,.225,1.508,.342,.066,.015,.134,.03,.201,.045,.479,.107,.974,.216,1.486,.327,.099,.022,.196,.043,.296,.065,.515,.112,1.047,.227,1.595,.345,.088,.019,.173,.037,.261,.056,.635,.136,1.288,.276,1.968,.421,.075,.016,.154,.033,.23,.049,.548,.117,1.106,.236,1.675,.357,.177,.038,.36,.077,.539,.116,.511,.109,1.029,.221,1.555,.335,.209,.045,.421,.091,.633,.137,.516,.112,1.04,.227,1.569,.343,.203,.045,.407,.089,.612,.135,.62,.137,1.249,.278,1.884,.421,.108,.025,.215,.048,.324,.073,1.563,.354,3.169,.727,4.807,1.122,.049,.012,.098,.024,.147,.036,.748,.181,1.503,.366,2.264,.556,.128,.032,.257,.064,.385,.097,.709,.178,1.422,.361,2.139,.547,.124,.032,.248,.064,.372,.097,.791,.207,1.587,.419,2.386,.637,.032,.009,.064,.017,.096,.026,2.576,.705,5.185,1.468,7.789,2.297,.098,.031,.196,.063,.294,.094,.761,.244,1.521,.493,2.28,.749,.113,.038,.226,.076,.339,.114,.799,.271,1.597,.548,2.392,.833,.045,.016,.09,.031,.135,.048,1.738,.624,3.462,1.28,5.16,1.973,1.896,.773,3.753,1.597,5.568,2.461-21.296,29.84-11.118,70.626-7.766,84.051,.324,1.297,.653,2.617,.791,3.329-.014,.019-.034,.032-.047,.052,0,0,0,0,0,0-.055,.091-.095,.194-.113,.306-.012,.071-.032,.197-.057,.348-.033,.203-.078,.478-.133,.812-.116,.709-.278,1.708-.478,2.95-.005,.031-.01,.062-.015,.093-.033,.202-.066,.409-.101,.624-.026,.158-.051,.319-.078,.483-.026,.163-.053,.331-.08,.5-.023,.142-.045,.281-.069,.428-.037,.233-.076,.474-.115,.717-.018,.114-.036,.224-.054,.339-.042,.263-.086,.535-.129,.81-.019,.119-.037,.234-.057,.355-.047,.296-.096,.603-.145,.911-.019,.121-.038,.239-.058,.362-.13,.817-.266,1.676-.407,2.57-.01,.064-.02,.13-.031,.194-.063,.401-.127,.808-.193,1.223-.015,.094-.03,.19-.045,.285-.056,.354-.112,.712-.169,1.076-.025,.158-.05,.317-.075,.477-.055,.354-.111,.711-.168,1.073-.023,.15-.047,.3-.07,.451-.062,.395-.124,.795-.187,1.199-.015,.094-.029,.186-.044,.281-.16,1.031-.324,2.088-.491,3.17-.006,.04-.012,.079-.018,.119-.263,1.709-.534,3.477-.809,5.29-.002,.016-.005,.033-.007,.049-.275,1.811-.554,3.666-.835,5.549,0,.006-.002,.012-.003,.018-.944,6.33-1.906,12.981-2.777,19.378-16.296-15.895-36.19-25.771-57.514-28.625v-127.838h14.463Z"
      />
    </g>
    <path
      id="xp_fluoro_esophagus"
      index="xp_fluoro_esophagus"
      class="region"
      d="M137.941,129.633c-3.462,1.794-7.273,2.708-11.432,2.708-4.115,0-7.888-.898-11.32-2.657v144.018c3.754-.439,7.549-.669,11.376-.669s7.622,.229,11.376,.669V129.633Z"
    />
    <path
      id="xp_fluoro_head"
      index="xp_fluoro_head"
      class="region"
      d="M154.063,104.498c.176-.539,.349-1.078,.514-1.612,.08-.258,.152-.509,.229-.765,.099-.329,.201-.661,.294-.983,.334-1.154,.632-2.26,.881-3.268,.16-.646,.304-1.261,.42-1.812,.356-1.695,.603-3.159,.754-4.142,.091-.59,.147-1.006,.171-1.195,.009-.072,.014-.111,.014-.114,.041-.338,.275-.621,.598-.726,.089-.029,.181-.043,.271-.043,.05,0,.096,.022,.145,.03,.041,.007,.078,.012,.118,.024,.14,.045,.271,.113,.375,.225,0,0,0,0,0,0,.171,.185,.34,.328,.51,.429,.117,.069,.234,.113,.353,.143,.038,.01,.077,.011,.116,.017,.076,.011,.153,.014,.232,.009,.103-.006,.21-.03,.319-.063,.051-.015,.1-.023,.153-.044,.163-.065,.332-.152,.513-.273,.268-.179,.563-.408,.896-.756,.111-.116,.226-.246,.346-.391,.359-.436,.759-1.016,1.211-1.809,.151-.264,.307-.553,.47-.867,.576-1.113,1.32-2.653,2.065-4.717,.447-1.238,.894-2.665,1.306-4.302l.356-1.402c.236-.922,.442-1.727,.638-2.58,.163-.712,.319-1.457,.478-2.334,.08-.438,.16-.909,.244-1.425s.169-1.076,.258-1.693c.466-3.227,.586-6.21,.33-8.184h0c-.194-1.507-.498-2.173-.7-2.484-.067-.104-.124-.168-.161-.21-.171-.194-.274-.485-.235-.741,0-.006,.157-1.023,.325-2.407,.563-4.642,.619-8.892,.183-13.781-.441-4.924-1.358-9.168-2.886-13.355-.846-2.319-1.916-4.492-2.93-6.256-.203-.353-.403-.689-.599-1.007-.392-.636-.766-1.198-1.104-1.669-.967-1.349-1.981-2.551-2.997-3.615s-2.031-1.992-3.002-2.792c-.971-.8-1.896-1.474-2.729-2.03-.833-.556-1.575-.996-2.178-1.329-4.169-2.299-8.723-3.83-13.939-4.655-1.043-.165-2.113-.302-3.211-.411-2.197-.218-4.508-.325-6.951-.325-4.895,0-9.257,.428-13.228,1.316-.993,.222-1.961,.473-2.908,.753-1.893,.56-3.697,1.237-5.431,2.035-.867,.399-1.716,.828-2.549,1.288-.603,.333-1.345,.772-2.178,1.328-1.25,.834-2.707,1.932-4.214,3.327-1.507,1.395-3.064,3.087-4.515,5.112-.164,.229-.429,.61-.761,1.126-.996,1.547-2.595,4.307-3.873,7.807-1.147,3.141-1.949,6.313-2.464,9.78-.172,1.156-.311,2.344-.421,3.575-.219,2.446-.314,4.731-.284,6.985,.03,2.254,.185,4.476,.466,6.796,.168,1.385,.324,2.402,.325,2.407,.02,.126,.011,.254-.024,.374-.034,.12-.094,.233-.178,.33-.046,.052-.108,.123-.18,.232-.108,.163-.238,.411-.365,.807-.127,.396-.252,.939-.349,1.692-.256,1.979-.135,4.963,.331,8.185,.071,.494,.14,.952,.208,1.38,.471,2.994,.859,4.507,1.411,6.659l.355,1.395c.821,3.268,1.787,5.703,2.608,7.469,.274,.589,.531,1.103,.762,1.549,.163,.315,.319,.603,.47,.867,.151,.265,.296,.505,.435,.725,.838,1.317,1.481,1.873,2.017,2.232,.218,.146,.421,.251,.614,.316,.193,.065,.376,.089,.553,.071,.354-.035,.685-.235,1.028-.606,.103-.112,.235-.179,.374-.225,.042-.014,.08-.018,.124-.026,.048-.008,.094-.03,.143-.03,.09,0,.181,.014,.27,.043,.323,.105,.556,.388,.598,.726,0,.003,.005,.042,.014,.114,.008,.063,.02,.151,.035,.263,.107,.781,.391,2.702,.89,5.075,.21,.998,.497,2.174,.842,3.447,.345,1.274,.747,2.646,1.187,4.035,.439,1.389,.916,2.796,1.41,4.139,.494,1.343,1.004,2.624,1.511,3.761,5.746,12.873,14.133,19.401,24.927,19.401s19.198-6.527,24.944-19.401c.014-.032,.029-.069,.043-.102,.864-1.948,1.733-4.299,2.511-6.665,.019-.059,.037-.117,.056-.176Z"
    />
  </svg>`;
  };

  // ../sh-patient-illustration/src/sh-patient-illustration.js
  var SHPatientIllustration = class SHPatientIllustration2 extends s4 {
    constructor() {
      super(...arguments);
      this.image = "ct_adult_anatomical";
      this.disabled = [];
      this.activeRegions = [];
      this.multiSelect = false;
      this.illustrationLevel = 0;
    }
    static get styles() {
      return [
        sharedStyles,
        i`
        :host {
          height: 100%;
          width: 100%;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
        }

        svg {
          height: 100%;
          width: 100%;
        }

        .region[hover] {
          fill: rgba(var(--ui-1), var(--opacity-5));
        }

        .region {
          fill: rgba(var(--ui-1), var(--opacity-6));
          cursor: pointer;
          transition: var(--transition-time) all ease-in-out;
        }

        .region[disabled] {
          fill: transparent;
          pointer-events: none;
        }

        .region[active] {
          fill: rgba(var(--ui-2), var(--opacity-3));
        }

        .outline {
          fill: rgba(var(--ui-1), var(--opacity-5));
        }

        .vascular {
          fill: rgba(var(--functional-red), 1);
          pointer-events: none;
        }

        .bone,
        .organ {
          fill: rgba(var(--ui-1), var(--opacity-5));
          pointer-events: none;
        }

        .bone[disabled],
        .organ[disabled] {
          fill: rgba(var(--ui-1), var(--opacity-7));
          pointer-events: none;
        }

        .transparent {
          fill: transparent;
        }
      `
      ];
    }
    render() {
      return x`${getPatientIllustration(this.image)}`;
    }
    connectedCallback() {
      super.connectedCallback();
      this.clickListener = this.clickHandler.bind(this);
      this.mouseEnterListener = this.mouseEnterHandler.bind(this);
      this.mouseLeaveListener = this.mouseLeaveHandler.bind(this);
      this.xpclickListener = this.xpclickHandler.bind(this);
    }
    firstUpdated(changedProperties) {
      super.firstUpdated(changedProperties);
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    update(changedProperties) {
      if (changedProperties.has("active")) {
        this.handleactiveChanged();
        dispatchCustomEvent(this, "active-changed");
      }
      if (changedProperties.has("image")) {
        this.updateComplete.then(() => {
          this.handleImageChanged();
          dispatchCustomEvent(this, "image-changed");
        });
      }
      if (changedProperties.has("currentSelected") && getMultiLayerPatientList().includes(this.image)) {
        this.resetState();
        this.lastSelected = this.currentSelected;
        this.updateComplete.then(() => {
          this.handlecurrentSelectedChanged();
        });
      }
      if (changedProperties.has("disabled")) {
        this.handledisabledChanged();
        dispatchCustomEvent(this, "disabled-changed");
      }
      if (changedProperties.has("activeRegions") || changedProperties.has("multiSelect")) {
        this.updateComplete.then(() => {
          if (this.multiSelect)
            this.handlemultiActiveChanged();
        });
      }
      super.update(changedProperties);
    }
    disconnectedCallback() {
      var _a4;
      this.removeEventListener("click", this.xpclickListener);
      this.removeEventListener("touchend", this.xpclickListener);
      const regions = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".region");
      if (regions) {
        for (const element of regions) {
          if (!getMultiLayerPatientList().includes(this.image)) {
            element.removeEventListener("click", this.clickListener);
          }
          if (!deviceIdentifier.isTouchDevice()) {
            element.removeEventListener("mouseenter", this.mouseEnterListener);
            element.removeEventListener("mouseleave", this.mouseLeaveListener);
          }
        }
      }
      super.disconnectedCallback();
    }
    handleImageChanged() {
      var _a4, _b3;
      this.areaStates = getPatientStates(this.image);
      const svg2 = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector("svg");
      svg2 === null || svg2 === void 0 ? void 0 : svg2.removeAttribute("hidden");
      const regions = (_b3 = this.shadowRoot) === null || _b3 === void 0 ? void 0 : _b3.querySelectorAll(".region");
      if (regions) {
        for (const element of regions) {
          if (!getMultiLayerPatientList().includes(this.image)) {
            element.addEventListener("click", this.clickListener);
          }
          if (!deviceIdentifier.isTouchDevice()) {
            element.addEventListener("mouseenter", this.mouseEnterListener);
            element.addEventListener("mouseleave", this.mouseLeaveListener);
          }
        }
      }
      this.addEventListener("click", this.xpclickListener);
      this.handleactiveChanged();
      this.handledisabledChanged();
    }
    mouseEnterHandler(event) {
      var _a4, _b3;
      const regions = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".region");
      if (regions) {
        for (const element of regions) {
          if (element.getAttribute("index") === ((_b3 = event.target) === null || _b3 === void 0 ? void 0 : _b3.getAttribute("index"))) {
            element.setAttribute("hover", "true");
          }
        }
      }
    }
    mouseLeaveHandler(event) {
      var _a4, _b3;
      const regions = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".region");
      if (regions) {
        for (const element of regions) {
          if (element.getAttribute("index") === ((_b3 = event.target) === null || _b3 === void 0 ? void 0 : _b3.getAttribute("index"))) {
            element.removeAttribute("hover");
          }
        }
      }
    }
    handledisabledChanged() {
      var _a4;
      if (this.disabled) {
        const regions = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".region");
        if (regions) {
          for (const element of regions) {
            const index = element.getAttribute("index");
            if (this.disabled.indexOf(index) >= 0) {
              element.setAttribute("disabled", "true");
            } else {
              element.removeAttribute("disabled");
            }
          }
        }
      }
    }
    handleactiveChanged() {
      var _a4;
      if (getMultiLayerPatientList().includes(this.image)) {
        return;
      }
      const regions = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".region");
      if (regions) {
        for (const element of regions) {
          const index = element.getAttribute("index");
          if (!this.multiSelect) {
            if (parseInt(index, 10) === Number(this.active)) {
              element.setAttribute("active", "true");
            } else {
              element.removeAttribute("active");
            }
          }
        }
      }
    }
    handlecurrentSelectedChanged() {
      var _a4;
      if (!getMultiLayerPatientList().includes(this.image)) {
        return;
      }
      (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".region").forEach((region) => region.removeAttribute("active"));
      this.illustrationLevel = 0;
      if (this.currentSelected) {
        this.illustrationLevel = 1;
        const json = this.areaStates[this.currentSelected];
        this.setStates(json, false);
        if (this.shadowRoot && this.shadowRoot.querySelector("#default")) {
          this.shadowRoot.querySelector("#default").style.opacity = "0";
        }
      }
    }
    clickHandler(e8) {
      var _a4;
      e8.preventDefault();
      const index = (_a4 = e8.target) === null || _a4 === void 0 ? void 0 : _a4.getAttribute("index");
      if (!this.multiSelect) {
        if (this.active !== index) {
          this.active = index;
        } else {
          this.removeAttribute("active");
          this.active = void 0;
        }
      } else {
        const activeIndex = this.activeRegions.findIndex((x2) => x2 === index);
        if (activeIndex === -1) {
          this.activeRegions = this.activeRegions.concat(index);
        } else {
          this.activeRegions = this.activeRegions.filter((x2) => x2 !== index);
        }
        this.handlemultiActiveChanged();
      }
    }
    handlemultiActiveChanged() {
      var _a4;
      if (getMultiLayerPatientList().includes(this.image)) {
        return;
      }
      const regions = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll(".region");
      regions === null || regions === void 0 ? void 0 : regions.forEach((element) => {
        const index = element.getAttribute("index");
        if (this.activeRegions.includes(index)) {
          element.setAttribute("active", "true");
        } else {
          if (element.getAttribute("active")) {
            element.removeAttribute("active");
          }
        }
      });
    }
    xpclickHandler(event) {
      var _a4, _b3, _c, _d, _e, _f, _g, _h;
      event.preventDefault();
      const path = event.path || event.composedPath && event.composedPath();
      if (path[0].id === "outline") {
        return;
      }
      if (path[1].id === "back-to-default") {
        this.backToDefault();
      }
      if (this.illustrationLevel === 1) {
        this.setSelectedLevel1(path);
      }
      if (this.illustrationLevel === 2) {
        if (this.currentSelected + "_selection" === path[1].id && this.currentActive !== path[0].id) {
          (_b3 = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector("#" + this.currentActive)) === null || _b3 === void 0 ? void 0 : _b3.removeAttribute("active");
          (_d = (_c = this.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector("#" + path[0].id)) === null || _d === void 0 ? void 0 : _d.setAttribute("active", "true");
          this.currentActive = path[0].id;
          this.illustrationLevel = 2;
        } else if (this.currentSelected + "_selection" === path[2].id && this.currentActive !== path[1].id) {
          (_f = (_e = this.shadowRoot) === null || _e === void 0 ? void 0 : _e.querySelector("#" + this.currentActive)) === null || _f === void 0 ? void 0 : _f.removeAttribute("active");
          (_h = (_g = this.shadowRoot) === null || _g === void 0 ? void 0 : _g.querySelector("#" + path[1].id)) === null || _h === void 0 ? void 0 : _h.setAttribute("active", "true");
          this.currentActive = path[1].id;
          this.illustrationLevel = 2;
        } else if (this.currentActive === path[0].id || this.currentActive === path[1].id) {
          return;
        } else {
          this.illustrationLevel = 1;
          this.lastSelected = this.currentSelected;
          this.illustrationLevel = 0;
          this.currentSelected = "";
        }
      }
      if (this.illustrationLevel === 0) {
        this.setSelectedLevel0(path);
      }
    }
    setSelectedLevel0(path) {
      if (path[0].tagName === "path" && path[1].id !== "back-to-default") {
        if (path[0].id === "") {
          this.selectArea(path, 1);
        } else {
          this.selectArea(path, 0);
        }
      }
    }
    setSelectedLevel1(path) {
      var _a4, _b3, _c, _d;
      if (path[1].id === this.currentSelected + "_selection") {
        (_b3 = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector("#" + path[0].id)) === null || _b3 === void 0 ? void 0 : _b3.setAttribute("active", "true");
        this.currentActive = path[0].id;
        this.illustrationLevel = 2;
      }
      if (path[2].id === this.currentSelected + "_selection") {
        (_d = (_c = this.shadowRoot) === null || _c === void 0 ? void 0 : _c.querySelector("#" + path[1].id)) === null || _d === void 0 ? void 0 : _d.setAttribute("active", "true");
        this.currentActive = path[1].id;
        this.illustrationLevel = 2;
      }
      if (path[0].tagName === "path" && path[0].id === "") {
        this.selectArea(path, 1);
      }
      if (path[0].tagName === "path" && path[0].id !== "") {
        this.selectArea(path, 0);
      }
    }
    backToDefault() {
      this.lastSelected = this.currentSelected;
      this.illustrationLevel = 0;
      this.currentSelected = "";
    }
    resetState() {
      var _a4, _b3;
      if (this.lastSelected === void 0) {
        return;
      }
      if (this.lastSelected) {
        const json = this.areaStates[this.lastSelected];
        this.setStates(json, true);
        if (this.currentActive && this.illustrationLevel < 2) {
          (_b3 = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector("#" + this.currentActive)) === null || _b3 === void 0 ? void 0 : _b3.removeAttribute("active");
          this.currentActive = "";
        }
      }
      if (this.illustrationLevel === 0) {
        if (this.shadowRoot && this.shadowRoot.querySelector("#default")) {
          this.shadowRoot.querySelector("#default").style.opacity = "1";
        }
      }
    }
    setStates(json, reset) {
      const toHide = json["hidden"];
      const toDisable = json["disabled"];
      const toActive = json["active"];
      if (toHide) {
        toHide.forEach((element) => {
          this.setState(element, "hidden");
        });
      }
      if (toDisable) {
        toDisable.forEach((element) => {
          this.setState(element, "disabled");
        });
      }
      if (toActive) {
        toActive.forEach((element) => {
          this.setState(element, "active");
          if (!reset) {
            this.currentActive = element;
          }
        });
        if (!reset) {
          this.illustrationLevel = 2;
        }
      }
    }
    selectArea(item, position) {
      if (this.illustrationLevel === 0) {
        this.currentSelected = item[position].id;
      }
      if (this.illustrationLevel === 1) {
        this.lastSelected = this.currentSelected;
        this.currentSelected = item[position].id;
      }
    }
    setState(id, attribute) {
      var _a4;
      const path = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector("#" + id);
      if (path === null || path === void 0 ? void 0 : path.hasAttribute(attribute)) {
        path.removeAttribute(attribute);
      } else {
        path === null || path === void 0 ? void 0 : path.setAttribute(attribute, "true");
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHPatientIllustration.prototype, "image", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHPatientIllustration.prototype, "active", void 0);
  __decorate([n5({ type: Array, reflect: true })], SHPatientIllustration.prototype, "disabled", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "current-selected" })], SHPatientIllustration.prototype, "currentSelected", void 0);
  __decorate([n5({ type: Array, reflect: true, attribute: "active-regions" })], SHPatientIllustration.prototype, "activeRegions", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "multi-select" })], SHPatientIllustration.prototype, "multiSelect", void 0);
  __decorate([n5({ type: Number })], SHPatientIllustration.prototype, "illustrationLevel", void 0);
  __decorate([n5({ type: String })], SHPatientIllustration.prototype, "lastSelected", void 0);
  __decorate([n5({ type: String, reflect: true })], SHPatientIllustration.prototype, "currentActive", void 0);
  __decorate([n5({ type: Object })], SHPatientIllustration.prototype, "areaStates", void 0);
  SHPatientIllustration = __decorate([e4("sh-patient-illustration")], SHPatientIllustration);

  // ../utils/basic-overlay-mixin.js
  var BasicOverlayMixin = (superClass) => class BasicOverlayMixin extends superClass {
    static get properties() {
      return {
        _invokerNode: { type: Object },
        _attachNode: { type: Object },
        trackTargetOn: { type: String, reflect: true, attribute: "track-target-on" }
      };
    }
    constructor() {
      super();
      this._rootNodes = [];
      this.trackTargetOn = "scrolling";
    }
    connectedCallback() {
      super.connectedCallback();
      this._onParentScroll = this._parentScrollActions.bind(this);
      this._windowResizeListener = this._windowResizeActions.bind(this);
      this._resizeObserverCallback = this._resizeObserverActions.bind(this);
      this._resizeObserver = new ResizeObserver(this._resizeObserverCallback);
      this._additionalStopCheckTime = 1e3;
      this._defaultAdditionalStopCheckDecrementNumber = this._additionalStopCheckTime / 16;
      this._currentStopCheckDecrementNumber = this._defaultAdditionalStopCheckDecrementNumber;
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("_invokerNode")) {
        const oldInvokerNode = changedProperties.get("_invokerNode");
        const hasOldInvokerNodeValue = Boolean(oldInvokerNode);
        if (hasOldInvokerNodeValue) {
          this._doSomethingWithOldInvokerNode(oldInvokerNode);
        }
        if (this._invokerNode) {
          this._doSomethingWithNewInvokerNode(this._invokerNode);
        }
      }
      if (changedProperties.has("_attachNode") || changedProperties.has("visible")) {
        this._removeScrollResizeObservers();
        if (this.visible && this._attachNode) {
          this._setTargetPositionTrackers();
        }
      }
    }
    _setTargetPositionTrackers() {
      this._addResizeObservers();
      if (this.trackTargetOn === "scrolling") {
        this._addScrollListeners();
      } else {
        this._trackTargetUsingRAF();
      }
      if (this._canPositionOverlay()) {
        this._setOverlayPlacement(this._targetEl);
      }
    }
    _addResizeObservers() {
      window.addEventListener("resize", this._windowResizeListener);
      this._resizeObserver.observe(this._attachNode);
      this._resizeObserver.observe(this);
    }
    _removeScrollResizeObservers() {
      window.removeEventListener("resize", this._windowResizeListener);
      this._removeScrollListeners();
      this._resizeObserver.disconnect();
      this._stopRafTimers();
      this._resetRafTrackSettings();
    }
    _stopRafTimers() {
      cancelAnimationFrame(this._motionDetectTimer);
      cancelAnimationFrame(this._stopDetectTimer);
    }
    _resetRafTrackSettings() {
      this._currentStopCheckDecrementNumber = this._defaultAdditionalStopCheckDecrementNumber;
      this._targetLeft = null;
      this._targetTop = null;
    }
    disconnectedCallback() {
      this._removeScrollResizeObservers();
      if (this._invokerNode) {
        this._doSomethingWithOldInvokerNode(this._invokerNode);
      }
      super.disconnectedCallback();
    }
    _resizeObserverActions() {
      this._positionOverlayIfPossible();
    }
    _windowResizeActions() {
      this._positionOverlayIfPossible();
    }
    _addScrollListeners() {
      if (this._rootNodes.length === 0) {
        this._rootNodes = [];
        let node = this._attachNode;
        while (node) {
          if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE && node.host) {
            this._rootNodes.push(node);
          }
          node = node.host || node.assignedSlot || node.parentNode;
        }
        this._rootNodes.push(document);
        this._rootNodes.forEach((el) => {
          el.addEventListener("scroll", this._onParentScroll, {
            capture: true,
            passive: true
          });
        });
      }
    }
    _parentScrollActions() {
      if (this.scrollAction === "refit" && this.visible) {
        this._positionOverlayIfPossible();
      } else if ((this.scrollAction === "cancel" || this.scrollAction === "hide") && this.visible && !this.manualControlled) {
        this.visible = false;
        dispatchCustomEvent(this, "overlay-closed");
      } else {
      }
    }
    _removeScrollListeners() {
      this._rootNodes.forEach((el) => {
        el.removeEventListener("scroll", this._onParentScroll, {
          capture: true,
          passive: true
        });
      });
      this._rootNodes = [];
    }
    _setOverlayPlacement(attachNode) {
      console.log(`Please use this function in the implementing components with ${attachNode}`);
    }
    _canPositionOverlay() {
      return this.visible && this._attachNode && !this.mobile;
    }
    _positionOverlayIfPossible() {
      if (this._canPositionOverlay()) {
        this._setOverlayPlacement(this._attachNode);
      }
    }
    _doSomethingWithNewInvokerNode(invokerNode) {
      console.log(`Please use this function in the implementing components with ${invokerNode}`);
    }
    _doSomethingWithOldInvokerNode(invokerNode) {
      console.log(`Please use this function in the implementing components with ${invokerNode}`);
    }
    _trackTargetUsingRAF() {
      this._motionDetectTimer = requestAnimationFrame(this.motionDetect.bind(this));
    }
    motionDetect() {
      cancelAnimationFrame(this._stopDetectTimer);
      cancelAnimationFrame(this._motionDetectTimer);
      if (this.trackTargetOn === "any" && this.visible) {
        const motionDetectTimeout = setTimeout(() => {
          clearTimeout(motionDetectTimeout);
          const targetRect = this._attachNode.getBoundingClientRect();
          const { left, top } = targetRect;
          if (left !== this._targetLeft || top !== this._targetTop) {
            this._currentStopCheckDecrementNumber = this._defaultAdditionalStopCheckDecrementNumber;
            this._stopDetectTimer = requestAnimationFrame(this.stopDetect.bind(this));
          } else {
            this._motionDetectTimer = requestAnimationFrame(this.motionDetect.bind(this));
          }
        }, 1e3);
      }
    }
    stopDetect() {
      cancelAnimationFrame(this._stopDetectTimer);
      cancelAnimationFrame(this._motionDetectTimer);
      if (this.trackTargetOn === "any" && this.visible) {
        const targetRect = this._attachNode.getBoundingClientRect();
        const { left, top } = targetRect;
        if (left !== this._targetLeft || top !== this._targetTop) {
          this._targetLeft = left;
          this._targetTop = top;
          this._parentScrollActions();
          this._currentStopCheckDecrementNumber = this._defaultAdditionalStopCheckDecrementNumber;
          this._stopDetectTimer = requestAnimationFrame(this.stopDetect.bind(this));
        } else if (this._currentStopCheckDecrementNumber > 0) {
          --this._currentStopCheckDecrementNumber;
          this._stopDetectTimer = requestAnimationFrame(this.stopDetect.bind(this));
        } else {
          this._motionDetectTimer = requestAnimationFrame(this.motionDetect.bind(this));
        }
      }
    }
  };

  // ../utils/getOverlayPlacement.js
  function getOverlayPlacementInfo2(placement, overlayRect, targetRect, viewportRect, overlayTargetDistance, viewportPadding, flippedAlgorithm, unflippedAlgorithm, suppressPlacementWarning = false) {
    getComputedStyle(document.documentElement);
    let actualViewport;
    ({ overlayRect, targetRect, actualViewport } = getRectParameters2(viewportRect, targetRect, overlayRect, viewportPadding));
    const { overlayTop, overlayLeft, overlayRight, overlayBottom } = getPlacementInfo2(placement, targetRect, overlayRect, overlayTargetDistance);
    let requiredLeft = overlayLeft;
    let requiredTop = overlayTop;
    let hasFoundIdeal = false;
    const overlayWillBeWithinViewport = isWithinViewport2(overlayTop, overlayLeft, overlayRight, overlayBottom, actualViewport);
    const targetIsOutsideViewport = isTargetOutsideViewport2(targetRect, actualViewport);
    if (!overlayWillBeWithinViewport) {
      const overlayPlacementAlgorithmOutput = overlayPlacementAlgorithm2(placement, requiredLeft, requiredTop, targetRect, overlayRect, overlayTargetDistance, actualViewport, flippedAlgorithm, unflippedAlgorithm);
      hasFoundIdeal = overlayPlacementAlgorithmOutput.hasFoundIdeal;
      if (!hasFoundIdeal) {
        const correctedPlacementWrtViewportInfo = getCorrectedCurrentPlacementWRTViewport2(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport);
        if (!suppressPlacementWarning) {
          console.warn("Could not find an ideal position within the viewport for the overlay without overlap with the target\n\nSo trying to fit the overlay within the viewport", "\nby correcting for the given placement: 	", placement, "\n\nNote: The target will be overlapped.\n\nSuggestion: Try to place the target in some other position within the viewport OR try to reduce the overlay's width and height");
        }
        requiredLeft = correctedPlacementWrtViewportInfo.placementInfo.overlayLeft;
        requiredTop = correctedPlacementWrtViewportInfo.placementInfo.overlayTop;
        if (!correctedPlacementWrtViewportInfo.foundIdealWrtViewport && !suppressPlacementWarning) {
          console.warn("Could not fit the Overlay within the Viewport.\n\n", "Are you sure the overlay width and/or height is less than effective viewport width (viewport width -" + convertToPixel(viewportPadding) + "px ) and/or effective viewport height (viewport height -" + convertToPixel(viewportPadding) + "px ) ?");
        }
      } else {
        requiredLeft = overlayPlacementAlgorithmOutput.idealLeft;
        requiredTop = overlayPlacementAlgorithmOutput.idealTop;
      }
    }
    if (targetIsOutsideViewport && !suppressPlacementWarning) {
      console.warn("The effective target (target boundary + " + convertToPixel(overlayTargetDistance) + "px margin around it) is outside the effective viewport (viewport boundary - " + convertToPixel(viewportPadding) + "px inner padding)");
    }
    return { requiredLeft, requiredTop, targetIsOutsideViewport };
  }
  function getRectParameters2(viewportRect, targetRect, overlayRect, viewportPadding) {
    viewportRect = JSON.parse(JSON.stringify(viewportRect));
    targetRect = JSON.parse(JSON.stringify(targetRect));
    overlayRect = JSON.parse(JSON.stringify(overlayRect));
    const viewportRectLeft = viewportRect.left + convertToPixel(viewportPadding);
    const viewportRectRight = viewportRect.right - convertToPixel(viewportPadding);
    const viewportRectTop = viewportRect.top + convertToPixel(viewportPadding);
    const viewportRectBottom = viewportRect.bottom - convertToPixel(viewportPadding);
    const actualViewport = {
      left: viewportRectLeft,
      right: viewportRectRight,
      top: viewportRectTop,
      bottom: viewportRectBottom,
      width: viewportRectRight - viewportRectLeft,
      height: viewportRectBottom - viewportRectTop
    };
    return { overlayRect, targetRect, actualViewport };
  }
  function getPlacementInfo2(placement, targetRect, overlayRect, overlayTargetDistance) {
    let overlayTop = 0;
    let overlayLeft = 0;
    let overlayRight = 0;
    let overlayBottom = 0;
    switch (placement) {
      case "top":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left + targetRect.width / 2 - overlayRect.width / 2;
        }
        break;
      case "top-left":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left;
        }
        break;
      case "top-right":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right - overlayRect.width;
        }
        break;
      case "bottom":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left + targetRect.width / 2 - overlayRect.width / 2;
        }
        break;
      case "bottom-left":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left;
        }
        break;
      case "bottom-right":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right - overlayRect.width;
        }
        break;
      case "left":
        {
          overlayTop = targetRect.top + targetRect.height / 2 - overlayRect.height / 2;
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "left-up":
        {
          overlayTop = targetRect.top;
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "left-down":
        {
          overlayTop = targetRect.bottom - overlayRect.height;
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "right":
        {
          overlayTop = targetRect.top + targetRect.height / 2 - overlayRect.height / 2;
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "right-up":
        {
          overlayTop = targetRect.top;
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "right-down":
        {
          overlayTop = targetRect.bottom - overlayRect.height;
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "top-diag-left":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "top-diag-right":
        {
          overlayTop = targetRect.top - overlayRect.height - convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
      case "bottom-diag-left":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.left - overlayRect.width - convertToPixel(overlayTargetDistance);
        }
        break;
      case "bottom-diag-right":
        {
          overlayTop = targetRect.bottom + convertToPixel(overlayTargetDistance);
          overlayLeft = targetRect.right + convertToPixel(overlayTargetDistance);
        }
        break;
    }
    overlayTop = Math.round(overlayTop);
    overlayLeft = Math.round(overlayLeft);
    overlayRight = overlayLeft + overlayRect.width;
    overlayBottom = overlayTop + overlayRect.height;
    return { overlayTop, overlayLeft, overlayRight, overlayBottom };
  }
  function overlayPlacementAlgorithm2(placement, left, top, targetRect, overlayRect, overlayTargetDistance, actualViewport, flippedAlgorithm, unflippedAlgorithm) {
    let hasFoundIdeal = false, idealLeft = left, idealTop = top;
    const algorithmSteps = getAlgorithmSteps2(placement, satisfiesFlipCondition2(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport), flippedAlgorithm, unflippedAlgorithm);
    for (let step = 0; step < algorithmSteps.length; ++step) {
      const algorithmStep = algorithmSteps[step];
      const fromPlacement = algorithmStep.from;
      const toPlacement = algorithmStep.to;
      const incrementValue = algorithmStep.increment;
      const incrementBy = algorithmStep.incrementBy;
      const fromPlacementData = getPlacementInfo2(fromPlacement, targetRect, overlayRect, overlayTargetDistance);
      const toPlacementData = getPlacementInfo2(toPlacement, targetRect, overlayRect, overlayTargetDistance);
      for (let i7 = fromPlacementData[incrementValue]; incrementBy === 1 ? i7 < toPlacementData[incrementValue] : i7 > toPlacementData[incrementValue]; incrementBy === 1 ? ++i7 : --i7) {
        const overlayData = getOtherOverlaySides2(incrementValue, i7, fromPlacementData, overlayRect);
        if (isWithinViewport2(overlayData.overlayTop, overlayData.overlayLeft, overlayData.overlayRight, overlayData.overlayBottom, actualViewport)) {
          idealLeft = overlayData.overlayLeft;
          idealTop = overlayData.overlayTop;
          hasFoundIdeal = true;
          break;
        }
      }
      if (hasFoundIdeal) {
        break;
      }
    }
    return { hasFoundIdeal, idealTop, idealLeft };
  }
  function isWithinViewport2(top, left, right, bottom, actualViewport) {
    return left >= actualViewport.left && right <= actualViewport.right && top >= actualViewport.top && bottom <= actualViewport.bottom;
  }
  function satisfiesFlipCondition2(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport) {
    const placementInfo = getPlacementInfo2(placement, targetRect, overlayRect, overlayTargetDistance);
    const flipConditionDictionary = {
      top: placementInfo.overlayTop < actualViewport.top,
      bottom: placementInfo.overlayBottom > actualViewport.bottom,
      left: placementInfo.overlayLeft < actualViewport.left,
      right: placementInfo.overlayRight > actualViewport.right,
      "top-left": placementInfo.overlayTop < actualViewport.top,
      "top-right": placementInfo.overlayTop < actualViewport.top,
      "bottom-left": placementInfo.overlayBottom > actualViewport.bottom,
      "bottom-right": placementInfo.overlayBottom > actualViewport.bottom,
      "left-up": placementInfo.overlayLeft < actualViewport.left,
      "left-down": placementInfo.overlayLeft < actualViewport.left,
      "right-up": placementInfo.overlayRight > actualViewport.right,
      "right-down": placementInfo.overlayRight > actualViewport.right
    };
    return flipConditionDictionary[placement];
  }
  function getCorrectedCurrentPlacementWRTViewport2(placement, targetRect, overlayRect, overlayTargetDistance, actualViewport) {
    let foundIdealWrtViewport = false;
    let placementInfo = getPlacementInfo2(placement, targetRect, overlayRect, overlayTargetDistance);
    const viewportCorrectionOrder = getViewportCorrectionOrder2(placement);
    placementInfo = correctToViewportForSide2(viewportCorrectionOrder[0], placementInfo, overlayRect, actualViewport);
    placementInfo = correctToViewportForSide2(viewportCorrectionOrder[1], placementInfo, overlayRect, actualViewport);
    placementInfo = correctToViewportForSide2(viewportCorrectionOrder[2], placementInfo, overlayRect, actualViewport);
    placementInfo = correctToViewportForSide2(viewportCorrectionOrder[3], placementInfo, overlayRect, actualViewport);
    foundIdealWrtViewport = isWithinViewport2(placementInfo.overlayTop, placementInfo.overlayLeft, placementInfo.overlayRight, placementInfo.overlayBottom, actualViewport);
    return { foundIdealWrtViewport, placementInfo };
  }
  function isTargetOutsideViewport2(targetRect, actualViewport) {
    return targetRect.right <= actualViewport.left || targetRect.left >= actualViewport.right || targetRect.bottom <= actualViewport.top || targetRect.top >= actualViewport.bottom;
  }
  function getOtherOverlaySides2(incrementSide, incrementValue, placementData, overlayRect) {
    const overlaySidesDictionary = {
      overlayLeft: {
        overlayTop: placementData.overlayTop,
        overlayLeft: incrementValue
      },
      overlayTop: {
        overlayTop: incrementValue,
        overlayLeft: placementData.overlayLeft
      },
      overlayRight: {
        overlayTop: placementData.overlayTop,
        overlayLeft: incrementValue - overlayRect.width
      },
      overlayBottom: {
        overlayTop: incrementValue - overlayRect.height,
        overlayLeft: placementData.overlayLeft
      }
    };
    const topLeftData = overlaySidesDictionary[incrementSide];
    const overlayRight = topLeftData.overlayLeft + overlayRect.width;
    const overlayBottom = topLeftData.overlayTop + overlayRect.height;
    return Object.assign(Object.assign({}, topLeftData), { overlayRight, overlayBottom });
  }
  function getAlgorithmSteps2(placement, flipped, flippedAlgorithm, unflippedAlgorithm) {
    let algorithm;
    if (flipped) {
      algorithm = flippedAlgorithm || getFlippedAlgorithm(placement);
    } else {
      algorithm = unflippedAlgorithm || getUnFlippedAlgorithm(placement);
    }
    return algorithm;
  }
  function correctToViewportForSide2(side, placementInfo, overlayRect, actualViewport) {
    if (side === "overlayTop") {
      if (placementInfo.overlayTop < actualViewport.top) {
        placementInfo.overlayTop = actualViewport.top;
      }
    }
    if (side === "overlayRight") {
      if (placementInfo.overlayRight > actualViewport.right) {
        placementInfo.overlayRight = actualViewport.right;
      }
    }
    if (side === "overlayLeft") {
      if (placementInfo.overlayLeft < actualViewport.left) {
        placementInfo.overlayLeft = actualViewport.left;
      }
    }
    if (side === "overlayBottom") {
      if (placementInfo.overlayBottom > actualViewport.bottom) {
        placementInfo.overlayBottom = actualViewport.bottom;
      }
    }
    placementInfo = getOtherOverlaySides2(side, placementInfo[side], placementInfo, overlayRect);
    return placementInfo;
  }
  function getViewportCorrectionOrder2(placement) {
    let order = [];
    switch (placement) {
      case "top":
      case "top-left":
      case "top-right":
        order = ["overlayTop", "overlayRight", "overlayBottom", "overlayLeft"];
        break;
      case "bottom":
      case "bottom-left":
      case "bottom-right":
        order = ["overlayBottom", "overlayLeft", "overlayTop", "overlayRight"];
        break;
      case "left":
      case "left-up":
      case "left-down":
        order = ["overlayLeft", "overlayTop", "overlayRight", "overlayBottom"];
        break;
      case "right":
      case "right-up":
      case "right-down":
        order = ["overlayRight", "overlayBottom", "overlayLeft", "overlayTop"];
        break;
    }
    return order;
  }

  // ../utils/pixel-to-rem-convertor.js
  var convertToRem = (pxValue) => {
    const htmlFontSize = Number(getComputedStyle(document.documentElement)["font-size"].split("px")[0]);
    return pxValue / htmlFontSize;
  };

  // ../sh-popover/src/popover-arrow-positioner.js
  var Point = class {
    constructor(point, rotation = 0) {
      this.x = point[0];
      this.y = point[1];
      this.rotation = rotation;
    }
  };
  var ArrowPosition = class {
    constructor(target, popover, popoverScale) {
      this.arrowPositionX = 0;
      this.arrowPositionY = 0;
      this.arrowRotation = 0;
      this.setArrowPosition(target, popover, popoverScale);
    }
    setArrowPosition(target, popover, popoverScale) {
      this.arrowX0 = popoverScale === "s" || popoverScale === "m" ? -0.375 : -0.5625;
      this.arrowY0 = popoverScale === "s" || popoverScale === "m" ? -0.5 : -0.75;
      this.arrowRotation0 = -270;
      if (target.tagName === "SH-WORKLINE-ITEM" && target.type === "information") {
        target = target.shadowRoot.querySelector("sh-icon");
      }
      this.targetRect = target.getBoundingClientRect();
      this.popoverRect = popover.getBoundingClientRect();
      this.arrowBaseHalfWidth = convertToPixel2(-this.arrowX0);
      this.arrowPopoverEdgeBoundaryDistance = convertToPixel2(-this.arrowY0);
      this.targetLeft = this.targetRect.left;
      this.targetRight = this.targetRect.right;
      this.targetTop = this.targetRect.top;
      this.targetBottom = this.targetRect.bottom;
      this.popoverLeft = this.popoverRect.left;
      this.popoverRight = this.popoverRect.right;
      this.popoverTop = this.popoverRect.top;
      this.popoverBottom = this.popoverRect.bottom;
      this.rangeCorrectedPopoverLeft = this.popoverLeft + (this.arrowBaseHalfWidth + this.arrowPopoverEdgeBoundaryDistance);
      this.rangeCorrectedPopoverRight = this.popoverRight - (this.arrowBaseHalfWidth + this.arrowPopoverEdgeBoundaryDistance);
      this.rangeCorrectedPopoverTop = this.popoverTop + (this.arrowBaseHalfWidth + this.arrowPopoverEdgeBoundaryDistance);
      this.rangeCorrectedPopoverBottom = this.popoverBottom - (this.arrowBaseHalfWidth + this.arrowPopoverEdgeBoundaryDistance);
      this.yIntersection = this.getIntersectionExtremes(this.targetLeft, this.targetRight, this.popoverLeft, this.popoverRight);
      this.xIntersection = this.getIntersectionExtremes(this.targetTop, this.targetBottom, this.popoverTop, this.popoverBottom);
      if (this.yIntersection.length > 0) {
        let xMid = (this.yIntersection[0] + this.yIntersection[this.yIntersection.length - 1]) / 2;
        xMid = xMid > this.rangeCorrectedPopoverRight ? this.rangeCorrectedPopoverRight : xMid < this.rangeCorrectedPopoverLeft ? this.rangeCorrectedPopoverLeft : xMid;
        let y2, rotation;
        if (this.targetTop < this.popoverTop) {
          y2 = this.popoverTop;
          rotation = 90;
        } else if (this.targetBottom > this.popoverBottom) {
          y2 = this.popoverBottom;
          rotation = 270;
        }
        this.setArrowParameters(rotation, xMid, y2);
      } else if (this.xIntersection.length > 0) {
        let yMid = (this.xIntersection[0] + this.xIntersection[this.xIntersection.length - 1]) / 2;
        yMid = yMid > this.rangeCorrectedPopoverBottom ? this.rangeCorrectedPopoverBottom : yMid < this.rangeCorrectedPopoverTop ? this.rangeCorrectedPopoverTop : yMid;
        let x2, rotation;
        if (this.targetLeft < this.popoverLeft) {
          x2 = this.popoverLeft;
          rotation = 180;
        } else if (this.targetRight > this.popoverRight) {
          x2 = this.popoverRight;
          rotation = 0;
        }
        this.setArrowParameters(rotation, x2, yMid);
      } else if (this.xIntersection.length === 0 && this.yIntersection.length === 0) {
        let specialPoint;
        if (this.targetLeft > this.popoverRight) {
          if (this.targetTop > this.popoverBottom) {
            specialPoint = this.getSpecialPoint("right-down");
          } else if (this.targetBottom < this.popoverTop) {
            specialPoint = this.getSpecialPoint("right-up");
          }
        } else if (this.targetRight < this.popoverLeft) {
          if (this.targetTop > this.popoverBottom) {
            specialPoint = this.getSpecialPoint("left-down");
          } else if (this.targetBottom < this.popoverTop) {
            specialPoint = this.getSpecialPoint("left-up");
          }
        }
        this.setArrowParameters(specialPoint.rotation, specialPoint.x, specialPoint.y);
      }
    }
    convertAbsoluteValuesToRelativeValues(rotation, x2, y2) {
      rotation = this.arrowRotation0 - rotation;
      x2 = convertToRem(x2 - this.popoverRect.left) + this.arrowX0;
      y2 = convertToRem(y2 - this.popoverRect.top) + this.arrowY0;
      return { rotation, x: x2, y: y2 };
    }
    setArrowParameters(rotation, x2, y2) {
      const arrowParameters = this.convertAbsoluteValuesToRelativeValues(rotation, x2, y2);
      this.arrowPositionX = arrowParameters.x;
      this.arrowPositionY = arrowParameters.y;
      this.arrowRotation = arrowParameters.rotation;
    }
    getSpecialPoint(position) {
      const specialPointData = {
        "left-up": new Point([this.popoverLeft, this.rangeCorrectedPopoverTop], 180),
        "left-down": new Point([this.popoverLeft, this.rangeCorrectedPopoverBottom], 180),
        "right-up": new Point([this.popoverRight, this.rangeCorrectedPopoverTop], 0),
        "right-down": new Point([this.popoverRight, this.rangeCorrectedPopoverBottom], 0)
      };
      return specialPointData[position];
    }
    getIntersectionExtremes(t1, t22, p1, p22) {
      let intersectingPoints = [];
      const noIntersection = t1 > p22 || t22 < p1;
      if (!noIntersection) {
        intersectingPoints = [Math.max(t1, p1), Math.min(t22, p22)];
      }
      return intersectingPoints;
    }
  };

  // ../sh-popover/src/sh-popover.lit.scss.js
  var sh_popover_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-popover-min-width=12.5rem] - min-width of the popover
   */
  --sh-popover-min-width: 12.5rem;
  /* 
   * @cssprop [--sh-popover-width=15.5rem] - width of the popover
   */
  --sh-popover-width: 15.5rem;
  /* 
   * @cssprop [--sh-popover-current-scale=s] - the current scale of popover used to set the arrow-position initial values
   */
  --sh-popover-current-scale: s;
  /* 
   * @cssprop [--sh-popover-header-padding=1rem 1rem 0] - margin-bottom of the header-wrapper
   */
  --sh-popover-header-padding: 1rem 1rem 0;
  /* 
   * @cssprop [--sh-popover-body-padding=1rem] - padding of the popover
   */
  --sh-popover-body-padding: 1rem;
  /* 
   * @cssprop [--sh-popover-body-wrapper-margin-bottom=0.5rem] - margin-bottom for container components
   */
  --sh-popover-body-wrapper-margin-bottom: 0.5rem;
  /* 
   * @cssprop [--sh-popover-footer-padding=0 1rem 1rem] - margin-top of the footer-wrapper
   */
  --sh-popover-footer-padding: 0 1rem 1rem;
  /* 
   * @cssprop [--sh-popover-header-padding-with-empty-function-slot=1rem] - padding-right of header when function slot is empty
   */
  --sh-popover-header-padding-with-empty-function-slot: 1rem;
  /* 
   * @cssprop [--sh-popover-label-padding=0] - padding of the label
   */
  --sh-popover-label-padding: 0;
  /* 
   * @cssprop [--sh-popover-headerless-body-top-padding=1rem] - padding-top of body-wrapper when header is empty
   */
  --sh-popover-headerless-body-top-padding: 1rem;
  /* 
   * @cssprop [--sh-popover-gap-between-footer-slot-elements=0.5rem] - gap between the footer slot elements
   */
  --sh-popover-gap-between-footer-slot-elements: 0.5rem;
  /* 
   * @cssprop [--sh-popover-gap-between-function-slot-elements=var(--sh-popover-gap-between-footer-slot-elements)] - gap between the functions slot element
   */
  --sh-popover-gap-between-function-slot-elements: var(--sh-popover-gap-between-footer-slot-elements);
  /* 
   * @cssprop [--sh-popover-label-margin-right=0.5rem] - margin-right of the label when function slot is not empty
   */
  --sh-popover-label-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-popover-label-line-height=1.5rem] - line-height of the popover label
   */
  --sh-popover-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-popover-header-icon-margin-right=0.5rem] - margin-right of the icon in header
   */
  --sh-popover-header-icon-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-popover-content-line-height=1.25rem] - line-height of the content
   */
  --sh-popover-content-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-popover-arrow-border-width=0rem 0.375rem 0.5rem 0.375rem] - border-width of arrow
   */
  --sh-popover-arrow-border-width: 0rem 0.375rem 0.5rem 0.375rem;
  /* 
   * @cssprop [--sh-popover-arrow-transform-origin=0.375rem 0.5rem] - transform origin for the arrow in passive popover
   */
  --sh-popover-arrow-transform-origin: 0.375rem 0.5rem;
  /* 
   * @cssprop [--sh-popover-submenu-translateY=-0.5rem] - the top space fod the submenu from the target
   */
  --sh-popover-submenu-translateY: -0.5rem;
}

:host {
  font: var(--body-1);
  color: var(--text-primary);
  display: block;
  position: fixed;
  opacity: 0;
  visibility: hidden;
  background-color: var(--base-4);
  min-width: var(--sh-popover-min-width);
  width: var(--sh-popover-width);
  min-height: auto;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  box-sizing: border-box;
  border-radius: 0.125rem;
  margin-top: 0rem !important;
  box-shadow: var(--shadow-overlay);
  transition: var(--transition-time) all ease-in-out, 0s top, 0s left, 0s width, 0s min-width;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  --current-scale: var(--sh-popover-current-scale);
  z-index: 999;
  pointer-events: none;
  overflow-wrap: break-word;
}

:host(:not([mobile])[blur-background]) {
  background-color: rgba(var(--blur-background-1), var(--opacity-3));
  backdrop-filter: blur(var(--blur-1));
  -webkit-backdrop-filter: blur(var(--blur-1));
}

:host(:not([mobile])) .popover-wrapper {
  position: relative;
  height: 100%;
  display: flex;
  flex-direction: column;
}

:host(:not([label])) .body-wrapper {
  padding: unset;
}

:host(:not([label])) {
  padding: var(--sh-popover-headerless-body-top-padding);
}

:host(:not([label])) .footer-wrapper {
  padding-top: var(--sh-popover-headerless-body-top-padding);
}

:host([label]) .footer-wrapper {
  padding: var(--sh-popover-footer-padding);
}

:host([passive]) .arrow {
  position: absolute;
  border-width: var(--sh-popover-arrow-border-width);
  border-style: solid;
  border-color: transparent transparent var(--base-4) transparent;
  transform-origin: var(--sh-popover-arrow-transform-origin);
}

:host(:not([mobile])[passive][blur-background]) .arrow {
  border-color: transparent transparent rgba(var(--blur-background-1), var(--opacity-3)) transparent;
}

@-moz-document url-prefix() {
  :host(:not([mobile])[blur-background]) {
    background-color: rgba(var(--blur-background-1), var(--opacity-2));
  }
  :host(:not([mobile])[passive][blur-background]) .arrow {
    border-color: transparent transparent rgba(var(--blur-background-1), var(--opacity-2)) transparent;
  }
}
.header-wrapper {
  display: flex;
  padding: var(--sh-popover-header-padding);
  align-items: center;
}

:host(:not([label])) .header-wrapper {
  display: none;
}

.popover-wrapper[empty-function] .header-wrapper {
  padding-right: var(--sh-popover-header-padding-with-empty-function-slot);
}

slot[name=functions] {
  display: flex;
  gap: var(--sh-popover-gap-between-function-slot-elements);
}

:host([label-rows=auto]) slot[name=functions] {
  align-self: flex-start;
}

.body-wrapper {
  display: flex;
  flex-direction: column;
  flex: 1;
  line-height: var(--sh-popover-content-line-height);
  padding: var(--sh-popover-body-padding);
}

:host([mobile]:not([label])) .body-wrapper {
  padding: var(--sh-popover-headerless-body-top-padding);
}

.body-wrapper > ::slotted(*:not(:last-child):not(sh-menu-item)) {
  margin-bottom: var(--sh-popover-body-wrapper-margin-bottom);
}

.footer-wrapper {
  display: flex;
  justify-content: flex-end;
  gap: var(--sh-popover-gap-between-footer-slot-elements);
}

.popover-wrapper:not([empty-function]) .popover-label {
  margin-right: var(--sh-popover-label-margin-right);
}

.popover-label {
  font: var(--header-2);
  color: var(--text-primary);
  display: block;
  line-height: var(--sh-popover-label-line-height);
  padding: var(--sh-popover-label-padding);
  align-self: center;
  flex: 1;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

:host([label-rows=auto]) .popover-label {
  white-space: unset;
}

:host([visible]) {
  visibility: visible;
  opacity: 1;
  pointer-events: all;
}

:host([sub-menu]) {
  transform: translateY(var(--sh-popover-submenu-translateY));
}

.header-wrapper sh-icon {
  margin-right: var(--sh-popover-header-icon-margin-right);
}

/* mobile */
:host([mobile]) {
  position: fixed;
  top: 0rem !important;
  left: 0rem !important;
  height: 100%;
  background: rgba(0, 0, 0, var(--opacity-4));
  z-index: 999;
  width: 100vw;
  padding: 0;
  transition: var(--transition-time) all ease-in-out, 0s height ease-in-out var(--transition-time), 0s max-height ease-in-out var(--transition-time);
}

:host([mobile]) .popover-wrapper {
  position: absolute;
  width: 100vw;
  background: var(--base-4);
  bottom: 0rem;
  max-height: calc(100% - 6.5rem);
  overflow: auto;
}

/* slot styles */
:host(:not([label]):not([type])) .popover-wrapper[empty-function] .header-wrapper,
.popover-wrapper[empty-footer] .footer-wrapper {
  display: none;
}`;

  // ../sh-popover/src/sh-popover.js
  var SHPopover = class extends BasicOverlayMixin(s4) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        target: { type: String, reflect: true },
        visible: { type: Boolean, reflect: true },
        sticky: { type: Boolean, reflect: true },
        subMenu: { type: Boolean, reflect: true, attribute: "sub-menu" },
        position: { type: String, reflect: true },
        type: { type: String, reflect: true },
        passive: { type: Boolean, reflect: true },
        mobile: { type: Boolean, reflect: true },
        scrollAction: { type: String, reflect: true, attribute: "scroll-action" },
        blurBackground: { type: Boolean, reflect: true, attribute: "blur-background" },
        manualControlled: { type: Boolean, reflect: true, attribute: "manual-controlled" },
        labelRows: { type: String, reflect: true, attribute: "label-rows" },
        _emptyFunction: { type: Boolean },
        _emptyFooter: { type: Boolean },
        customPlacementLogic: {
          type: Object,
          attribute: "custom-placement-logic"
        },
        suppressPlacementWarning: {
          type: Boolean,
          reflect: true,
          attribute: "suppress-placement-warning"
        },
        alwaysStayWithin: {
          type: Boolean,
          reflect: true,
          attribute: "always-stay-within"
        },
        _targetEl: {
          type: Object
        },
        viewport: {
          type: Object
        },
        viewportPadding: {
          type: Number,
          reflect: true,
          attribute: "viewport-padding"
        },
        overlayTargetDistance: {
          type: Number,
          reflect: true,
          attribute: "overlay-target-distance"
        },
        trackTargetOn: {
          type: String,
          reflect: true,
          attribute: "track-target-on"
        },
        _arrowX: {
          type: Number
        },
        _arrowY: {
          type: Number
        },
        _arrowRotation: {
          type: Number
        }
      };
    }
    static get styles() {
      return [sharedStyles, sh_popover_lit_scss_default];
    }
    render() {
      return x`
      <div
        class="popover-wrapper"
        ?empty-function="${this._emptyFunction}"
        ?empty-footer="${this._emptyFooter}"
      >
        <div class="header-wrapper">
          ${this.type === "error" ? x` <sh-icon icon="error" size="s"></sh-icon>` : ""}
          ${this.type === "alert" || this.type === "warning" ? x` <sh-icon icon="warning" size="s"></sh-icon>` : ""}
          ${this.type === "confirmation" || this.type === "success" ? x` <sh-icon icon="success" size="s"></sh-icon>` : ""}
          ${this.label || this.label === "" ? x` <div class="popover-label">${this.label}</div>` : ""}
          <slot
            name="functions"
            @slotchange="${(e8) => this._updateSlotFlag(e8.target, "_emptyFunction")}"
          ></slot>
        </div>
        <div class="body-wrapper">
          <slot></slot>
        </div>
        <div class="footer-wrapper">
          <slot
            name="footer"
            id="footer"
            @slotchange="${(e8) => this._updateSlotFlag(e8.target, "_emptyFooter")}"
          ></slot>
        </div>
      </div>
      ${this.passive ? x` <div class="arrow" style="${o6(this._getArrowDimensions())}"></div>` : ""}
    `;
    }
    constructor() {
      super();
      this._emptyFooter = true;
      this._emptyFunction = true;
      this.position = "top";
      this.scrollAction = "refit";
      this.overlayTargetDistance = 0.5;
      this.viewportPadding = 0.5;
      this.viewport = document.body;
    }
    _updateSlotFlag(slot, emptySlotFlag) {
      const numberOfNodes = slot.assignedNodes({
        flatten: true
      }).length;
      if (numberOfNodes === 0) {
        this[emptySlotFlag] = true;
      } else {
        this[emptySlotFlag] = false;
      }
    }
    connectedCallback() {
      super.connectedCallback();
      this.documentClickListener = this.documentClickActions.bind(this);
      this.documentKeydownListener = this.documentKeyDownEventActions.bind(this);
      this._subMenuTargetMouseOverListener = this.show.bind(this);
      this._subMenuTargetMouseOutListener = this.hide.bind(this);
      this._mouseOverListener = this._mouseOverActions.bind(this);
      this._mouseOutListener = this._mouseOutActions.bind(this);
      if (!this.manualControlled) {
        document.body.addEventListener("click", this.documentClickListener);
      }
      if (this.scrollAction === "hide" && !this.manualControlled) {
        document.body.addEventListener("keydown", this.documentKeydownListener);
      }
      if (!this.manualControlled) {
        this.onkeyup = (e8) => {
          if ((keyboardInteraction(e8, KEYCODE.SPACE) || keyboardInteraction(e8, KEYCODE.ENTER) || keyboardInteraction(e8, KEYCODE.ESCAPE)) && this.visible && !this.sticky) {
            this.hide();
          }
        };
      }
      if (!this.mobile) {
        this.resizeListener = this.handleMobile.bind(this);
        this.resizeListener();
      }
      window.addEventListener("resize", this.resizeListener);
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("target")) {
        this._invokerNode = this._targetEl;
        this._attachNode = this._targetEl;
      }
      if (this._canPositionOverlay() && (changedProperties.has("position") || changedProperties.has("passive"))) {
        this._setOverlayPlacement(this._targetEl);
      }
      if (changedProperties.has("visible") && this.visible && this.manualControlled) {
        this._invokerNode = this._targetEl;
        this._attachNode = this._targetEl;
      }
      if (changedProperties.has("visible") && this.visible && this.subMenu && this.classList.contains("touch-device") && this._targetEl) {
        const targetParent = this._targetEl.parentElement;
        if (targetParent && targetParent.tagName === "SH-POPOVER") {
          targetParent.visible = true;
        }
      }
      const listOfProperties = [
        "label",
        "target",
        "visible",
        "sticky",
        "subMenu",
        "position",
        "type",
        "passive",
        "mobile"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    handleMobile() {
      this.mobile = document.documentElement.clientWidth < 640;
    }
    documentClickActions(e8) {
      const targetElement = this._targetEl;
      if (e8.composedPath().indexOf(targetElement) === -1) {
        if (!this.sticky && this.visible) {
          this.hide();
        }
      } else {
        if (this.visible) {
          this.hide();
        } else {
          this.show();
        }
      }
    }
    get _targetEl() {
      const target = this.target;
      if (target) {
        if (typeof target === "string") {
          return this.parentElement ? this.parentElement.querySelector(`[id="${target}"]`) || document.getElementById(target) : document.getElementById(target);
        } else if (target instanceof HTMLElement) {
          return target;
        } else {
          throw new Error(`

The "target" property is not of valid type.
The "target" property can take string value corresponding to the id of the target.
It can also have its value equal to a DOM Node reference (instance of HTMLElement)
`);
        }
      }
    }
    documentKeyDownEventActions(e8) {
      if (this.scrollAction === "hide" && !this.sticky) {
        if (keyboardInteraction(e8, KEYCODE.ARROW_UP) || keyboardInteraction(e8, KEYCODE.ARROW_DOWN) || keyboardInteraction(e8, KEYCODE.SPACE)) {
          this.hide();
        }
      }
    }
    _mouseOverActions() {
      const parentPopover = this._targetEl.parentElement;
      if (parentPopover.subMenu) {
        parentPopover.show();
      }
      this.show();
    }
    _mouseOutActions() {
      const parentPopover = this._targetEl.parentElement;
      if (parentPopover.subMenu) {
        parentPopover.hide();
      }
      this.hide();
    }
    _addHoverEvents(_targetEl) {
      _targetEl.addEventListener("mouseover", this._subMenuTargetMouseOverListener);
      _targetEl.addEventListener("mouseout", this._subMenuTargetMouseOutListener);
      this.addEventListener("mouseover", this._mouseOverListener);
      this.addEventListener("mouseout", this._mouseOutListener);
    }
    _removeHoverEvents(_targetEl) {
      _targetEl.removeEventListener("mouseover", this._subMenuTargetMouseOverListener);
      _targetEl.removeEventListener("mouseout", this._subMenuTargetMouseOutListener);
      this.removeEventListener("mouseover", this._mouseOverListener);
      this.removeEventListener("mouseout", this._mouseOutListener);
    }
    show() {
      this._invokerNode = this._targetEl;
      this._attachNode = this._targetEl;
      this.visible = true;
    }
    hide() {
      this.visible = false;
      dispatchCustomEvent(this, "overlay-closed");
    }
    disconnectedCallback() {
      window.cancelAnimationFrame(this.scrollHandler);
      document.body.removeEventListener("click", this.documentClickListener);
      document.body.removeEventListener("keydown", this.documentKeydownListener);
      window.removeEventListener("resize", this.resizeListener);
      super.disconnectedCallback();
    }
    _setOverlayPlacement(attachNode) {
      const popoverScale = getComputedStyle(this).getPropertyValue("--current-scale").trim();
      const minPassiveOverlayDistance = popoverScale === "s" || popoverScale === "m" ? 1 : 1.25;
      if (popoverScale === "xl" && !(this.target.tagName === "SH-TOOL")) {
        this.overlayTargetDistance = 0.75;
      }
      if (!this.customPlacementLogic) {
        const targetIsWorklineItem = attachNode.tagName === "SH-WORKLINE-ITEM";
        const viewportPadding = this.passive ? this.viewportPadding >= minPassiveOverlayDistance ? this.viewportPadding : minPassiveOverlayDistance : this.viewportPadding;
        const overlayTargetDistance = this.passive ? this.overlayTargetDistance >= minPassiveOverlayDistance ? this.overlayTargetDistance : minPassiveOverlayDistance : this.overlayTargetDistance;
        const worklinePlacementAlgorithm = {
          top: [
            {
              from: "top",
              to: "top-diag-left",
              increment: "overlayRight",
              incrementBy: -1
            },
            {
              from: "top",
              to: "top-diag-right",
              increment: "overlayLeft",
              incrementBy: 1
            }
          ]
        };
        const viewport = targetIsWorklineItem ? attachNode.closest("sh-workline").shadowRoot.querySelector(".workline-wrapper") : this.viewport;
        const thisViewportRect = this.viewport.getBoundingClientRect();
        const viewPortRect = JSON.parse(JSON.stringify(thisViewportRect));
        viewPortRect.left = viewport.getBoundingClientRect().left;
        viewPortRect.width = viewport.getBoundingClientRect().width;
        viewPortRect.right = viewport.getBoundingClientRect().right;
        const placementAlgorithm = targetIsWorklineItem ? worklinePlacementAlgorithm : null;
        const suppressPlacementWarning = targetIsWorklineItem ? true : this.suppressPlacementWarning;
        const alwaysStayWithin = targetIsWorklineItem ? true : this.alwaysStayWithin;
        const placementInfo = getOverlayPlacementInfo2(this.position, this.getBoundingClientRect(), attachNode.getBoundingClientRect(), viewPortRect, overlayTargetDistance, viewportPadding, placementAlgorithm, placementAlgorithm, suppressPlacementWarning);
        if (placementInfo.targetIsOutsideViewport && !alwaysStayWithin) {
          this.visible = false;
          if (!suppressPlacementWarning) {
            console.warn("Since the effective target is outside the effective viewport, the popover is hidden");
          }
          dispatchCustomEvent(this, "overlay-closed");
        } else {
          this.style.left = placementInfo.requiredLeft + "px";
          this.style.top = placementInfo.requiredTop + "px";
        }
      } else {
        this.customPlacementLogic();
      }
      if (this.passive) {
        const arrowPositionData = new ArrowPosition(attachNode, this, popoverScale);
        this._arrowX = arrowPositionData.arrowPositionX;
        this._arrowY = arrowPositionData.arrowPositionY;
        this._arrowRotation = arrowPositionData.arrowRotation;
      }
    }
    _canPositionOverlay() {
      return this.position && this.visible && !this.mobile && this._targetEl;
    }
    _doSomethingWithOldInvokerNode(invokerNode) {
      if (!this.manualControlled) {
        this._removeHoverEvents(invokerNode);
      }
    }
    _doSomethingWithNewInvokerNode(invokerNode) {
      if (this.subMenu && !this.manualControlled && !this.classList.contains("touch-device")) {
        this._addHoverEvents(invokerNode);
      }
    }
    _getArrowDimensions() {
      return {
        left: `${this._arrowX}rem`,
        top: `${this._arrowY}rem`,
        transform: `rotate(${this._arrowRotation}deg)`
      };
    }
  };
  customElements.define("sh-popover", SHPopover);

  // ../sh-progress/src/sh-progress-radial.js
  var SHProgressRadial = class SHProgressRadial2 extends s4 {
    constructor() {
      super();
      this.value = 0;
      this.size = "m";
    }
    static get styles() {
      return [sharedStyles];
    }
    render() {
      return x`
      <sh-progress
        radial
        .header="${this.header}"
        .label="${this.label}"
        .info="${this.info}"
        .color="${this.color}"
        .size="${this.size}"
        .value="${this.value}"
        .indeterminate="${this.indeterminate}"
        .overlay="${this.overlay}"
      ></sh-progress>
    `;
    }
    updated(changedProperties) {
      const listOfProperties = ["header", "label", "info", "color", "size", "value"];
      dispatchAttributeChangedEvent2(this, changedProperties, listOfProperties);
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "progressbar");
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHProgressRadial.prototype, "header", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgressRadial.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgressRadial.prototype, "info", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgressRadial.prototype, "status", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgressRadial.prototype, "color", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgressRadial.prototype, "size", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHProgressRadial.prototype, "value", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgressRadial.prototype, "type", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgressRadial.prototype, "indeterminate", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgressRadial.prototype, "paused", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgressRadial.prototype, "overlay", void 0);
  SHProgressRadial = __decorate([e4("sh-progress-radial")], SHProgressRadial);

  // ../sh-progress/src/sh-progress.lit.scss.js
  var sh_progress_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-progress-header-line-height=1.25rem] - line-height of header
   */
  --sh-progress-header-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-progress-progress-bar-height=0.5rem] - height of the progress bar
   */
  --sh-progress-progress-bar-height: 0.5rem;
  /* 
   * @cssprop [--sh-progress-indeterminate-bar-length=7.5rem] - the length of the inner bar of the indeterminate progress bar
   */
  --sh-progress-indeterminate-bar-length: 7.5rem;
  /* 
   * @cssprop [--sh-progress-info-line-height=1rem] - line height of info text
   */
  --sh-progress-info-line-height: 1rem;
  /* 
   * @cssprop [--sh-progress-header-margin-bottom=0.5rem] - margin bottom of header
   */
  --sh-progress-header-margin-bottom: 0.5rem;
  /* 
   * @cssprop [--sh-progress-footer-margin-top=0.5rem] - margin-top of footer of linear-progress (the radial-progress footer has same margin-top as radial-progress header margin-bottom)
   */
  --sh-progress-footer-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-progress-footer-height=1rem] - the height of the footer of linear-progress
   */
  --sh-progress-footer-height: 1rem;
  /* 
   * @cssprop [--sh-progress-radial-header-margin-bottom=var(--sh-progress-header-margin-bottom)] - margin-bottom of header for radial progress
   */
  --sh-progress-radial-header-margin-bottom: var(--sh-progress-header-margin-bottom);
  /* 
   * @cssprop [--sh-progress-radial-progress-height-xs=1rem] - height of radial progress of size xs
   */
  --sh-progress-radial-progress-height-xs: 1rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-ring-width-xs=0.25rem] - ring width of radial progress of size xs
   */
  --sh-progress-radial-progress-ring-width-xs: 0.25rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-height-s=2rem] - height of radial progress of size s
   */
  --sh-progress-radial-progress-height-s: 2rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-ring-width-s=0.375rem] - ring width of radial progress of size s
   */
  --sh-progress-radial-progress-ring-width-s: 0.375rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-height-m=4rem] - height of radial progress of size m
   */
  --sh-progress-radial-progress-height-m: 4rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-ring-width-m=0.5rem] - ring width of radial progress of size m
   */
  --sh-progress-radial-progress-ring-width-m: 0.5rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-height-l=8rem] - height of radial progress of size l
   */
  --sh-progress-radial-progress-height-l: 8rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-ring-width-l=0.625rem] - ring width of radial progress of size l
   */
  --sh-progress-radial-progress-ring-width-l: 0.625rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-height-xl=16rem] - height of radial progress of size xl
   */
  --sh-progress-radial-progress-height-xl: 16rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-ring-width-xl=0.75rem] - ring width of radial progress of size xl
   */
  --sh-progress-radial-progress-ring-width-xl: 0.75rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-label-width-m=2.5rem] - width of the radial progress label when progress size is m
   */
  --sh-progress-radial-progress-label-width-m: 2.5rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-label-width-l=5.5rem] - width of the radial progress label when progress size is l
   */
  --sh-progress-radial-progress-label-width-l: 5.5rem;
  /* 
   * @cssprop [--sh-progress-radial-progress-label-width-xl=10.25rem] - width of the radial progress label when progress size is xl
   */
  --sh-progress-radial-progress-label-width-xl: 10.25rem;
}

:host {
  width: 100%;
  display: flex;
  flex-direction: column;
}

:host([overlay]) {
  position: fixed;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
  background: rgba(var(--ui-7), var(--opacity-3));
  z-index: 999;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

:host([overlay]) .header-wrapper,
:host([overlay]) .bar-wrapper,
:host([overlay]) .footer-wrapper {
  width: 17.5rem;
}

.header-wrapper,
.footer {
  display: flex;
  align-items: center;
}

.info {
  line-height: var(--sh-progress-info-line-height);
}

:host(:not([radial])) .header,
:host(:not([radial])) .info {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.header,
.label {
  line-height: var(--sh-progress-header-line-height);
}

.label {
  width: auto;
}

.header + .label {
  margin-left: 0.5rem;
}

:host(:not([header])) .label {
  flex: 1;
  text-align: center;
}

.footer {
  width: 100%;
}

:host(:not([radial])) .header-wrapper {
  margin-bottom: var(--sh-progress-header-margin-bottom);
}

:host(:not([radial])) .footer {
  margin-top: var(--sh-progress-footer-margin-top);
  height: fit-content;
}

:host(:not([radial])) .footer:not(.has-function-icons) {
  margin-top: var(--sh-progress-header-margin-bottom);
}

.linear-progress {
  width: 100%;
  height: var(--sh-progress-progress-bar-height);
  border-radius: calc(var(--sh-progress-progress-bar-height) / 2);
  overflow: hidden;
  position: relative;
  max-width: 100%;
}

.linear-progress:not(.indeterminate) {
  background: linear-gradient(to right, var(--progress-color) var(--progress-value), rgba(var(--ui-1), var(--opacity-6)) 0%);
}

/* radial */
:host([radial]) {
  align-items: center;
  justify-content: center;
}

:host([radial]) .info,
:host([radial]) .header {
  text-align: center;
}

:host([radial]) .header-wrapper {
  margin-bottom: var(--sh-progress-radial-header-margin-bottom);
}

:host([radial]) .footer {
  margin-top: var(--sh-progress-radial-header-margin-bottom);
}

.radial-label {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  position: absolute;
  width: 100%;
  text-align: center;
}

:host([size=xs]) .radial-wrapper {
  --radial-height: var(--sh-progress-radial-progress-height-xs);
  --ring-width: var(--sh-progress-radial-progress-ring-width-xs);
}

:host([size=s]) .radial-wrapper {
  --radial-height: var(--sh-progress-radial-progress-height-s);
  --ring-width: var(--sh-progress-radial-progress-ring-width-s);
}

:host([size=m]) .radial-wrapper {
  --radial-height: var(--sh-progress-radial-progress-height-m);
  --ring-width: var(--sh-progress-radial-progress-ring-width-m);
}

:host([size=l]) .radial-wrapper {
  --radial-height: var(--sh-progress-radial-progress-height-l);
  --ring-width: var(--sh-progress-radial-progress-ring-width-l);
}

:host([size=xl]) .radial-wrapper {
  --radial-height: var(--sh-progress-radial-progress-height-xl);
  --ring-width: var(--sh-progress-radial-progress-ring-width-xl);
}

.radial-wrapper {
  height: var(--radial-height);
  width: var(--radial-height);
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  border-radius: 50%;
  box-shadow: inset 0 0 0 var(--ring-width) rgba(var(--ui-1), var(--opacity-6));
}

.radial-wrapper::before {
  position: absolute;
  content: "";
  width: calc(var(--radial-height) / 2 - var(--ring-width) / 2);
  z-index: -1;
  visibility: hidden;
  opacity: 0;
  left: 0;
  top: 0;
}

.radial-progress {
  width: 100%;
  height: 100%;
  position: relative;
  transform-origin: 50% 50%;
  transform: rotate(-90deg);
}

.radial-wrapper.hundred-value {
  box-shadow: inset 0 0 0 var(--ring-width) var(--progress-color);
}

.radial-progress-indicator {
  r: calc(var(--radial-height) / 2 - var(--ring-width) / 2);
  cx: calc(var(--radial-height) / 2);
  cy: calc(var(--radial-height) / 2);
  stroke-width: calc(var(--ring-width));
  fill: transparent;
  stroke: var(--progress-color);
  stroke-dasharray: calc(var(--progress-value) / 100 * var(--circle-circumference)) calc((100 - var(--progress-value)) / 100 * var(--circle-circumference));
}

.radial-wrapper.indeterminate .radial-progress {
  animation: radial-indeterminate 2s linear infinite;
  transform-origin: 50% 50%;
}

:host([radial][size=m]) .radial-label {
  width: var(--sh-progress-radial-progress-label-width-m);
}

:host([radial][size=l]) .radial-label {
  width: var(--sh-progress-radial-progress-label-width-l);
  font-size: calc(var(--font-size-title-1) * 2);
  line-height: calc(var(--sh-text-title1-line-height) * 2);
}

:host([radial][size=xl]) .radial-label {
  width: var(--sh-progress-radial-progress-label-width-xl);
  font-size: calc(var(--font-size-title-1) * 4);
  line-height: calc(var(--sh-text-title1-line-height) * 4);
}

/* status */
.status-icon {
  margin-right: 0.5rem;
}

.status-icon[icon=cancel] {
  color: rgb(var(--functional-red));
}

.status-icon[icon=error] {
  color: rgb(var(--functional-yellow));
}

.status-icon[icon=check_circle] {
  color: rgb(var(--functional-green));
}

/* functions slot */
slot[name=functions]::slotted(*) {
  margin-left: 0.5rem;
}

/* indeterminate */
.linear-progress.indeterminate {
  background: rgba(var(--ui-1), var(--opacity-6));
}

.indeterminate-bar {
  width: calc(100% + var(--sh-progress-indeterminate-bar-length) + 100%);
  background: linear-gradient(to right, transparent calc((100% - var(--sh-progress-indeterminate-bar-length)) / 2), var(--progress-color) calc((100% - var(--sh-progress-indeterminate-bar-length)) / 2), var(--progress-color) calc((100% + var(--sh-progress-indeterminate-bar-length)) / 2), transparent 0);
  animation: indeterminate 2s linear infinite;
  position: absolute;
  height: 100%;
  will-change: transform;
}

@keyframes indeterminate {
  from {
    transform: translate3d(calc(-1 * (100% + var(--sh-progress-indeterminate-bar-length)) / 2), 0, 0);
  }
  to {
    transform: translate3d(0%, 0, 0);
  }
}
@keyframes radial-indeterminate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}`;

  // ../sh-progress/src/sh-progress.js
  var SHProgress = class SHProgress2 extends s4 {
    constructor() {
      super(...arguments);
      this.value = 0;
      this.radial = false;
      this.size = "m";
      this.documentKeydownListenerRef = this.handleDocumentKeydown.bind(this);
    }
    static get styles() {
      return [sh_progress_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      <!-- header -->
      ${(this.header || this.label) && this.size !== "xs" ? x`
            <div class="header-wrapper">
              ${this.header && this.size !== "xs" ? x` <sh-text size="header-2" class="header">${this.header}</sh-text> ` : ""}
              ${this.label && !this.radial ? x` <sh-text size="title-1" class="label">${this.label}</sh-text> ` : ""}
            </div>
          ` : ""}
      ${!this.radial ? x`
            <!-- linear -->
            <div
              class="linear-progress ${this.indeterminate ? "indeterminate" : ""}"
              style="
                --progress-color: ${this.paused ? "rgba(var(--ui-1), var(--opacity-3))" : this.color ? this.color : "rgb(var(--ui-2))"};
                  --progress-value: ${this.value}%;"
            >
              ${this.indeterminate ? x`<div class="indeterminate-bar"></div>` : ``}
            </div>
          ` : x`
            <!-- radial -->
            <div
              class="radial-wrapper ${this.indeterminate ? "indeterminate" : this.value >= 100 ? "hundred-value" : ""}"
              style="
                --progress-color: ${this.color ? this.color : "rgb(var(--ui-2))"};
                --progress-value: ${this.indeterminate ? 25 : this.value <= 0 ? 0 : this.value};
                --circle-circumference : ${this.circleCircumference}"
            >
              ${this.value > 0 && this.value < 100 || this.indeterminate ? b`
              <svg class="radial-progress">
                <circle class="radial-progress-indicator" />
              </svg>
              ` : ""}
              ${this.label && this.size !== "s" && this.size !== "xs" ? x` <sh-text size="title-1" class="radial-label">${this.label}</sh-text> ` : ""}
            </div>
          `}
      ${(this.info || this.status) && this.size !== "xs" ? x`
            <div class="footer${this.hasFunctionIcons ? " has-function-icons" : ""}">
              <!-- status -->
              ${this.status && !this.radial ? x` <sh-icon size="xs" class="status-icon" icon="${this.status}"></sh-icon> ` : ""}
              <!-- info -->
              ${this.info && this.size !== "xs" ? x`
                    <sh-text size="body-1" color="secondary" class="info">${this.info}</sh-text>
                  ` : ""}
              ${!this.radial ? x`<slot
                    name="functions"
                    @slotchange="${(e8) => {
        this.hasFunctionIcons = e8.target.assignedElements({
          flatten: true
        }).length;
      }}"
                  ></slot>` : ""}
            </div>
          ` : ""}
    `;
    }
    attributeChangedCallback(name, oldval, newval) {
      super.attributeChangedCallback(name, oldval, newval);
      if (name === "type" && this.type) {
        this.status = this.type;
        console.warn(`You are using a legacy property ('type') of sh-progress component. Please use the new 'status' property instead.`);
      }
    }
    updated(changedProperties) {
      var _a4;
      super.updated(changedProperties);
      const listOfProperties = [
        "header",
        "label",
        "info",
        "status",
        "color",
        "size",
        "value",
        "indeterminate",
        "paused",
        "radial",
        "type",
        "overlay"
      ];
      if (changedProperties.has("overlay")) {
        this.overlayStatus();
      }
      dispatchAttributeChangedEvent2(this, changedProperties, listOfProperties);
      if (!this.resizeObserver && this.radial) {
        this.resizeObserver = new ResizeObserver((e8) => {
          var _a5;
          if (this.radial) {
            this.circleCircumference = `${parseFloat(getComputedStyle(e8[0].target, ":before").width) * 2 * Math.PI}px`;
          } else {
            (_a5 = this.resizeObserver) === null || _a5 === void 0 ? void 0 : _a5.disconnect();
            this.resizeObserver = null;
          }
        });
        this.resizeObserver.observe((_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(".radial-wrapper"));
      }
    }
    firstUpdated() {
      this.documentKeydownListenerRef = this.handleDocumentKeydown.bind(this);
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "progressbar");
      }
    }
    disconnectedCallback() {
      if (this.resizeObserver) {
        this.resizeObserver.disconnect();
      }
      document.body.removeEventListener("keydown", this.documentKeydownListenerRef);
      super.disconnectedCallback();
    }
    overlayStatus() {
      if (this.overlay) {
        document.body.addEventListener("keydown", this.documentKeydownListenerRef);
      } else {
        document.body.removeEventListener("keydown", this.documentKeydownListenerRef);
      }
    }
    handleDocumentKeydown(event) {
      if (event.code === KEYCODE2.TAB.code) {
        event.preventDefault();
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "header", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "info", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "status", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "color", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHProgress.prototype, "value", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgress.prototype, "indeterminate", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgress.prototype, "paused", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgress.prototype, "radial", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "size", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "type", void 0);
  __decorate([n5({ type: String, reflect: true })], SHProgress.prototype, "circleCircumference", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgress.prototype, "hasFunctionIcons", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHProgress.prototype, "overlay", void 0);
  SHProgress = __decorate([e4("sh-progress")], SHProgress);

  // ../sh-risk-score/src/sh-risk-score.lit.scss.js
  var sh_risk_score_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-risk-score-sizeS=4rem] - s size
   */
  --sh-risk-score-sizeS: 4rem;
  /* 
   * @cssprop [--sh-risk-score-sizeL=8rem] - l size
   */
  --sh-risk-score-sizeL: 8rem;
  /* 
   * @cssprop [--sh-risk-score-radial-s-width=2.5rem] - s size radical width
   */
  --sh-risk-score-radial-s-width: 2.5rem;
  /* 
   * @cssprop [--sh-risk-score-radial-l-width=5.625rem] - l size radical width
   */
  --sh-risk-score-radial-l-width: 5.625rem;
  /* 
   * @cssprop [--sh-risk-score-radial-s-lh=1.25rem] - s size radical line-height
   */
  --sh-risk-score-radial-s-lh: 1.25rem;
  /* 
   * @cssprop [--sh-risk-score-radial-l-lh=2.25rem] - l size radical line-height
   */
  --sh-risk-score-radial-l-lh: 2.25rem;
  /* 
   * @cssprop [--sh-risk-score-lw-height=0.25rem] - height of linear-wrapper
   */
  --sh-risk-score-lw-height: 0.25rem;
  /* 
   * @cssprop [--sh-risk-score-lw-mrg-btm=0.5rem] - margin-bottom of linear-wrapper
   */
  --sh-risk-score-lw-mrg-btm: 0.5rem;
  /* 
   * @cssprop [--sh-risk-score-riskbar-mrg-left=0.25rem] - margin-left of riskbar
   */
  --sh-risk-score-riskbar-mrg-left: 0.25rem;
  /* 
   * @cssprop [--sh-risk-score-hw-mrg-btm=0.75rem] - margin-right of header-wrapper
   */
  --sh-risk-score-hw-mrg-btm: 0.75rem;
  /* 
   * @cssprop [--sh-risk-score-hw-line-height=1.25rem] - line-height of header-wrapper
   */
  --sh-risk-score-hw-line-height: 1.25rem;
}

:host {
  width: 100%;
  display: block;
}

.linear-wrapper {
  display: flex;
  height: var(--sh-risk-score-lw-height);
  margin-bottom: var(--sh-risk-score-lw-mrg-btm);
  width: 100%;
  min-width: 7rem;
}

.footer-wrapper {
  display: flex;
  align-items: center;
  margin: 0rem 0rem 0.5rem 0rem;
}

.riskbar {
  margin-left: var(--sh-risk-score-riskbar-mrg-left);
  width: 100%;
  background-color: rgba(var(--ui-1), var(--opacity-5));
  overflow: hidden;
  position: relative;
}

.value {
  margin-left: 0.25rem;
}

.riskbar:first-child {
  margin-left: 0rem;
}

.header-wrapper {
  display: flex;
  align-items: center;
  margin-bottom: var(--sh-risk-score-hw-mrg-btm);
}

:host(:not([radial])) .label {
  flex: 1;
  width: auto;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

.label,
.value {
  line-height: var(--sh-risk-score-hw-line-height);
}

.value {
  width: auto;
  text-align: right;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

:host([disabled]) .value {
  color: var(--text-disabled);
}

:host([disabled]) .riskbar,
:host([disabled]) .bar-value {
  background-color: rgba(var(--ui-1), var(--opacity-6));
}

:host([disabled]) .radial-segment,
:host([disabled]) .radial-background {
  stroke: rgba(var(--ui-1), var(--opacity-6));
}

.label + .value {
  margin-left: 0.5rem;
}

:host(:not([label])) .value {
  flex: 1;
  text-align: center;
}

.bar-value {
  height: var(--sh-risk-score-lw-height);
  position: absolute;
  max-width: 100%;
}

.footer {
  height: fit-content;
}

:host([empty-footer]) .footer-wrapper {
  display: none;
}

/*radial*/
:host([radial]) {
  text-align: center;
  width: 12rem;
}

:host([radial]) .label {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

:host([disabled][radial]) .radial-label {
  color: var(--text-disabled);
}

.radial-wrapper {
  margin-bottom: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.radial {
  transform: rotate(-90deg);
  overflow: visible;
}

:host([size=s]) .radial {
  width: var(--sh-risk-score-sizeS);
  height: var(--sh-risk-score-sizeS);
}

:host([size=l]) .radial {
  width: var(--sh-risk-score-sizeL);
  height: var(--sh-risk-score-sizeL);
}

.radial-label {
  position: absolute;
  text-align: center;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  word-break: break-all;
  -webkit-box-orient: vertical;
  max-height: 4rem;
  width: 2.5rem;
}

:host([size=s]) .radial-background,
:host([size=s]) .radial-segment {
  stroke-width: 0.25rem;
}

:host([size=l]) .radial-background,
:host([size=l]) .radial-segment {
  stroke-width: 0.5rem;
}

:host([radial][size=s]) .radial-label {
  width: var(--sh-risk-score-radial-s-width);
  line-height: var(--sh-risk-score-radial-s-lh);
}

:host([radial][size=l]) .radial-label {
  font-size: 1.75rem;
  width: var(--sh-risk-score-radial-l-width);
  line-height: var(--sh-risk-score-radial-l-lh);
}

:host([radial]) .header-wrapper {
  margin-bottom: 0.5rem;
}

:host([radial]) .footer-wrapper {
  display: block;
  margin: 0rem auto 0.5rem auto;
}`;

  // ../sh-risk-score/src/sh-risk-score.js
  var SHRiskscore = class SHRiskscore2 extends s4 {
    constructor() {
      super();
      this.segmentValue = [];
      this.segmentColor = ["default"];
      this.size = "s";
      this.segments = 1;
      this.label = "Label";
      this.segmentColor = !this.segmentColor ? ["default"] : this.segmentColor;
      this.segmentValue = !this.segmentValue ? [] : this.segmentValue;
      this.currentAngle = 90;
    }
    static get styles() {
      return [sharedStyles, sh_risk_score_lit_scss_default];
    }
    render() {
      return x`
      <div class="risk-wrapper" ?empty-footer=${this.emptyFooter}>
        <div class="header-wrapper">
          <sh-text size="title-1" class="label">${this.label}</sh-text>
          ${this.value && !this.radial ? x` <sh-text size="title-1" class="value">${this.value}</sh-text> ` : ""}
        </div>
        ${!this.radial ? x` <div class="linear-wrapper">${this.createLinearSegments()}</div> ` : x`
              <div class="radial-wrapper">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="radial"
                  viewBox="${this.size === "s" ? 0 : -2} 
                  ${this.size === "s" ? 0 : -2} 
                  ${this.convertRadialSize() + (this.size === "s" ? 0 : 4)} 
                  ${this.convertRadialSize() + (this.size === "s" ? 0 : 4)}"
                  preserveAspectRatio="xMidYMid meet"
                >
                  ${this.createRadialSegments()}
                </svg>
                ${this.value ? x` <sh-text size="title-1" class="radial-label">${this.value}</sh-text> ` : ""}
              </div>
            `}
        <div class="footer-wrapper">
          <slot
            class="footer"
            id="footer"
            name="footer"
            @slotchange="${() => this.footerSlotObserver()}"
          ></slot>
        </div>
      </div>
    `;
    }
    connectedCallback() {
      super.connectedCallback();
      this.resizeObserver = new ResizeObserver(() => {
        this.requestUpdate();
      });
      this.resizeObserver.observe(this);
    }
    disconnectedCallback() {
      var _a4;
      (_a4 = this.resizeObserver) === null || _a4 === void 0 ? void 0 : _a4.disconnect();
      super.disconnectedCallback();
    }
    update(changedProperties) {
      super.update(changedProperties);
      const listOfProperties = ["value"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      this.footerSlotObserver();
    }
    createLinearSegments() {
      const linearSegmentsArray = [];
      for (let segmentNo = 0; segmentNo < Math.round(this.segments); segmentNo++) {
        linearSegmentsArray.push(x`
        <div class="riskbar" style="width: 100%">
          <div
            class="bar-value"
            style="width: ${this.getSegmentValue(segmentNo)}% ;
        background-color: ${this.getSegmentColor(segmentNo)}"
          ></div>
        </div>
      `);
      }
      return linearSegmentsArray;
    }
    createRadialSegments() {
      const radialSegmentsArray = [];
      for (let segmentNo = 0; segmentNo < Math.round(this.segments); segmentNo++) {
        radialSegmentsArray.push(b`
                    <path class="radial-background" 
                      fill=none
                      stroke= 'rgba(var(--ui-1), var(--opacity-5))'
                      d= "${this.calculateRadialSegmentPath(segmentNo, this.convertRadialSize(), true) + " " + (this.segments === 1 ? "Z" : "")}"/>
                    
                    <path
                      class="radial-segment" 
                      fill=none 
                      stroke="${this.getSegmentColor(segmentNo)}"
                      d = "${this.calculateRadialSegmentPath(segmentNo, this.convertRadialSize(), false) + " " + (this.segments === 1 && this.getSegmentValue(0) === 100 ? "Z" : "")}"
                     />
                  `);
      }
      return radialSegmentsArray;
    }
    getSegmentColor(segNo) {
      const disabledColor = "rgba(var(--ui-1), var(--opacity-6))";
      this.calculateSegmentContent(segNo);
      const segmentColor = this.disabled ? disabledColor : this.segmentColor[segNo];
      return segmentColor;
    }
    getSegmentValue(segNo) {
      this.calculateSegmentContent(segNo);
      const segmentValue = this.disabled ? 0 : this.segmentValue[segNo];
      return segmentValue;
    }
    calculateSegmentContent(segNo) {
      const defaultColor = "rgba(var(--ui-1), var(--opacity-5))";
      const activeColor = "rgba(var(--ui-1), var(--opacity-3))";
      const segColor = this.segmentColor[segNo];
      const segValue = this.segmentValue[segNo];
      if ((!segColor || segColor === "default" || segColor === defaultColor) && !segValue) {
        this.segmentColor[segNo] = defaultColor;
        this.segmentValue[segNo] = 0;
      } else if ((!segColor || segColor === "default" || segColor === "active" || segColor === defaultColor) && segValue > 0) {
        this.segmentColor[segNo] = activeColor;
        if (!segValue) {
          this.segmentValue[segNo] = 100;
        }
      } else {
        if (!segValue) {
          this.segmentValue[segNo] = 100;
        }
      }
    }
    calculateRadialSegmentPath(segNo, radialsize, isOuter) {
      const cx = radialsize / 2;
      const cy = radialsize / 2;
      const radius = radialsize / 2 - 4;
      const segmentGap = 8;
      const startAngle = this.currentAngle + 4;
      const segmentValue = this.getSegmentValue(segNo);
      const arcAngle = 360 / Math.round(this.segments) - segmentGap;
      let endAngle;
      if (isOuter) {
        endAngle = startAngle + arcAngle;
      } else {
        endAngle = segmentValue === 0 ? startAngle : startAngle + arcAngle / (100 / segmentValue);
        this.currentAngle += 360 / Math.round(this.segments);
      }
      return this.getArcPath(cx, cy, radius, startAngle, endAngle);
    }
    polarToCartesian(centerX, centerY, radius, angleInDegrees) {
      const angleInRadians = (angleInDegrees - 90) * Math.PI / 180;
      return {
        x: centerX + radius * Math.cos(angleInRadians),
        y: centerY + radius * Math.sin(angleInRadians)
      };
    }
    getArcPath(x2, y2, radius, startAngle, endAngle) {
      const start = this.polarToCartesian(x2, y2, radius, endAngle);
      const end = this.polarToCartesian(x2, y2, radius, startAngle);
      const largeArcFlag = endAngle - startAngle <= 180 ? "0" : "1";
      const d3 = ["M", start.x, start.y, "A", radius, radius, 0, largeArcFlag, 0, end.x, end.y].join(" ");
      return d3;
    }
    footerSlotObserver() {
      var _a4;
      const footerSlot = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector("#footer");
      const footerNodes = footerSlot.assignedNodes({
        flatten: true
      }).length;
      this.emptyFooter = footerNodes === 0;
    }
    convertRadialSize() {
      let size;
      switch (this.size) {
        case "s":
          size = parseFloat(getComputedStyle(this).getPropertyValue("--sh-risk-score-sizeS"));
          break;
        case "l":
          size = parseFloat(getComputedStyle(this).getPropertyValue("--sh-risk-score-sizeL"));
          break;
      }
      return convertToPixel2(size);
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHRiskscore.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHRiskscore.prototype, "value", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHRiskscore.prototype, "segments", void 0);
  __decorate([n5({ type: String, reflect: true })], SHRiskscore.prototype, "size", void 0);
  __decorate([n5({ type: Array, reflect: true, attribute: "segment-value" })], SHRiskscore.prototype, "segmentValue", void 0);
  __decorate([n5({ type: Array, reflect: true, attribute: "segment-color" })], SHRiskscore.prototype, "segmentColor", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHRiskscore.prototype, "radial", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHRiskscore.prototype, "disabled", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHRiskscore.prototype, "currentAngle", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "empty-footer" })], SHRiskscore.prototype, "emptyFooter", void 0);
  SHRiskscore = __decorate([e4("sh-risk-score")], SHRiskscore);

  // ../sh-search/src/sh-search.lit.scss.js
  var sh_search_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-search-icon-top=0.5rem] - top margin of search icon
   */
  --sh-search-icon-top: 0.5rem;
  /* 
   * @cssprop [--sh-search-icon-left=0.5rem] - left margin of search icon
   */
  --sh-search-icon-left: 0.5rem;
  /* 
   * @cssprop [--sh-search-input-height=2.5rem] - height of search input
   */
  --sh-search-input-height: 2.5rem;
  /* 
   * @cssprop [--sh-search-value-line-height=0.5rem] - line-height of value
   */
  --sh-search-value-line-height: 0.5rem;
  /* 
   * @cssprop [--sh-search-input-padding=0.5rem 0.5rem 0.5rem 2.5rem] - padding of input
   */
  --sh-search-input-padding: 0.5rem 0.5rem 0.5rem 2.5rem;
  /* 
   * @cssprop [--sh-search-input-padding-right=2.5rem] - right padding of input
   */
  --sh-search-input-padding-right: 2.5rem;
  /* 
   * @cssprop [--sh-search-border-radius=0.125rem 0.125rem 0rem 0rem] - border-radius of input
   */
  --sh-search-border-radius: 0.125rem 0.125rem 0rem 0rem;
  /* 
   * @cssprop [--sh-search-border-bottom-thickness=0.0625rem] - border-bottom of input
   */
  --sh-search-border-bottom-thickness: 0.0625rem;
  /* 
   * @cssprop [--sh-search-list-item-height=2.5rem] - list-item-height
   */
  --sh-search-list-item-height: 2.5rem;
  /* 
   * @cssprop [--sh-search-single-line-list-item-padding=0.5rem] - list-item-padding
   */
  --sh-search-single-line-list-item-padding: 0.5rem;
  /* 
   * @cssprop [--sh-search-list-item-line-height=1.5rem] - line-height of list item
   */
  --sh-search-list-item-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-search-close-icon-right=0.5rem] - distance between right of close icon and right of search input
   */
  --sh-search-close-icon-right: 0.5rem;
  /* 
   * @cssprop [--sh-search-multi-line-list-item-padding=0.25rem 0.5rem] - multi-line list-item padding
   */
  --sh-search-multi-line-list-item-padding: 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-search-multi-line-list-item-height=2.5rem] - multi-line list-item height
   */
  --sh-search-multi-line-list-item-height: 2.5rem;
  /* 
   * @cssprop [--sh-search-multi-line-single-item-height=1rem] - multi-line single-item height
   */
  --sh-search-multi-line-single-item-height: 1rem;
  /* 
   * @cssprop [--sh-search-empty-wrapper-padding=1rem 0.5rem] - padding of empty wrapper
   */
  --sh-search-empty-wrapper-padding: 1rem 0.5rem;
  /* 
   * @cssprop [--sh-search-list-view-max-height=13.75rem] - max-height of list-view
   */
  --sh-search-list-view-max-height: 13.75rem;
  /* 
   * @cssprop [--sh-search-empty-slot-item-gap=1rem] - the gap between the items in empty slot
   */
  --sh-search-empty-slot-item-gap: 1rem;
}

:host {
  width: 100%;
  display: block;
  height: var(--sh-search-input-height);
  position: relative;
}

input,
:host([readonly]) input:focus {
  padding: var(--sh-search-input-padding);
  border-radius: var(--sh-search-border-radius);
  background: rgba(var(--ui-1), var(--opacity-7));
  height: var(--sh-search-input-height);
  color: var(--text-primary);
  font: var(--body-1);
  line-height: var(--sh-search-value-line-height) !important;
  border: none;
  outline: none;
  box-sizing: border-box;
  width: 100%;
  text-overflow: ellipsis;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background;
  border-bottom: var(--sh-search-border-bottom-thickness) solid transparent;
  border-color: rgba(var(--ui-1), var(--opacity-4));
}

:host(.no-hovermq) input {
  transition: none;
}

input::-ms-clear {
  display: none;
}

:host([disabled]) input {
  color: var(--text-disabled);
  background: rgba(var(--ui-1), var(--opacity-7));
}

sh-icon {
  position: absolute;
  top: var(--sh-search-icon-top);
  left: var(--sh-search-icon-left);
  cursor: pointer;
}

#showSearch {
  border-radius: 0.125rem;
  max-height: var(--sh-search-list-view-max-height) !important;
}

.empty-wrapper {
  display: flex;
  flex-direction: column;
  gap: var(--sh-search-empty-slot-item-gap);
}

#showSearch,
.empty-wrapper {
  overflow: auto;
  background: var(--base-4);
  z-index: 1;
  box-shadow: var(--shadow-overlay);
  box-sizing: border-box;
  border-radius: 0.125rem;
}

.name {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

#showSearch .itemList {
  height: var(--sh-search-list-item-height);
  padding: var(--sh-search-single-line-list-item-padding);
  font: var(--body-1);
  color: var(--text-primary);
  line-height: var(--sh-search-list-item-line-height);
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  box-sizing: border-box;
  transition: var(--hover-transition-time) background;
}

.closeIcon {
  position: absolute;
  left: auto;
  right: var(--sh-search-close-icon-right);
  cursor: pointer;
  color: rgba(var(--ui-1), var(--opacity-4));
  background: transparent !important;
}

:host([disabled]) input::-moz-placeholder {
  color: var(--text-disabled);
  opacity: unset;
}

:host([disabled]) input::-webkit-input-placeholder,
:host([disabled]) input::placeholder {
  color: var(--text-disabled);
}

input::-webkit-input-placeholder,
input::placeholder,
input::-moz-placeholder {
  font: var(--body-1);
  color: var(--text-secondary);
}

.searchText {
  white-space: pre;
  color: var(--text-primary);
  font: var(--title-1);
}

/* hover */
input:hover {
  background: rgba(var(--ui-1), var(--opacity-6));
}

input:focus {
  border-color: rgba(var(--ui-1), var(--opacity-2));
}

:host(:not(.no-hovermq)) #showSearch .itemList:hover,
#showSearch .itemList.hover {
  cursor: pointer;
  background: rgba(var(--ui-1), var(--opacity-7));
}

:host(:not(.no-hovermq)) .closeIcon:hover,
.closeIcon.hover {
  color: rgba(var(--ui-1), var(--opacity-3));
}

.itemList.active {
  background: rgba(var(--ui-1), var(--opacity-7));
}

/*multiline suggestions */
:host([multiline]) #showSearch .itemList {
  padding: var(--sh-search-multi-line-list-item-padding);
  height: var(--sh-search-multi-line-list-item-height);
}

:host([multiline]) #showSearch .itemList div {
  height: var(--sh-search-multi-line-single-item-height);
  line-height: var(--sh-search-multi-line-single-item-height);
}

:host([multiline]) .highlight .itemList {
  background: rgba(var(--ui-1), var(--opacity-7));
}

:host([multiline]) #showSearch .firstItem {
  font: var(--body-1);
  color: var(--text-primary);
}

:host([multiline]) #showSearch .secondItem {
  font: var(--body-2);
  color: var(--text-secondary);
}

.secondItem .searchText {
  font: var(--title-2);
}

.firstItem,
.secondItem {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.empty-wrapper {
  padding: var(--sh-search-empty-wrapper-padding);
}

input::-moz-placeholder {
  font: var(--body-1);
  color: var(--text-secondary);
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  word-break: break-all;
}

input::placeholder {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  word-break: break-all;
  font: var(--body-1);
  color: var(--text-secondary);
}

:host([value=""]) #showSearch,
:host([value=""]) .empty-wrapper {
  display: none;
}

:host(:not([value=""])) input {
  padding-right: var(--sh-search-input-padding-right);
}`;

  // ../sh-search/src/sh-search.js
  var SHSearch = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        disabled: { type: Boolean, reflect: true },
        searchArray: { type: Array, reflect: true, attribute: "search-array" },
        multiline: { type: Boolean, reflect: true },
        value: { type: String, reflect: true },
        fields: { type: Array, reflect: true },
        wholeString: { type: Boolean, reflect: true, attribute: "whole-string" },
        noClear: { type: Boolean, reflect: true, attribute: "no-clear" },
        maxlength: { type: String, reflect: true },
        iconSearchEvent: { type: Boolean, reflect: true, attribute: "icon-search-event" },
        _currentFocus: { type: Number },
        _emptyResult: { type: Boolean }
      };
    }
    static get styles() {
      return [sh_search_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      <input
        type="text"
        .value="${this.value}"
        maxlength="${this.maxlength}"
        @input="${(e8) => this.onInput(e8)}"
        @keyup="${(e8) => this.changeInput(this.value, e8)}"
        @keydown="${(e8) => this.keyEvents(e8)}"
        id="searchBox"
        ?disabled="${this.disabled}"
        placeholder="${this.label}"
      />
      <sh-icon
        size="s"
        icon="search"
        ?disabled="${this.disabled}"
        button
        @click="${() => this._search()}"
      ></sh-icon>
      ${this.value && !this.disabled && !this.noClear ? x`
            <sh-icon
              icon="cancel"
              size="s"
              button
              class="closeIcon"
              id="close"
              ?disabled="${this.disabled}"
              @click="${() => this.clearInput()}"
            ></sh-icon>
          ` : ""}
      <sh-overlay
        id="showSearch"
        class="showSearch"
        style="width:${getComputedStyle(this).width};"
        scroll-action="refit"
        @focus="${(e8) => this.overlayFocusHandler(e8)}"
        no-overlap
        horizontal-align="left"
        no-cancel-on-outside-click
      >
        ${!this.multiline ? x`
              ${this.searchArray.map((item) => x`
                  ${this.computeSingleFilter(item) ? x`
                        <div
                          @click="${(e8) => this.selectItem(e8)}"
                          class="itemList"
                          data-item="${item}"
                        >
                          <span class="name" data-item="${item}">${item}</span>
                        </div>
                      ` : ""}
                `)}
            ` : ""}
        ${this.multiline ? x`
              ${this.searchArray.map((item) => x`
                  ${this.computeFilter(item) ? x`
                        <div
                          @click="${(e8) => {
        this.selectItem(e8);
      }}"
                          class="itemList"
                          data-item="${item[this.fields[0]]}"
                        >
                          <div class="firstItem" data-item="${item[this.fields[0]]}">
                            <span class="name" data-item="${item[this.fields[0]]}"
                              >${item[this.fields[0]]}</span
                            >
                          </div>
                          <div
                            class="secondItem"
                            data-item="${item[this.fields[0]]}"
                            data-second-item="${item[this.fields[1]]}"
                          >
                            <span class="name" data-item="${item[this.fields[0]]}"
                              >${item[this.fields[1]]}</span
                            >
                          </div>
                        </div>
                      ` : ""}
                `)}
            ` : ""}
      </sh-overlay>
      ${this._emptyResult && this.children.length > 0 ? x`
            <sh-overlay
              opened
              class="empty-wrapper"
              style="width:${getComputedStyle(this).width}"
              scroll-action="refit"
              no-overlap
              horizontal-align="left"
              no-cancel-on-outside-click
            >
              <slot name="empty"></slot>
            </sh-overlay>
          ` : ""}
    `;
    }
    constructor() {
      super();
      this.searchArray = [];
      this.wholeString = false;
      this.value = "";
      this.label = "Search";
      this._currentFocus = -1;
      this.fields = [];
      this.iconSearchEvent = false;
    }
    connectedCallback() {
      super.connectedCallback();
      this.clickListener = this.closeSearch.bind(this);
      document.body.addEventListener("click", this.clickListener);
      if (this.multiline && this.fields.length === 0 && this.searchArray.length > 0) {
        this.fields[0] = Object.keys(this.searchArray[0])[0];
        this.fields[1] = Object.keys(this.searchArray[0])[1];
      }
    }
    firstUpdated() {
      this._overlay = this.shadowRoot.querySelector("#showSearch");
      this.shadowRoot.querySelector("input").addEventListener("focus", () => {
        if (this.value) {
          this._overlay.open();
          if (this._overlay.querySelectorAll(".itemList").length === 0) {
            this._emptyResult = true;
          }
        } else {
          this._overlay.close();
          this._emptyResult = false;
        }
      });
      this.shadowRoot.querySelector("input").addEventListener("keydown", (event) => {
        if (event.key === "Enter" && !this.iconSearchEvent) {
          this._search();
        }
      });
    }
    updated(changedProperties) {
      const listOfProperties = ["label", "disabled", "value", "multiline", "fields"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    disconnectedCallback() {
      document.body.removeEventListener("click", this.clickListener);
      super.disconnectedCallback();
    }
    closeSearch(e8) {
      if (e8.target === this) {
        return;
      } else {
        this._overlay.close();
        this._emptyResult = false;
      }
    }
    overlayFocusHandler(e8) {
      e8.preventDefault();
      this.shadowRoot.querySelector("input").focus();
    }
    onInput(e8) {
      this.value = e8.target.value;
    }
    changeInput(value, event) {
      if (!(event.type === "keyup" && event.code === "Enter")) {
        if (this.value) {
          this._overlay.open();
          this._overlay.refit();
        } else {
          this._overlay.close();
        }
        if (!this.multiline && this.value) {
          const itemList = this.shadowRoot.querySelectorAll("#showSearch .itemList");
          for (let i7 = 0; i7 < itemList.length; i7++) {
            const fullStr = itemList[i7].dataset.item;
            itemList[i7].innerHTML = this.searchHighlight(fullStr, value);
          }
        } else {
          if (this.value) {
            this.multilineSearch();
          }
        }
        if (this._overlay.querySelectorAll(".itemList").length === 0) {
          if (this.value === "") {
            return;
          }
          dispatchCustomEvent(this, "noresult");
          this._emptyResult = true;
        } else {
          this._emptyResult = false;
        }
      }
    }
    multilineSearch() {
      const firstItemList = this._overlay.querySelectorAll(".itemList .firstItem");
      const secondItemList = this._overlay.querySelectorAll(".itemList .secondItem");
      for (let i7 = 0; i7 < firstItemList.length; i7++) {
        this.findSearchedStr(firstItemList[i7], firstItemList[i7].dataset.item);
      }
      for (let i7 = 0; i7 < secondItemList.length; i7++) {
        this.findSearchedStr(secondItemList[i7], secondItemList[i7].dataset.secondItem);
      }
    }
    findSearchedStr(item, itemStr) {
      const fullStr = itemStr;
      if (!this.wholeString && fullStr.toLowerCase().indexOf(this.value.toLowerCase()) !== -1) {
        item.innerHTML = this.searchHighlight(fullStr, this.value);
      } else if (this.wholeString && fullStr.toLowerCase().indexOf(this.value.toLowerCase()) !== -1) {
        item.innerHTML = this.searchHighlight(fullStr, this.value);
      } else {
        item.innerHTML = `<span class="name">${fullStr}</span>`;
      }
    }
    searchHighlight(fullStr, value) {
      let replaceHtml;
      if (value) {
        const matchStart = fullStr.toLowerCase().indexOf(value.toLowerCase());
        const matchEnd = matchStart + value.length - 1;
        const beforeMatch = fullStr.slice(0, matchStart);
        const matchText = fullStr.slice(matchStart, matchEnd + 1);
        const afterMatch = fullStr.slice(matchEnd + 1);
        replaceHtml = `${beforeMatch}<span class="searchText">${matchText}</span>${afterMatch}`;
      }
      return replaceHtml;
    }
    computeSingleFilter(inputStr) {
      let searchedString;
      if (this.wholeString) {
        searchedString = inputStr.toLowerCase().indexOf(this.value.toLowerCase()) !== -1;
      } else {
        searchedString = inputStr.toLowerCase().indexOf(this.value.toLowerCase()) === 0;
      }
      return searchedString;
    }
    computeFilter(inputStr) {
      let searchedString;
      if (this.wholeString) {
        searchedString = inputStr[this.fields[0]].toLowerCase().indexOf(this.value.toLowerCase()) !== -1 || inputStr[this.fields[1]].toLowerCase().indexOf(this.value.toLowerCase()) !== -1;
      } else {
        searchedString = inputStr[this.fields[0]].toLowerCase().indexOf(this.value.toLowerCase()) === 0 || inputStr[this.fields[1]].toLowerCase().indexOf(this.value.toLowerCase()) === 0;
      }
      return searchedString;
    }
    clearInput() {
      this.value = "";
      this._emptyResult = false;
      dispatchCustomEvent(this, "clearsearch");
      this._overlay.close();
    }
    selectItem(e8) {
      this.value = e8.target.dataset.item;
      if (e8.target.tagName === "SPAN") {
        this.value = e8.target.parentNode.dataset.item;
      } else {
        this.value = e8.target.dataset.item;
      }
      this.shadowRoot.querySelector("input").value = this.value;
      this.changeInput(this.value, e8);
      this.shadowRoot.querySelector("input").focus();
      this._overlay.close();
      this.clearActive();
      if (!this.iconSearchEvent) {
        this._search();
      }
    }
    clearActive() {
      const activeClass = this._overlay.getElementsByClassName("active");
      if (activeClass) {
        for (let i7 = 0; i7 < activeClass.length; i7++) {
          activeClass[i7].classList.remove("active");
        }
      }
      this._currentFocus = -1;
    }
    keyEvents(e8) {
      let itemlist;
      const arrowUpKey = 38;
      const arrowDownKey = 40;
      const enterKey = 13;
      itemlist = this.shadowRoot.querySelector("#showSearch");
      if (itemlist) {
        itemlist = itemlist.querySelectorAll(".itemList");
      }
      if (e8.keyCode === arrowDownKey) {
        e8.preventDefault();
        this._currentFocus++;
        this.addActive(itemlist);
      }
      if (e8.keyCode === arrowUpKey) {
        e8.preventDefault();
        this._currentFocus--;
        this.addActive(itemlist);
      }
      if (e8.keyCode === enterKey) {
        e8.preventDefault();
        if (this._currentFocus > -1 && itemlist.length > 0) {
          if (e8.target.tagName === "INPUT") {
            e8.stopImmediatePropagation();
          }
          itemlist[this._currentFocus].click();
        }
      }
    }
    addActive(itemlist) {
      if (!itemlist || this._emptyResult) {
        return;
      }
      this.removeActive(itemlist);
      if (this._currentFocus >= itemlist.length) {
        this._currentFocus = 0;
      }
      if (this._currentFocus < 0) {
        this._currentFocus = itemlist.length - 1;
      }
      itemlist[this._currentFocus].classList.add("active");
    }
    removeActive(itemlist) {
      for (let i7 = 0; i7 < itemlist.length; i7++) {
        itemlist[i7].classList.remove("active");
      }
    }
    _search() {
      dispatchCustomEvent(this, "search");
    }
  };
  customElements.define("sh-search", SHSearch);

  // ../../../../node_modules/@open-wc/lit-helpers/src/read-only-properties-mixin.js
  function ReadOnlyPropertiesMixin(superclass) {
    const _readOnlyPropertyNamesMap = new Map();
    return class ReadOnlyPropertiesClass extends superclass {
      constructor() {
        super();
        this._readOnlyPropertyInitializedMap = new Map();
      }
      static createProperty(name, options) {
        let finalOptions = options;
        if (options.readOnly) {
          const privateName = Symbol(name);
          _readOnlyPropertyNamesMap.set(name, privateName);
          Object.defineProperty(this.prototype, name, {
            get() {
              return this[privateName];
            },
            set(value) {
              if (this._readOnlyPropertyInitializedMap.get(name))
                return;
              this[privateName] = value;
              this._readOnlyPropertyInitializedMap.set(name, true);
            }
          });
          finalOptions = __spreadProps(__spreadValues({}, options), { noAccessor: true });
        }
        super.createProperty(name, finalOptions);
      }
      setReadOnlyProperties(props) {
        return __async(this, null, function* () {
          yield Promise.all(Object.entries(props).map(([name, newVal]) => {
            const privateName = _readOnlyPropertyNamesMap.get(name);
            const oldVal = this[privateName];
            this[privateName] = newVal;
            return this.requestUpdate(name, oldVal);
          }));
        });
      }
    };
  }

  // ../utils/slider-input-rectifier-mixin.js
  var SliderInputRectifierMixin = (base) => class InputRectifierMixin extends base {
    constructor() {
      super();
      this._stableValue = this._lowStable = this._highStable = 0;
    }
    getLowerValue(value, lowerValue, upperValue, min, max) {
      this._lowStable = lowerValue;
      if (value === "") {
        value = this.min;
      } else {
        value = Number(value);
      }
      if (value >= min && value <= max) {
        if (value > upperValue) {
          value = this._lowStable !== void 0 ? this._lowStable : min;
        }
      }
      if (value < min || value > max) {
        value = this._lowStable !== void 0 ? this._lowStable : min;
      }
      if (value <= upperValue && value >= min && value <= max) {
        this._lowStable = value;
      }
      value = !Number.isNaN(value) ? this._lowStable : min;
      return value;
    }
    getUpperValue(value, lowerValue, upperValue, min, max) {
      this._highStable = upperValue;
      if (value === "") {
        value = max;
      } else {
        value = Number(value);
      }
      if (value >= min && value <= max) {
        if (value < lowerValue) {
          value = this._highStable !== void 0 ? this._highStable : max;
        }
      }
      if (value > max || value < min) {
        value = this._highStable !== void 0 ? this._highStable : max;
      }
      if (value >= lowerValue && value >= min && value <= max) {
        this._highStable = value;
      }
      value = !Number.isNaN(value) ? this._highStable : max;
      return value;
    }
    getValue(value, sliderValue, min, max) {
      this._stableValue = sliderValue;
      if (value === "") {
        value = this.min;
      } else {
        value = Number(value);
      }
      if (value < min || value > max) {
        value = this._stableValue !== void 0 ? this._stableValue : min;
      }
      if (value >= min && value <= max) {
        this._stableValue = value;
      }
      value = !Number.isNaN(value) ? this._stableValue : min;
      return value;
    }
  };

  // ../utils/slider-step-marker-mixin.js
  var SliderStepMarkerMixin = (base) => class StepMarkerMixin extends base {
    constructor() {
      super();
      this.min = 0;
      this.max = 100;
      this.step = 1;
    }
    getCalculatedStepDistance(containerLength, min, max, step, stepTickHalfWidthRem) {
      this._STEP_TICK_HALF_WIDTH_REM = stepTickHalfWidthRem;
      let distance;
      this.min = min;
      this.max = max;
      this.step = step;
      distance = this.step / (this.max - this.min);
      distance = distance * containerLength - convertToPixel2(this._STEP_TICK_HALF_WIDTH_REM);
      return { distance };
    }
    calculatePoints(containerLength, stepTickHalfWidthRem) {
      this._STEP_TICK_HALF_WIDTH_REM = stepTickHalfWidthRem;
      let value;
      let points = [];
      const marker_pos = Math.floor((this.max - this.min) / this.step);
      if (this.min < 0 && this.min / this.step != 0) {
        points = [0];
        value = 0;
        let marker_pos_minus = Math.floor((0 - this.min) / this.step);
        let marker_pos_plus = Math.floor((this.max - 0) / this.step);
        for (let i7 = 0; i7 < marker_pos_minus; ++i7) {
          value = value - this.step;
          points.push(value);
        }
        value = 0;
        for (let i7 = 0; i7 < marker_pos_plus; ++i7) {
          value = value + this.step;
          points.push(value);
        }
      } else {
        points = [this.min];
        value = this.min;
        for (let i7 = 0; i7 < marker_pos; ++i7) {
          value = value + this.step;
          points.push(value);
        }
      }
      this._calculateStepTicks(points, containerLength);
    }
    _calculateStepTicks(points, containerLength) {
      let current_position, style;
      const stepMarkers = points.map((value) => {
        current_position = (value - this.min) / (this.max - this.min);
        current_position = 2 * Math.round(current_position * containerLength / 2) / calculatedBaseFontSize;
        current_position -= this._STEP_TICK_HALF_WIDTH_REM;
        style = `left: ${current_position}rem`;
        return { style, position: value };
      });
      this.setReadOnlyProperties({ stepMarkers });
    }
  };

  // ../utils/decimal-number-precision.js
  var getDecimalNumberPrecision = function(numbersInString) {
    let numberOfDecimalPoints;
    numberOfDecimalPoints = 0;
    numberOfDecimalPoints = numbersInString.split(".")[1].length;
    return numberOfDecimalPoints;
  };

  // ../sh-slider/src/arrow-controls.lit.scss.js
  var arrow_controls_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-slider-input-height=1.5rem] - height of show-value slider input
   */
  --sh-slider-input-height: 1.5rem;
  /* 
   * @cssprop [--sh-slider-input-width=2.5rem] - width of show-value slider input
   */
  --sh-slider-input-width: 2.5rem;
  /* 
   * @cssprop [--sh-slider-slider-area-height=2rem] - height of actual slider-area
   */
  --sh-slider-slider-area-height: 2rem;
  /* 
   * @cssprop [--sh-slider-slider-area-margin-top=0rem] - margin top of actual slider-area
   */
  --sh-slider-slider-area-margin-top: 0rem;
  /* 
   * @cssprop [--sh-slider-thumb-diameter=0.875rem] - diameter of the thumb
   */
  --sh-slider-thumb-diameter: 0.875rem;
  /* 
   * @cssprop [--sh-slider-track-height=0.125rem] - height of track
   */
  --sh-slider-track-height: 0.125rem;
  /* 
   * @cssprop [--sh-slider-input-padding=0.125rem 0.25rem] - padding of the input
   */
  --sh-slider-input-padding: 0.125rem 0.25rem;
  /* 
   * @cssprop [--sh-slider-horizontal-tooltip-thumb-distance=0.5625rem] - distance between thumb and tooltip in horizontal slider
   */
  --sh-slider-horizontal-tooltip-thumb-distance: 0.5625rem;
  /* 
   * @cssprop [--sh-slider-tooltip-width=2.5rem] - width of tooltip
   */
  --sh-slider-tooltip-width: 2.5rem;
  /* 
   * @cssprop [--sh-slider-tooltip-height=1.5rem] - height of tooltip
   */
  --sh-slider-tooltip-height: 1.5rem;
  /* 
   * @cssprop [--sh-slider-tick-diameter=0.375rem] - diameter of round ticks without hover
   */
  --sh-slider-tick-diameter: 0.375rem;
  /* 
   * @cssprop [--sh-slider-tick-diameter-on-hover=0.5rem] - diameter of round ticks with hover
   */
  --sh-slider-tick-diameter-on-hover: 0.5rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-tooltip-thumb-distance=var(--sh-slider-horizontal-tooltip-thumb-distance)] - the distance between the thumb and the tooltip for the vertical slider
   */
  --sh-slider-vertical-slider-tooltip-thumb-distance: var(--sh-slider-horizontal-tooltip-thumb-distance);
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-slider-distance=1rem] - the distance between the input and the slider for the vertical slider
   */
  --sh-slider-vertical-slider-input-slider-distance: 1rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-container-width=4.5rem] - the width of the container of input of vertical slider
   */
  --sh-slider-vertical-slider-input-container-width: 4.5rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-label-input-width=1.9375rem] - the width of the input of vertical slider
   */
  --sh-slider-vertical-slider-input-label-input-width: 1.9375rem;
  /* 
   * @cssprop [--sh-slider-step-tick-width=0.0625rem] - width of the step tick
   */
  --sh-slider-step-tick-width: 0.0625rem;
  /* 
   * @cssprop [--sh-slider-step-tick-height=0.5rem] - height of the step tick
   */
  --sh-slider-step-tick-height: 0.5rem;
  /* 
   * @cssprop [--sh-slider-range-input-separator-width=0.25rem] - width of range input separator
   */
  --sh-slider-range-input-separator-width: 0.25rem;
  /* 
   * @cssprop [--sh-slider-range-input-separator-side-margin=0.25rem] - margin left and margin right of range input separator
   */
  --sh-slider-range-input-separator-side-margin: 0.25rem;
  /* 
   * @cssprop [--sh-slider-step-tick-min-width=2rem] - min-width between step-ticks
   */
  --sh-slider-step-tick-min-width: 2rem;
  /* 
   * @cssprop [--sh-slider-arrow-controls-inter-icon-gap=0rem] - gap between the icons in arrow-controls
   */
  --sh-slider-arrow-controls-inter-icon-gap: 0rem;
}

:host {
  display: flex;
  width: fit-content;
  height: fit-content;
  flex-direction: row;
  gap: var(--sh-slider-arrow-controls-inter-icon-gap);
}

:host([disabled]) #plus,
:host([disabled]) #minus {
  color: rgb(var(--ui-1));
}`;

  // ../sh-slider/src/arrow-controls.js
  var SHArrowControls = class extends s4 {
    static get properties() {
      return {
        parentElement: { type: String },
        value: { type: Number },
        min: { type: Number },
        max: { type: Number },
        step: { type: Number },
        horizontal: { type: Boolean },
        disabled: { type: Boolean }
      };
    }
    static get styles() {
      return [arrow_controls_lit_scss_default];
    }
    render() {
      return x`
      <sh-icon
        id="minus"
        button
        icon="${this.horizontal ? "left-s" : "up-s"}"
        ?disabled="${this.disabled}"
        @mousedown="${this._startCounter}"
        @mousemove="${this._releaseCounter}"
        @mouseup="${this._releaseCounter}"
        @touchstart="${this._startCounter}"
        @touchend="${this._releaseCounter}"
        @keyup="${(e8) => {
        if (e8.code === "Enter" || e8.code === "Space") {
          this._releaseCounter(e8);
        }
      }}"
      ></sh-icon>
      <sh-icon
        id="plus"
        button
        icon="${this.horizontal ? "right-s" : "down-s"}"
        ?disabled="${this.disabled}"
        @mousedown="${this._startCounter}"
        @mousemove="${this._releaseCounter}"
        @mouseup="${this._releaseCounter}"
        @touchstart="${this._startCounter}"
        @touchend="${this._releaseCounter}"
        @keyup="${(e8) => {
        if (e8.code === "Enter" || e8.code === "Space") {
          this._releaseCounter(e8);
        }
      }}"
      ></sh-icon>
    `;
    }
    constructor() {
      super();
      this.min = 0;
      this.max = 100;
      this.step = 1;
    }
    _startCounter(e8) {
      if (e8.touches) {
        this.skipMouseMove = true;
      }
      e8.target.style.transition = "0s all linear";
      this._releaseCounter();
      this._setFlags(e8);
      this.clock = window.requestAnimationFrame(this._clockControl.bind(this));
    }
    _handleOnClick() {
      if (this._mouseDownAddition) {
        this._mouseDownAddition = false;
        return;
      }
      if (this._clickedOnPlusIcon) {
        this._handlePlusCalc();
      } else if (this._clickedOnMinusIcon) {
        this._handleMinusCalc();
      }
    }
    _clockControl() {
      this.timer = setTimeout(this._handleOnMouseDown.bind(this), 100);
    }
    _handleOnMouseDown() {
      if (this._clickedOnPlusIcon) {
        this._handlePlusCalc();
      } else if (this._clickedOnMinusIcon) {
        this._handleMinusCalc();
      }
      this._mouseDownAddition = true;
      this.clock = window.requestAnimationFrame(this._clockControl.bind(this));
    }
    _handleMinusCalc() {
      const decimalPoints = this.decimalNumberPrecision();
      let tempval = 0;
      if (this.value !== this.min) {
        tempval = parseFloat(this.value) - parseFloat(this.step);
        tempval = Number(tempval).toFixed(decimalPoints);
        if (tempval >= this.min) {
          this.value = Number(tempval);
          dispatchCustomEvent(this, "control-value-change");
        }
      }
    }
    _handlePlusCalc() {
      const decimalPoints = this.decimalNumberPrecision();
      let tempval = 0;
      if (this.value !== this.max) {
        tempval = parseFloat(this.value) + parseFloat(this.step);
        tempval = Number(tempval).toFixed(decimalPoints);
        if (tempval <= this.max) {
          this.value = Number(tempval);
          dispatchCustomEvent(this, "control-value-change");
        }
      }
    }
    decimalNumberPrecision() {
      let stepInString, minInString;
      stepInString = this.step.toString();
      minInString = this.min.toString();
      let numberOfDecimalPoints;
      numberOfDecimalPoints = 0;
      if (stepInString.includes(".")) {
        numberOfDecimalPoints = getDecimalNumberPrecision(stepInString);
      } else if (minInString.includes(".")) {
        numberOfDecimalPoints = getDecimalNumberPrecision(minInString);
      }
      return numberOfDecimalPoints;
    }
    _releaseCounter(e8 = null) {
      if (e8 && e8.type === "mousemove" && this.skipMouseMove) {
        this.skipMouseMove = false;
        return;
      }
      window.cancelAnimationFrame(this.clock);
      clearTimeout(this.timer);
      if (e8 && (e8.type === "mouseup" || e8.type === "touchend")) {
        dispatchCustomEvent(this, "control-value-change-end");
      }
      if (e8 && e8.type !== "mousemove") {
        this._setFlags(e8);
        this._handleOnClick();
      }
      if (e8 && e8.touches) {
        e8.preventDefault();
      }
      this._clickedOnPlusIcon = false;
      this._clickedOnMinusIcon = false;
    }
    _setFlags(e8) {
      if (e8.target.id === "plus") {
        this._clickedOnPlusIcon = true;
      } else if (e8.target.id === "minus") {
        this._clickedOnMinusIcon = true;
      }
    }
    disconnectedCallback() {
      window.cancelAnimationFrame(this.clock);
      clearTimeout(this.timer);
      super.disconnectedCallback();
    }
  };
  customElements.define("arrow-controls", SHArrowControls);

  // ../sh-slider/src/range-slider.lit.scss.js
  var range_slider_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-slider-input-height=1.5rem] - height of show-value slider input
   */
  --sh-slider-input-height: 1.5rem;
  /* 
   * @cssprop [--sh-slider-input-width=2.5rem] - width of show-value slider input
   */
  --sh-slider-input-width: 2.5rem;
  /* 
   * @cssprop [--sh-slider-slider-area-height=2rem] - height of actual slider-area
   */
  --sh-slider-slider-area-height: 2rem;
  /* 
   * @cssprop [--sh-slider-slider-area-margin-top=0rem] - margin top of actual slider-area
   */
  --sh-slider-slider-area-margin-top: 0rem;
  /* 
   * @cssprop [--sh-slider-thumb-diameter=0.875rem] - diameter of the thumb
   */
  --sh-slider-thumb-diameter: 0.875rem;
  /* 
   * @cssprop [--sh-slider-track-height=0.125rem] - height of track
   */
  --sh-slider-track-height: 0.125rem;
  /* 
   * @cssprop [--sh-slider-input-padding=0.125rem 0.25rem] - padding of the input
   */
  --sh-slider-input-padding: 0.125rem 0.25rem;
  /* 
   * @cssprop [--sh-slider-horizontal-tooltip-thumb-distance=0.5625rem] - distance between thumb and tooltip in horizontal slider
   */
  --sh-slider-horizontal-tooltip-thumb-distance: 0.5625rem;
  /* 
   * @cssprop [--sh-slider-tooltip-width=2.5rem] - width of tooltip
   */
  --sh-slider-tooltip-width: 2.5rem;
  /* 
   * @cssprop [--sh-slider-tooltip-height=1.5rem] - height of tooltip
   */
  --sh-slider-tooltip-height: 1.5rem;
  /* 
   * @cssprop [--sh-slider-tick-diameter=0.375rem] - diameter of round ticks without hover
   */
  --sh-slider-tick-diameter: 0.375rem;
  /* 
   * @cssprop [--sh-slider-tick-diameter-on-hover=0.5rem] - diameter of round ticks with hover
   */
  --sh-slider-tick-diameter-on-hover: 0.5rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-tooltip-thumb-distance=var(--sh-slider-horizontal-tooltip-thumb-distance)] - the distance between the thumb and the tooltip for the vertical slider
   */
  --sh-slider-vertical-slider-tooltip-thumb-distance: var(--sh-slider-horizontal-tooltip-thumb-distance);
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-slider-distance=1rem] - the distance between the input and the slider for the vertical slider
   */
  --sh-slider-vertical-slider-input-slider-distance: 1rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-container-width=4.5rem] - the width of the container of input of vertical slider
   */
  --sh-slider-vertical-slider-input-container-width: 4.5rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-label-input-width=1.9375rem] - the width of the input of vertical slider
   */
  --sh-slider-vertical-slider-input-label-input-width: 1.9375rem;
  /* 
   * @cssprop [--sh-slider-step-tick-width=0.0625rem] - width of the step tick
   */
  --sh-slider-step-tick-width: 0.0625rem;
  /* 
   * @cssprop [--sh-slider-step-tick-height=0.5rem] - height of the step tick
   */
  --sh-slider-step-tick-height: 0.5rem;
  /* 
   * @cssprop [--sh-slider-range-input-separator-width=0.25rem] - width of range input separator
   */
  --sh-slider-range-input-separator-width: 0.25rem;
  /* 
   * @cssprop [--sh-slider-range-input-separator-side-margin=0.25rem] - margin left and margin right of range input separator
   */
  --sh-slider-range-input-separator-side-margin: 0.25rem;
  /* 
   * @cssprop [--sh-slider-step-tick-min-width=2rem] - min-width between step-ticks
   */
  --sh-slider-step-tick-min-width: 2rem;
  /* 
   * @cssprop [--sh-slider-arrow-controls-inter-icon-gap=0rem] - gap between the icons in arrow-controls
   */
  --sh-slider-arrow-controls-inter-icon-gap: 0rem;
}

:host {
  width: 100%;
  outline: 0;
  display: block;
}

.range-wrapper {
  position: relative;
  height: var(--sh-slider-slider-area-height);
  outline: none;
  display: flex;
  width: 100%;
  align-items: center;
  --available-slider-length: calc(100% - var(--sh-slider-thumb-diameter));
  --percent-lower-value: calc((var(--lower-value) - var(--min)) / (var(--max) - var(--min)));
  --percent-upper-value: calc((var(--upper-value) - var(--min)) / (var(--max) - var(--min)));
  --lower-value-left: calc(
    (var(--percent-lower-value) * var(--available-slider-length)) +
      (var(--sh-slider-thumb-diameter) / 2)
  );
  --upper-value-left: calc(
    (var(--percent-upper-value) * var(--available-slider-length)) +
      (var(--sh-slider-thumb-diameter) / 2)
  );
}

input[type=range]::-webkit-slider-thumb {
  box-shadow: none;
}

#lower::-webkit-slider-thumb,
#upper::-webkit-slider-thumb {
  appearance: none;
  position: relative;
  width: var(--sh-slider-thumb-diameter);
  height: var(--sh-slider-thumb-diameter);
  cursor: pointer;
  border-radius: 50%;
  border: none;
  outline: 0;
  z-index: 1;
  background: rgba(var(--ui-5), var(--opacity-1));
  -webkit-appearance: none;
  user-select: none;
  -webkit-user-select: none;
  transition: var(--hover-transition-time) background;
  pointer-events: all;
}

#lower::-moz-range-thumb,
#upper::-moz-range-thumb {
  position: relative;
  width: var(--sh-slider-thumb-diameter);
  height: var(--sh-slider-thumb-diameter);
  cursor: pointer;
  border-radius: 50%;
  border: none;
  z-index: 1;
  background: rgba(var(--ui-5), var(--opacity-1));
  transition: var(--hover-transition-time) background;
  pointer-events: all;
}

:host(.touch-device) #lower::-webkit-slider-thumb,
:host(.touch-device) #upper::-webkit-slider-thumb {
  background-clip: padding-box;
  border: calc((2.5rem - var(--sh-slider-thumb-diameter)) / 2) solid transparent;
  box-sizing: unset;
}

:host(.touch-device) #handleTrackWrapper {
  height: 2.5rem;
}

:host(.touch-device) #rangeTrack {
  background-clip: padding-box;
}

:host(:not(.touch-device)) #rangeTrack {
  background-clip: padding-box;
}

:host(:not(.touch-device)) #lower:not(:active)::-webkit-slider-thumb:hover,
:host(:not(.touch-device)) #upper:not(:active)::-webkit-slider-thumb:hover {
  background: rgba(var(--ui-2), var(--opacity-1));
}

:host(:not(.touch-device)) #lower::-moz-range-thumb:hover,
:host(:not(.touch-device)) #upper::-moz-range-thumb:hover {
  background: rgba(var(--ui-2), var(--opacity-1));
}

:host(.touch-device) .thumbActive#lower::-webkit-slider-thumb,
:host(.touch-device) .thumbActive#upper::-webkit-slider-thumb {
  border: calc((2.5rem - var(--sh-slider-thumb-diameter)) / 2) solid rgba(var(--ui-3), var(--opacity-5));
  background-color: rgba(var(--ui-3), var(--opacity-1));
}

#lower::-webkit-slider-thumb:active,
#upper::-webkit-slider-thumb:active {
  background: rgba(var(--ui-3), var(--opacity-1));
}

#lower::-moz-range-thumb:active,
#upper::-moz-range-thumb:active {
  background: rgba(var(--ui-3), var(--opacity-1));
}

:host(.touch-device) #lower::-webkit-slider-runnable-track,
:host(.touch-device) #upper::-webkit-slider-runnable-track {
  --halo-ring-radius: calc((2.5rem - var(--sh-slider-thumb-diameter)) / 2);
  margin-left: calc(0rem - var(--halo-ring-radius));
  margin-right: calc(0rem - var(--halo-ring-radius));
}

.range-track {
  width: 100%;
  height: var(--sh-slider-track-height);
  outline: 0;
  background-color: rgba(var(--ui-1), var(--opacity-6));
  cursor: pointer;
  position: absolute;
  -moz-appearance: none;
  -webkit-appearance: none;
  margin: 0;
}

.handle-track {
  height: var(--sh-slider-track-height);
  background: rgba(var(--ui-5), var(--opacity-1));
  cursor: pointer;
  width: 100%;
}

.handle-track-wrapper {
  height: 2rem;
  position: absolute;
  transition: var(--hover-transition-time) background;
  left: calc(var(--lower-value-left));
  width: calc(var(--upper-value-left) - var(--lower-value-left));
  display: flex;
  align-items: center;
}

#handleTrackWrapper {
  cursor: pointer;
  outline: 0;
}

#lower,
#upper {
  background-color: transparent;
  opacity: unset;
  pointer-events: none;
}

:host(:not(.touch-device)) .handle-track-wrapper:hover .handle-track,
.focus#lower::-webkit-slider-thumb,
.focus#upper::-webkit-slider-thumb {
  background: rgba(var(--ui-2), var(--opacity-1));
}

.active#lower::-webkit-slider-thumb,
.active#upper::-webkit-slider-thumb,
.active#handleTrack {
  background: rgba(var(--ui-3), var(--opacity-1));
}

.focus#lower::-moz-range-thumb,
.focus#upper::-moz-range-thumb {
  background: rgba(var(--ui-2), var(--opacity-1));
}

.active#lower::-moz-range-thumb,
.active#upper::-moz-range-thumb {
  background: rgba(var(--ui-3), var(--opacity-1));
}

/* disabled styles */
:host([disabled]) #upper::-webkit-slider-thumb,
:host([disabled]) #lower::-webkit-slider-thumb,
:host([disabled]) #handleTrack {
  background-color: rgba(var(--ui-6), var(--opacity-1));
  pointer-events: none;
}

:host([disabled]) #upper::-moz-range-thumb,
:host([disabled]) #lower::-moz-range-thumb {
  background: rgba(var(--ui-6), var(--opacity-1));
  pointer-events: none;
}

:host([disabled]) #rangeTrack {
  background-color: rgb(var(--ui-1), var(--opacity-7));
}

.label-wrapper {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.slider-label {
  flex: 1 1 auto;
  padding-right: 0.5rem;
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: 0.2s all ease-in-out;
}

.label-wrapper input {
  outline: 0;
  border: none;
  width: var(--sh-slider-input-width);
  height: var(--sh-slider-input-height);
  font: var(--body-1);
  line-height: var(--sh-slider-input-height);
  color: var(--text-secondary);
  background: rgba(var(--ui-1), var(--opacity-7));
  border-radius: 0.125rem;
  box-sizing: border-box;
  padding: var(--sh-slider-input-padding);
  transition: 0.2s all ease-in-out;
  text-align: center;
  -moz-appearance: textfield;
  flex-shrink: 0;
}

.value-separator {
  height: var(--sh-slider-input-height);
  width: var(--sh-slider-range-input-separator-width);
  text-align: center;
  line-height: var(--sh-slider-input-height);
  margin: 0 var(--sh-slider-range-input-separator-side-margin);
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  position: relative;
  flex-shrink: 0;
}

:host([disabled]) .value-separator {
  color: rgba(var(--ui-6), var(--opacity-1));
}

input::-webkit-inner-spin-button {
  display: none;
}

:host(:not([label])) .label-wrapper {
  display: none;
}

:host([show-value]) .label-wrapper input {
  display: inline-flex;
}

:host([disabled]) .slider-label,
:host([disabled]) .label-wrapper input {
  color: var(--text-disabled);
  opacity: unset;
}

/* stepTicks */
.step_ticks {
  position: absolute;
  padding: 0;
  display: none;
  flex-direction: row;
  align-items: center;
  height: 100%;
  width: 100%;
  margin: 0px;
  box-sizing: border-box;
}

.step_ticks li {
  height: var(--sh-slider-step-tick-height);
  width: var(--sh-slider-step-tick-width);
  -moz-user-select: none;
  -webkit-user-select: none;
  list-style: none;
  position: absolute;
}

:host .sh-step-thumb-item {
  cursor: pointer;
  outline: 0;
  background: rgba(var(--ui-1), var(--opacity-6));
  -moz-appearance: none;
  -webkit-appearance: none;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
}

:host([disabled]) .sh-step-thumb-item {
  background: rgba(var(--ui-1), var(--opacity-7));
}

/* Tooltip styles */
#lowerRangeTooltip,
#upperRangeTooltip {
  --thumb-radius: calc(var(--sh-slider-thumb-diameter) / 2);
  display: none;
  position: absolute;
  pointer-events: none;
  outline: 0;
  width: var(--sh-slider-tooltip-width);
  height: var(--sh-slider-tooltip-height);
  text-align: center;
  background: var(--base-3);
  box-shadow: var(--shadow-raised);
  border-radius: 0.125rem;
  box-sizing: border-box;
  z-index: 5;
  transform: translateX(-50%) translateY(calc(-50% - var(--thumb-radius) - var(--sh-slider-horizontal-tooltip-thumb-distance)));
  justify-content: center;
  align-items: center;
}

#lowerRangeTooltip {
  left: var(--lower-value-left);
}

#upperRangeTooltip {
  left: var(--upper-value-left);
}

:host(:not([show-value]):hover:not(.touch-device)) #lowerRangeTooltip,
:host(:not([show-value]):hover:not(.touch-device)) #upperRangeTooltip {
  display: flex;
}

:host .markers.step_ticks {
  display: flex;
}

/* tab-outline */
:host .tab_outline.handle-track-wrapper {
  outline: var(--focus-outline) !important;
}

:host .tab_outline.handle-track {
  background: rgba(var(--ui-2), var(--opacity-1));
}

:host(:not([show-value])) .tab_tooltip#lowerRangeTooltip,
:host(:not([show-value])) .tab_tooltip#upperRangeTooltip {
  display: flex;
}

:host .tab_outline#lower::-webkit-slider-thumb,
:host .tab_outline#upper::-webkit-slider-thumb {
  outline: var(--focus-outline);
  background: rgba(var(--ui-2), var(--opacity-1));
}

:host .tab_outline#lower::-moz-range-thumb,
:host .tab_outline#upper::-moz-range-thumb {
  outline: var(--focus-outline);
  background: rgba(var(--ui-2), var(--opacity-1));
}

.sh-step-thumb-item:focus-visible {
  outline: var(--focus-outline);
}`;

  // ../sh-slider/src/range-slider.js
  var SHRangeSlider = class extends SliderStepMarkerMixin(SliderInputRectifierMixin(ReadOnlyPropertiesMixin(s4))) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        min: { type: Number, reflect: true },
        max: { type: Number, reflect: true },
        step: { type: Number, reflect: true },
        showValue: { type: Boolean, reflect: true, attribute: "show-value" },
        disabled: { type: Boolean, reflect: true },
        lowerValue: { type: Number, reflect: true, attribute: "lower-value" },
        upperValue: { type: Number, reflect: true, attribute: "upper-value" },
        stepMarkers: { type: Array, readOnly: true },
        _selectedThumb: { type: String },
        _isDrag: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [range_slider_lit_scss_default];
    }
    render() {
      return x`
      ${this.label ? x` <div class="label-wrapper">
            <sh-text class="slider-label" size="body-1" color="secondary">${this.label}</sh-text>
            ${this.showValue ? x` <input
                    id="lowerInputText"
                    type="number"
                    min="${this.min}"
                    max="${this.max}"
                    step="${this.step}"
                    .value="${this.lowerValue}"
                    maxlength="4"
                    ?disabled="${this.disabled}"
                    @keyup="${this._onKeyPress}"
                    @blur="${this._handleOnBlur}"
                  />
                  <span class="value-separator">-</span>
                  <input
                    id="upperInputText"
                    type="number"
                    min="${this.min}"
                    max="${this.max}"
                    step="${this.step}"
                    .value="${this.upperValue}"
                    maxlength="4"
                    ?disabled="${this.disabled}"
                    @keyup="${this._onKeyPress}"
                    @blur="${this._handleOnBlur}"
                  />` : ""}
          </div>` : ""}
      <div
        id="rangeWrapper"
        class="range-wrapper"
        style="--min:${this.min}; --max:${this.max}; --lower-value:${this.lowerValue}; --upper-value:${this.upperValue}"
      >
        <div
          id="rangeTrack"
          class="range-track"
          @click="${(e8) => this._moveThumbOnRangeTrack(e8)}"
          @touchstart="${(e8) => this._moveThumbOnRangeTrack(e8)}"
        >
          <ul id="range_step_ticks" class="step_ticks">
            ${this.stepMarkers.map((item) => x` <li
                class="sh-step-thumb-item"
                @click="${(e8) => this._onTickClick(e8)}"
                data-value="${item.position}"
                style="${item.style}"
                tabindex="0"
                @keyup="${(e8) => {
        if (e8.code === "Space" || e8.code === "Enter") {
          e8.target.click();
        }
      }}"
              ></li>`)}
          </ul>
        </div>
        <div
          id="handleTrackWrapper"
          class="handle-track-wrapper"
          tabindex="${this.disabled ? "-1" : "0"}"
          @mousedown="${(e8) => this._thumbDown(e8)}"
          @touchstart="${(e8) => this._thumbDown(e8)}"
        >
          <div
            id="handleTrack"
            class="handle-track"
            @mousedown="${(e8) => this._thumbDown(e8)}"
            @touchstart="${(e8) => this._thumbDown(e8)}"
          ></div>
        </div>
        <input
          type="range"
          id="lower"
          class="range-track"
          min="${this.min}"
          max="${this.max}"
          label="${this.label}"
          step="${this.step}"
          .value="${this.lowerValue}"
          ?disabled="${this.disabled}"
          @mousedown="${(e8) => this._thumbDown(e8)}"
          @touchstart="${(e8) => this._thumbDown(e8)}"
          @input="${(e8) => this._thumbOverlapValueCheckRange(e8)}"
        />
        <sh-text id="lowerRangeTooltip" color="secondary">${this.lowerValue}</sh-text>
        <input
          type="range"
          id="upper"
          class="range-track"
          min="${this.min}"
          max="${this.max}"
          label="${this.label}"
          step="${this.step}"
          .value="${this.upperValue}"
          ?disabled="${this.disabled}"
          @mousedown="${(e8) => this._thumbDown(e8)}"
          @touchstart="${(e8) => this._thumbDown(e8)}"
          @input="${(e8) => this._thumbOverlapValueCheckRange(e8)}"
        />
        <sh-text id="upperRangeTooltip" color="secondary">${this.upperValue}</sh-text>
      </div>
    `;
    }
    constructor() {
      super();
      this.lowerValue = this.upperValue = 0;
      this.min = 0;
      this.max = 100;
      this.step = 1;
      this.label = "Label";
      this.stepMarkers = [];
    }
    updated(changedProperties) {
      if (changedProperties.has("step")) {
        this._renderStepMarkersRange();
        this._thumbOverlapLowerValueCheckRange();
        this._thumbOverlapUpperValueCheckRange();
        this._generateHandleTrack();
      }
      if (changedProperties.has("lowerValue")) {
        this._thumbOverlapLowerValueCheckRange();
        this._generateHandleTrack();
      }
      if (changedProperties.has("upperValue")) {
        this._thumbOverlapUpperValueCheckRange();
        this._generateHandleTrack();
      }
      if (changedProperties.has("min") || changedProperties.has("max")) {
        this._renderStepMarkersRange();
        this._thumbOverlapLowerValueCheckRange();
        this._thumbOverlapUpperValueCheckRange();
        this._generateHandleTrack();
      }
      if (changedProperties.has("_isDrag")) {
        this._isDragObserver();
      }
      const listOfProperties = ["lowerValue", "upperValue"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    connectedCallback() {
      super.connectedCallback();
      this.boundMove = this._thumbMove.bind(this);
      this.boundUp = this._thumbUp.bind(this);
      this.addEventListener("touchmove", this.boundMove);
      this.addEventListener("touchend", this.boundUp);
    }
    firstUpdated() {
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      const lower = this.shadowRoot.querySelector("#lower");
      const upper = this.shadowRoot.querySelector("#upper");
      const handleTrack = this.shadowRoot.querySelector("#handleTrackWrapper");
      const track = this.shadowRoot.querySelector("#handleTrack");
      const sliderToolLower = this.shadowRoot.querySelector("#lowerRangeTooltip");
      const sliderToolUpper = this.shadowRoot.querySelector("#upperRangeTooltip");
      lower.addEventListener("focus", () => this._handleFocus(lower, sliderToolLower));
      lower.addEventListener("blur", () => this._handleBlur(lower, sliderToolLower));
      upper.addEventListener("focus", () => this._handleFocus(upper, sliderToolUpper));
      upper.addEventListener("blur", () => this._handleBlur(upper, sliderToolUpper));
      handleTrack.addEventListener("focus", () => this._handleFocusRangeTrack(handleTrack, track, sliderToolUpper, sliderToolLower, lower, upper));
      handleTrack.addEventListener("blur", () => this._handleBlurRangeTrack(handleTrack, track, sliderToolUpper, sliderToolLower, lower, upper));
      handleTrack.addEventListener("mouseover", () => this._addElementFocus(lower, upper));
      handleTrack.addEventListener("mouseout", () => this._removeElementFocus(lower, upper));
    }
    _handleFocus(thumb, tooltip) {
      thumb.onkeyup = (e8) => {
        tooltip.classList.add("tab_tooltip");
        if (keyboardInteraction(e8, KEYCODE.TAB)) {
          thumb.classList.add("tab_outline");
        }
        if (keyboardInteraction(e8, KEYCODE.ARROW_RIGHT) || keyboardInteraction(e8, KEYCODE.ARROW_UP) || keyboardInteraction(e8, KEYCODE.ARROW_LEFT) || keyboardInteraction(e8, KEYCODE.ARROW_DOWN)) {
          this._eventTargetSelect(e8);
        }
      };
    }
    _handleBlur(thumb, tooltip) {
      thumb.classList.remove("tab_outline");
      tooltip.classList.remove("tab_tooltip");
    }
    _handleFocusRangeTrack(handleTrack, track, sliderToolUpper, sliderToolLower, lower, upper) {
      handleTrack.onkeydown = (e8) => {
        if (keyboardInteraction(e8, KEYCODE.ARROW_UP) || keyboardInteraction(e8, KEYCODE.ARROW_DOWN) || keyboardInteraction(e8, KEYCODE.ARROW_LEFT) || keyboardInteraction(e8, KEYCODE.ARROW_RIGHT)) {
          e8.preventDefault();
        }
      };
      handleTrack.onkeyup = (e8) => {
        if (keyboardInteraction(e8, KEYCODE.TAB)) {
          handleTrack.classList.add("tab_outline");
          track.classList.add("tab_outline");
          sliderToolUpper.classList.add("tab_tooltip");
          sliderToolLower.classList.add("tab_tooltip");
          lower.classList.add("tab_outline");
          upper.classList.add("tab_outline");
        }
        if ((keyboardInteraction(e8, KEYCODE.ARROW_RIGHT) || keyboardInteraction(e8, KEYCODE.ARROW_UP)) && upper.value < this.max) {
          lower.value = parseFloat(lower.value) + parseFloat(this.step);
          upper.value = parseFloat(upper.value) + parseFloat(this.step);
          this.lowerValue = Number(lower.value);
          this.upperValue = Number(upper.value);
          this._eventTargetSelect(e8);
        }
        if ((keyboardInteraction(e8, KEYCODE.ARROW_LEFT) || keyboardInteraction(e8, KEYCODE.ARROW_DOWN)) && this.lowerValue > this.min) {
          lower.value = parseFloat(lower.value) - parseFloat(this.step);
          upper.value = parseFloat(upper.value) - parseFloat(this.step);
          this.lowerValue = Number(lower.value);
          this.upperValue = Number(upper.value);
          this._eventTargetSelect(e8);
        }
      };
    }
    _handleBlurRangeTrack(handleTrack, track, sliderToolUpper, sliderToolLower, lower, upper) {
      handleTrack.classList.remove("tab_outline");
      track.classList.remove("tab_outline");
      sliderToolUpper.classList.remove("tab_tooltip");
      sliderToolLower.classList.remove("tab_tooltip");
      lower.classList.remove("tab_outline");
      upper.classList.remove("tab_outline");
    }
    _eventTargetSelect(e8) {
      this._selectedThumb = e8.target.id;
      this._dispatchValueChangeEndEvent();
    }
    _addElementFocus(lower, upper) {
      lower.classList.add("focus");
      upper.classList.add("focus");
    }
    _removeElementFocus(lower, upper) {
      lower.classList.remove("focus");
      upper.classList.remove("focus");
    }
    _renderStepMarkersRange() {
      if (this.step === 0) {
        return;
      }
      const stepTickDistance = convertToPixel2(parseFloat(getComputedStyle(this).getPropertyValue("--sh-slider-step-tick-min-width")));
      let input, slider_step, containerLength;
      input = this.shadowRoot.querySelector(".range-track");
      slider_step = this.shadowRoot.querySelector("#range_step_ticks");
      containerLength = input.offsetWidth;
      const stepTickHalfWidth = parseFloat(getComputedStyle(this).getPropertyValue("--sh-slider-step-tick-width")) / 2;
      let ticksObject = this.getCalculatedStepDistance(containerLength, this.min, this.max, this.step, stepTickHalfWidth);
      if (ticksObject.distance >= stepTickDistance) {
        slider_step.classList.add("markers");
        this.calculatePoints(containerLength, stepTickHalfWidth);
      } else {
        slider_step.classList.remove("markers");
      }
    }
    _onTickClick(e8) {
      e8.stopPropagation();
      const upperValue = parseFloat(this.shadowRoot.querySelector("#upper").value);
      const lowerValue = parseFloat(this.shadowRoot.querySelector("#lower").value);
      const tickValue = Number(e8.target.dataset.value);
      if (tickValue > upperValue) {
        this.upperValue = tickValue;
      } else if (tickValue < lowerValue) {
        this.lowerValue = tickValue;
      }
    }
    _thumbOverlapValueCheckRange(e8) {
      if (e8.target.id === "lower") {
        this._thumbOverlapLowerValueCheckRange();
      } else {
        this._thumbOverlapUpperValueCheckRange();
      }
    }
    _thumbOverlapLowerValueCheckRange() {
      const lower = this.shadowRoot.querySelector("#lower");
      const upper = this.shadowRoot.querySelector("#upper");
      lower.value = Math.min(lower.value, upper.value);
      this._updateLowerValue();
    }
    _thumbOverlapUpperValueCheckRange() {
      const lower = this.shadowRoot.querySelector("#lower");
      const upper = this.shadowRoot.querySelector("#upper");
      upper.value = Math.max(upper.value, lower.value);
      this._updateUpperValue();
    }
    _generateHandleTrack() {
      const handleTrackWrapper = this.shadowRoot.querySelector("#handleTrackWrapper");
      const lower = this.shadowRoot.querySelector("#lower");
      const upper = this.shadowRoot.querySelector("#upper");
      let lowerPosVal, upperPosVal, track, newLowerPosVal, newUpperPosVal;
      lowerPosVal = (lower.value - this.min) * 100 / (this.max - this.min);
      upperPosVal = (upper.value - this.min) * 100 / (this.max - this.min);
      track = this.shadowRoot.querySelector("#rangeWrapper").getBoundingClientRect().width / calculatedBaseFontSize;
      newLowerPosVal = lowerPosVal / 100 * parseFloat(track);
      newUpperPosVal = upperPosVal / 100 * parseFloat(track);
      handleTrackWrapper.style.left = parseFloat(newLowerPosVal) + "rem";
      if (this.upperValue === this.lowerValue) {
        handleTrackWrapper.style.width = "0rem";
      } else {
        handleTrackWrapper.style.width = parseFloat(newUpperPosVal) - parseFloat(newLowerPosVal) + "rem";
      }
    }
    _thumbDown(e8) {
      this._isDrag = true;
      this._selectedThumb = e8.target.id;
      if (this._selectedThumb === "handleTrackWrapper" || this._selectedThumb === "handleTrack") {
        e8.preventDefault();
        const offset = this.shadowRoot.querySelector("#handleTrackWrapper").getBoundingClientRect();
        if (e8.touches) {
          this.initialX = (e8.touches[0].clientX - offset.left) / calculatedBaseFontSize;
        } else {
          this.initialX = (e8.clientX - offset.left) / calculatedBaseFontSize;
        }
        this.shadowRoot.querySelector("#handleTrack").classList.add("active");
        this.shadowRoot.querySelector("#upper").classList.add("active");
        this.shadowRoot.querySelector("#lower").classList.add("active");
      } else if (this._selectedThumb === "lower") {
        this.shadowRoot.querySelector("#lower").classList.add("thumbActive");
      } else if (this._selectedThumb === "upper") {
        this.shadowRoot.querySelector("#upper").classList.add("thumbActive");
      }
      window.removeEventListener("mousemove", this.boundMove);
      window.removeEventListener("mouseup", this.boundUp);
      window.addEventListener("mousemove", this.boundMove);
      window.addEventListener("mouseup", this.boundUp);
    }
    _thumbMove(e8) {
      if (this._isDrag) {
        if (this._selectedThumb === "handleTrackWrapper" || this._selectedThumb === "handleTrack") {
          this._moveThumbOnTrack(e8);
        }
        if (!this.showValue) {
          this.shadowRoot.querySelector("#lowerRangeTooltip").style.display = "flex";
          this.shadowRoot.querySelector("#upperRangeTooltip").style.display = "flex";
        }
      }
    }
    _thumbUp() {
      if (this._isDrag) {
        this._isDrag = false;
        this.shadowRoot.querySelector("#handleTrack").classList.remove("active");
        this.shadowRoot.querySelector("#lower").classList.remove("active");
        this.shadowRoot.querySelector("#upper").classList.remove("active");
        this.shadowRoot.querySelector("#lower").classList.remove("thumbActive");
        this.shadowRoot.querySelector("#upper").classList.remove("thumbActive");
        this.shadowRoot.querySelector("#lowerRangeTooltip").style.removeProperty("display");
        this.shadowRoot.querySelector("#upperRangeTooltip").style.removeProperty("display");
      }
      window.removeEventListener("mousemove", this.boundMove);
      window.removeEventListener("mouseup", this.boundUp);
    }
    _isDragObserver() {
      if (!this._isDrag) {
        this._dispatchValueChangeEndEvent();
      }
    }
    _moveThumbOnTrack(e8) {
      if (e8.touches) {
        e8.preventDefault();
      }
      this._calculatePositionInTrack(e8);
      this._adjustThumbPositionToHandle();
    }
    _calculatePositionInTrack(e8) {
      const decimalPoints = this.decimalNumberPrecision();
      const track = this.shadowRoot.querySelector("#rangeWrapper");
      const handle = this.shadowRoot.querySelector("#handleTrackWrapper");
      let offset, maxLength, newThumbPos, handleWidth, handleLeft, checkVal;
      offset = track.getBoundingClientRect();
      maxLength = window.getComputedStyle(track).width.split("p")[0] / calculatedBaseFontSize;
      newThumbPos = (e8.clientX - offset.left) / calculatedBaseFontSize;
      if (e8.touches !== void 0) {
        newThumbPos = (e8.touches[0].clientX - offset.left) / calculatedBaseFontSize;
      }
      handleWidth = handle.style.width.split("r")[0];
      handleLeft = handle.style.left.split("r")[0];
      let sliderWidth = parseFloat(maxLength);
      maxLength -= handleWidth;
      newThumbPos -= this.initialX;
      newThumbPos = this._calcPositionForRangeJump(newThumbPos, decimalPoints);
      let upperThumbPos = parseFloat(handleLeft) + parseFloat(handleWidth);
      let tempVal = parseFloat(upperThumbPos) / sliderWidth * 100;
      checkVal = tempVal * (this.max - this.min) / 100 + this.min;
      checkVal = this._refineValueBasedOnStep(checkVal, decimalPoints);
      switch (newThumbPos != null) {
        case newThumbPos < 0:
          this._setThumbToPosition(0);
          break;
        case newThumbPos > maxLength:
          if (checkVal + this.step <= this.max) {
            this._setThumbToPosition(maxLength);
          }
          break;
        case (newThumbPos >= 0 && newThumbPos <= maxLength):
          this._setThumbToPosition(newThumbPos);
          break;
        default:
          console.log("error adjusting thumb");
      }
    }
    _adjustThumbPositionToHandle() {
      const handleTrack = this.shadowRoot.querySelector("#handleTrackWrapper");
      let handleLeft, handleWidth, lowerPosVal, upperPosVal;
      handleLeft = Number(handleTrack.style.left.split("r")[0]);
      handleWidth = Number(handleTrack.style.width.split("r")[0]);
      lowerPosVal = this._thumbPosition(handleLeft);
      upperPosVal = this._thumbPosition(handleLeft + handleWidth);
      this.shadowRoot.querySelector("#lower").value = lowerPosVal;
      this.shadowRoot.querySelector("#upper").value = upperPosVal;
      this._updateLowerValue();
      this._updateUpperValue();
    }
    _thumbPosition(pointOnTrack) {
      const decimalPoints = this.decimalNumberPrecision();
      let posVal = this._calcThumbPosition(pointOnTrack);
      posVal = this._refineValueBasedOnStep(posVal, decimalPoints);
      return posVal;
    }
    _calcThumbPosition(pointOnTrack) {
      let divisor, tempVal, posVal;
      const range = this.shadowRoot.querySelector("#rangeWrapper");
      divisor = window.getComputedStyle(range).width.split("p")[0] / calculatedBaseFontSize;
      tempVal = pointOnTrack / divisor * 100;
      posVal = tempVal * (this.max - this.min) / 100 + this.min;
      return posVal;
    }
    _calcPositionForRangeJump(newThumbPos, decimalPoints) {
      const track = this.shadowRoot.querySelector("#rangeWrapper");
      let divisor, tempVal, newlowVal, posValue;
      divisor = window.getComputedStyle(track).width.split("p")[0] / calculatedBaseFontSize;
      tempVal = this._calcThumbPosition(newThumbPos);
      newlowVal = this._refineValueBasedOnStep(tempVal, decimalPoints);
      posValue = (newlowVal - this.min) * 100 / (this.max - this.min);
      newThumbPos = posValue * divisor / 100;
      return newThumbPos;
    }
    _refineValueBasedOnStep(tempVal, decimalPoints) {
      let diff, newVal, quotient, num;
      let val = Number(tempVal.toFixed(decimalPoints)) - this.min;
      quotient = Math.round(val / this.step);
      num = this.step * quotient;
      diff = val - num;
      diff = Number(diff.toFixed(decimalPoints));
      newVal = tempVal - diff;
      newVal = Number(newVal.toFixed(decimalPoints));
      return newVal;
    }
    decimalNumberPrecision() {
      let stepInString, minInString;
      stepInString = this.step.toString();
      minInString = this.min.toString();
      let numberOfDecimalPoints;
      numberOfDecimalPoints = 0;
      if (stepInString.includes(".")) {
        numberOfDecimalPoints = getDecimalNumberPrecision(stepInString);
      } else if (minInString.includes(".")) {
        numberOfDecimalPoints = getDecimalNumberPrecision(minInString);
      }
      return numberOfDecimalPoints;
    }
    _setThumbToPosition(newThumbPos) {
      let thumbId, thumb;
      thumbId = this._selectedThumb;
      if (thumbId === "handleTrack") {
        thumbId = "handleTrackWrapper";
      }
      thumb = this.shadowRoot.querySelector("#" + thumbId);
      thumb.style.left = newThumbPos + "rem";
    }
    _moveThumbOnRangeTrack(e8) {
      if (e8.touches) {
        e8.preventDefault();
      }
      if (!this._isDrag) {
        const range = this.shadowRoot.querySelector("#rangeWrapper");
        let offset, pointOnTrack, upPos, posVal;
        offset = range.getBoundingClientRect();
        pointOnTrack = (e8.clientX - offset.left) / calculatedBaseFontSize;
        if (e8.touches !== void 0) {
          pointOnTrack = (e8.touches[0].clientX - offset.left) / calculatedBaseFontSize;
        }
        posVal = this._thumbPosition(pointOnTrack);
        if (posVal < this.min) {
          posVal = this.min;
        }
        if (posVal > this.max) {
          posVal = this.max;
        }
        upPos = parseFloat(this.shadowRoot.querySelector("#upper").value);
        if (posVal > upPos) {
          this.shadowRoot.querySelector("#upper").value = posVal;
          this.upperValue = posVal;
          this._selectedThumb = "upper";
        } else {
          this.shadowRoot.querySelector("#lower").value = posVal;
          this.lowerValue = posVal;
          this._selectedThumb = "upper";
        }
        this._dispatchValueChangeEndEvent();
      }
    }
    _updateLowerValue() {
      this.lowerValue = Number(this.shadowRoot.querySelector("#lower").value);
    }
    _updateUpperValue() {
      this.upperValue = Number(this.shadowRoot.querySelector("#upper").value);
    }
    _onKeyPress(e8) {
      if (!(keyboardInteraction(e8, KEYCODE.ARROW_UP) || keyboardInteraction(e8, KEYCODE.ARROW_DOWN) || keyboardInteraction(e8, KEYCODE.ENTER))) {
        return;
      }
      let input = e8.target;
      this._updateSelectedThumbForValidation(e8);
      if (keyboardInteraction(e8, KEYCODE.ARROW_UP)) {
        this._valueValidation(input);
        input.focus();
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_DOWN)) {
        this._valueValidation(input);
        input.focus();
      }
      if (keyboardInteraction(e8, KEYCODE.ENTER)) {
        this._valueValidation(input);
      }
    }
    _handleOnBlur(e8) {
      this._updateSelectedThumbForValidation(e8);
      this._valueValidation(e8.target);
    }
    _updateSelectedThumbForValidation(e8) {
      if (e8.target.id === "lowerInputText") {
        this._selectedThumb = "lower";
      } else {
        this._selectedThumb = "upper";
      }
    }
    _valueValidation(input) {
      let value = input.value;
      if (this._selectedThumb === "lower") {
        input.value = this.getLowerValue(value, this.lowerValue, this.upperValue, this.min, this.max);
        this.lowerValue = Number(input.value);
      } else {
        input.value = this.getUpperValue(value, this.lowerValue, this.upperValue, this.min, this.max);
        this.upperValue = Number(input.value);
      }
      this._dispatchValueChangeEndEvent();
    }
    disconnectedCallback() {
      window.removeEventListener("mousemove", this.boundMove);
      window.removeEventListener("mouseup", this.boundUp);
      super.disconnectedCallback();
    }
    _dispatchValueChangeEndEvent() {
      if (this._selectedThumb === "handleTrackWrapper" || this._selectedThumb === "handleTrack") {
        dispatchCustomEvent(this, "range-value-change-end", {
          lowerValue: this.lowerValue,
          upperValue: this.upperValue
        });
      } else if (this._selectedThumb === "lower") {
        dispatchCustomEvent(this, "value-change-end", {
          lowerValue: this.lowerValue
        });
      } else {
        dispatchCustomEvent(this, "value-change-end", {
          upperValue: this.upperValue
        });
      }
    }
  };
  customElements.define("range-slider", SHRangeSlider);

  // ../sh-slider/src/sh-slider.lit.scss.js
  var sh_slider_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-slider-input-height=1.5rem] - height of show-value slider input
   */
  --sh-slider-input-height: 1.5rem;
  /* 
   * @cssprop [--sh-slider-input-width=2.5rem] - width of show-value slider input
   */
  --sh-slider-input-width: 2.5rem;
  /* 
   * @cssprop [--sh-slider-slider-area-height=2rem] - height of actual slider-area
   */
  --sh-slider-slider-area-height: 2rem;
  /* 
   * @cssprop [--sh-slider-slider-area-margin-top=0rem] - margin top of actual slider-area
   */
  --sh-slider-slider-area-margin-top: 0rem;
  /* 
   * @cssprop [--sh-slider-thumb-diameter=0.875rem] - diameter of the thumb
   */
  --sh-slider-thumb-diameter: 0.875rem;
  /* 
   * @cssprop [--sh-slider-track-height=0.125rem] - height of track
   */
  --sh-slider-track-height: 0.125rem;
  /* 
   * @cssprop [--sh-slider-input-padding=0.125rem 0.25rem] - padding of the input
   */
  --sh-slider-input-padding: 0.125rem 0.25rem;
  /* 
   * @cssprop [--sh-slider-horizontal-tooltip-thumb-distance=0.5625rem] - distance between thumb and tooltip in horizontal slider
   */
  --sh-slider-horizontal-tooltip-thumb-distance: 0.5625rem;
  /* 
   * @cssprop [--sh-slider-tooltip-width=2.5rem] - width of tooltip
   */
  --sh-slider-tooltip-width: 2.5rem;
  /* 
   * @cssprop [--sh-slider-tooltip-height=1.5rem] - height of tooltip
   */
  --sh-slider-tooltip-height: 1.5rem;
  /* 
   * @cssprop [--sh-slider-tick-diameter=0.375rem] - diameter of round ticks without hover
   */
  --sh-slider-tick-diameter: 0.375rem;
  /* 
   * @cssprop [--sh-slider-tick-diameter-on-hover=0.5rem] - diameter of round ticks with hover
   */
  --sh-slider-tick-diameter-on-hover: 0.5rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-tooltip-thumb-distance=var(--sh-slider-horizontal-tooltip-thumb-distance)] - the distance between the thumb and the tooltip for the vertical slider
   */
  --sh-slider-vertical-slider-tooltip-thumb-distance: var(--sh-slider-horizontal-tooltip-thumb-distance);
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-slider-distance=1rem] - the distance between the input and the slider for the vertical slider
   */
  --sh-slider-vertical-slider-input-slider-distance: 1rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-container-width=4.5rem] - the width of the container of input of vertical slider
   */
  --sh-slider-vertical-slider-input-container-width: 4.5rem;
  /* 
   * @cssprop [--sh-slider-vertical-slider-input-label-input-width=1.9375rem] - the width of the input of vertical slider
   */
  --sh-slider-vertical-slider-input-label-input-width: 1.9375rem;
  /* 
   * @cssprop [--sh-slider-step-tick-width=0.0625rem] - width of the step tick
   */
  --sh-slider-step-tick-width: 0.0625rem;
  /* 
   * @cssprop [--sh-slider-step-tick-height=0.5rem] - height of the step tick
   */
  --sh-slider-step-tick-height: 0.5rem;
  /* 
   * @cssprop [--sh-slider-range-input-separator-width=0.25rem] - width of range input separator
   */
  --sh-slider-range-input-separator-width: 0.25rem;
  /* 
   * @cssprop [--sh-slider-range-input-separator-side-margin=0.25rem] - margin left and margin right of range input separator
   */
  --sh-slider-range-input-separator-side-margin: 0.25rem;
  /* 
   * @cssprop [--sh-slider-step-tick-min-width=2rem] - min-width between step-ticks
   */
  --sh-slider-step-tick-min-width: 2rem;
  /* 
   * @cssprop [--sh-slider-arrow-controls-inter-icon-gap=0rem] - gap between the icons in arrow-controls
   */
  --sh-slider-arrow-controls-inter-icon-gap: 0rem;
}

:host {
  width: 100%;
  outline: 0;
  display: block;
}

:host([vertical]) {
  width: fit-content;
  width: -moz-fit-content;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

:host([vertical][right]) {
  float: right;
}

:host([show-range]) #inputText {
  display: none;
}

:host([vertical][direction-toggle]) .vertical-slider-wrapper,
:host([vertical][direction-toggle][show-controls]) arrow-controls {
  transform: rotate(180deg);
}

:host([vertical][direction-toggle][show-controls]) arrow-controls {
  transform-style: preserve-3d;
}

:host .outer-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  margin-top: var(--sh-slider-slider-area-margin-top);
}

:host .sliderWrapper {
  position: relative;
  width: 100%;
  height: var(--sh-slider-slider-area-height);
  outline: none;
  display: flex;
  align-items: center;
}

:host([show-controls]) .sliderWrapper {
  width: calc(100% - 2 * var(--sh-icon-size-m));
}

:host([vertical]) .verticalTrack {
  height: var(--sh-slider-track-height);
  width: 100%;
  position: relative;
  display: flex;
  outline: none;
  margin: 0;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-color: rgba(var(--ui-1), var(--opacity-6));
  opacity: unset;
  left: 0;
  right: 0;
  border: 0;
}

.sliderWrapper,
.vertical-wrapper {
  --halo-ring-radius: calc((2.5rem - var(--sh-slider-thumb-diameter)) / 2);
}

:host(.touch-device[vertical]) .verticalTrack {
  transform: rotate(0deg);
}

:host([vertical]) #inputLabel input {
  width: var(--sh-slider-vertical-slider-input-label-input-width);
  background: transparent;
  border: none;
  text-align: right;
  font: var(--body-1);
  padding: 0;
  outline: none;
  color: var(--text-secondary);
  -moz-appearance: textfield;
  height: fit-content;
  box-sizing: border-box;
}

:host([vertical]) #inputLabel input:focus {
  width: 100%;
}

:host([hide-max]) #inputLabel {
  width: var(--sh-slider-input-width);
}

input[type=range]::-webkit-slider-thumb {
  box-shadow: none;
}

.sliderTrack::-webkit-slider-thumb,
.verticalTrack::-webkit-slider-thumb {
  appearance: none;
  outline: 0;
  position: relative;
  width: var(--sh-slider-thumb-diameter);
  height: var(--sh-slider-thumb-diameter);
  cursor: pointer;
  border-radius: 50%;
  border: none;
  z-index: 1;
  background: rgba(var(--ui-5), var(--opacity-1));
  -webkit-appearance: none;
  user-select: none;
  -webkit-user-select: none;
  transition: var(--hover-transition-time) background;
}

:host(.touch-device) .sliderTrack::-webkit-slider-thumb,
:host(.touch-device) .verticalTrack::-webkit-slider-thumb {
  background-clip: padding-box;
  border: calc((2.5rem - var(--sh-slider-thumb-diameter)) / 2) solid transparent;
  box-sizing: unset;
}

:host(.touch-device) .sliderTrack::-webkit-slider-runnable-track,
:host(.touch-device) .verticalTrack::-webkit-slider-runnable-track {
  margin-left: calc(0rem - var(--halo-ring-radius));
  margin-right: calc(0rem - var(--halo-ring-radius));
}

.sliderTrack::-webkit-slider-runnable-track,
.verticalTrack::-webkit-slider-runnable-track {
  cursor: pointer;
  background: transparent;
}

.sliderTrack::-moz-range-track,
.verticalTrack::-moz-range-track {
  cursor: pointer;
  background: transparent;
}

.sliderTrack::-moz-range-progress,
.verticalTrack::-moz-range-progress {
  cursor: pointer;
}

.sliderTrack::-moz-range-thumb,
.verticalTrack::-moz-range-thumb {
  position: relative;
  width: var(--sh-slider-thumb-diameter);
  height: var(--sh-slider-thumb-diameter);
  cursor: pointer;
  border-radius: 50%;
  border: none;
  z-index: 1;
  background: rgba(var(--ui-5), var(--opacity-1));
  transition: var(--hover-transition-time) background;
  transform: translateZ(0);
}

:host(:not(.touch-device)) .sliderTrack::-webkit-slider-thumb:hover,
:host(:not(.touch-device)) .verticalTrack::-webkit-slider-thumb:hover,
:host([active-track]:not(.touch-device):not(:active)) .sliderTrack:hover::-webkit-slider-thumb,
:host([active-track-invert]:not(.touch-device):not(:active)) .sliderTrack:hover::-webkit-slider-thumb,
:host([active-track]:not(.touch-device):not(:active)) .verticalTrack:hover::-webkit-slider-thumb,
:host([active-track-invert]:not(.touch-device):not(:active)) .verticalTrack:hover::-webkit-slider-thumb {
  background: rgba(var(--ui-2), var(--opacity-1));
}

:host(:not(.touch-device)) .active.sliderTrack::-webkit-slider-thumb,
:host(:not(.touch-device)) .active.verticalTrack::-webkit-slider-thumb,
:host .active.sliderTrack::-webkit-slider-thumb,
:host .active.verticalTrack::-webkit-slider-thumb {
  background-color: rgba(var(--ui-3), var(--opacity-1));
}

:host(.touch-device) .active.sliderTrack::-webkit-slider-thumb,
:host(.touch-device) .active.verticalTrack::-webkit-slider-thumb {
  border: calc((2.5rem - var(--sh-slider-thumb-diameter)) / 2) solid rgba(var(--ui-3), var(--opacity-5));
}

:host(:not(.touch-device)) .sliderTrack::-moz-range-thumb:hover,
:host(:not(.touch-device)) .verticalTrack::-moz-range-thumb:hover,
:host([active-track]:not(.touch-device):not(:active)) .sliderTrack:hover::-moz-range-thumb,
:host([active-track-invert]:not(.touch-device):not(:active)) .sliderTrack:hover::-moz-range-thumb,
:host([active-track]:not(.touch-device)) .verticalTrack:hover::-moz-range-thumb,
:host([active-track-invert]:not(.touch-device):not(:active)) .verticalTrack:hover::-moz-range-thumb {
  background: rgba(var(--ui-2), var(--opacity-1));
}

.sliderTrack::-moz-range-thumb:active,
.verticalTrack::-moz-range-thumb:active {
  background: rgba(var(--ui-3), var(--opacity-1));
}

.sliderTrack::-webkit-slider-thumb:active,
.verticalTrack::-webkit-slider-thumb:active {
  background: rgba(var(--ui-3), var(--opacity-1));
}

:host(:not(.touch-device)) .active.sliderTrack::-moz-range-thumb,
:host(:not(.touch-device)) .active.verticalTrack::-moz-range-thumb,
:host .active.sliderTrack::-moz-range-thumb,
:host .active.verticalTrack::-moz-range-thumb {
  background: rgba(var(--ui-3), var(--opacity-1));
}

:host([vertical]) #inputLabel span {
  width: var(--sh-slider-vertical-slider-input-label-input-width);
  font: var(--body-1);
  color: rgba(var(--ui-1), var(--opacity-5));
  height: fit-content;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  flex-direction: row;
  box-sizing: border-box;
}

:host .sliderTrack {
  width: 100%;
  height: var(--sh-slider-track-height);
  outline: 0;
  background-color: rgba(var(--ui-1), var(--opacity-6));
  position: absolute;
  -moz-appearance: none;
  -webkit-appearance: none;
  margin: 0;
  opacity: unset;
  border: 0;
}

/* active-track styles */
:host([active-track]) .sliderTrack,
:host([vertical][active-track]) .verticalTrack {
  background: linear-gradient(to right, rgba(var(--ui-5), var(--opacity-1)) var(--gradient-value), rgba(var(--ui-1), var(--opacity-6)) 0%);
}

:host([active-track]) .active.sliderTrack,
:host([vertical][active-track]) .active.verticalTrack {
  background: linear-gradient(to right, rgba(var(--ui-3), var(--opacity-1)) var(--gradient-value), rgba(var(--ui-1), var(--opacity-6)) 0%) !important;
}

:host([active-track]:not(.touch-device)) .sliderTrack:hover,
:host([vertical][active-track]:not(.touch-device)) .verticalTrack:hover {
  background: linear-gradient(to right, rgba(var(--ui-2), var(--opacity-1)) var(--gradient-value), rgba(var(--ui-1), var(--opacity-6)) 0%);
}

/* active-track-invert styles */
:host([active-track-invert]) .sliderTrack,
:host([vertical][active-track-invert]) .verticalTrack {
  background: linear-gradient(to right, rgba(var(--ui-1), var(--opacity-6)) var(--gradient-value), rgba(var(--ui-5), var(--opacity-1)) 0%);
}

:host([active-track-invert]) .active.sliderTrack,
:host([vertical][active-track-invert]) .active.verticalTrack {
  background: linear-gradient(to right, rgba(var(--ui-1), var(--opacity-6)) var(--gradient-value), rgba(var(--ui-3), var(--opacity-1)) 0%) !important;
}

:host([active-track-invert]:not(.touch-device)) .sliderTrack:hover,
:host([vertical][active-track-invert]:not(.touch-device)) .verticalTrack:hover {
  background: linear-gradient(to right, rgba(var(--ui-1), var(--opacity-6)) var(--gradient-value), rgba(var(--ui-2), var(--opacity-1)) 0%);
}

:host([disabled][active-track]) #horizontalSlider,
:host([disabled][vertical][active-track]) #verticalSlider,
:host([disabled][active-track-invert]) #horizontalSlider,
:host([disabled][vertical][active-track-invert]) #verticalSlider {
  background: linear-gradient(to right, rgba(var(--ui-6), var(--opacity-1)) var(--gradient-value), rgba(var(--ui-1), var(--opacity-7)) 0%);
}

/* common styles */
.label-wrapper {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.slider-label {
  flex: 1 1 auto;
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: 0.2s all ease-in-out;
}

:host(:not([vertical])) .slider-label {
  padding-right: 0.5rem;
}

:host([vertical]) .slider-label {
  text-align: center;
}

.label-wrapper input {
  display: none;
  outline: 0;
  border: none;
  width: var(--sh-slider-input-width);
  height: var(--sh-slider-input-height);
  font: var(--body-1);
  line-height: var(--sh-slider-input-height);
  color: var(--text-secondary);
  background: rgba(var(--ui-1), var(--opacity-7));
  border-radius: 0.125rem;
  box-sizing: border-box;
  padding: var(--sh-slider-input-padding);
  transition: 0.2s all ease-in-out;
  text-align: center;
  -moz-appearance: textfield;
  flex-shrink: 0;
}

input::-webkit-inner-spin-button {
  display: none;
}

:host(:not([label])) .label-wrapper {
  display: none;
}

:host([show-value]) .label-wrapper input {
  display: inline-flex;
}

:host([show-value][vertical]) .label-wrapper input {
  display: none;
}

:host(:not([show-value])[vertical]) .label-wrapper {
  margin-bottom: var(--sh-slider-vertical-slider-input-slider-distance);
}

/* Disabled Styles */
:host([disabled]) {
  pointer-events: none;
}

:host([disabled]) ::-webkit-slider-thumb {
  background: rgba(var(--ui-6), var(--opacity-1));
}

:host([disabled]) ::-moz-range-thumb {
  background: rgba(var(--ui-6), var(--opacity-1));
}

:host([disabled]) #verticalSlider,
:host([disabled]) #horizontalSlider {
  background: rgb(var(--ui-1), var(--opacity-7));
}

:host([disabled]) .slider-label,
:host([disabled]) .label-wrapper input {
  color: var(--text-disabled);
  opacity: unset;
}

:host([disabled]) .tick-item,
:host(.touch-device[vertical][disabled]) .tick-item:after {
  background: rgba(var(--ui-1), var(--opacity-4));
}

:host([disabled]) #verticalInput {
  color: var(--text-disabled) !important;
  opacity: unset;
}

:host([show-controls][vertical]) arrow-controls {
  flex-direction: column;
  flex-shrink: 0;
}

:host .tick-item {
  cursor: pointer;
  border-radius: 50%;
  outline: 0;
  background: rgba(var(--ui-1), var(--opacity-1));
  -moz-appearance: none;
  -webkit-appearance: none;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
}

.ticks-list {
  position: absolute;
  height: fit-content;
  padding: 0;
  margin: 0 auto;
  display: flex;
  flex-direction: row;
  align-items: center;
  transition: var(--hover-transition-time) all;
}

:host([vertical]) .ticks-list {
  top: unset;
}

.ticks-list li {
  height: var(--sh-slider-tick-diameter);
  width: var(--sh-slider-tick-diameter);
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  list-style: none;
  position: absolute;
  margin: 0 !important;
}

:host(.touch-device[vertical]) .ticks-list li:after {
  content: "";
  position: absolute;
  height: var(--sh-slider-tick-diameter);
  width: var(--sh-slider-tick-diameter);
  z-index: -1;
  outline: 0;
  border-radius: 50%;
  margin: 0 !important;
  background: rgba(var(--ui-1), var(--opacity-1));
}

:host(:not(.touch-device)) .ticks-list li:hover {
  height: var(--sh-slider-tick-diameter-on-hover);
  width: var(--sh-slider-tick-diameter-on-hover);
  background: rgba(var(--ui-0), var(--opacity-1));
  -moz-user-select: none;
  -webkit-user-select: none;
  list-style: none;
  position: absolute;
}

.ticks-list li:active {
  -moz-user-select: none;
  -webkit-user-select: none;
}

:host(:not([show-value])) #inputLabel {
  display: none;
}

#inputLabel {
  background-color: rgba(var(--ui-1), var(--opacity-7));
  border-radius: 0.125rem;
  margin: auto;
  margin-bottom: var(--sh-slider-vertical-slider-input-slider-distance);
  width: var(--sh-slider-vertical-slider-input-container-width);
  height: var(--sh-slider-input-height);
  display: flex;
  box-sizing: border-box;
  vertical-align: middle;
  justify-content: center;
  align-items: center;
  flex: none;
  gap: 0.125rem;
}

:host(:not([vertical])) #inputLabel {
  display: none;
}

#sliderTooltip,
#verticalTooltip {
  width: var(--sh-slider-tooltip-width);
  height: var(--sh-slider-tooltip-height);
  display: none;
  position: absolute;
  pointer-events: none;
  outline: 0;
  text-align: center;
  background: var(--base-3);
  box-shadow: var(--shadow-raised);
  border-radius: 0.125rem;
  box-sizing: border-box;
  z-index: 5;
  justify-content: center;
  align-items: center;
  --thumb-radius: calc(var(--sh-slider-thumb-diameter) / 2);
  --value-percent: calc((var(--value) - var(--min)) / (var(--max) - var(--min)));
  --available-slider-length: calc((100% - var(--sh-slider-thumb-diameter)));
  --thumb-left-position: calc((var(--value-percent)) * (var(--available-slider-length)));
  --thumb-mid-position: calc(var(--thumb-left-position) + var(--thumb-radius));
}

#sliderTooltip {
  left: var(--thumb-mid-position);
  transform: translateX(-50%) translateY(calc(-50% - var(--thumb-radius) - var(--sh-slider-horizontal-tooltip-thumb-distance)));
}

#verticalTooltip {
  left: var(--thumb-mid-position);
  transform-origin: left center;
  transform: rotate(-90deg) translateX(calc(var(--thumb-radius) + var(--sh-slider-horizontal-tooltip-thumb-distance)));
}

:host([vertical][right]) #verticalTooltip {
  transform: rotate(-90deg) translateX(calc(-100% - var(--thumb-radius) - var(--sh-slider-horizontal-tooltip-thumb-distance)));
}

:host([vertical][direction-toggle]) #verticalTooltip {
  transform: rotate(90deg) translateX(calc(var(--thumb-radius) + var(--sh-slider-horizontal-tooltip-thumb-distance)));
}

:host([vertical][right][direction-toggle]) #verticalTooltip {
  transform: rotate(90deg) translateX(calc(-100% - var(--thumb-radius) - var(--sh-slider-horizontal-tooltip-thumb-distance)));
}

:host(:not([show-value]):hover:not(.touch-device)) #sliderTooltip,
:host(:not([show-value]):hover:not(.touch-device)) #verticalTooltip,
#label-wrapper.hover #sliderTooltip {
  display: flex;
}

:host .ticks_collision::-webkit-slider-thumb {
  background-color: rgba(var(--ui-0), var(--opacity-1)) !important;
}

:host(:not(.touch-device)) .ticks_collision::-webkit-slider-thumb:hover {
  background-color: rgba(var(--ui-2), var(--opacity-1)) !important;
}

:host(:not(.touch-device)) .active.ticks_collision::-webkit-slider-thumb {
  background-color: rgba(var(--ui-0), var(--opacity-1)) !important;
}

:host .ticks_collision::-moz-range-thumb {
  background-color: rgba(var(--ui-0), var(--opacity-1)) !important;
}

:host(:not(.touch-device)) .ticks_collision::-moz-range-thumb:hover {
  background-color: rgba(var(--ui-2), var(--opacity-1)) !important;
}

:host .sh-step-thumb-item {
  cursor: pointer;
  outline: 0;
  background: rgba(var(--ui-1), var(--opacity-6));
  -moz-appearance: none;
  -webkit-appearance: none;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
}

:host(.touch-device[vertical]) .tick_collision_z,
:host(.touch-device[vertical]) .sh-step-thumb-item {
  z-index: -1;
}

.step_ticks {
  display: none;
  flex-direction: row;
  align-items: center;
}

.step_ticks li {
  height: var(--sh-slider-step-tick-height);
  width: var(--sh-slider-step-tick-width);
  -moz-user-select: none;
  -webkit-user-select: none;
  list-style: none;
  position: absolute;
}

:host([disabled]) .sh-step-thumb-item {
  background: rgba(var(--ui-1), var(--opacity-7));
}

:host .markers.step_ticks {
  display: flex;
}

:host(:not([show-range])) .markers.step_ticks {
  height: fit-content;
}

/* vertical slider */
:host([vertical]) .vertical-slider-wrapper {
  width: 2rem;
  height: 100%;
  box-sizing: border-box;
  position: relative;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
}

:host([vertical]) .vertical-wrapper {
  transform: rotate(90deg);
  display: flex;
  width: fit-content;
  align-items: center;
}

/* tab-outline */
:host .tab_outline::-webkit-slider-thumb {
  outline: var(--focus-outline);
  background: rgba(var(--ui-2), var(--opacity-1));
}

:host .tab_outline::-moz-range-thumb {
  outline: var(--focus-outline);
  background: rgba(var(--ui-2), var(--opacity-1));
}

:host(:not([show-value])) .tab_tooltip#sliderTooltip,
:host(:not([show-value])) .tab_tooltip#verticalTooltip {
  display: flex;
}

:host([vertical]) .textbox_click#verticalMax {
  visibility: hidden;
  width: 0%;
  margin-left: 0px;
}

:host([vertical]) .text_align#verticalInput {
  text-align: center;
}

:host([vertical][hide-max]) #verticalMax {
  display: none;
}

:host([vertical][hide-max]) #verticalInput {
  width: 100%;
  text-align: center;
}

:host(.touch-device) input[type=range],
:host(.touch-device) input[type=range]:focus {
  user-select: none;
  -webkit-user-select: none;
}

:host([show-value][vertical]) .label-wrapper {
  margin-bottom: 0.25rem;
  flex-shrink: 0;
}

.tick-item:focus-visible {
  outline: var(--focus-outline);
}

.sh-step-thumb-item:focus-visible {
  outline: var(--focus-outline);
}`;

  // ../sh-slider/src/sh-slider.js
  var SHSlider = class extends SliderStepMarkerMixin(SliderInputRectifierMixin(ReadOnlyPropertiesMixin(s4))) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        value: { type: Number, reflect: true },
        min: { type: Number, reflect: true },
        max: { type: Number, reflect: true },
        step: { type: Number, reflect: true },
        showValue: { type: Boolean, reflect: true, attribute: "show-value" },
        disabled: { type: Boolean, reflect: true },
        showControls: {
          type: Boolean,
          reflect: true,
          attribute: "show-controls"
        },
        showRange: { type: Boolean, reflect: true, attribute: "show-range" },
        upperValue: { type: Number, reflect: true, attribute: "upper-value" },
        lowerValue: { type: Number, reflect: true, attribute: "lower-value" },
        hideMax: { type: Boolean, reflect: true, attribute: "hide-max" },
        ticks: { type: Array, reflect: true },
        vertical: { type: Boolean, reflect: true },
        directionToggle: {
          type: Boolean,
          reflect: true,
          attribute: "direction-toggle"
        },
        right: { type: Boolean, reflect: true },
        activeTrack: { type: Boolean, reflect: true, attribute: "active-track" },
        activeTrackInvert: { type: Boolean, reflect: true, attribute: "active-track-invert" },
        _renderedTicks: { type: Array, readOnly: true },
        stepMarkers: { type: Array, readOnly: true },
        _selectedThumb: { type: String },
        _isDrag: { type: Boolean, reflect: true },
        _ticksRendered: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [
        extendInteractiveArea(".sliderTrack::-webkit-slider-thumb, .verticalTrack::-webkit-slider-thumb"),
        extendInteractiveArea(".sliderTrack::-moz-range-thumb,.verticalTrack::-moz-range-thumb"),
        sh_slider_lit_scss_default
      ];
    }
    render() {
      return x`
      ${this.label && !this.showRange ? x` <div class="label-wrapper">
            <sh-text class="slider-label" size="body-1" color="secondary">${this.label}</sh-text>
            ${!this.vertical ? x` <input
                  id="inputText"
                  type="number"
                  min="${this.min}"
                  max="${this.max}"
                  step="${this.step}"
                  .value="${this.value}"
                  ?disabled="${this.disabled}"
                  @keyup="${this._onKeyPress}"
                  @blur="${this._handleOnBlur}"
                />` : ""}
          </div>` : ""}
      ${!this.showRange ? x` ${!this.vertical ? x` <div class="outer-wrapper">
                <div
                  class="sliderWrapper"
                  style="--value:${this.value}; --min:${this.min}; --max:${this.max}"
                >
                  <input
                    type="range"
                    id="horizontalSlider"
                    class="sliderTrack"
                    min="${this.min}"
                    max="${this.max}"
                    label="${this.label}"
                    step="${this.step}"
                    .value="${this.value}"
                    ?disabled="${this.disabled}"
                    @mousedown="${this._thumbDown}"
                    @mouseup="${this._thumbUp}"
                    @touchstart="${this._thumbDown}"
                    @touchmove="${() => {
        if (!this.showValue) {
          this._showTooltipAndUpdateValue();
        }
      }}"
                    @touchend="${this._thumbUp}"
                    @click="${this._updateValue}"
                  />
                  <sh-text id="sliderTooltip" color="secondary"> ${this.value} </sh-text>
                  <ul id="step_ticks" class="step_ticks">
                    ${this.stepMarkers.map((item) => x` <li
                        class="sh-step-thumb-item"
                        @click="${(e8) => this._onTickClick(e8)}"
                        data-value="${item.position}"
                        style="${item.style}"
                        tabindex="0"
                        @keyup="${(e8) => {
        if (e8.code === "Space" || e8.code === "Enter") {
          e8.target.click();
        }
      }}"
                      ></li>`)}
                  </ul>
                  ${this.ticks ? x` <ul id="ticks_list" class="ticks-list">
                        ${this._renderedTicks.map((item) => x` <li
                            class="tick-item"
                            tabindex="0"
                            data-value="${item.position}"
                            style="${item.style}"
                            @click="${(e8) => this._onTickClick(e8)}"
                            @keyup="${(e8) => {
        if (e8.code === "Space" || e8.code === "Enter") {
          e8.target.click();
        }
      }}"
                          ></li>`)}
                      </ul>` : ""}
                </div>
                ${this.showControls ? x` <arrow-controls
                      horizontal
                      .parentElement="${this}"
                      .min="${this.min}"
                      .max="${this.max}"
                      .step="${this.step}"
                      .value="${this.value}"
                      ?disabled="${this.disabled}"
                    ></arrow-controls>` : ""}
              </div>` : x` <div id="inputLabel">
                  <input
                    type="number"
                    id="verticalInput"
                    min="${this.min}"
                    max="${this.max}"
                    step="${this.step}"
                    .value="${this.value}"
                    ?disabled="${this.disabled}"
                    @keyup="${this._onKeyPress}"
                    @blur="${this._handleOnBlur}"
                    @focus="${this._verticalInputClickActions}"
                    @focusout="${this._verticalInputFousOutActions}"
                  />
                  <span
                    id="verticalMax"
                    @click="${this._verticalInputClickActions}"
                    @focusout="${this._verticalInputFousOutActions}"
                    >/${this.max}</span
                  >
                </div>
                <div class="vertical-slider-wrapper">
                  <div
                    class="vertical-wrapper"
                    style="--value:${this.value}; --min:${this.min}; --max:${this.max}"
                  >
                    <input
                      type="range"
                      id="verticalSlider"
                      class="verticalTrack"
                      min="${this.min}"
                      max="${this.max}"
                      label="${this.label}"
                      step="${this.step}"
                      .value="${this.value}"
                      ?disabled="${this.disabled}"
                      @mousedown="${this._thumbDown}"
                      @mouseup="${this._thumbUp}"
                      @touchstart="${this._thumbDown}"
                      @touchmove="${() => {
        if (!this.showValue) {
          this._showTooltipAndUpdateValue();
        }
      }}"
                      @touchend="${this._thumbUp}"
                      @click="${this._updateValue}"
                    />
                    <sh-text id="verticalTooltip" color="secondary"> ${this.value} </sh-text>
                    <ul id="vertical_step_ticks" class="step_ticks">
                      ${this.stepMarkers.map((item) => x` <li
                          class="sh-step-thumb-item"
                          @click="${(e8) => this._onTickClick(e8)}"
                          data-value="${item.position}"
                          style="${item.style}"
                          tabindex="0"
                          @keyup="${(e8) => {
        if (e8.code === "Space" || e8.code === "Enter") {
          e8.target.click();
        }
      }}"
                        ></li>`)}
                    </ul>
                    ${this.ticks ? x` <ul id="ticks_list" class="ticks-list">
                          ${this._renderedTicks.map((item) => x` <li
                              class="tick-item"
                              tabindex="0"
                              data-value="${item.position}"
                              style="${item.style}"
                              @click="${(e8) => this._onTickClick(e8)}"
                              @keyup="${(e8) => {
        if (e8.code === "Space" || e8.code === "Enter") {
          e8.target.click();
        }
      }}"
                            ></li>`)}
                        </ul>` : ""}
                  </div>
                </div>
                ${this.showControls ? x` <arrow-controls
                      .parentElement="${this}"
                      .min="${this.min}"
                      .max="${this.max}"
                      .step="${this.step}"
                      .value="${this.value}"
                      ?disabled="${this.disabled}"
                    ></arrow-controls>` : ""}`}` : x`
            <range-slider
              .label="${this.label}"
              .min="${this.min}"
              .max="${this.max}"
              .step="${this.step}"
              .lowerValue="${this.lowerValue}"
              .upperValue="${this.upperValue}"
              .showValue="${this.showValue}"
              ?disabled="${this.disabled}"
            ></range-slider>
          `}
    `;
    }
    constructor() {
      super();
      this.value = this.lowerValue = this.upperValue = 0;
      this.min = 0;
      this.max = 100;
      this.step = 1;
      this.label = "Label";
      this.ticks = this.stepMarkers = this._renderedTicks = [];
    }
    updated(changedProperties) {
      if (changedProperties.has("value")) {
        this._updateValue();
        this._tooltipSelection();
      }
      if (changedProperties.has("ticks")) {
        this._thumbTickCollisionCheck = true;
        this._renderTicks();
      }
      if (changedProperties.has("step")) {
        if (!this.showRange) {
          this._renderStepMarkers();
        }
        this._updateValue();
      }
      if (changedProperties.has("min") || changedProperties.has("max")) {
        this._renderTicks();
        if (!this.showRange) {
          this._renderStepMarkers();
        }
        this._updateValue();
        this._tooltipSelection();
      }
      if (changedProperties.has("disabled") && !this.showRange) {
        this._checkTickThumbCollision();
      }
      if (changedProperties.has("_isDrag")) {
        this._isDragObserver();
      }
      if (changedProperties.has("_ticksRendered")) {
        if (this._ticksRendered) {
          if (!this.showRange && this._thumbTickCollisionCheck) {
            this._checkTickThumbCollision();
            this._thumbTickCollisionCheck = false;
          }
          this._ticksRendered = false;
        }
      }
      const listOfProperties = [
        "value",
        "min",
        "max",
        "step",
        "label",
        "showControls",
        "showRange",
        "disabled"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    connectedCallback() {
      super.connectedCallback();
      this.browserResize = new ResizeObserver(() => {
        if (this.vertical) {
          const resizeChecker = this.shadowRoot.querySelector(".vertical-slider-wrapper");
          const input = this.shadowRoot.querySelector(".verticalTrack");
          const resizeCheckerHeight = resizeChecker.getBoundingClientRect().height / calculatedBaseFontSize;
          input.style.setProperty("width", `${resizeCheckerHeight}rem`);
          if (this.classList.contains("touch-device")) {
            this.verticalTickCollisionForTouchCheck();
          }
        }
        this._renderTicks();
        if (this.showRange) {
          this.shadowRoot.querySelector("range-slider")._generateHandleTrack();
          this.shadowRoot.querySelector("range-slider")._renderStepMarkersRange();
        } else {
          this._renderStepMarkers();
        }
      });
      this.browserResize.observe(this);
    }
    firstUpdated() {
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      if (!this.showRange) {
        if (this.showControls) {
          this.shadowRoot.querySelector("arrow-controls").addEventListener("control-value-change", (e8) => {
            e8.stopPropagation();
            this.value = e8.target.value;
          });
          this.shadowRoot.querySelector("arrow-controls").addEventListener("control-value-change-end", (e8) => {
            e8.stopPropagation();
            this._dispatchValueChangeEndEvent();
          });
        }
        let sliderThumb, tooltip;
        if (this.vertical) {
          sliderThumb = this.shadowRoot.querySelector(".verticalTrack");
          tooltip = this.shadowRoot.querySelector("#verticalTooltip");
        } else {
          sliderThumb = this.shadowRoot.querySelector(".sliderTrack");
          tooltip = this.shadowRoot.querySelector("#sliderTooltip");
        }
        sliderThumb.addEventListener("input", () => {
          this._tooltipSelection();
          this._updateValue();
        });
        sliderThumb.addEventListener("focus", () => this._handleFocus(sliderThumb, tooltip));
        sliderThumb.addEventListener("blur", () => this._handleBlur(sliderThumb, tooltip));
      } else {
        this.shadowRoot.querySelector("range-slider").addEventListener("lower-value-changed", (e8) => {
          this.lowerValue = e8.target.lowerValue;
        });
        this.shadowRoot.querySelector("range-slider").addEventListener("upper-value-changed", (e8) => {
          this.upperValue = e8.target.upperValue;
        });
      }
    }
    _handleFocus(thumb, tooltip) {
      thumb.onkeyup = (e8) => {
        tooltip.classList.add("tab_tooltip");
        if (keyboardInteraction(e8, KEYCODE.TAB)) {
          thumb.classList.add("tab_outline");
        }
        if (keyboardInteraction(e8, KEYCODE.ARROW_RIGHT) || keyboardInteraction(e8, KEYCODE.ARROW_UP)) {
          this._updateValue();
          this._dispatchValueChangeEndEvent();
        }
        if (keyboardInteraction(e8, KEYCODE.ARROW_LEFT) || keyboardInteraction(e8, KEYCODE.ARROW_DOWN)) {
          this._updateValue();
          this._dispatchValueChangeEndEvent();
        }
      };
    }
    _handleBlur(thumb, tooltip) {
      thumb.classList.remove("tab_outline");
      tooltip.classList.remove("tab_tooltip");
    }
    _renderTicks() {
      if (this.showRange) {
        return;
      }
      let input;
      if (this.vertical) {
        input = this.shadowRoot.querySelector("#verticalSlider");
      } else {
        input = this.shadowRoot.querySelector("#horizontalSlider");
      }
      const TICK_RADIUS_REM = parseFloat(getComputedStyle(this).getPropertyValue("--sh-slider-tick-diameter")) / 2;
      const containerLengthInRem = input.offsetWidth / calculatedBaseFontSize - 2 * TICK_RADIUS_REM;
      const markers = this.ticks.map((value) => {
        let current_position = (value - this.min) / (this.max - this.min);
        current_position = current_position * containerLengthInRem;
        let style;
        style = `left: ${current_position}rem`;
        return { style, position: value };
      });
      this.setReadOnlyProperties({ _renderedTicks: markers });
      this._ticksRendered = true;
    }
    _renderStepMarkers() {
      if (this.step === 0) {
        return;
      }
      const stepTickDistance = convertToPixel2(parseFloat(getComputedStyle(this).getPropertyValue("--sh-slider-step-tick-min-width")));
      let input, slider_step, containerLength;
      if (this.vertical) {
        input = this.shadowRoot.querySelector(".verticalTrack");
        slider_step = this.shadowRoot.querySelector("#vertical_step_ticks");
      } else {
        input = this.shadowRoot.querySelector(".sliderTrack");
        slider_step = this.shadowRoot.querySelector("#step_ticks");
      }
      containerLength = input.offsetWidth;
      const stepTickHalfWidth = parseFloat(getComputedStyle(this).getPropertyValue("--sh-slider-step-tick-width")) / 2;
      let ticksObject = this.getCalculatedStepDistance(containerLength, this.min, this.max, this.step, stepTickHalfWidth);
      if (ticksObject.distance >= stepTickDistance) {
        slider_step.classList.add("markers");
        this.calculatePoints(containerLength, stepTickHalfWidth);
      } else {
        slider_step.classList.remove("markers");
      }
    }
    _onTickClick(e8) {
      this.value = Number(e8.target.dataset.value);
    }
    _updateValue() {
      let input;
      if (!this.showRange) {
        if (this.vertical) {
          input = this.shadowRoot.querySelector(".verticalTrack");
        } else {
          input = this.shadowRoot.querySelector(".sliderTrack");
        }
        this.value = Number(input.value);
        this.trackHighlightUpdate();
      }
    }
    trackHighlightUpdate() {
      let sliderWrapper;
      if (this.vertical) {
        sliderWrapper = this.shadowRoot.querySelector(".vertical-wrapper");
      } else {
        sliderWrapper = this.shadowRoot.querySelector(".sliderWrapper");
      }
      if (this.activeTrack || this.activeTrackInvert) {
        const trackGradientValue = (this.value - this.min) / (this.max - this.min) * 100;
        sliderWrapper.style.setProperty("--gradient-value", `${trackGradientValue}%`);
      }
    }
    _verticalInputClickActions() {
      this.shadowRoot.querySelector("#verticalMax").classList.add("textbox_click");
      this.shadowRoot.querySelector("#verticalInput").classList.add("text_align");
      this.shadowRoot.querySelector("#verticalInput").focus();
    }
    _verticalInputFousOutActions() {
      this.shadowRoot.querySelector("#verticalMax").classList.remove("textbox_click");
      this.shadowRoot.querySelector("#verticalInput").classList.remove("text_align");
    }
    _tooltipSelection() {
      if (!this.showRange) {
        let sliderThumb, tooltip;
        if (this.vertical) {
          sliderThumb = this.shadowRoot.querySelector(".verticalTrack");
          tooltip = this.shadowRoot.querySelector("#verticalTooltip");
        } else {
          sliderThumb = this.shadowRoot.querySelector(".sliderTrack");
          tooltip = this.shadowRoot.querySelector("#sliderTooltip");
        }
        let newValue = Number((sliderThumb.value - sliderThumb.min) * 100 / (sliderThumb.max - sliderThumb.min));
        if (Number.isNaN(newValue)) {
          newValue = 0;
        }
        this._checkTickThumbCollision();
      }
    }
    _thumbDown() {
      this._isDrag = true;
      if (this.vertical) {
        this.shadowRoot.querySelector(".verticalTrack").classList.add("active");
      } else {
        this.shadowRoot.querySelector(".sliderTrack").classList.add("active");
      }
    }
    _showTooltipAndUpdateValue() {
      if (!this.showValue) {
        if (this.vertical) {
          this.shadowRoot.querySelector("#verticalTooltip").style.display = "flex";
        } else {
          this.shadowRoot.querySelector("#sliderTooltip").style.display = "flex";
        }
      }
      this._updateValue();
    }
    _thumbUp() {
      if (this._isDrag) {
        this._isDrag = false;
        if (this.vertical) {
          this.shadowRoot.querySelector("#verticalTooltip").style.removeProperty("display");
          this.shadowRoot.querySelector(".verticalTrack").classList.remove("active");
        } else {
          this.shadowRoot.querySelector("#sliderTooltip").style.removeProperty("display");
          this.shadowRoot.querySelector(".sliderTrack").classList.remove("active");
        }
      }
    }
    _isDragObserver() {
      if (!this._isDrag) {
        this._dispatchValueChangeEndEvent();
      }
    }
    _onKeyPress(e8) {
      if (!(keyboardInteraction(e8, KEYCODE.ARROW_UP) || keyboardInteraction(e8, KEYCODE.ARROW_DOWN) || keyboardInteraction(e8, KEYCODE.ENTER))) {
        return;
      }
      let input = e8.target;
      if (keyboardInteraction(e8, KEYCODE.ARROW_UP)) {
        this._valueValidation(input);
        input.focus();
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_DOWN)) {
        this._valueValidation(input);
        input.focus();
      }
      if (keyboardInteraction(e8, KEYCODE.ENTER)) {
        this._valueValidation(input);
      }
    }
    _handleOnBlur(e8) {
      this._valueValidation(e8.target);
    }
    _valueValidation(input) {
      let value = input.value;
      input.value = this.getValue(value, this.value, this.min, this.max);
      this.value = Number(input.value);
      this._dispatchValueChangeEndEvent();
    }
    verticalTickCollisionForTouchCheck() {
      const THUMB_RADIUS_REM = parseFloat(getComputedStyle(this).getPropertyValue("--sh-slider-thumb-diameter")) / 2;
      const THUMB_RADIUS_PX = convertToPixel2(THUMB_RADIUS_REM);
      const HALO_THUMB_DIAM_REM = 2.5;
      const HALO_THUMB_RADIUS_REM = HALO_THUMB_DIAM_REM / 2;
      const HALO_RING_RADIUS_REM = HALO_THUMB_RADIUS_REM - THUMB_RADIUS_REM;
      const input = this.shadowRoot.querySelector(".verticalTrack");
      let containerLength = input.offsetWidth - 2 * THUMB_RADIUS_PX;
      let current_position = (Number(input.value) - this.min) / (this.max - this.min);
      current_position = current_position * containerLength;
      const valuePositionLeft = current_position - convertToPixel2(HALO_RING_RADIUS_REM);
      const valuePositionRight = valuePositionLeft + convertToPixel2(HALO_THUMB_DIAM_REM);
      const TICK_RADIUS_REM = parseFloat(getComputedStyle(this).getPropertyValue("--sh-slider-tick-diameter")) / 2;
      const TICK_RADIUS_PX = convertToPixel2(TICK_RADIUS_REM);
      containerLength = input.offsetWidth - 2 * TICK_RADIUS_PX;
      const collisionArray = [];
      this.ticks.forEach((value) => {
        let current_position2 = (value - this.min) / (this.max - this.min);
        current_position2 = current_position2 * containerLength;
        collisionArray.push(this.detectCollision(valuePositionLeft, valuePositionRight, current_position2, current_position2 + 2 * TICK_RADIUS_PX));
      });
      const trackTicks = this.shadowRoot.querySelectorAll(".tick-item");
      for (let i7 = 0; i7 < trackTicks.length; ++i7) {
        if (collisionArray[i7]) {
          trackTicks[i7].classList.add("tick_collision_z");
        } else {
          trackTicks[i7].classList.remove("tick_collision_z");
        }
      }
    }
    detectCollision(thumbLeft, thumbRight, tickLeft, tickRight) {
      const noCollision = thumbLeft < tickLeft && thumbRight < tickLeft || thumbLeft > tickRight && thumbRight > tickRight;
      return !noCollision;
    }
    _checkTickThumbCollision() {
      let sliderThumb;
      const trackTicks = this.shadowRoot.querySelectorAll(".tick-item");
      if (this.vertical) {
        sliderThumb = this.shadowRoot.querySelector(".verticalTrack");
      } else {
        sliderThumb = this.shadowRoot.querySelector(".sliderTrack");
      }
      sliderThumb.classList.remove("ticks_collision");
      for (let i7 = 0; i7 < trackTicks.length; i7++) {
        trackTicks[i7].classList.remove("tick_collision_z");
      }
      for (let i7 = 0; i7 < trackTicks.length; i7++) {
        if (this.value === this.ticks[i7] && !this.disabled) {
          trackTicks[i7].classList.add("tick_collision_z");
          sliderThumb.classList.add("ticks_collision");
          break;
        }
      }
      if (this.classList.contains("touch-device") && this.vertical) {
        this.verticalTickCollisionForTouchCheck();
      }
    }
    _dispatchValueChangeEndEvent() {
      setTimeout(() => {
        dispatchCustomEvent(this, "value-change-end", { value: this.value });
      }, 0);
    }
  };
  customElements.define("sh-slider", SHSlider);

  // ../sh-spinner/src/sh-spinner.lit.scss.js
  var sh_spinner_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-spinner-width-s=2rem] - spinner width of s size
   */
  --sh-spinner-width-s: 2rem;
  /* 
   * @cssprop [--sh-spinner-height-s=2rem] - spinner height of s size
   */
  --sh-spinner-height-s: 2rem;
  /* 
   * @cssprop [--sh-spinner-width-m=3rem] - spinner width of m size
   */
  --sh-spinner-width-m: 3rem;
  /* 
   * @cssprop [--sh-spinner-height-m=3rem] - spinner height of m size
   */
  --sh-spinner-height-m: 3rem;
  /* 
   * @cssprop [--sh-spinner-border-width=0.25rem] - border width of s size
   */
  --sh-spinner-border-width: 0.25rem;
  /* 
   * @cssprop [--sh-spinner-label-height=1rem] - label height
   */
  --sh-spinner-label-height: 1rem;
  /* 
   * @cssprop [--sh-spinner-label-line-height=1.125rem] - label line height
   */
  --sh-spinner-label-line-height: 1.125rem;
  /* 
   * @cssprop [--sh-spinner-margin-top=0.5rem] - label margin top
   */
  --sh-spinner-margin-top: 0.5rem;
}

:host {
  transition: var(--transition-time) all ease-in-out;
  width: 100% !important;
  display: block;
}

:host([size=s]) .loader {
  width: var(--sh-spinner-width-s);
  height: var(--sh-spinner-height-s);
}

:host([size=m]) .loader {
  height: var(--sh-spinner-width-m);
  width: var(--sh-spinner-width-m);
}

:host([overlay]) {
  position: fixed;
  top: 0rem;
  left: 0rem;
  width: 100%;
  height: 100%;
  background-color: rgba(var(--ui-7), var(--opacity-4));
  z-index: 999;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

:host([overlay]) .loader {
  margin: 0;
}

.loader {
  margin: auto;
  border-radius: 50%;
  box-sizing: border-box;
  border-width: var(--sh-spinner-border-width);
  border-style: solid;
  border-left-color: rgba(var(--ui-1), var(--opacity-6));
  border-right-color: rgba(var(--ui-1), var(--opacity-6));
  border-bottom-color: rgba(var(--ui-1), var(--opacity-6));
  border-top-color: rgba(var(--ui-2), var(--opacity-1));
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: rotate 1s infinite linear;
  animation: rotate 1s infinite linear;
}

@-webkit-keyframes rotate {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes rotate {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
.spinner-label {
  font: var(--body-1);
  color: var(--text-secondary);
  text-align: center;
  margin-top: var(--sh-spinner-margin-top);
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  line-height: var(--sh-spinner-label-height);
  height: var(--sh-spinner-label-line-height);
}`;

  // ../sh-spinner/src/sh-spinner.js
  var SHSpinner = class SHSpinner2 extends s4 {
    constructor() {
      super(...arguments);
      this.size = "m";
      this.overlay = false;
    }
    static get styles() {
      return [sh_spinner_lit_scss_default];
    }
    render() {
      return x`
      <div class="loader"></div>
      ${this.label ? x` <div class="spinner-label">${this.label}</div> ` : ""}
    `;
    }
    update(changedProperties) {
      if (changedProperties.has("size")) {
        this._validateSize();
      }
      super.update(changedProperties);
    }
    _validateSize() {
      if (this.size !== "m" && this.size !== "s") {
        this.size = "m";
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHSpinner.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSpinner.prototype, "size", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHSpinner.prototype, "overlay", void 0);
  SHSpinner = __decorate([e4("sh-spinner")], SHSpinner);

  // ../sh-splash-screen/src/sh-splash-screen.lit.scss.js
  var sh_splash_screen_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-splash-screen-logo-height=2.5rem] - height of the logo
   */
  --sh-splash-screen-logo-height: 2.5rem;
  /* 
   * @cssprop [--sh-splash-screen-logo-padding=0.25rem 0rem 0rem 0.25rem] - padding of the logo
   */
  --sh-splash-screen-logo-padding: 0.25rem 0rem 0rem 0.25rem;
  /* 
   * @cssprop [--sh-splash-screen-data-wrapper-width=30rem] - width of the data wrapper
   */
  --sh-splash-screen-data-wrapper-width: 30rem;
  /* 
   * @cssprop [--sh-splash-screen-data-wrapper-min-height=26.25rem] - min height of the data wrapper
   */
  --sh-splash-screen-data-wrapper-min-height: 26.25rem;
  /* 
   * @cssprop [--sh-splash-screen-data-wrapper-margin=1rem auto 0rem] - margin of the data wrapper
   */
  --sh-splash-screen-data-wrapper-margin: 1rem auto 0rem;
  /* 
   * @cssprop [--sh-splash-screen-label-font-size=1.875rem] - font size of the label
   */
  --sh-splash-screen-label-font-size: 1.875rem;
  /* 
   * @cssprop [--sh-splash-screen-label-line-height=2rem] - line height of the label
   */
  --sh-splash-screen-label-line-height: 2rem;
  /* 
   * @cssprop [--sh-splash-screen-label-margin-top=1rem] - margin top of the label
   */
  --sh-splash-screen-label-margin-top: 1rem;
  /* 
   * @cssprop [--sh-splash-screen-label-margin-bottom=2rem] - margin bottom of the label when version is not defined
   */
  --sh-splash-screen-label-margin-bottom: 2rem;
  /* 
   * @cssprop [--sh-splash-screen-header-2-margin-top=0.5rem] - margin top of the header 2
   */
  --sh-splash-screen-header-2-margin-top: 0.5rem;
  /* 
   * @cssprop [--sh-splash-screen-header-2-margin-bottom=2rem] - margin top of the header 2
   */
  --sh-splash-screen-header-2-margin-bottom: 2rem;
  /* 
   * @cssprop [--sh-splash-screen-header-2-line-height=1.75rem] - line height of the header 2
   */
  --sh-splash-screen-header-2-line-height: 1.75rem;
  /* 
   * @cssprop [--sh-splash-screen-data-wrapper-margin-bottom-slotted=0.5rem] - margin bottom of data wrapper
   */
  --sh-splash-screen-data-wrapper-margin-bottom-slotted: 0.5rem;
  /* 
   * @cssprop [--sh-splash-screen-footer-wrapper-margin-top=1.5rem] - margin top of footer wrapper
   */
  --sh-splash-screen-footer-wrapper-margin-top: 1.5rem;
  /* 
   * @cssprop [--sh-splash-screen-footer-wrapper-margin-bottom=1rem] - margin bottom of footer wrapper
   */
  --sh-splash-screen-footer-wrapper-margin-bottom: 1rem;
  /* 
   * @cssprop [--sh-splash-screen-footer-wrapper-margin-left-slotted-items=0.5rem] - margin left of footer wrapper slotted items
   */
  --sh-splash-screen-footer-wrapper-margin-left-slotted-items: 0.5rem;
  /* 
   * @cssprop [--sh-splash-screen-footer-text-margin-top=1rem] - margin top of footer text
   */
  --sh-splash-screen-footer-text-margin-top: 1rem;
  /* 
   * @cssprop [--sh-splash-screen-footer-text-min-height=2rem] - min height of footer text
   */
  --sh-splash-screen-footer-text-min-height: 2rem;
  /* 
   * @cssprop [--sh-splash-screen-footer-text-slotted-margin-bottom=0.25rem] - margin bottom of slotted item in footer text
   */
  --sh-splash-screen-footer-text-slotted-margin-bottom: 0.25rem;
  /* 
   * @cssprop [--sh-splash-screen-modal-min-height=35rem] - min height of the modal
   */
  --sh-splash-screen-modal-min-height: 35rem;
  /* 
   * @cssprop [--sh-splash-screen-modal-width=50rem] - width of the modal
   */
  --sh-splash-screen-modal-width: 50rem;
  /* 
   * @cssprop [--sh-splash-screen-image-margin=-1rem -1rem -1rem 1rem] - margin of the image
   */
  --sh-splash-screen-image-margin: -1rem -1rem -1rem 1rem;
  /* 
   * @cssprop [--sh-splash-screen-image-border-radius=0rem 0.125rem 0.125rem 0rem] - border radius of the image
   */
  --sh-splash-screen-image-border-radius: 0rem 0.125rem 0.125rem 0rem;
}

:host {
  position: absolute;
  top: 0rem;
  left: 0rem;
  height: 100%;
  width: 100%;
  z-index: 5;
  align-items: center;
  justify-content: center;
  display: flex;
  background-color: rgba(0, 0, 0, 0.6);
}

sh-card {
  height: 100%;
  width: 100%;
}

:host([modal]) sh-card {
  height: fit-content;
  height: -moz-fit-content;
  height: -ms-fit-content;
  min-height: var(--sh-splash-screen-modal-min-height);
  width: var(--sh-splash-screen-modal-width);
  max-width: calc(100% - 1rem);
}

.logo {
  padding: var(--sh-splash-screen-logo-padding);
  height: var(--sh-splash-screen-logo-height);
  min-height: var(--sh-splash-screen-logo-height);
  width: fit-content;
  width: -moz-fit-content;
  width: -ms-fit-content;
}

.logo img {
  height: 100%;
}

.siemens {
  fill: var(--logo-2);
}

.healthineers {
  fill: var(--logo-1);
}

/* progress bar */
:host(:not([progress])) sh-progress,
:host([progress]) .data-wrapper ::slotted(*) {
  display: none;
}

.data-wrapper > ::slotted(*) {
  margin-bottom: var(--sh-splash-screen-data-wrapper-margin-bottom-slotted);
}

.data-wrapper {
  width: var(--sh-splash-screen-data-wrapper-width);
  max-width: 100%;
  min-height: var(--sh-splash-screen-data-wrapper-min-height);
  margin: var(--sh-splash-screen-data-wrapper-margin);
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

:host(:not([label])) .label {
  display: none;
}

.label {
  text-align: center;
  font-size: var(--sh-splash-screen-label-font-size);
  line-height: var(--sh-splash-screen-label-line-height);
  margin-top: var(--sh-splash-screen-label-margin-top);
  word-break: break-word;
}

:host([label-alignment=left]) .label,
:host([label-alignment=left]) .version {
  text-align: left;
}

:host(:not([version]):not([sub-headline])) .label {
  margin-bottom: var(--sh-splash-screen-label-margin-bottom);
}

sh-text[header-2] {
  margin-top: var(--sh-splash-screen-header-2-margin-top);
  margin-bottom: var(--sh-splash-screen-header-2-margin-bottom);
  overflow: hidden;
  text-align: center;
  font: var(--header-2);
  line-height: var(--sh-splash-screen-header-2-line-height);
}

.content-container {
  display: flex;
  height: 100%;
}

.content-wrapper {
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
}

:host([image]) .content-wrapper {
  width: calc(50% - 0.5rem);
}

/* footer */
.footer-wrapper {
  width: 100%;
  display: flex;
  margin-top: var(--sh-splash-screen-footer-wrapper-margin-top);
  margin-bottom: var(--sh-splash-screen-footer-wrapper-margin-bottom);
  justify-content: flex-end;
  align-items: center;
}

.footer-wrapper > ::slotted(sh-button) {
  margin-left: var(--sh-splash-screen-footer-wrapper-margin-left-slotted-items);
}

.info {
  display: none;
}

.footer-text,
:host([empty-info]) .info {
  display: inline-grid;
  align-items: self-end;
  margin-top: var(--sh-splash-screen-footer-text-margin-top);
  min-height: var(--sh-splash-screen-footer-text-min-height);
  overflow: hidden;
}

.footer-text > ::slotted(*:not(:last-child)) {
  margin-bottom: var(--sh-splash-screen-footer-text-slotted-margin-bottom);
}

:host(:not([info])) .info {
  display: none;
}

:host([info][empty-info]) .footer-text {
  display: none;
}

/* image */
:host([image]) .image {
  flex: 1;
  margin: var(--sh-splash-screen-image-margin);
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
  border-radius: var(--sh-splash-screen-image-border-radius);
}

@media only screen and (max-width: 30rem) {
  .logo {
    margin: auto;
  }
}
@media only screen and (max-width: 48rem) {
  :host([sh-scale=s]) .card {
    height: 100% !important;
    width: 100% !important;
    max-height: unset !important;
    max-width: unset !important;
    min-height: fit-content;
  }
  :host([sh-scale=s]) .content-wrapper {
    width: 100% !important;
  }
  :host([sh-scale=s]) .info {
    text-align: center;
  }
  :host([sh-scale=s]) .image {
    display: none;
  }
}
@media only screen and (max-width: 62rem) {
  :host([sh-scale=m]) .card {
    height: 100% !important;
    width: 100% !important;
    max-height: unset !important;
    max-width: unset !important;
    min-height: fit-content;
  }
  :host([sh-scale=m]) .content-wrapper {
    width: 100% !important;
  }
  :host([sh-scale=m]) .info {
    text-align: center;
  }
  :host([sh-scale=m]) .image {
    display: none;
  }
}
@media only screen and (max-width: 72rem), (max-height: 51rem) {
  :host([sh-scale=l]) .card {
    height: 100% !important;
    width: 100% !important;
    max-height: unset !important;
    max-width: unset !important;
    min-height: fit-content;
  }
  :host([sh-scale=l]) .content-wrapper {
    width: 100% !important;
  }
  :host([sh-scale=l]) .info {
    text-align: center;
  }
  :host([sh-scale=l]) .image {
    display: none;
  }
}
@media only screen and (max-width: 84rem), (max-height: 60rem) {
  :host([sh-scale=xl]) .card {
    height: 100% !important;
    width: 100% !important;
    max-height: unset !important;
    max-width: unset !important;
    min-height: fit-content;
  }
  :host([sh-scale=xl]) .content-wrapper {
    width: 100% !important;
  }
  :host([sh-scale=xl]) .info {
    text-align: center;
  }
  :host([sh-scale=xl]) .image {
    display: none;
  }
}`;

  // ../sh-splash-screen/src/sh-splash-screen.js
  var SHSplashScreen = class SHSplashScreen2 extends s4 {
    constructor() {
      super(...arguments);
      this.modal = false;
      this.label = "Product Name";
    }
    static get styles() {
      return [sh_splash_screen_lit_scss_default, sharedStyles];
    }
    render() {
      return x`<sh-card class="card" part="splash-card">
      <div class="content-container" ?empty-info=${this.emptyInfo}>
        <div class="content-wrapper" part="splash-content-wrapper">
          <div class="logo">
            ${this.logo ? x` <img .src="${this.logo}" /> ` : x` <svg
                  xmlns:svg="http://www.w3.org/2000/svg"
                  xmlns="http://www.w3.org/2000/svg"
                  version="1.1"
                  style="height:100%"
                  viewBox="-1.24339497 -1.24339497 179.20878994 43.93328894"
                >
                  <path
                    class="healthineers"
                    d="m 146.66688,22.51125 c 0.23875,0.23875 0.55125,0.35875 0.865,0.35875 0.3125,0 0.62625,-0.12 0.86375,-0.35875 0.24,-0.23875 0.35875,-0.55125 0.35875,-0.865 0,-0.3125 -0.11875,-0.625 -0.35875,-0.865 -0.2375,-0.23875 -0.55125,-0.3575 -0.86375,-0.3575 -0.31375,0 -0.62625,0.11875 -0.865,0.3575 -0.23875,0.24 -0.35875,0.5525 -0.35875,0.865 0,0.31375 0.12,0.62625 0.35875,0.865 m 6.16875,-6.16863 c 0.31,0.31 0.71625,0.465 1.12375,0.465 0.40625,0 0.81374,-0.155 1.12375,-0.465 0.31125,-0.31 0.46499,-0.7175 0.46499,-1.12375 0,-0.4075 -0.15375,-0.81375 -0.46499,-1.12375 -0.31001,-0.31 -0.7175,-0.46625 -1.12375,-0.46625 -0.4075,0 -0.81375,0.15625 -1.12375,0.46625 -0.31001,0.31 -0.465,0.71625 -0.465,1.12375 0,0.40625 0.155,0.81375 0.465,1.12375 m -0.008,12.84888 c 0.31,0.31 0.71625,0.465 1.12375,0.465 0.40625,0 0.81375,-0.155 1.12375,-0.465 0.31125,-0.31 0.465,-0.7175 0.465,-1.12375 0,-0.4075 -0.15376,-0.81375 -0.465,-1.12375 -0.31,-0.31 -0.7175,-0.46625 -1.12375,-0.46625 -0.4075,0 -0.81375,0.15625 -1.12375,0.46625 -0.31,0.31 -0.465,0.71625 -0.465,1.12375 0,0.40625 0.155,0.81375 0.465,1.12375 m 6.09812,-18.93988 c 0.40375,0.40375 0.9325,0.605 1.46125,0.605 0.52875,0 1.0575,-0.20125 1.46125,-0.605 0.40375,-0.40375 0.605,-0.9325 0.605,-1.46125 0,-0.52875 -0.20125,-1.0575 -0.605,-1.46125 -0.40375,-0.40375 -0.9325,-0.605 -1.46125,-0.605 -0.52875,0 -1.0575,0.20125 -1.46125,0.605 -0.40375,0.40375 -0.605,0.9325 -0.605,1.46125 0,0.52875 0.20125,1.0575 0.605,1.46125 m -0.008,12.84875 c 0.40375,0.40375 0.9325,0.605 1.46125,0.605 0.52875,0 1.0575,-0.20125 1.46125,-0.605 0.40375,-0.40375 0.605,-0.9325 0.605,-1.46125 0,-0.52875 -0.20125,-1.0575 -0.605,-1.46125 -0.40375,-0.40375 -0.9325,-0.605 -1.46125,-0.605 -0.52875,0 -1.0575,0.20125 -1.46125,0.605 -0.40375,0.40375 -0.605,0.9325 -0.605,1.46125 0,0.52875 0.20125,1.0575 0.605,1.46125 m -0.007,12.84925 c 0.40375,0.40375 0.9325,0.605 1.46125,0.605 0.52875,0 1.0575,-0.20125 1.46125,-0.605 0.40375,-0.40375 0.605,-0.9325 0.605,-1.46125 0,-0.52875 -0.20125,-1.0575 -0.605,-1.46125 -0.40375,-0.40375 -0.9325,-0.605 -1.46125,-0.605 -0.52875,0 -1.0575,0.20125 -1.46125,0.605 -0.40375,0.40375 -0.605,0.9325 -0.605,1.46125 0,0.52875 0.20125,1.0575 0.605,1.46125 m 5.99688,-18.839 c 0.52375,0.525 1.21125,0.78625 1.89875,0.78625 0.68875,0 1.37625,-0.26125 1.90125,-0.78625 0.52375,-0.52375 0.78625,-1.21125 0.78625,-1.89875 0,-0.6875 -0.2625,-1.375 -0.7875,-1.9 -0.525,-0.525 -1.2125,-0.7875 -1.9,-0.7875 -0.6875,0 -1.375,0.2625 -1.89875,0.78625 -0.525,0.525 -0.7875,1.2125 -0.7875,1.9 0,0.68875 0.2625,1.37625 0.7875,1.9 m -0.006,12.84925 c 0.52375,0.525 1.21125,0.78625 1.89875,0.78625 0.68875,0 1.37625,-0.26125 1.90125,-0.78625 0.52375,-0.525 0.78625,-1.21125 0.78625,-1.89875 0,-0.6875 -0.2625,-1.375 -0.7875,-1.9 -0.525,-0.525 -1.2125,-0.7875 -1.9,-0.7875 -0.6875,0 -1.375,0.26125 -1.89875,0.78625 -0.525,0.525 -0.7875,1.2125 -0.7875,1.9 0,0.68875 0.2625,1.375 0.7875,1.9 m 5.85787,-5.858 c 0.6825,0.6825 1.575,1.02375 2.47,1.02375 0.89375,0 1.78625,-0.34125 2.46875,-1.02375 0.6825,-0.6825 1.02375,-1.57625 1.02375,-2.47 0,-0.89375 -0.34125,-1.78625 -1.02375,-2.46875 -0.6825,-0.6825 -1.575,-1.02375 -2.46875,-1.02375 -0.895,0 -1.7875,0.34125 -2.47,1.02375 -0.6825,0.6825 -1.02375,1.575 -1.02375,2.46875 0,0.89375 0.34125,1.7875 1.02375,2.47"
                    style="fill-opacity:1;fill-rule:nonzero;stroke:none"
                  ></path>

                  <path
                    class="siemens"
                    d="m 132.43,15.29 0,-3.0175 c 1.70125,0.54125 3.22125,0.81125 4.5575,0.81125 1.82375,0 2.73625,-0.48125 2.73625,-1.445 0,-0.36 -0.13,-0.66125 -0.3875,-0.90625 -0.2725,-0.26 -0.9725,-0.61875 -2.1,-1.07875 -2.0025,-0.82 -3.31625,-1.525 -3.93,-2.11375 -0.79,-0.76375 -1.18625,-1.7375 -1.18625,-2.92375 0,-1.5025 0.57375,-2.65 1.7275,-3.44 C 134.9825,0.3925 136.46625,0 138.295,0 c 1.02625,0 2.3575,0.16375 3.99,0.49125 l 0.3775,0.065 0,2.90125 c -1.41875,-0.56625 -2.7375,-0.84875 -3.96125,-0.84875 -1.705,0 -2.5575,0.47 -2.5575,1.41375 0,0.35125 0.1725,0.63875 0.51625,0.8625 0.27375,0.17125 1.07,0.5525 2.38375,1.14375 1.85,0.82625 3.08875,1.545 3.71125,2.1575 0.735,0.72625 1.1025,1.665 1.1025,2.8175 0,1.65375 -0.7175,2.91625 -2.1475,3.78625 -1.1725,0.70375 -2.68875,1.05625 -4.5425,1.05625 -1.56875,0 -3.14875,-0.185 -4.7375,-0.55625 m -6.0335,-15.02513 0,10.22375 -5.24375,-10.22375 -4.945,0 0,15.2725 3.005,0 0,-10.36 5.385,10.36 4.80375,0 0,-15.2725 -3.005,0 z m -24.11275,0 0,15.2725 11.1175,0 0,-2.91875 -7.00625,0 0,-3.62375 5.945,0 0,-2.51875 -5.945,0 0,-3.4475 6.82875,0 0,-2.76375 -10.94,0 z m -9.16475,0 -3.94,9.7575 -3.84125,-9.7575 -5.53125,0 0,15.2725 3.005,0 0,-10.8125 4.3925,10.96625 2.645,0 4.47875,-10.96625 0,10.8125 4.04375,0 0,-15.2725 -5.2525,0 z m -27.214,0 0,15.2725 11.11625,0 0,-2.91875 -7.005,0 0,-3.62375 5.94375,0 0,-2.51875 -5.94375,0 0,-3.4475 6.82875,0 0,-2.76375 -10.94,0 z m -8.1775,15.27163 2.1325,0 2.13375,0 0,-7.63625 0,-7.63625 -2.13375,0 -2.1325,0 0,7.63625 0,7.63625 z M 43.89188,15.29 l 0,-3.0175 c 1.71624,0.54125 3.23499,0.81125 4.55749,0.81125 1.82375,0 2.73626,-0.48125 2.73626,-1.445 0,-0.36 -0.13376,-0.66125 -0.39875,-0.90625 -0.27376,-0.26 -0.96875,-0.61875 -2.09001,-1.07875 C 46.68813,8.8275 45.37563,8.1225 44.76562,7.54 43.97812,6.77 43.58187,5.8 43.58187,4.62625 c 0,-1.50875 0.57625,-2.66 1.7275,-3.45 C 46.44563,0.3925 47.92813,0 49.75437,0 c 1.00751,0 2.46501,0.185 4.37,0.55625 l 0,2.90125 c -1.41749,-0.56625 -2.735,-0.84875 -3.95,-0.84875 -1.71375,0 -2.56999,0.47 -2.56999,1.41375 0,0.35125 0.17374,0.63875 0.51875,0.8625 0.28749,0.17875 1.07874,0.56 2.3725,1.14375 1.86249,0.82625 3.10499,1.545 3.72125,2.1575 0.73374,0.72625 1.10249,1.665 1.10249,2.8175 0,1.65375 -0.71999,2.91625 -2.15999,3.78625 -1.16375,0.70375 -2.67626,1.05625 -4.53125,1.05625 -1.5675,0 -3.14626,-0.185 -4.73625,-0.55625"
                    style="fill-opacity:1;fill-rule:nonzero;stroke:none"
                  ></path>

                  <path
                    class="healthineers"
                    d="m 56.56775,30.56875 3.44875,0 0,-2.87 -3.44875,0 0,-4.15875 -3.65875,0 0,4.16 -2.03,0 0,2.87 2.03,0 0,6.5 c 0,2.2125 0.21,4.37 4.00125,4.37 1.15875,0 2.5525,-0.34125 3.34375,-0.84125 l -0.79125,-2.45 c -0.5775,0.2375 -1.13125,0.4225 -1.60625,0.4225 -0.97375,0 -1.28875,-0.58 -1.28875,-2.0275 l 0,-5.975 z m 86.37162,-2.10438 0.01,-0.0312 c -1.165,-0.7625 -2.6925,-1.2225 -4.35875,-1.135 -2.705,0.14125 -4.83125,1.75375 -4.68375,4.54 0.14625,2.78875 2.17875,3.44625 4.17875,3.92125 1.14875,0.2825 2.10875,0.4975 2.1625,1.5225 0.0525,1 -0.6375,1.43125 -1.60875,1.4825 -1.19,0.0612 -2.695,-0.4675 -3.665,-0.96625 l -1.09126,2.51 c 0.76876,0.51375 2.74875,1.24625 5.08,1.125 3.04625,-0.16 5.04,-1.76375 4.885,-4.73625 -0.14375,-2.735 -2.33125,-3.3325 -4.28124,-3.8375 -1.20125,-0.305 -2.08625,-0.6025 -2.14125,-1.6275 -0.045,-0.86875 0.6475,-1.2475 1.515,-1.29375 0.89875,-0.0462 1.86625,0.3475 2.89375,1.0675 l 1.105,-2.54125 z m -14.82687,4.289 c 0.0525,-1.39375 0.895,-2.29 2.21125,-2.29 0.68375,0 1.3175,0.18375 1.8675,0.47375 L 132.85,27.77837 c -0.63125,-0.3425 -1.44625,-0.47375 -2.185,-0.47375 -1.23625,0 -2.52625,0.73625 -3.1575,2.29 l -0.3425,-1.89625 -2.975,0 0.26375,2.3175 0,11.02875 3.65875,0 0,-8.29125 z m -40.03688,8.29188 0,-8.555 c 0,-1.26375 0.89626,-2.36875 2.29001,-2.36875 1.39625,0 1.63124,1.07875 1.63124,2.52625 l 0,8.3975 3.65875,0 0,-9.10875 c 0,-3.1575 -1.57875,-4.6325 -4.18374,-4.6325 -1.76376,0 -3.08,0.73875 -3.97501,1.975 l -0.26375,-1.58 -3.05375,0 0.23751,2.475 0,10.87125 3.65874,0 z M 77.35125,23.52912 c 0,0.555 0.19375,1.025 0.53875,1.3575 0.345,0.33125 0.84125,0.525 1.4475,0.525 0.5925,0 1.09625,-0.19375 1.45,-0.525 0.355,-0.3325 0.56125,-0.8025 0.56125,-1.3575 0,-0.51625 -0.20625,-0.98625 -0.56125,-1.32875 -0.35375,-0.34125 -0.8575,-0.55375 -1.45,-0.55375 -0.59375,0 -1.09,0.2125 -1.4375,0.55375 -0.34875,0.3425 -0.54875,0.8125 -0.54875,1.32875 m 0.16812,17.5165 1.83001,0 1.82875,0 0,-6.6725 0,-6.67375 -1.82875,0 -1.83001,0 0,6.67375 0,6.6725 z m -10.8175,-3.7e-4 0,-8.6075 c 0,-1.2375 0.89501,-2.31625 2.2375,-2.31625 1.39501,0 1.68376,1.0525 1.68376,2.42125 l 0,8.5025 3.65875,0 0,-9.05375 c 0,-3.13375 -1.5,-4.6875 -4.26376,-4.6875 -1.29,0 -2.47375,0.47375 -3.31625,1.36875 l 0,-5.1325 -3.65874,0 0,17.505 3.65874,0 z m -22.82162,-17.4785 0,13.50375 c 0,2.21125 0.21,4.37 4.00125,4.37 1.15875,0 2.5525,-0.34125 3.3425,-0.8425 l -0.79,-2.44875 c -0.57875,0.2375 -1.13125,0.4225 -1.60375,0.4225 -0.97625,0 -1.29125,-0.58 -1.29125,-2.0275 l 0,-12.9775 -3.65875,0 z m -3.05338,17.4785 -0.26374,-2.6575 0,-10.11 c -2,-0.73625 -3.94876,-0.97375 -4.84375,-0.97375 -4.65751,0 -6.97501,3.0275 -6.97501,7.66125 0,3.5525 1.29001,6.44875 5.10625,6.44875 1.4225,0 2.7375,-0.52625 3.52751,-1.7375 l 0.1325,0.0275 0.18374,1.34125 3.1325,0 z M 36.93063,36.7815 c 0,0.97375 -0.78875,1.97375 -2.15751,1.97375 -1.94874,0 -2.39625,-1.86875 -2.39625,-4.00125 0,-2.58 0.7375,-4.7375 2.89625,-4.7375 0.68376,0 1.315,0.13125 1.65751,0.28875 l 0,6.47625 z M 9.13375,23.54075 l 0,6.975 -5.37,0 0,-6.975 -3.76375,0 0,17.505 3.76375,0 0,-7.23875 5.37,0 0,7.23875 3.765,0 0,-17.505 -3.765,0 z m 17.50512,7.60712 c 0,-2.5 -1.71125,-3.84375 -4.37,-3.84375 -4.31624,0 -6.55375,3.52875 -6.55375,7.3975 0,3.94875 1.79001,6.73875 6.26376,6.73875 2.65999,0 4.5025,-1.21125 4.8175,-1.47375 l -1.0525,-2.4475 c -0.73625,0.49875 -1.86875,1.13125 -3.29001,1.13125 -2.00124,0 -2.84375,-1.34375 -3.02749,-2.60625 3.185,-0.13125 7.21249,-0.9225 7.21249,-4.89625 m -3.21125,0.0275 c 0,1.815 -2.44874,2.23625 -4.15875,2.29 0.0775,-1.8175 1.02625,-3.58125 2.81626,-3.58125 0.815,0 1.34249,0.5 1.34249,1.29125 m 98.18325,-0.0275 c 0,-2.5 -1.71125,-3.84375 -4.37,-3.84375 -4.31624,0 -6.55375,3.52875 -6.55375,7.3975 0,3.94875 1.79,6.73875 6.26375,6.73875 2.66,0 4.5025,-1.21125 4.8175,-1.47375 l -1.05375,-2.4475 c -0.73625,0.49875 -1.8675,1.13125 -3.28874,1.13125 -2.00125,0 -2.8425,-1.34375 -3.02751,-2.60625 3.18625,-0.13125 7.2125,-0.9225 7.2125,-4.89625 m -3.21124,0.0275 c 0,1.815 -2.44875,2.23625 -4.15875,2.29 0.0775,-1.8175 1.02625,-3.58125 2.81625,-3.58125 0.815,0 1.3425,0.5 1.3425,1.29125 m -9.55525,-0.0275 c 0,-2.5 -1.71125,-3.84375 -4.37,-3.84375 -4.31625,0 -6.55376,3.52875 -6.55376,7.3975 0,3.94875 1.79,6.73875 6.26376,6.73875 2.66,0 4.5025,-1.21125 4.8175,-1.47375 l -1.0525,-2.4475 c -0.7375,0.49875 -1.86875,1.13125 -3.29,1.13125 -2.00125,0 -2.84375,-1.34375 -3.0275,-2.60625 3.18625,-0.13125 7.2125,-0.9225 7.2125,-4.89625 m -3.21125,0.0275 c 0,1.815 -2.44875,2.23625 -4.15875,2.29 0.0775,-1.8175 1.02625,-3.58125 2.81625,-3.58125 0.815,0 1.3425,0.5 1.3425,1.29125"
                    style="fill-opacity:1;fill-rule:nonzero;stroke:none"
                  ></path>
                </svg>`}
          </div>

          <div class="data-wrapper">
            <sh-text class="label" size="super-header" color="primary">${this.label}</sh-text>

            ${this.subHeadline ? x` <sh-text class="version" header-2>${this.subHeadline}</sh-text> ` : this.version ? x` <sh-text class="version" header-2>${this.version}</sh-text> ` : ""}

            <slot></slot>

            ${this.progress ? x`
                  <sh-progress
                    class="progress"
                    show-progress
                    value="${this.progress}"
                  ></sh-progress>
                ` : ""}

            <div class="footer-wrapper">
              <slot name="footer" class="footer"></slot>
            </div>
          </div>

          ${this.info ? x`
                <sh-text class="info" size="body-2" color="secondary" part="splash-info"
                  >${this.info}</sh-text
                >
              ` : ""}

          <div class="footer-text">
            <slot
              name="info"
              id="info"
              class="info_slot"
              @slotchange="${() => this.handleSlotNodes()}"
            ></slot>
          </div>
        </div>

        ${this.image ? x`
              <div class="image" style="background-image: ${this.image}" part="splash-image"></div>
            ` : ""}
      </div>
    </sh-card>`;
    }
    update(changedProperties) {
      const listOfProperties = [
        "label",
        "modal",
        "info",
        "version",
        "progress",
        "image",
        "subHeadline",
        "labelAlignment"
      ];
      dispatchAttributeChangedEvent2(this, changedProperties, listOfProperties);
      super.update(changedProperties);
    }
    firstUpdated() {
      this.handleSlotNodes();
    }
    handleSlotNodes() {
      var _a4;
      const infoSlot = (_a4 = this.shadowRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector("#info");
      const infoNodes = infoSlot.assignedNodes({
        flatten: true
      }).length;
      this.emptyInfo = infoNodes === 0;
    }
  };
  __decorate([n5({ type: Boolean, reflect: true })], SHSplashScreen.prototype, "modal", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplashScreen.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplashScreen.prototype, "version", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplashScreen.prototype, "info", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplashScreen.prototype, "image", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplashScreen.prototype, "logo", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "sub-headline" })], SHSplashScreen.prototype, "subHeadline", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "label-alignment" })], SHSplashScreen.prototype, "labelAlignment", void 0);
  __decorate([n5({ type: Number, reflect: true })], SHSplashScreen.prototype, "progress", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "empty-info" })], SHSplashScreen.prototype, "emptyInfo", void 0);
  SHSplashScreen = __decorate([e4("sh-splash-screen")], SHSplashScreen);

  // ../sh-split-button/src/sh-split-button.lit.scss.js
  var sh_split_button_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-split-button-icon-wrapper-width=2rem] - width of icon wrapper
   */
  --sh-split-button-icon-wrapper-width: 2rem;
  /* 
   * @cssprop [--sh-split-button-current-scale=s] - the current scale of split-button used to set overlayTargetDistance for popover
   */
  --sh-split-button-current-scale: s;
}

:host {
  display: flex;
  flex-shrink: 0;
  flex-direction: row;
  height: var(--sh-button-button-height);
  width: fit-content;
  width: -moz-fit-content;
  --current-scale: var(--sh-split-button-current-scale);
  position: relative;
}

.popup-menu {
  outline: none;
}

.main-btn {
  border-top-right-radius: 0rem;
  border-bottom-right-radius: 0rem;
}

.icon-wrapper {
  box-sizing: border-box;
  height: 100%;
  border-top-right-radius: var(--sh-button-button-border-radius);
  border-bottom-right-radius: var(--sh-button-button-border-radius);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  width: var(--sh-split-button-icon-wrapper-width);
}

/* color='primary' */
:host([color=primary]) .icon-wrapper {
  background-color: rgba(var(--ui-3), var(--opacity-1));
  border-left: 0.0625rem solid rgba(var(--ui-7), var(--opacity-5));
}

:host([color=primary]) .icon-wrapper[active] {
  background-color: rgba(var(--ui-4), var(--opacity-1));
}

:host([color=primary]) .split-button-icon {
  color: rgb(255, 255, 255);
}

:host([color=primary]:not(.touch-device):not([arrow-disabled])) .icon-wrapper:hover:not([active]) {
  background-color: rgba(var(--ui-2), var(--opacity-1));
}

/* color='secondary' */
:host([color=secondary]) .icon-wrapper {
  background-color: rgba(var(--ui-1), var(--opacity-6));
  border-left: 0.0625rem solid rgba(var(--ui-7), var(--opacity-4));
}

:host([color=secondary]) .icon-wrapper[active] {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([color=secondary]) .split-button-icon {
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([color=secondary]:not(.touch-device):not([arrow-disabled])) .icon-wrapper:hover:not([active]) {
  background-color: rgba(var(--ui-1), var(--opacity-5));
}

/* color='tertiary' */
:host([color=tertiary]) .icon-wrapper {
  background-color: transparent;
  border: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));
  padding-left: 0.0625rem;
}

:host([color=tertiary]) .icon-wrapper[active] {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([color=tertiary]) .split-button-icon {
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([color=tertiary]:not(.touch-device):not([arrow-disabled])) .icon-wrapper:hover:not([active]) {
  background-color: rgba(var(--ui-1), var(--opacity-5));
}

/* disabled */
:host([disabled]) {
  pointer-events: none;
  cursor: default;
}

:host([arrow-disabled]) .icon-wrapper {
  cursor: default;
}

:host([color=primary][disabled]) .icon-wrapper {
  background-color: rgba(var(--ui-2), var(--opacity-5));
}

:host([color=secondary][disabled]) .icon-wrapper {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([color=tertiary][disabled]) .icon-wrapper {
  border: 0.0625rem solid rgba(var(--ui-1), var(--opacity-7));
}

.split-button-icon {
  margin-left: -0.125rem;
}

sh-button[color=tertiary] {
  border-right: none;
}`;

  // ../sh-split-button/src/sh-split-button.js
  var SHSplitButton = class SHSplitButton2 extends s4 {
    constructor() {
      super();
      this._active = false;
      this.label = "Label";
      this.size = "s";
      this.color = "primary";
      this.disabled = false;
      this.arrowDisabled = false;
      this.role = "button";
      this._popoverButtonDistance = 0.5;
    }
    static get styles() {
      return [extendInteractiveArea(), sh_split_button_lit_scss_default];
    }
    render() {
      return x`
      <sh-button
        class="main-btn"
        label="${this.label}"
        size="${this.size}"
        color="${this.color}"
        .href="${this.href}"
        ?disabled="${this.disabled}"
        role="${this.role}"
      >
      </sh-button>
      <div class="icon-wrapper" ?active="${this._active}" @click="${this._toggleOverlay}">
        <sh-icon
          class="split-button-icon"
          icon="down-s"
          tabindex="0"
          ?disabled="${this.disabled || this.arrowDisabled}"
        >
        </sh-icon>
      </div>
      <sh-popover
        class="popup-menu"
        tabindex="0"
        .visible="${this._active}"
        .target="${this}"
        manual-controlled
        position="bottom-left"
        .overlayTargetDistance=${this._popoverButtonDistance}
        @visible-changed="${(e8) => {
        if (this._active) {
          e8.target.focus();
        }
      }}"
        @clicked="${() => {
        this._active = false;
      }}"
        suppress-placement-warning
        @keyup="${(e8) => {
        if (keyboardInteraction2(e8, KEYCODE.ESCAPE)) {
          this._active = false;
        }
      }}"
      >
        <slot
          @slotchange="${(e8) => {
        this._hasSubElements = e8.target.assignedElements({ flatten: true }).length;
      }}"
        ></slot>
      </sh-popover>
    `;
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      this.documentClick = this._handleDocumentClick.bind(this);
    }
    disconnectedCallback() {
      document.body.removeEventListener("click", this.documentClick);
      super.disconnectedCallback();
    }
    _getTargetDistance() {
      const currentScale = getComputedStyle(this).getPropertyValue("--current-scale").trim();
      return currentScale === "xl" || currentScale === "l" ? 0.75 : 0.5;
    }
    _toggleOverlay(e8) {
      if (this.arrowDisabled) {
        e8.stopPropagation();
      } else if (this._hasSubElements) {
        e8.stopPropagation();
        this._active = !this._active;
        if (this._active) {
          this._popoverButtonDistance = this._getTargetDistance();
          document.body.removeEventListener("click", this.documentClick);
          document.body.addEventListener("click", this.documentClick);
        }
      } else {
      }
    }
    _handleDocumentClick(e8) {
      if (e8.composedPath().indexOf(this) === -1) {
        this._active = false;
        document.body.removeEventListener("click", this.documentClick);
      }
    }
  };
  __decorate([t3()], SHSplitButton.prototype, "_active", void 0);
  __decorate([t3()], SHSplitButton.prototype, "_popoverButtonDistance", void 0);
  __decorate([t3()], SHSplitButton.prototype, "_hasSubElements", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplitButton.prototype, "label", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplitButton.prototype, "size", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplitButton.prototype, "color", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplitButton.prototype, "href", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHSplitButton.prototype, "disabled", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSplitButton.prototype, "role", void 0);
  __decorate([n5({ type: Boolean, reflect: true, attribute: "arrow-disabled" })], SHSplitButton.prototype, "arrowDisabled", void 0);
  SHSplitButton = __decorate([e4("sh-split-button")], SHSplitButton);

  // ../sh-stepper/src/sh-stepper.lit.scss.js
  var sh_stepper_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-stepper-circle-dimension=2rem] - stepper circle width
   */
  --sh-stepper-circle-dimension: 2rem;
  /* 
   * @cssprop [--sh-stepper-circle-line-height=2rem] - stepper circle line height
   */
  --sh-stepper-circle-line-height: 2rem;
  /* 
   * @cssprop [--sh-stepper-margin-bottom=0.5rem] - stepper circle height
   */
  --sh-stepper-margin-bottom: 0.5rem;
  /* 
   * @cssprop [--sh-stepper-border-width=0.125rem] - circle border width
   */
  --sh-stepper-border-width: 0.125rem;
  /* 
   * @cssprop [--sh-stepper-line-top=0.9375rem] - stepper line top
   */
  --sh-stepper-line-top: 0.9375rem;
  /* 
   * @cssprop [--sh-stepper-label-padding=0 0.5rem] - label text padding
   */
  --sh-stepper-label-padding: 0 0.5rem;
  /* 
   * @cssprop [--sh-stepper-label-line-height=1.25rem] - label line height
   */
  --sh-stepper-label-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-stepper-info-line-height=1rem] - info line height
   */
  --sh-stepper-info-line-height: 1rem;
  /* 
   * @cssprop [--sh-stepper-info-margin-top=0.125rem] - info margin top
   */
  --sh-stepper-info-margin-top: 0.125rem;
  /* 
   * @cssprop [--sh-stepper-badge-top=-0.3125rem] - badge top
   */
  --sh-stepper-badge-top: -0.3125rem;
  /* 
   * @cssprop [--sh-stepper-badge-right=-0.4375rem] - badge top
   */
  --sh-stepper-badge-right: -0.4375rem;
  /* 
   * @cssprop [--sh-stepper-condensed-circle-dimension=0.875rem] - condensed circle width
   */
  --sh-stepper-condensed-circle-dimension: 0.875rem;
  /* 
   * @cssprop [--sh-stepper-condensed-border-width=0.125rem] - condensed border width
   */
  --sh-stepper-condensed-border-width: 0.125rem;
  /* 
   * @cssprop [--sh-stepper-condensed-badge-top=-0.1875rem] - condensed badge top
   */
  --sh-stepper-condensed-badge-top: -0.1875rem;
  /* 
   * @cssprop [--sh-stepper-condensed-badge-right=-0.1875rem] - condensed badge top
   */
  --sh-stepper-condensed-badge-right: -0.1875rem;
  /* 
   * @cssprop [--sh-stepper-line-border-width=0.125rem] - line border width
   */
  --sh-stepper-line-border-width: 0.125rem;
  /* 
   * @cssprop [--sh-stepper-line-width=1.5rem] - line  width
   */
  --sh-stepper-line-width: 1.5rem;
  /* 
   * @cssprop [--sh-stepper-condensed-line-top=0.4375rem] - condensed stepper line top
   */
  --sh-stepper-condensed-line-top: 0.4375rem;
  /* 
   * @cssprop [--sh-stepper-condensed-line-width=0.625rem] - line border width
   */
  --sh-stepper-condensed-line-width: 0.625rem;
  /* 
   * @cssprop [--sh-stepper-icon-size=1rem] - Size of the  icon
   */
  --sh-stepper-icon-size: 1rem;
  /* 
   * @cssprop [--sh-stepper-font-size=1rem] - font Size of the icon
   */
  --sh-stepper-font-size: 1rem;
  /* 
   * @cssprop [--sh-stepper-vertical-stepper-wrapper-min-height=3.875rem] - min height of the vertical stepper wrapper
   */
  --sh-stepper-vertical-stepper-wrapper-min-height: 3.875rem;
  /* 
   * @cssprop [--sh-stepper-condensed-vertical-stepper-wrapper-min-height=1.625rem] - min height of the condensed vertical stepper wrapper
   */
  --sh-stepper-condensed-vertical-stepper-wrapper-min-height: 1.625rem;
  /* 
   * @cssprop [--sh-stepper-label-info-padding=0.75rem 0rem] - padding of the label-info
   */
  --sh-stepper-label-info-padding: 0.75rem 0rem;
  /* 
   * @cssprop [--sh-stepper-condensed-label-info-padding=0.5rem 0rem] - padding of the condensed label-info
   */
  --sh-stepper-condensed-label-info-padding: 0.5rem 0rem;
  /* 
   * @cssprop [--sh-stepper-label-info-margin-left=0.25rem] - margin left of the label-info
   */
  --sh-stepper-label-info-margin-left: 0.25rem;
  /* 
   * @cssprop [--sh-stepper-condensed-label-info-margin-left=0rem] - margin left of the condensed label-info
   */
  --sh-stepper-condensed-label-info-margin-left: 0rem;
  /* 
   * @cssprop [--sh-stepper-vertical-stepper-circle-margin=0.5rem 0rem] - margin of the circle in vertical stepper
   */
  --sh-stepper-vertical-stepper-circle-margin: 0.5rem 0rem;
  /* 
   * @cssprop [--sh-stepper-vertical-line-left=0.9375rem] - vertical stepper line left
   */
  --sh-stepper-vertical-line-left: 0.9375rem;
  /* 
   * @cssprop [--sh-stepper-vertical-condensed-circle-margin=0.125rem 0rem] - vertical condensed circle margin
   */
  --sh-stepper-vertical-condensed-circle-margin: 0.125rem 0rem;
  /* 
   * @cssprop [--sh-stepper-vertical-condensed-line-left=0.375rem] - left line of vertical condensed stepper
   */
  --sh-stepper-vertical-condensed-line-left: 0.375rem;
  /* 
   * @cssprop [--sh-stepper-vertical-line-height=1.5rem] - vertical line border height
   */
  --sh-stepper-vertical-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-stepper-vertical-condensed-line-height=0.5625rem] - vertical condensed line border height
   */
  --sh-stepper-vertical-condensed-line-height: 0.5625rem;
}

:host {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  cursor: pointer;
  position: relative;
  outline: 0;
}

:host([vertical]) {
  align-items: flex-start;
}

.vertical-stepper-wrapper {
  display: flex;
  box-sizing: border-box;
  min-height: var(--sh-stepper-vertical-stepper-wrapper-min-height);
  align-items: center;
  width: 100%;
}

:host([condensed]) .vertical-stepper-wrapper {
  min-height: var(--sh-stepper-condensed-vertical-stepper-wrapper-min-height);
}

sh-text {
  padding: var(--sh-stepper-label-padding);
  box-sizing: border-box;
  color: var(--text-secondary);
  overflow: hidden;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
}

:host(:not([vertical])) sh-text {
  text-align: center;
}

.label-info {
  padding: var(--sh-stepper-label-info-padding);
  margin-left: var(--sh-stepper-label-info-margin-left);
}

:host([condensed]) .label-info {
  padding: var(--sh-stepper-condensed-label-info-padding);
  margin-left: var(--sh-stepper-condensed-label-info-margin-left);
}

:host(:not([condensed][vertical])) .info {
  margin-top: var(--sh-stepper-info-margin-top);
}

.info {
  line-height: var(--sh-stepper-info-line-height);
}

.circle {
  height: var(--sh-stepper-circle-dimension);
  width: var(--sh-stepper-circle-dimension);
  margin-bottom: var(--sh-stepper-margin-bottom);
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  border-radius: 50%;
  text-align: center;
  font: var(--header-2);
  color: var(--text-secondary);
  line-height: var(--sh-stepper-circle-line-height);
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
  background: rgba(var(--ui-1), var(--opacity-6));
  border: var(--sh-stepper-border-width) solid transparent;
  position: relative;
  box-sizing: border-box;
}

:host([vertical]) .circle {
  flex-shrink: 0;
  margin: var(--sh-stepper-vertical-stepper-circle-margin);
}

:host(:hover) .circle,
:host(.hover) .circle,
:host(:hover) .label {
  color: var(--text-primary);
}

:host(:hover) .info {
  color: var(--text-secondary);
}

.line-left,
.line-right {
  position: absolute;
  top: var(--sh-stepper-line-top);
  width: calc(50% - var(--sh-stepper-line-width));
  border-bottom: var(--sh-stepper-line-border-width) solid rgba(var(--ui-1), var(--opacity-6));
}

.line-top,
.line-bottom {
  position: absolute;
  left: var(--sh-stepper-vertical-line-left);
  height: calc(50% - var(--sh-stepper-vertical-line-height));
  border-left: var(--sh-stepper-line-border-width) solid rgba(var(--ui-1), var(--opacity-6));
}

.line-left {
  left: 0rem;
}

.line-right {
  right: 0rem;
}

.line-top {
  top: 0rem;
}

.line-bottom {
  bottom: 0rem;
}

:host(:first-of-type) .line-left,
:host(:last-of-type) .line-right,
:host(:first-of-type) .line-top,
:host(:last-of-type) .line-bottom {
  display: none;
}

:host([active]) .circle {
  color: rgba(var(--ui-7), var(--opacity-1));
  background: rgba(var(--ui-1), var(--opacity-3));
}

:host([color=primary][active]) .circle {
  color: var(--text-white);
  background: rgba(var(--ui-3), var(--opacity-1));
}

sh-text[size=title-1] {
  line-height: var(--sh-stepper-label-line-height);
  transition: var(--hover-transition-time) color;
}

:host([active]) sh-text[size=title-1] {
  color: var(--text-primary);
}

:host([half]) .circle {
  background: linear-gradient(90deg, rgba(var(--ui-1), var(--opacity-5)) 50%, transparent 50%);
  background-size: calc(100% + 0.25rem);
  background-position: -0.125rem;
  border-color: var(--text-disabled);
}

:host([disabled]) {
  cursor: default;
  pointer-events: none;
}

:host([disabled]) .circle {
  color: var(--text-disabled);
  background: transparent;
  border-color: rgba(var(--ui-1), var(--opacity-6));
}

:host([disabled]) sh-text {
  color: var(--text-disabled);
}

.stepper-type {
  --sh-icon-size-xs: var(--sh-stepper-icon-size);
  --sh-icon-font-size-xs: var(--sh-stepper-font-size);
}

:host(:not([condensed])) .stepper-type {
  position: absolute;
  top: var(--sh-stepper-badge-top);
  right: var(--sh-stepper-badge-right);
}

:host([condensed]) .circle {
  border-width: var(--sh-stepper-condensed-border-width);
  color: transparent;
  height: var(--sh-stepper-condensed-circle-dimension);
  width: var(--sh-stepper-condensed-circle-dimension);
  margin: 0.0625rem 0.125rem;
}

:host([condensed][vertical]) .circle {
  margin: var(--sh-stepper-vertical-condensed-circle-margin);
}

:host([condensed][active]:not([disabled]):not([type])) .circle {
  background: rgba(var(--ui-1), var(--opacity-3));
}

:host([condensed]:not([disabled]):not([type])) .circle {
  background: rgba(var(--ui-1), var(--opacity-5));
}

:host([color=primary][condensed][active]:not([disabled]):not([type])) .circle {
  background: rgba(var(--ui-3), var(--opacity-1));
}

:host([condensed]) .line-left,
:host([condensed]) .line-right {
  top: var(--sh-stepper-condensed-line-top);
  width: calc(50% - var(--sh-stepper-condensed-line-width));
  border-bottom: var(--sh-stepper-condensed-border-width) solid rgba(var(--ui-1), var(--opacity-6));
}

:host([condensed][vertical]) .line-top,
:host([condensed][vertical]) .line-bottom {
  left: var(--sh-stepper-vertical-condensed-line-left);
  height: calc(50% - var(--sh-stepper-vertical-condensed-line-height));
  border-left: var(--sh-stepper-line-border-width) solid rgba(var(--ui-1), var(--opacity-6));
}

:host #stepperCircle.item-focused {
  outline: var(--focus-outline);
  outline-offset: -0.0625rem;
}

:host([type][condensed]) .circle {
  background: transparent;
  border-color: transparent;
}`;

  // ../sh-stepper/src/sh-stepper-item.js
  var SHStepperItem = class extends ControlStateMixin2(FocusBlurMixin2(s4)) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        info: { type: String, reflect: true },
        number: { type: String, reflect: true },
        type: { type: String, reflect: true },
        active: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        vertical: { type: Boolean, reflect: true },
        color: { type: String, reflect: true }
      };
    }
    static get styles() {
      return [sh_stepper_lit_scss_default];
    }
    render() {
      return x`
      ${!this.vertical ? x` <div class="line-left"></div>
            <div class="line-right"></div>
            ${this._getCircle()} ${this._getLabelInfo()}` : x`
            <div class="vertical-stepper-wrapper">
              <div class="line-top"></div>
              <div class="line-bottom"></div>
              ${this._getCircle()}
              <div class="label-info">${this._getLabelInfo()}</div>
            </div>
          `}
    `;
    }
    firstUpdated() {
      super.firstUpdated();
      this.setAttribute("tabindex", "-1");
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("active")) {
        this._handleActiveChange();
      }
      const listOfProperties = ["label", "info", "number", "type", "active", "condensed", "color"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    constructor() {
      super();
      this.color = "neutral";
    }
    _spaceKeyAction() {
      super._spaceKeyAction();
      this.click();
    }
    _handleActiveChange() {
      if (this.disabled && this.active) {
        this.disabled = false;
      }
    }
    _getCircle() {
      return x` <div class="circle focus-item" id="stepperCircle">
      ${this.number && !this.condensed ? x` ${this.number}` : ""}
      ${this.type ? x` <sh-icon .icon="${this.type}" class="stepper-type" size="xs"></sh-icon>` : ""}
    </div>`;
    }
    _getLabelInfo() {
      return x` ${this.label && !this.condensed ? x`<sh-text class="label" size="title-1">${this.label}</sh-text>` : ""}
    ${this.info ? x`<sh-text class="info" size="body-2">${this.info}</sh-text>` : ""}`;
    }
  };
  customElements.define("sh-stepper-item", SHStepperItem);

  // ../sh-stepper/src/sh-stepper.js
  var SHStepper = class extends RefrainSpaceScrollMixin(s4) {
    static get properties() {
      return {
        value: { type: String, reflect: true },
        condensed: { type: Boolean, reflect: true },
        readonly: { type: Boolean, reflect: true },
        color: { type: String, reflect: true },
        vertical: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [
        i`
        :host {
          width: 100%;
          height: auto;
          display: flex;
        }
        :host([vertical]) {
          width: 100%;
          height: auto;
          display: flex;
          flex-direction: column;
        }
        :host([readonly]) {
          pointer-events: none;
        }
        :host(:focus-visible) {
          outline: var(--focus-outline);
        }
      `
      ];
    }
    render() {
      return x`<slot @slotchange=${this.slotChange} @click=${this.clickFromSlot}></slot>`;
    }
    constructor() {
      super();
      this.color = "neutral";
    }
    connectedCallback() {
      super.connectedCallback();
      this.setAttribute("tabindex", 0);
      this.addEventListener("keydown", (e8) => this._handleKeydown(e8));
    }
    _handleKeydown(e8) {
      if (this.condensed) {
        return;
      }
      if (e8.code === "ArrowRight" && e8.code !== "Tab") {
        if (e8.target.nextElementSibling && e8.target.nextElementSibling.tagName === "SH-STEPPER-ITEM" && !e8.target.nextElementSibling.disabled) {
          e8.target.shadowRoot.querySelector("#stepperCircle").classList.remove("item-focused");
          this._setFocus(e8.target.nextElementSibling);
        } else if (e8.target.tagName === "SH-STEPPER") {
          this._setFocus(e8.target.children[0]);
        } else {
          this._setFocus(e8.target);
        }
      }
      if (e8.code === "ArrowLeft" && e8.code !== "Tab") {
        if (e8.target.previousElementSibling && !e8.target.previousElementSibling.disabled && e8.target.previousElementSibling.tagName === "SH-STEPPER-ITEM") {
          this._setFocus(e8.target.previousElementSibling);
          e8.target.shadowRoot.querySelector("#stepperCircle").classList.remove("item-focused");
        } else if (e8.target.tagName === "SH-STEPPER") {
          const stepperItems = e8.target.querySelectorAll("sh-stepper-item:not([disabled])");
          this._setFocus(stepperItems[stepperItems.length - 1]);
        } else {
          this._setFocus(e8.target);
        }
      }
    }
    _setFocus(stepperItem) {
      stepperItem.focus();
      stepperItem.shadowRoot.querySelector("#stepperCircle").classList.add("item-focused");
    }
    clickFromSlot(e8) {
      if (e8.target && e8.target.tagName === "SH-STEPPER-ITEM") {
        this.value = e8.target.number;
        this._updateItems();
      }
    }
    slotChange() {
      const items = this.querySelectorAll("sh-stepper-item");
      for (let i7 = 0; i7 < items.length; i7++) {
        items[i7].number = i7 + 1;
        if (items[i7].hasAttribute("active")) {
          this.value = items[i7].number;
        }
      }
      this._updateItems();
      this._handleCondensedChange();
      this._handleColorChange();
      this._handleOrientationChange();
    }
    updated(changedProperties) {
      if (changedProperties.has("condensed")) {
        this._handleCondensedChange();
      }
      if (changedProperties.has("value")) {
        this._updateItems();
      }
      if (changedProperties.has("color")) {
        this._handleColorChange();
      }
      if (changedProperties.has("vertical")) {
        this._handleOrientationChange();
      }
      const listOfProperties = ["value", "condensed", "readonly", "color"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _updateItems() {
      return __async(this, null, function* () {
        const items = this.querySelectorAll("sh-stepper-item");
        for (let i7 = 0; i7 < items.length; i7++) {
          if (this.value) {
            if (items[i7].number > this.value) {
              items[i7].active = false;
              yield this.updateComplete;
              items[i7].setAttribute("disabled", "");
            } else if (items[i7].number === parseInt(this.value, 10)) {
              items[i7].active = true;
            } else {
              items[i7].active = false;
              items[i7].disabled = false;
            }
          }
          if (this.value > Math.floor(this.value) && i7 === Math.ceil(this.value - 1)) {
            items[i7].setAttribute("half", "");
          } else {
            items[i7].removeAttribute("half");
          }
        }
      });
    }
    _handleCondensedChange() {
      const items = this.querySelectorAll("sh-stepper-item");
      for (let i7 = 0; i7 < items.length; i7++) {
        items[i7].condensed = this.condensed;
      }
    }
    _handleOrientationChange() {
      const items = this.querySelectorAll("sh-stepper-item");
      for (let i7 = 0; i7 < items.length; i7++) {
        items[i7].vertical = this.vertical;
      }
    }
    _handleColorChange() {
      const items = this.querySelectorAll("sh-stepper-item");
      for (let i7 = 0; i7 < items.length; i7++) {
        items[i7].color = this.color;
      }
    }
    disconnectedCallback() {
      this.removeEventListener("keydown", (e8) => this._handleKeydown(e8));
      super.disconnectedCallback();
    }
  };
  customElements.define("sh-stepper", SHStepper);

  // ../sh-switch/src/sh-switch-item.lit.scss.js
  var sh_switch_item_lit_scss_default = i`[sh-scale=s] {
  /* 
   * @cssprop [--sh-switch-item-width=5.5rem] - switch item width
   */
  --sh-switch-item-width: 5.5rem;
  /* 
   * @cssprop [--sh-switch-item-height=2.5rem] - switch height
   */
  --sh-switch-item-height: 2.5rem;
  /* 
   * @cssprop [--sh-switch-item-padding=0.75rem] - switch item padding
   */
  --sh-switch-item-padding: 0.75rem;
  /* 
   * @cssprop [--sh-switch-item-label-alignment=center] - label alignment
   */
  --sh-switch-item-label-alignment: center;
  /* 
   * @cssprop [--sh-switch-item-border-radius=1.25rem] - switch  border radius
   */
  --sh-switch-item-border-radius: 1.25rem;
  /* 
   * @cssprop [--sh-switch-item-condensed-height=2rem] - switch  item condensed height
   */
  --sh-switch-item-condensed-height: 2rem;
  /* 
   * @cssprop [--sh-switch-item-condensed-border-radius=1rem] - switch  item condensed height
   */
  --sh-switch-item-condensed-border-radius: 1rem;
  /* 
   * @cssprop [--sh-switch-item-condensed-padding=0.5rem 0.75rem] - switch  item condensed height
   */
  --sh-switch-item-condensed-padding: 0.5rem 0.75rem;
  /* 
   * @cssprop [--sh-switch-item-icon-height=2rem] - switch  item icon height
   */
  --sh-switch-item-icon-height: 2rem;
  /* 
   * @cssprop [--sh-switch-item-icon-width=2rem] - switch  item icon width
   */
  --sh-switch-item-icon-width: 2rem;
  /* 
   * @cssprop [--sh-switch-item-icon-margin=0.25rem 1.75rem] - switch  item icon margin
   */
  --sh-switch-item-icon-margin: 0.25rem 1.75rem;
  /* 
   * @cssprop [--sh-switch-item-label-height=1rem] - switch  item icon margin
   */
  --sh-switch-item-label-height: 1rem;
}

:host {
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
  border-radius: var(--sh-switch-item-border-radius);
  padding: var(--sh-switch-item-padding);
  font: var(--body-1);
  color: var(--text-secondary);
  cursor: pointer;
  min-width: var(--sh-switch-item-width);
  text-align: center;
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  outline: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
}

.label {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  max-width: 100%;
  height: var(--sh-switch-item-label-height);
  line-height: var(--sh-switch-item-label-height);
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

:host(:hover),
:host([active]) {
  color: var(--text-primary);
}

:host([active]) {
  background-color: rgba(var(--ui-1), var(--opacity-6));
}

:host([icon]:not([label])) {
  padding: 0rem;
}

:host([icon][label]) .switch-icon {
  display: none;
}

:host([icon]) .switch-icon {
  display: flex;
  margin: var(--sh-switch-item-icon-margin);
  color: rgba(var(--ui-1), var(--opacity-3));
  height: var(--sh-switch-item-icon-height);
  width: var(--sh-switch-item-icon-width);
}

:host([icon][active]) .switch-icon {
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host([icon][disabled]) .switch-icon,
:host([disabled]) {
  pointer-events: none;
  color: var(--text-disabled);
}

:host([icon][disabled][icon-color]) .switch-icon {
  pointer-events: none;
  opacity: var(--opacity-5);
}

:host([active][disabled]) {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([condensed]) {
  padding: var(--sh-switch-item-condensed-padding);
  height: var(--sh-switch-item-condensed-height);
  border-radius: var(--sh-switch-item-condensed-border-radius);
}

:host([blue-outline]) {
  box-shadow: inset 0rem 0rem 0rem 0.125rem var(--focus-color);
}`;

  // ../sh-switch/src/sh-switch-item.js
  var SHSwitchItem = class SHSwitchItem2 extends ControlStateMixin2(s4) {
    constructor() {
      super(...arguments);
      this.active = false;
    }
    static get styles() {
      return [sh_switch_item_lit_scss_default, extendInteractiveArea()];
    }
    render() {
      return x`
      ${this.label && !this.icon || this.label && this.icon ? x` <span class="label"> ${this.label} </span>` : ""}
      ${this.icon && !this.label ? x` <sh-icon
            icon="${this.icon}"
            .color="${this.iconColor}"
            class="switch-icon"
          ></sh-icon>` : ""}
    `;
    }
    update(changedProperties) {
      if (changedProperties.has("active")) {
        if (!this.active) {
          this.setAttribute("tabindex", "-1");
        } else {
          this.setAttribute("tabindex", "0");
        }
      }
      if (changedProperties.has("active") && this.active) {
        this.handleActiveChange();
      }
      const listOfProperties = ["label", "active", "condensed", "icon", "value"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      super.update(changedProperties);
    }
    firstUpdated() {
      this.addEventListener("click", () => this.handleClick());
      this.addEventListener("focus", () => this.handleFocus());
      this.addEventListener("blur", () => this.handleBlur());
      if (!this.active) {
        this.setAttribute("tabindex", "-1");
      } else {
        this.setAttribute("tabindex", "0");
      }
    }
    handleClick() {
      this.active = true;
    }
    handleFocus() {
      this.addEventListener("keyup", this.handleKeyup);
    }
    handleBlur() {
      this.removeEventListener("keyup", this.handleKeyup);
      this.removeAttribute("blue-outline");
    }
    handleKeyup(e8) {
      if (keyboardInteraction2(e8, KEYCODE2.TAB) && !this.disabled) {
        this.setAttribute("blue-outline", "");
      }
      if (keyboardInteraction2(e8, KEYCODE2.ARROW_RIGHT) || keyboardInteraction2(e8, KEYCODE2.ARROW_LEFT)) {
        this.setAttribute("blue-outline", "");
      }
      if (keyboardInteraction2(e8, KEYCODE2.SPACE) || keyboardInteraction2(e8, KEYCODE2.ENTER)) {
        this.click();
      }
      this.onkeydown = (e9) => {
        this.handleKeydown(e9);
      };
    }
    handleKeydown(e8) {
      var _a4;
      let target;
      const siblings = (_a4 = this.parentElement) === null || _a4 === void 0 ? void 0 : _a4.querySelectorAll("SH-SWITCH-ITEM:not([disabled])");
      if (siblings) {
        const positionThis = Array.from(siblings).indexOf(this);
        if (keyboardInteraction2(e8, KEYCODE2.ARROW_RIGHT)) {
          if (positionThis === siblings.length - 1) {
            target = siblings[0];
          } else {
            target = siblings[positionThis + 1];
          }
          this.handleArrowInput(e8, "ArrowRight", target);
        } else if (keyboardInteraction2(e8, KEYCODE2.ARROW_LEFT)) {
          if (positionThis === 0) {
            target = siblings[siblings.length - 1];
          } else {
            target = siblings[positionThis - 1];
          }
          this.handleArrowInput(e8, "ArrowLeft", target);
        } else {
        }
      }
    }
    handleActiveChange() {
      var _a4;
      const siblingItems = (_a4 = this.parentNode) === null || _a4 === void 0 ? void 0 : _a4.children;
      const numberOfSiblings = siblingItems === null || siblingItems === void 0 ? void 0 : siblingItems.length;
      if (siblingItems && numberOfSiblings) {
        for (let i7 = 0; i7 < numberOfSiblings; i7++) {
          const sibling = siblingItems[i7];
          if (sibling.hasAttribute("active") && sibling !== this) {
            sibling.active = false;
          }
        }
      }
    }
    handleArrowInput(e8, triggerKeys, target) {
      if (triggerKeys.includes(e8.code) && target) {
        e8.preventDefault();
        target.focus();
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHSwitchItem.prototype, "label", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHSwitchItem.prototype, "active", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHSwitchItem.prototype, "condensed", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSwitchItem.prototype, "icon", void 0);
  __decorate([n5({ type: String, reflect: true, attribute: "icon-color" })], SHSwitchItem.prototype, "iconColor", void 0);
  __decorate([n5({ type: String, reflect: true })], SHSwitchItem.prototype, "value", void 0);
  SHSwitchItem = __decorate([e4("sh-switch-item")], SHSwitchItem);

  // ../sh-switch/src/sh-switch.lit.scss.js
  var sh_switch_lit_scss_default = i`:host {
  display: flex;
  flex-direction: row;
  border-radius: var(--sh-switch-border-radius);
  background-color: rgba(var(--ui-1), var(--opacity-7));
  width: -webkit-fit-content;
  width: fit-content;
  width: -ms-fit-content;
  width: -moz-fit-content;
  max-width: 100%;
  overflow: hidden;
}

:host([stretch]) {
  width: 100%;
}

:host([stretch]) > ::slotted(sh-switch-item) {
  flex: 1;
}

:host([disabled]) {
  pointer-events: auto;
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([condensed]) {
  border-radius: var(--sh-switch-condensed-border-radius);
}

:host > ::slotted(sh-switch-item) {
  flex: 1;
}`;

  // ../sh-switch/src/sh-switch.js
  var SHSwitch = class SHSwitch2 extends s4 {
    constructor() {
      super(...arguments);
      this.stretch = false;
      this.disabled = void 0;
      this.condensed = false;
    }
    static get styles() {
      return [sh_switch_lit_scss_default];
    }
    render() {
      return x` <slot></slot> `;
    }
    updated(changedProperties) {
      if (changedProperties.has("disabled")) {
        this.handleDisabledChange();
      }
      if (changedProperties.has("condensed")) {
        this.handleCondensedChange();
      }
      const listOfProperties = ["stretch", "disabled", "condensed"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    handleDisabledChange() {
      const childrenItems = this.children;
      for (const childrenItem of childrenItems) {
        childrenItem.disabled = this.disabled;
      }
    }
    handleCondensedChange() {
      const switchItemHasIcon = this.querySelector('sh-switch-item[icon]:not([icon=""])');
      if (!switchItemHasIcon) {
        const switchItems = this.querySelectorAll("sh-switch-item");
        for (const switchItem of switchItems) {
          switchItem.condensed = this.condensed;
        }
      }
      if (switchItemHasIcon && this.condensed) {
        console.warn("Condensed style will not be applied to switch and condensed property will not be applied to switch-items , if any switch-item has icon");
      }
    }
  };
  __decorate([n5({ type: Boolean, reflect: true })], SHSwitch.prototype, "stretch", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHSwitch.prototype, "disabled", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHSwitch.prototype, "condensed", void 0);
  SHSwitch = __decorate([e4("sh-switch")], SHSwitch);

  // ../sh-table/src/sh-table-cell.lit.scss.js
  var sh_table_cell_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-table-cell-wrapper-margin=0.5rem 0.75rem] - margin of cell wrapper
   */
  --sh-table-cell-wrapper-margin: 0.5rem 0.75rem;
  /* 
   * @cssprop [--sh-table-cell-line-height=2rem] - line-height of cell wrapper
   */
  --sh-table-cell-line-height: 2rem;
  /* 
   * @cssprop [--sh-table-cell-mobile-wrapper-margin=0.5rem] - margin of mobile cell wrapper
   */
  --sh-table-cell-mobile-wrapper-margin: 0.5rem;
  /* 
   * @cssprop [--sh-table-cell-condensed-wrapper-margin=0.25rem 0.75rem] - margin of cell wrapper
   */
  --sh-table-cell-condensed-wrapper-margin: 0.25rem 0.75rem;
  /* 
   * @cssprop [--sh-table-cell-first-nested-padding=3.5rem] - first-nested-padding
   */
  --sh-table-cell-first-nested-padding: 3.5rem;
  /* 
   * @cssprop [--sh-table-cell-first-nested-padding-checkbox=4.5rem] - first-nested-padding
   */
  --sh-table-cell-first-nested-padding-checkbox: 4.5rem;
  /* 
   * @cssprop [--sh-table-cell-nested-padding=2.75rem] - nested-padding
   */
  --sh-table-cell-nested-padding: 2.75rem;
  /* 
   * @cssprop [--sh-table-cell-nested-padding-checkbox=2.5rem] - nested-padding
   */
  --sh-table-cell-nested-padding-checkbox: 2.5rem;
  /* 
   * @cssprop [--sh-table-cell-icon-min-width=3rem] - icon icon-min-width
   */
  --sh-table-cell-icon-min-width: 3rem;
  /* 
   * @cssprop [--sh-table-cell-icon-checkbox-cell-min-width=3.5rem] - icon checkbox -min-width
   */
  --sh-table-cell-icon-checkbox-cell-min-width: 3.5rem;
  /* 
   * @cssprop [--sh-table-cell-padding-left=2.5rem] - padding left checkbox
   */
  --sh-table-cell-padding-left: 2.5rem;
  /* 
   * @cssprop [--sh-table-cell-inset=2.5rem] - inset left of checkbox
   */
  --sh-table-cell-inset: 2.5rem;
  /* 
   * @cssprop [--sh-table-cell-checkbox-margin-top=0.2rem] - checkbox margin top
   */
  --sh-table-cell-checkbox-margin-top: 0.2rem;
}

:host {
  display: inline-flex;
  box-sizing: border-box;
  height: fit-content;
  height: -ms-fit-content;
  height: -moz-fit-content;
  align-items: center;
}

* {
  box-sizing: border-box;
}

.cell-wrapper {
  display: flex;
  flex-direction: column;
  font: var(--body-1);
  margin: var(--sh-table-cell-wrapper-margin);
  line-height: var(--sh-table-cell-line-height);
  color: var(--text-primary);
  word-wrap: break-word;
  cursor: default;
  width: calc(100% - 1.5rem);
  height: fit-content;
  height: -ms-fit-content;
  height: -moz-fit-content;
  font-weight: normal;
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
}

/* number cells */
:host([number]) .cell-wrapper {
  text-align: end;
  word-break: break-word;
}

/* icon cells */
:host([icon]),
:host([checkbox]) {
  flex: 0;
  min-width: var(--sh-table-cell-icon-checkbox-cell-min-width) !important;
}

:host([checkbox]) {
  margin-top: var(--sh-table-cell-checkbox-margin-top);
}

/* medium screens */
@media only screen and (max-width: 64.0625rem) {
  :host([icon]),
  :host([checkbox]) {
    min-width: var(--sh-table-cell-icon-cell-min-width) !important;
  }
  .cell-wrapper {
    margin: var(--sh-table-cell-mobile-wrapper-margin);
    width: calc(100% - 1rem);
  }
}
/* condensed */
:host([condensed]) .cell-wrapper {
  margin: var(--sh-table-cell-condensed-wrapper-margin);
}

/* first nested cell */
:host(.first-nested-cell) {
  padding-left: var(--sh-table-cell-first-nested-padding);
}

:host(.first-nested-cell.checkbox) {
  padding-left: calc(var(--sh-table-cell-first-nested-padding) + 1.5rem);
}

/* nested cell */
:host(.nested-cell) {
  padding-left: calc(var(--sh-table-cell-first-nested-padding) + var(--sh-table-cell-nested-padding) * var(--nesting-level));
}

:host(.nested-cell.checkbox) {
  padding-left: calc(var(--sh-table-cell-first-nested-padding-checkbox) + var(--sh-table-cell-inset) * var(--nesting-level));
}

:host(.checkbox-cell) {
  position: absolute;
  left: calc(var(--sh-table-cell-nested-padding-checkbox) * var(--nesting-level));
}

:host(.non-nested-cell) {
  position: absolute;
  min-width: 2.5rem;
  left: 0rem;
}

:host(.checkbox) {
  min-width: 2.5rem;
  padding-left: var(--sh-table-cell-padding-left);
}`;

  // ../sh-table/src/sh-table-cell.js
  var SHTableCell = class extends s4 {
    static get properties() {
      return {
        number: { type: Boolean, reflect: true },
        icon: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        minWidth: { type: String, reflect: true, attribute: "min-width" },
        columns: { type: String, reflect: true },
        colS: { type: String, reflect: true, attribute: "col-s" },
        colM: { type: String, reflect: true, attribute: "col-m" },
        checkbox: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sh_table_cell_lit_scss_default];
    }
    render() {
      return x`
      <div class="cell-wrapper">
        <slot></slot>
      </div>
    `;
    }
    constructor() {
      super();
      this.minWidth = "2.5rem";
    }
    connectedCallback() {
      super.connectedCallback();
      const icons = this.querySelectorAll("sh-icon");
      if (icons) {
        for (let i7 = 0; i7 < icons.length; i7++) {
          if (icons[i7].button && !icons[i7].hasAttribute("tabindex")) {
            icons[i7].setAttribute("tabindex", 0);
          }
        }
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("minWidth")) {
        this.style.minWidth = this.minWidth;
      }
    }
  };
  customElements.define("sh-table-cell", SHTableCell);

  // ../sh-table/src/sh-table-head.lit.scss.js
  var sh_table_head_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-table-head-line-height=2rem] - line-height of head wrapper
   */
  --sh-table-head-line-height: 2rem;
  /* 
   * @cssprop [--sh-table-head-wrapper-margin=0.5rem 0.75rem] - margin of head wrapper
   */
  --sh-table-head-wrapper-margin: 0.5rem 0.75rem;
  /* 
   * @cssprop [--sh-table-head-condensed-wrapper-margin=0.25rem 0.75rem] - margin of head wrapper
   */
  --sh-table-head-condensed-wrapper-margin: 0.25rem 0.75rem;
  /* 
   * @cssprop [--sh-table-head-mobile-wrapper-margin=0.5rem] - margin of mobile head wrapper
   */
  --sh-table-head-mobile-wrapper-margin: 0.5rem;
  /* 
   * @cssprop [--sh-table-head-sort-icon-margin=0] - margin of sort icon
   */
  --sh-table-head-sort-icon-margin: 0;
  /* 
   * @cssprop [--sh-table-head-condensed-wrapper-height=2rem] - height of the condensed header wrapper
   */
  --sh-table-head-condensed-wrapper-height: 2rem;
  /* 
   * @cssprop [--sh-table-head-icon-min-width=3.5rem] - min-width of the icon header wrapper
   */
  --sh-table-head-icon-min-width: 3.5rem;
  /* 
   * @cssprop [--sh-table-head-icon-cell-min-width=3.5rem] - min-width of the icon cell wrapper
   */
  --sh-table-head-icon-cell-min-width: 3.5rem;
  /* 
   * @cssprop [--sh-table-head-header-wrapper-height=2rem] - height of the  header wrapper
   */
  --sh-table-head-header-wrapper-height: 2rem;
  /* 
   * @cssprop [--sh-table-head-padding-left=2.5rem] - padding-left of the table header
   */
  --sh-table-head-padding-left: 2.5rem;
  /* 
   * @cssprop [--sh-table-head-checkbox-margin-top=0.2rem] - checkbox margin top
   */
  --sh-table-head-checkbox-margin-top: 0.2rem;
}

:host {
  display: inline-flex;
  box-sizing: border-box;
  width: -ms-fit-content;
  width: -moz-fit-content;
  outline: 0;
  align-items: center;
}

:host([unsortable][number]) {
  justify-content: flex-end;
}

:host * {
  box-sizing: border-box;
}

.head-wrapper {
  display: flex;
  color: var(--text-primary);
  font: var(--title-1);
  line-height: var(--sh-table-head-line-height);
  margin: var(--sh-table-head-wrapper-margin);
  height: var(--sh-table-head-header-wrapper-height);
  width: calc(100% - 1.5rem);
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
}

:host(:not([icon]):not([checkbox])) .head-wrapper-text {
  width: fit-content;
  max-width: calc(100% - 2rem);
  white-space: nowrap;
  display: block;
  overflow: hidden;
  text-overflow: ellipsis;
}

:host(:not([checkbox])[unsortable]) .head-wrapper-text {
  max-width: 100%;
}

:host([active]) {
  background: transparent;
}

.sort-icon {
  display: inline-block;
  visibility: hidden;
  position: relative;
  color: rgba(var(--ui-1), var(--opacity-4));
  margin: var(--sh-table-head-sort-icon-margin);
}

.alwaysStay {
  visibility: visible;
}

/* number heads */
:host([number]) .head-wrapper {
  display: flex;
  justify-content: flex-end;
}

/* icon heads */
:host([icon]),
:host([checkbox]) {
  flex: 0;
  min-width: var(--sh-table-head-icon-min-width) !important;
}

:host([checkbox]) {
  margin-top: var(--sh-table-head-checkbox-margin-top);
}

:host([icon]) .sort-icon,
:host([checkbox]) .sort-icon {
  display: none;
}

/* medium screens */
@media only screen and (max-width: 64rem) {
  :host([icon]),
  :host([checkbox]) {
    min-width: var(--sh-table-head-icon-min-width) !important;
  }
  .head-wrapper {
    margin: var(--sh-table-head-mobile-wrapper-margin);
    width: calc(100% - 1rem);
  }
}
/* hover */
:host([unsortable]:hover:not(.no-hovermq)),
:host([unsortable]:hover) *,
:host([unsortable].no-hovermq):hover,
:host([unsortable]):hover * {
  cursor: default;
}

:host([unsortable]:hover:not(.no-hovermq)) .head-wrapper,
:host([unsortable].no-hovermq):hover .head-wrapper {
  cursor: default;
}

:host(:not(.no-hovermq):hover) .sort-icon,
:host(.no-hovermq:hover) .sort-icon,
:host(:not(.no-hovermq)) .head-wrapper.hover .sort-icon,
:host(.no-hovermq) .head-wrapper.hover .sort-icon {
  visibility: visible;
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host(:not(.no-hovermq)) .head-wrapper:hover,
:host(.no-hovermq) .head-wrapper:hover,
:host(:not(.no-hovermq)) .head-wrapper.hover,
:host(.no-hovermq) .head-wrapper.hover,
:host(:not(.no-hovermq):not([unsortable]):hover) {
  cursor: pointer;
}

/* Condensed Table */
:host([condensed]) .head-wrapper {
  margin: var(--sh-table-head-condensed-wrapper-margin);
  height: var(--sh-table-head-condensed-wrapper-height);
}

/* focus */
.focus {
  outline: var(--focus-outline);
}

/* first nested cell */
:host(.first-header-cell-checkbox) {
  padding-left: var(--sh-table-head-padding-left);
}`;

  // ../sh-table/src/sh-table-head.js
  var SHTableHead = class extends s4 {
    static get properties() {
      return {
        minWidth: { type: String, reflect: true, attribute: "min-width" },
        sortDescending: {
          type: Boolean,
          reflect: true,
          attribute: "sort-descending"
        },
        icon: { type: Boolean, reflect: true },
        number: { type: Boolean, reflect: true },
        columns: { type: String, reflect: true },
        condensed: { type: Boolean, reflect: true },
        unsortable: { type: Boolean, reflect: true },
        colS: { type: String, reflect: true, attribute: "col-s" },
        colM: { type: String, reflect: true, attribute: "col-m" },
        sorted: { type: Boolean, reflect: true },
        checkbox: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sh_table_head_lit_scss_default];
    }
    render() {
      return x`
      <div class="head-wrapper">
        ${!this.unsortable && this.number ? x` <sh-icon
              icon="${this.sortDescending ? "up-s" : "down-s"}"
              class="sort-icon"
            ></sh-icon>` : ""}
        <div class="head-wrapper-text">
          <slot></slot>
        </div>
        ${!this.unsortable && !this.number ? x` <sh-icon
              icon="${this.sortDescending ? "up-s" : "down-s"}"
              class="sort-icon"
            ></sh-icon>` : ""}
      </div>
    `;
    }
    updated(changedProperties) {
      if (changedProperties.has("sorted")) {
        this.toggleArrowVisibility();
      }
      if (changedProperties.has("unsortable")) {
        this.unsortableChanged();
      }
      if (changedProperties.has("minWidth")) {
        this.adjustMinWidth();
      }
    }
    unsortableChanged() {
      if (this.unsortable) {
        this.sorted = false;
        this.sortDescending = false;
        this.tabindex = this.getAttribute("tabindex");
        this.removeAttribute("tabindex");
      } else {
        this.tabindex ? this.setAttribute("tabindex", this.tabindex) : this.setAttribute("tabindex", "0");
      }
    }
    constructor() {
      super();
      this.minWidth = "2.5rem";
      this.sorted = false;
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.icon && !this.hasAttribute("tabindex") && !this.unsortable) {
        this.setAttribute("tabindex", "0");
      }
    }
    firstUpdated() {
      this.addEventListener("click", () => this.handleClick());
      this.addEventListener("focus", () => this.handleFocus());
      this.addEventListener("blur", () => this.handleBlur());
      this.dispatchEvent(new CustomEvent("head-ready", {
        detail: this,
        bubbles: true
      }));
    }
    adjustMinWidth() {
      if (this.minWidth !== void 0) {
        this.style.minWidth = this.minWidth;
      }
    }
    handleClick() {
      this.toggleIcon();
      if (!this.unsortable) {
        this.sortDescending = !this.sortDescending;
        this.sorted = true;
      }
    }
    handleFocus() {
      this.onkeyup = function(e8) {
        const tabKey = 9;
        const enterKey = 13;
        const spaceKey = 32;
        if (e8.keyCode === tabKey && !this.unsortable) {
          const wrapper = this.shadowRoot.querySelector(".head-wrapper");
          const icon = this.shadowRoot.querySelector(".sort-icon");
          wrapper.classList.add("focus");
          icon.style.visibility = "visible";
        } else if (e8.keyCode === enterKey || e8.keyCode === spaceKey) {
          this.handleClick();
          this.toggleIcon();
        }
      };
    }
    handleBlur() {
      if (!this.unsortable) {
        const wrapper = this.shadowRoot.querySelector(".head-wrapper");
        const icon = this.shadowRoot.querySelector(".sort-icon");
        wrapper.classList.remove("focus");
        icon.style.visibility = "";
      }
    }
    toggleArrowVisibility() {
      if (this.sorted) {
        this.dispatchEvent(new CustomEvent("showarrow", {
          detail: this,
          bubbles: true,
          composed: true
        }));
        this.shadowRoot.querySelector(".sort-icon").classList.add("alwaysStay");
      } else if (!this.unsortable) {
        this.sortDescending = false;
        this.shadowRoot.querySelector(".sort-icon").classList.remove("alwaysStay");
      }
    }
    toggleIcon() {
      if (!this.unsortable) {
        this.dispatchEvent(new CustomEvent("toggle", {
          detail: this,
          bubbles: true
        }));
      }
    }
  };
  customElements.define("sh-table-head", SHTableHead);

  // ../sh-table/src/sh-table-row.lit.scss.js
  var sh_table_row_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-table-row-div-border-bottom=0.0625rem solid rgba(var(--ui-1), var(--opacity-6))] - border bottom of a div inside table row
   */
  --sh-table-row-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-6));
  /* 
   * @cssprop [--sh-table-row-header-slot-div-border-bottom=0.0625rem solid rgba(var(--ui-1), var(--opacity-4))] - border bottom of a header slot div inside table row
   */
  --sh-table-row-header-slot-div-border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-4));
  /* 
   * @cssprop [--sh-table-row-multiselect-checkbox-left=2.5rem] - left value for checkbox with nested multiselect 
   */
  --sh-table-row-multiselect-checkbox-left: 2.5rem;
  /* 
   * @cssprop [--sh-table-row-initial-icon-left=3rem] - left value for checkbox with nested multiselect 
   */
  --sh-table-row-initial-icon-left: 3rem;
  /* 
   * @cssprop [--sh-table-row-nested-expand-collapse-left=0.75rem] - left value for nested expand collapse icon 
   */
  --sh-table-row-nested-expand-collapse-left: 0.75rem;
  /* 
   * @cssprop [--sh-table-row-arrow-inset=2.75rem] - expand clollapse arrow inset -nested  
   */
  --sh-table-row-arrow-inset: 2.75rem;
}

:host {
  outline: 0;
  display: block;
}

:host > div {
  border-bottom: var(--sh-table-row-div-border-bottom);
  display: flex;
  flex-direction: row;
  transition: var(--transition-time) all ease-in-out, 0.1s background ease;
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
}

:host([slot=header]) > div {
  border-bottom: var(--sh-table-row-header-slot-div-border-bottom);
}

/* column assignment */
#wrapper > ::slotted([columns="24"]),
#wrapper > div > ::slotted([columns="24"]) {
  width: 100%;
}

#wrapper > ::slotted([columns="23"]),
#wrapper > div > ::slotted([columns="23"]) {
  width: 95.8333333333%;
}

#wrapper > ::slotted([columns="22"]),
#wrapper > div > ::slotted([columns="22"]) {
  width: 91.6666666667%;
}

#wrapper > ::slotted([columns="21"]),
#wrapper > div > ::slotted([columns="21"]) {
  width: 87.5%;
}

#wrapper > ::slotted([columns="20"]),
#wrapper > div > ::slotted([columns="20"]) {
  width: 83.3333333333%;
}

#wrapper > ::slotted([columns="19"]),
#wrapper > div > ::slotted([columns="19"]) {
  width: 79.1666666667%;
}

#wrapper > ::slotted([columns="18"]),
#wrapper > div > ::slotted([columns="18"]) {
  width: 75%;
}

#wrapper > ::slotted([columns="17"]),
#wrapper > div > ::slotted([columns="17"]) {
  width: 70.8333333333%;
}

#wrapper > ::slotted([columns="16"]),
#wrapper > div > ::slotted([columns="16"]) {
  width: 66.6666666667%;
}

#wrapper > ::slotted([columns="15"]),
#wrapper > div > ::slotted([columns="15"]) {
  width: 62.5%;
}

#wrapper > ::slotted([columns="14"]),
#wrapper > div > ::slotted([columns="14"]) {
  width: 58.3333333333%;
}

#wrapper > ::slotted([columns="13"]),
#wrapper > div > ::slotted([columns="13"]) {
  width: 54.1666666667%;
}

#wrapper > ::slotted([columns="12"]),
#wrapper > div > ::slotted([columns="12"]) {
  width: 50%;
}

#wrapper > ::slotted([columns="11"]),
#wrapper > div > ::slotted([columns="11"]) {
  width: 45.8333333333%;
}

#wrapper > ::slotted([columns="10"]),
#wrapper > div > ::slotted([columns="10"]) {
  width: 41.6666666667%;
}

#wrapper > ::slotted([columns="9"]),
#wrapper > div > ::slotted([columns="9"]) {
  width: 37.5%;
}

#wrapper > ::slotted([columns="8"]),
#wrapper > div > ::slotted([columns="8"]) {
  width: 33.3333333333%;
}

#wrapper > ::slotted([columns="7"]),
#wrapper > div > ::slotted([columns="7"]) {
  width: 29.1666666667%;
}

#wrapper > ::slotted([columns="6"]),
#wrapper > div > ::slotted([columns="6"]) {
  width: 25%;
}

#wrapper > ::slotted([columns="5"]),
#wrapper > div > ::slotted([columns="5"]) {
  width: 20.8333333333%;
}

#wrapper > ::slotted([columns="4"]),
#wrapper > div > ::slotted([columns="4"]) {
  width: 16.6666666667%;
}

#wrapper > ::slotted([columns="3"]),
#wrapper > div > ::slotted([columns="3"]) {
  width: 12.5%;
}

#wrapper > ::slotted([columns="2"]),
#wrapper > div > ::slotted([columns="2"]) {
  width: 8.3333333333%;
}

#wrapper > ::slotted([columns="1"]),
#wrapper > div > ::slotted([columns="1"]) {
  width: 4.1666666667%;
}

#wrapper > ::slotted([columns="0"]),
#wrapper > div > ::slotted([columns="0"]) {
  display: none;
}

/* column assignment for medium breakpoint */
@media only screen and (max-width: 64.0625rem) {
  #wrapper > ::slotted([col-m="24"]) {
    width: 100%;
  }
  #wrapper > ::slotted([col-m="23"]) {
    width: 95.8333333333%;
  }
  #wrapper > ::slotted([col-m="22"]) {
    width: 91.6666666667%;
  }
  #wrapper > ::slotted([col-m="21"]) {
    width: 87.5%;
  }
  #wrapper > ::slotted([col-m="20"]) {
    width: 83.3333333333%;
  }
  #wrapper > ::slotted([col-m="19"]) {
    width: 79.1666666667%;
  }
  #wrapper > ::slotted([col-m="18"]) {
    width: 75%;
  }
  #wrapper > ::slotted([col-m="17"]) {
    width: 70.8333333333%;
  }
  #wrapper > ::slotted([col-m="16"]) {
    width: 66.6666666667%;
  }
  #wrapper > ::slotted([col-m="15"]) {
    width: 62.5%;
  }
  #wrapper > ::slotted([col-m="14"]) {
    width: 58.3333333333%;
  }
  #wrapper > ::slotted([col-m="13"]) {
    width: 54.1666666667%;
  }
  #wrapper > ::slotted([col-m="12"]) {
    width: 50%;
  }
  #wrapper > ::slotted([col-m="11"]) {
    width: 45.8333333333%;
  }
  #wrapper > ::slotted([col-m="10"]) {
    width: 41.6666666667%;
  }
  #wrapper > ::slotted([col-m="9"]) {
    width: 37.5%;
  }
  #wrapper > ::slotted([col-m="8"]) {
    width: 33.3333333333%;
  }
  #wrapper > ::slotted([col-m="7"]) {
    width: 29.1666666667%;
  }
  #wrapper > ::slotted([col-m="6"]) {
    width: 25%;
  }
  #wrapper > ::slotted([col-m="5"]) {
    width: 20.8333333333%;
  }
  #wrapper > ::slotted([col-m="4"]) {
    width: 16.6666666667%;
  }
  #wrapper > ::slotted([col-m="3"]) {
    width: 12.5%;
  }
  #wrapper > ::slotted([col-m="2"]) {
    width: 8.3333333333%;
  }
  #wrapper > ::slotted([col-m="1"]) {
    width: 4.1666666667%;
  }
  #wrapper > ::slotted([col-m="0"]) {
    display: none;
  }
}
/* column assignment for small breakpoint */
@media only screen and (max-width: 47.9375rem) {
  #wrapper > ::slotted([col-s="24"]) {
    width: 100%;
  }
  #wrapper > ::slotted([col-s="23"]) {
    width: 95.8333333333%;
  }
  #wrapper > ::slotted([col-s="22"]) {
    width: 91.6666666667%;
  }
  #wrapper > ::slotted([col-s="21"]) {
    width: 87.5%;
  }
  #wrapper > ::slotted([col-s="20"]) {
    width: 83.3333333333%;
  }
  #wrapper > ::slotted([col-s="19"]) {
    width: 79.1666666667%;
  }
  #wrapper > ::slotted([col-s="18"]) {
    width: 75%;
  }
  #wrapper > ::slotted([col-s="17"]) {
    width: 70.8333333333%;
  }
  #wrapper > ::slotted([col-s="16"]) {
    width: 66.6666666667%;
  }
  #wrapper > ::slotted([col-s="15"]) {
    width: 62.5%;
  }
  #wrapper > ::slotted([col-s="14"]) {
    width: 58.3333333333%;
  }
  #wrapper > ::slotted([col-s="13"]) {
    width: 54.1666666667%;
  }
  #wrapper > ::slotted([col-s="12"]) {
    width: 50%;
  }
  #wrapper > ::slotted([col-s="11"]) {
    width: 45.8333333333%;
  }
  #wrapper > ::slotted([col-s="10"]) {
    width: 41.6666666667%;
  }
  #wrapper > ::slotted([col-s="9"]) {
    width: 37.5%;
  }
  #wrapper > ::slotted([col-s="8"]) {
    width: 33.3333333333%;
  }
  #wrapper > ::slotted([col-s="7"]) {
    width: 29.1666666667%;
  }
  #wrapper > ::slotted([col-s="6"]) {
    width: 25%;
  }
  #wrapper > ::slotted([col-s="5"]) {
    width: 20.8333333333%;
  }
  #wrapper > ::slotted([col-s="4"]) {
    width: 16.6666666667%;
  }
  #wrapper > ::slotted([col-s="3"]) {
    width: 12.5%;
  }
  #wrapper > ::slotted([col-s="2"]) {
    width: 8.3333333333%;
  }
  #wrapper > ::slotted([col-s="1"]) {
    width: 4.1666666667%;
  }
  #wrapper > ::slotted([col-s="0"]) {
    display: none;
  }
}
/* chapter menu */
.chapter-wrapper {
  transition: 0.1s all ease-in-out;
}

:host(:not([expanded])) > .chapter-wrapper {
  max-height: 0rem;
  overflow: hidden;
  pointer-events: none;
  transform: translateY(-0.5rem);
  opacity: 0;
  display: none;
}

:host([chapter]) > .chapter-wrapper {
  flex-direction: column;
  border: none;
}

:host(:not([chapter])) > #wrapper > .arrow-icon {
  display: none;
}

:host([chapter]) > #wrapper > .arrow-icon {
  margin-top: 0.5rem;
}

:host([chapter][expanded]) > #wrapper > .arrow-icon {
  transform: rotate(90deg);
}

:host(:not([chapter]).chapter-sibling) > #wrapper > .menu-item-wrapper {
  margin-left: 2rem;
}

/* hover */
:host(:not(.no-hovermq):not([slot=header]):not([readonly])) > #wrapper:hover {
  background: rgba(var(--ui-1), var(--opacity-7));
}

:host([slot=header]:not(.no-hovermq)) > div:hover {
  background: transparent;
}

:host(:not([readonly])[active]) #wrapper {
  background: rgba(var(--ui-1), var(--opacity-6)) !important;
}

:host(:not([freeze])) .frozen-left,
:host(:not([freeze])) .scrollable,
:host(:not([freeze])) .frozen-right {
  display: none !important;
}

.frozen-left,
.frozen-right,
.scrollable {
  display: flex;
  align-items: center;
}

.frozen-left {
  box-shadow: inset -0.125rem 0rem 0rem 0rem rgba(var(--ui-1), var(--opacity-6));
}

.frozen-right {
  box-shadow: inset 0.125rem 0rem 0rem 0rem rgba(var(--ui-1), var(--opacity-6));
}

.scrollable {
  overflow-x: hidden;
  overflow-y: hidden;
}

/* menu Expand Icon */
:host #wrapper {
  position: relative;
}

:host #wrapper #tableExpandIcon {
  position: absolute;
}

:host([condensed]) #tableExpandIcon {
  margin-top: 0.25rem !important;
}

:host #wrapper .multiselect-checkbox {
  left: calc(var(--sh-table-row-initial-icon-left) + var(--nesting-level) * var(--sh-table-row-multiselect-checkbox-left));
}

:host #wrapper .default-nested {
  left: calc(var(--sh-table-row-nested-expand-collapse-left) + var(--nesting-level) * var(--sh-table-row-arrow-inset));
}`;

  // ../sh-table/src/sh-table-row.js
  var SHTableRow = class extends s4 {
    static get properties() {
      return {
        lwidth: { type: String, reflect: true },
        rwidth: { type: String, reflect: true },
        mwidth: { type: String, reflect: true },
        scrollLeft: { type: Number },
        active: { type: Boolean, reflect: true },
        freeze: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        chapter: { type: Boolean, reflect: true },
        expanded: { type: Boolean, reflect: true },
        readonly: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sharedStyles, sh_table_row_lit_scss_default];
    }
    render() {
      return x`
      <div
        id="wrapper"
        class="${this.active ? "active" : ""}"
        @click="${(e8) => this.handleClick(e8)}"
      >
        ${this.chapter ? x`
              <sh-icon
                id="tableExpandIcon"
                button
                icon="arrow-right-s"
                size="m"
                class="arrow-icon"
                @click="${() => {
        this.handleExpanded();
      }}"
              ></sh-icon>
            ` : ""}
        <slot id="mainBody" @slotchange="${() => this.mainBodyObserver()}"></slot>
        ${this.freeze ? x` <div
                class="frozen-left"
                style="display: flex; max-width: ${this.lwidth}; width: ${this.lwidth}; min-width: ${this.lwidth}"
              >
                <slot name="frozen-left" id="frozenLeftSlot"></slot>
              </div>
              <div
                class="scrollable"
                style="display: flex; max-width: ${this.mwidth}; width: ${this.mwidth}; min-width:${this.mwidth}"
                @scroll="${(e8) => this.dispatchCustomScrollEvent(e8)}"
              >
                <slot name="scrollable" id="scrollableSlot"></slot>
              </div>
              <div
                class="frozen-right"
                style="display: flex; max-width: ${this.rwidth};  width: ${this.rwidth}; min-width: ${this.rwidth}"
              >
                <slot name="frozen-right" id="frozenRightSlot"></slot>
              </div>` : ""}
      </div>
      ${this.chapter ? x` <div class="chapter-wrapper">
            <slot name="chapterSlot"></slot>
          </div>` : ""}
    `;
    }
    attributeChangedCallback(name, oldval, newval) {
      super.attributeChangedCallback(name, oldval, newval);
      if (name === "condensed") {
        this.condensedObserver();
      } else if (name === "readonly") {
        this.readonlyObserver();
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("active")) {
        this.dispatchEvent(new Event(`active-changed`));
        const table = this.closest("sh-table");
        if (this.active) {
          table.selectedRows.push(this);
        } else {
          if (table.selectedRows.includes(this)) {
            table.selectedRows.splice(table.selectedRows.indexOf(this), 1);
          }
        }
      }
      if (changedProperties.has("scrollLeft")) {
        this.scrollLeftChanged();
      }
      if (changedProperties.has("chapter")) {
        this.setExpandIconPosition();
      }
    }
    condensedObserver() {
      const children = this.children;
      for (let i7 = 0; i7 < children.length; i7++) {
        children[i7].condensed = this.condensed;
      }
    }
    readonlyObserver() {
      const numberOfChildren = this.children.length;
      for (let i7 = 0; i7 < numberOfChildren; i7++) {
        if (this.children[i7].tagName === "SH-TABLE-ROW") {
          this.children[i7].readonly = this.readonly;
        }
      }
    }
    scrollLeftChanged() {
      this.shadowRoot.querySelector(".scrollable").scrollLeft = this.scrollLeft;
    }
    constructor() {
      super();
      this.lwidth = "33.3%";
      this.rwidth = "33.3%";
      this.mwidth = "33.3%";
    }
    connectedCallback() {
      super.connectedCallback();
      const children = this.children;
      let counter = 0;
      let index;
      if (this.slot === "header") {
        for (let i7 = 0; i7 < children.length; i7++) {
          if (children[i7].sorted) {
            counter++;
            index = i7;
          }
        }
        if (counter > 1) {
          let suffix;
          switch (index + 1) {
            case 2:
              suffix = "nd";
              break;
            case 3:
              suffix = "rd";
              break;
            default:
              suffix = "th";
              break;
          }
          console.warn(`%c	${counter} table-head have sorted property.
`, "color:white;font-weight:900;text-align:center");
          console.warn(`%c	Only one table-head with the sorted property is allowed.
`, "color:white;font-weight:900;text-align:center");
          console.warn(`%c	${index + 1}${suffix} table-head with the sorted property is given the arrow.
`, "color:white;font-weight:900;text-align:center");
          this.removeDuplicateSortedProperty(index);
        }
        this.addEventListener("showarrow", function(event) {
          for (let i7 = 0; i7 < children.length; i7++) {
            if (children[i7] === event.target) {
              index = i7;
              break;
            }
          }
          this.removeDuplicateSortedProperty(index);
        });
      }
    }
    removeDuplicateSortedProperty(index) {
      for (let i7 = 0; i7 < this.children.length; i7++) {
        if (index !== i7) {
          this.children[i7].sorted = false;
        }
      }
    }
    firstUpdated() {
      if (!Modernizr.hovermq) {
        this.classList.add("no-hovermq");
      }
      if (this.freeze) {
        this.shadowRoot.querySelector("#scrollableSlot").addEventListener("slotchange", () => this.dispatchSlotModifiedEventWithData());
        this.shadowRoot.querySelector("#frozenLeftSlot").addEventListener("slotchange", () => this.dispatchSlotModifiedEventWithData());
        this.shadowRoot.querySelector("#frozenRightSlot").addEventListener("slotchange", () => this.dispatchSlotModifiedEventWithData());
      }
    }
    handleClick(event) {
      const rowType = this.getAttribute("slot");
      if (rowType !== "header" && event.target.id !== "tableExpandIcon" && !this.readonly) {
        this.dispatchEvent(new CustomEvent("clicked", {
          bubbles: true,
          composed: true
        }));
        if (this.closest("sh-table")) {
          if (this.closest("sh-table").selectionMode === "metakey") {
            this._onMultiSelectKeyPress(event);
          } else if (!this.closest("sh-table").multiselect) {
            this.active = true;
          }
        }
      }
    }
    _onMultiSelectKeyPress(event) {
      let table = this.closest("sh-table");
      let allTableRows = table.querySelectorAll("sh-table-row");
      if (event.ctrlKey || event.metaKey) {
        this.active = !this.active;
      } else if (event.shiftKey) {
        this._onShiftKeyPress(allTableRows);
      } else if (!event.ctrlKey && !event.metaKey && !event.shiftKey) {
        for (let i7 = 0; i7 < allTableRows.length; i7++) {
          allTableRows[i7].removeAttribute("active");
        }
        this.active = true;
        this.closest("sh-table").selectedRows = [];
      }
    }
    _onShiftKeyPress(tableRows) {
      let prevRowIndex, currentRowIndex;
      const selectedRows = this.closest("sh-table").selectedRows;
      const previousActiveRow = selectedRows[selectedRows.length - 1];
      let rowsArray = Array.prototype.slice.call(tableRows);
      if (rowsArray.includes(previousActiveRow)) {
        prevRowIndex = rowsArray.indexOf(previousActiveRow);
      }
      if (rowsArray.includes(this)) {
        currentRowIndex = rowsArray.indexOf(this);
      }
      if (prevRowIndex >= 0 && currentRowIndex >= 0) {
        if (!tableRows[currentRowIndex].active) {
          this._selectDeselectRows(tableRows, prevRowIndex, currentRowIndex, true);
        } else {
          this._selectDeselectRows(tableRows, prevRowIndex, currentRowIndex, false);
        }
      } else if (prevRowIndex && !currentRowIndex || currentRowIndex && !prevRowIndex) {
        const activeIndex = currentRowIndex ? currentRowIndex : prevRowIndex;
        tableRows[activeIndex].active = true;
      }
    }
    _selectDeselectRows(tableRows, prev, curr, activeValue) {
      const startIndex = prev;
      const range = Math.abs(curr - prev);
      for (let k2 = 0; k2 <= range; k2++) {
        if (prev < curr) {
          tableRows[prev].active = activeValue;
          prev++;
        } else if (prev > curr) {
          tableRows[prev].active = activeValue;
          prev--;
        }
      }
      if (activeValue) {
        tableRows[curr].active = activeValue;
      } else if (startIndex === curr) {
        tableRows[curr].active = !tableRows[curr].active;
      }
    }
    dispatchCustomScrollEvent(e8) {
      const scrollLeft = e8.target.scrollLeft;
      this.dispatchEvent(new CustomEvent("middle-scrolled", {
        bubbles: true,
        composed: true,
        detail: { event: e8, scrollLeft }
      }));
    }
    handleExpanded() {
      if (this.expanded === true) {
        this.expanded = false;
        this.dispatchEvent(new CustomEvent("collapse", {
          detail: this,
          composed: true,
          bubbles: true
        }));
      } else {
        this.expanded = true;
        this.dispatchEvent(new CustomEvent("expand", {
          detail: this,
          composed: true,
          bubbles: true
        }));
      }
    }
    mainBodyObserver() {
      this.nestRows();
      const numberOfChildren = this.children.length;
      for (let i7 = 0; i7 < numberOfChildren; i7++) {
        if (this.children[i7].tagName === "SH-TABLE-ROW") {
          this.children[i7].readonly = this.readonly;
        }
      }
    }
    dispatchSlotModifiedEventWithData() {
      if (this.shadowRoot.querySelector(".scrollable") || this.shadowRoot.querySelector(".frozen-left")) {
        const innerWidth = this.shadowRoot.querySelector(".scrollable").scrollWidth;
        const width = this.shadowRoot.querySelector(".scrollable").getBoundingClientRect().width;
        const leftPosition = this.shadowRoot.querySelector(".frozen-left").getBoundingClientRect().width;
        this.dispatchEvent(new CustomEvent("slots-modified", {
          bubbles: true,
          composed: true,
          detail: { innerWidth, width, leftPosition }
        }));
      }
    }
    getParents(elem) {
      const parents = [];
      for (; elem && elem !== document && elem.tagName === "SH-TABLE-ROW"; elem = elem.parentNode) {
        parents.push(elem);
      }
      return parents;
    }
    nestRows() {
      if (this.slot !== "header") {
        const childRows = Array.prototype.slice.call(this.childNodes).filter(function(element) {
          if (element.tagName === "SH-TABLE-ROW") {
            return element;
          }
        });
        if (childRows.length > 0) {
          this.chapter = true;
          childRows.forEach((element) => {
            element.setAttribute("slot", "chapterSlot");
          });
        }
      }
      if (this.chapter) {
        const siblingItems = this.parentNode.children;
        if (this.parentNode.tagName !== "SH-TABLE-ROW") {
          for (let i7 = 0; i7 < siblingItems.length; i7++) {
            siblingItems[i7].classList.add("chapter-sibling");
          }
        }
      }
      this._checkIfCheckbox();
    }
    _checkIfCheckbox() {
      var mainBodySlot = this.shadowRoot.querySelector("#mainBody");
      var slotFirstChild = mainBodySlot.assignedElements()[0];
      let isCheckbox;
      if (slotFirstChild) {
        isCheckbox = slotFirstChild.hasAttribute("checkbox");
      }
      if (this.chapter || this.classList.contains("chapter-sibling") || this.slot === "chapterSlot" || isCheckbox) {
        this._setCellPosition(isCheckbox);
      }
    }
    _setCellPosition(isCheckbox) {
      const nestingLevel = this.getParents(this).length - 1;
      const firstCell = this.querySelector("sh-table-cell:not([checkbox])");
      const firstheader = this.slot === "header" ? this.querySelector("sh-table-head:not([checkbox])") : "";
      this.style.setProperty("--nesting-level", nestingLevel);
      if (firstCell) {
        if (nestingLevel === 0 && !isCheckbox) {
          firstCell.classList.add("first-nested-cell");
        } else {
          if (document.querySelector("sh-table-row").closest(".chapter-sibling")) {
            this.classList.add("nested");
            firstCell.classList.add("nested-cell");
          } else {
            const checkBoxCell2 = this.querySelector("sh-table-cell[checkbox]") ? this.querySelector("sh-table-cell[checkbox]") : "";
            if (checkBoxCell2) {
              checkBoxCell2.classList.add("non-nested-cell");
            }
          }
        }
        const checkBoxCell = this.querySelector("sh-table-cell[checkbox]");
        if (checkBoxCell) {
          firstCell.classList.add("checkbox");
          checkBoxCell.classList.add("checkbox-cell");
        }
      }
      if (firstheader) {
        const checkboxHeader = this.querySelector("sh-table-head[checkbox]");
        if (checkboxHeader) {
          checkboxHeader.style.position = "absolute";
        }
        if (isCheckbox) {
          firstheader.classList.add("first-header-cell-checkbox");
        } else {
          firstheader.classList.add("first-header-cell");
        }
      }
    }
    setExpandIconPosition() {
      if (!this.chapter)
        return;
      const expandIcon = this.shadowRoot.querySelector("#tableExpandIcon");
      const nestingLevel = this.getParents(this).length - 1;
      this.style.setProperty("--nesting-level", nestingLevel);
      let mainBodySlot = this.shadowRoot.querySelector("#mainBody");
      let firstColumnCheckBox;
      if (mainBodySlot.assignedElements()[0]) {
        firstColumnCheckBox = mainBodySlot.assignedElements()[0].hasAttribute("checkbox");
      }
      if (firstColumnCheckBox) {
        expandIcon.classList.add("multiselect-checkbox");
      } else {
        expandIcon.classList.add("default-nested");
      }
    }
  };
  customElements.define("sh-table-row", SHTableRow);

  // ../sh-table/src/sh-table.lit.scss.js
  var sh_table_lit_scss_default = i`:host {
  width: 100%;
  height: 100%;
  overflow-y: hidden;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -ms-flex-direction: column;
  flex-direction: column;
  --scrollbar-width: 0rem;
}

:host([multiselect][selection-mode=metakey]) {
  user-select: none;
}

:host([fit-content]) {
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  max-height: fit-content;
  max-height: -ms-fit-content;
  max-height: -moz-fit-content;
}

.table-wrapper {
  -webkit-box-flex: 1;
  -ms-flex: 1;
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  width: 100%;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  max-height: -webkit-fit-content;
  max-height: -moz-fit-content;
  max-height: fit-content;
}

:host([freeze]) .floating-scrollbar {
  position: relative;
  margin-top: 0.5rem;
  overflow-x: auto;
}

:host([freeze]) .scrollThumb {
  height: 0.5rem;
}

.header-wrapper {
  overflow-x: hidden;
  width: 100%;
  max-height: -webkit-fit-content;
  max-height: -moz-fit-content;
  max-height: fit-content;
  overflow-y: hidden;
  padding-right: var(--scrollbar-width);
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}`;

  // ../sh-table/src/sh-table.js
  var SHTable = class extends s4 {
    static get properties() {
      return {
        lwidth: { type: String, reflect: true },
        rwidth: { type: String, reflect: true },
        mwidth: { type: String, reflect: true },
        freeze: { type: Boolean, reflect: true },
        scrolledLeft: { type: Number },
        condensed: { type: Boolean, reflect: true },
        readonly: { type: Boolean, reflect: true },
        multiselect: { type: Boolean, reflect: true },
        selectionMode: {
          type: String,
          reflect: true,
          attribute: "selection-mode"
        },
        selectedRows: { type: Array, reflect: false }
      };
    }
    static get styles() {
      return [sharedStyles, sh_table_lit_scss_default];
    }
    constructor() {
      super();
      this.lwidth = "33.3%";
      this.rwidth = "33.3%";
      this.mwidth = "33.3%";
      this.selectedRows = [];
    }
    render() {
      return x`
      <div class="header-wrapper">
        <slot name="header" id="header-slot"></slot>
      </div>
      <div class="table-wrapper" @scroll="${() => this.contentScrolled()}" id="tableContent">
        <div class="content">
          <slot id="tableBodySlot"></slot>
        </div>
      </div>
      ${this.freeze ? x`
            <div class="floating-scrollbar" @scroll="${(e8) => this.adjustScrollLeft(e8)}">
              <div class="scrollThumb"></div>
            </div>
          ` : ""}
    `;
    }
    attributeChangedCallback(name, oldval, newval) {
      super.attributeChangedCallback(name, oldval, newval);
      if (name === "condensed") {
        this.condensedObserver();
      } else if (name === "lwidth" || name === "rwidth" || name === "mwidth") {
        this.widthObserver();
      } else if (name === "readonly") {
        this.slotObserver();
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("scrolledLeft")) {
        this.scrolledLeftChanged();
      }
    }
    connectedCallback() {
      super.connectedCallback();
      this.resizeListener = this.windowResizeListener.bind(this);
      this.addEventListener("clicked", function() {
        if (!this.multiselect) {
          const childElement = this.querySelectorAll("sh-table-row[active]");
          for (let i7 = 0; i7 < childElement.length; i7++) {
            childElement[i7].removeAttribute("active");
          }
        }
      });
      if (this.freeze) {
        window.addEventListener("resize", this.resizeListener);
      }
      this._resizeObserver = new ResizeObserver(() => {
        this.windowResizeListener();
      });
    }
    firstUpdated() {
      const bodySlot = this.shadowRoot.querySelector("#tableBodySlot");
      bodySlot.addEventListener("slotchange", () => this.slotObserver());
      const baseFontSize2 = parseFloat(window.getComputedStyle(document.querySelector("html"), null).getPropertyValue("font-size"));
      if (this.freeze) {
        const floatingScrollBar = this.shadowRoot.querySelector(".floating-scrollbar");
        const floatThumb = this.shadowRoot.querySelector(".scrollThumb");
        this.addEventListener("slots-modified", function(e8) {
          floatThumb.style.width = `${e8.detail.innerWidth / baseFontSize2}rem`;
          floatingScrollBar.style.width = `${e8.detail.width / baseFontSize2}rem`;
          floatingScrollBar.style.left = `${e8.detail.leftPosition / baseFontSize2}rem`;
          if (this.scrolledLeft !== void 0) {
            floatingScrollBar.scrollLeft = this.scrolledLeft;
            let allChildTableRows = this.querySelectorAll("sh-table-row");
            for (let i7 = 0; i7 < allChildTableRows.length; i7++) {
              if (allChildTableRows[i7].freeze) {
                allChildTableRows[i7].shadowRoot.querySelector(".scrollable").scrollLeft = this.scrolledLeft;
              }
            }
          }
          this.widthObserver();
        });
        this.addEventListener("touchstart", (e8) => {
          if (!this._hasAllFrozenRows()) {
            return;
          }
          let touchMovePathElements = e8.composedPath();
          let swipedOnScrollable = false;
          for (let i7 = 0; i7 < touchMovePathElements.length; i7++) {
            if (touchMovePathElements[i7].tagName && touchMovePathElements[i7].classList.contains("scrollable") && touchMovePathElements[i7].tagName === "DIV") {
              swipedOnScrollable = true;
              break;
            }
          }
          if (swipedOnScrollable) {
            this.touchStartPos = e8.changedTouches[0].pageX;
            this.touchstartedOnScrollable = true;
          } else {
            this.touchstartedOnScrollable = false;
          }
        });
        this.addEventListener("touchmove", (e8) => {
          if (!this._hasAllFrozenRows()) {
            if (!this._issuedFrozenTableWarning) {
              console.warn(`All table rows in a frozen table must have freeze property.`);
              this._issuedFrozenTableWarning = true;
            }
            return;
          }
          let touchMovePathElements = e8.composedPath();
          if (this.touchstartedOnScrollable) {
            let swipedOnScrollable = false;
            for (let i7 = 0; i7 < touchMovePathElements.length; i7++) {
              if (touchMovePathElements[i7].tagName && touchMovePathElements[i7].classList.contains("scrollable") && touchMovePathElements[i7].tagName === "DIV") {
                swipedOnScrollable = true;
                break;
              }
            }
            if (swipedOnScrollable) {
              if (e8.changedTouches[0].pageX - this.touchStartPos < 0) {
                floatingScrollBar.scrollLeft += Math.abs(e8.changedTouches[0].pageX - this.touchStartPos);
              } else {
                floatingScrollBar.scrollLeft -= Math.abs(e8.changedTouches[0].pageX - this.touchStartPos);
              }
              this.touchStartPos = e8.changedTouches[0].pageX;
            }
          }
        });
      }
      this._issuedFrozenTableWarning = false;
      this._resizeObserver.observe(this);
    }
    setHeaderPadding() {
      var _a4;
      const scrollBarWidthInPx = this.getScrollBarWidth();
      const scrollBarWidthInRem = typeof scrollBarWidthInPx === "number" ? convertToRem(scrollBarWidthInPx) : null;
      const headerWrapperIsPresent = Boolean((_a4 = this.shadowRoot) == null ? void 0 : _a4.querySelector(".header-wrapper"));
      if (headerWrapperIsPresent && typeof scrollBarWidthInRem === "number") {
        this.shadowRoot.querySelector(".header-wrapper").style.setProperty("--scrollbar-width", `${scrollBarWidthInRem}rem`);
      }
    }
    getScrollBarWidth() {
      var _a4;
      const tableWrapperIsPresent = Boolean((_a4 = this.shadowRoot) == null ? void 0 : _a4.querySelector(".table-wrapper"));
      if (tableWrapperIsPresent) {
        const tableWrapperWidth = this.shadowRoot.querySelector(".table-wrapper").getBoundingClientRect().width;
        const tableWrapperContentWidth = this.shadowRoot.querySelector(".table-wrapper .content").getBoundingClientRect().width;
        return tableWrapperWidth - tableWrapperContentWidth;
      } else {
        return null;
      }
    }
    windowResizeListener() {
      this.setHeaderPadding();
      this.forceStyleUpdate();
      setTimeout(() => {
        this.setHeaderPadding();
        this.forceStyleUpdate();
        if (this.freeze) {
          const floatingScrollBar = this.shadowRoot.querySelector(".floating-scrollbar");
          const floatThumb = this.shadowRoot.querySelector(".scrollThumb");
          let firstRowChild = this.querySelector("sh-table-row[freeze]");
          const baseFontSize2 = parseFloat(window.getComputedStyle(document.querySelector("html"), null).getPropertyValue("font-size"));
          if (!firstRowChild) {
            return;
          }
          const frozenLeft = firstRowChild.shadowRoot.querySelector(".frozen-left");
          const scrollable = firstRowChild.shadowRoot.querySelector(".scrollable");
          floatingScrollBar.style.left = `${frozenLeft.getBoundingClientRect().width / baseFontSize2}rem`;
          floatingScrollBar.style.width = `${scrollable.getBoundingClientRect().width / baseFontSize2}rem`;
          floatThumb.style.width = `${scrollable.scrollWidth / baseFontSize2}rem`;
        }
      }, 500);
    }
    forceStyleUpdate() {
      getComputedStyle(document.documentElement);
    }
    widthObserver() {
      let allChildTableRows = this.querySelectorAll("sh-table-row");
      for (let i7 = 0; i7 < allChildTableRows.length; i7++) {
        if (allChildTableRows[i7].freeze) {
          allChildTableRows[i7].lwidth = this.lwidth;
          allChildTableRows[i7].mwidth = this.mwidth;
          allChildTableRows[i7].rwidth = this.rwidth;
        }
      }
      this.windowResizeListener();
    }
    condensedObserver() {
      let allChildTableRows = this.querySelectorAll("sh-table-row");
      for (let i7 = 0; i7 < allChildTableRows.length; i7++) {
        allChildTableRows[i7].condensed = this.condensed;
      }
    }
    contentScrolled() {
      const content = this.shadowRoot.querySelector("#tableContent");
      const contentScroll = content.scrollTop + content.clientHeight;
      const contentMaxScroll = content.scrollHeight;
      if (Math.ceil(contentScroll) >= contentMaxScroll) {
        this.dispatchEvent(new CustomEvent("scroll-end", {
          detail: this,
          composed: true,
          bubbles: true
        }));
      }
    }
    slotObserver() {
      let allChildTableRows = this.querySelectorAll("sh-table-row");
      for (let i7 = 0; i7 < allChildTableRows.length; i7++) {
        allChildTableRows[i7].readonly = this.readonly;
      }
      this.windowResizeListener();
    }
    adjustScrollLeft(e8) {
      let allChildTableRows = this.querySelectorAll("sh-table-row");
      if (!this._hasAllFrozenRows()) {
        if (!this._issuedFrozenTableWarning) {
          console.warn(`All table rows in a frozen table must have freeze property.`);
          this._issuedFrozenTableWarning = true;
        }
        return;
      }
      for (let i7 = 0; i7 < allChildTableRows.length; i7++) {
        if (allChildTableRows[i7].freeze) {
          allChildTableRows[i7].shadowRoot.querySelector(".scrollable").scrollLeft = e8.target.scrollLeft;
        }
      }
      this.scrolledLeft = e8.target.scrollLeft;
    }
    scrolledLeftChanged() {
      let allChildTableRows = this.querySelectorAll("sh-table-row");
      if (!this._hasAllFrozenRows()) {
        return;
      }
      for (let i7 = 0; i7 < allChildTableRows.length; i7++) {
        if (allChildTableRows[i7].freeze) {
          allChildTableRows[i7].scrollLeft = this.scrolledLeft;
          allChildTableRows[i7].shadowRoot.querySelector(".scrollable").scrollLeft = this.scrolledLeft;
        }
      }
    }
    _hasAllFrozenRows() {
      const areAllRowsFrozen = this.querySelector("sh-table-row:not([freeze])") ? false : true;
      return areAllRowsFrozen;
    }
    disconnectedCallback() {
      if (this.freeze) {
        window.removeEventListener("resize", this.resizeListener);
      }
      this._resizeObserver.disconnect();
      super.disconnectedCallback();
    }
  };
  customElements.define("sh-table", SHTable);

  // ../sh-tabs/src/sh-tab-item.lit.scss.js
  var sh_tab_item_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-tab-item-text-line-height=1.5rem] - text line height
   */
  --sh-tab-item-text-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-height=3.5rem] - icon height
   */
  --sh-tab-item-icon-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-line-height=2rem] - icon line-height
   */
  --sh-tab-item-icon-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-icon-padding=0.75rem 1rem 0.625rem] - icon padding
   */
  --sh-tab-item-icon-padding: 0.75rem 1rem 0.625rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-padding=0.25rem 1rem 0.125rem] - icon label padding
   */
  --sh-tab-item-icon-label-padding: 0.25rem 1rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-padding-access-bar=0.75rem 1rem] - icon label padding in access bar
   */
  --sh-tab-item-icon-label-padding-access-bar: 0.75rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-line-height=2rem] - icon label line-height
   */
  --sh-tab-item-icon-label-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-label-line-height=1rem] - label line-height
   */
  --sh-tab-item-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-height=3.5rem] - icon label height
   */
  --sh-tab-item-icon-label-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-height=4.5rem] - access-bar icon height
   */
  --sh-tab-item-access-bar-icon-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-padding=1.25rem 1rem 1.125rem] - access-bar icon padding
   */
  --sh-tab-item-access-bar-icon-padding: 1.25rem 1rem 1.125rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-line-height=2rem] - access-bar icon line height
   */
  --sh-tab-item-access-bar-icon-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-padding=0.25rem 1rem 0.125rem] - condensed icon padding
   */
  --sh-tab-item-condensed-icon-padding: 0.25rem 1rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-line-height=2rem] - condensed icon line height
   */
  --sh-tab-item-condensed-icon-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-height=2.5rem] - condensed icon height
   */
  --sh-tab-item-condensed-icon-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-height=4.5rem] - height of patient tab
   */
  --sh-tab-item-patient-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-height=2.5rem] - height of condensed tab
   */
  --sh-tab-item-condensed-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-normal-height=3.5rem] - height of tab
   */
  --sh-tab-item-normal-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-arrow-icons-padding=0 0.5rem] - padding in-between arrow icons
   */
  --sh-tab-item-arrow-icons-padding: 0 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-arrow-icons-line-height=2rem] - line-height of arrow icons
   */
  --sh-tab-item-arrow-icons-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-tab-item-padding=1rem 1rem 0.875rem] - padding of tab-item
   */
  --sh-tab-item-tab-item-padding: 1rem 1rem 0.875rem;
  /* 
   * @cssprop [--sh-tab-item-tab-item-line-height=1.5rem] - line-height of tab-item
   */
  --sh-tab-item-tab-item-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-padding=1.5rem 1rem 1.375rem] - padding of tab-item access bar
   */
  --sh-tab-item-access-bar-padding: 1.5rem 1rem 1.375rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-height=4.5rem] - height of tab-item access bar
   */
  --sh-tab-item-access-bar-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-line-height=1.5rem] - line-height of tab-item access bar
   */
  --sh-tab-item-access-bar-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-padding=0.5rem 1rem 0.375rem] - padding of condensed tab-item
   */
  --sh-tab-item-condensed-padding: 0.5rem 1rem 0.375rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-line-height=1.5rem] - line-height of condensed tab-item
   */
  --sh-tab-item-condensed-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-badge-margin=-1.8125rem -0.625rem 0rem 0.375rem] - badge margin of tab-item
   */
  --sh-tab-item-badge-margin: -1.8125rem -0.625rem 0rem 0.375rem;
  /* 
   * @cssprop [--sh-tab-item-empty-badge-margin=-2rem -0.5rem 0rem 0.5rem] - empty badge margin of tab-item
   */
  --sh-tab-item-empty-badge-margin: -2rem -0.5rem 0rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-slottedfn-mg-right=2rem] - margin right of patient slotted function in tab-item
   */
  --sh-tab-item-slottedfn-mg-right: 2rem;
  /* 
   * @cssprop [--sh-tab-item-slottedfn-mg-left=-0.5rem] - margin left of patient slotted function in tab-item
   */
  --sh-tab-item-slottedfn-mg-left: -0.5rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-right=0.5rem] - position of close icon right in tab-item
   */
  --sh-tab-item-close-icon-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-top=0.5rem] - position of close icon top in tab-item
   */
  --sh-tab-item-close-icon-top: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-mg-right=0.5rem] - margin right of patient icon in tab-item
   */
  --sh-tab-item-patient-mg-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-mg-left=0rem] - margin left of patient icon in tab-item
   */
  --sh-tab-item-patient-mg-left: 0rem;
  /* 
   * @cssprop [--sh-tab-item-pt-label-lh=1rem] - line-height of patient label in tab-item
   */
  --sh-tab-item-pt-label-lh: 1rem;
  /* 
   * @cssprop [--sh-tab-item-pt-info-lh=1rem] - line-height of patient info in tab-item
   */
  --sh-tab-item-pt-info-lh: 1rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-accessbar-top=0.5rem] - close icon position top in accessbar
   */
  --sh-tab-item-close-icon-accessbar-top: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-accessbar-right=0.5rem] - close icon position right in accessbar
   */
  --sh-tab-item-close-icon-accessbar-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-empty-badge-margin=-0.65rem -0.65rem 0.5rem 0.5rem] - empty badge margin for condensed tab
   */
  --sh-tab-item-condensed-empty-badge-margin: -0.65rem -0.65rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-badge-margin=-0.4rem -0.7rem 0.5rem 0.5rem] - badge margin for condensed tab
   */
  --sh-tab-item-condensed-badge-margin: -0.4rem -0.7rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-close-margin=0.8rem] - badge margin along with close icon
   */
  --sh-tab-item-tab-close-margin: 0.8rem;
  /* 
   * @cssprop [--sh-tab-item-tab-max-width=11.5rem] - max-width for a tab
   */
  --sh-tab-item-tab-max-width: 11.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-min-width=3.5rem] - min-width for a tab
   */
  --sh-tab-item-tab-min-width: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-l-max-width=23.5rem] - max-width of l size for a tab
   */
  --sh-tab-item-tab-l-max-width: 23.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-active-max-width=17.5rem] - max-width for patient tab
   */
  --sh-tab-item-patient-active-max-width: 17.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-min-width=11.5rem] - min-width for patient tab
   */
  --sh-tab-item-patient-min-width: 11.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-text-margin-right=1.5rem] - margin-right of text for patient tab
   */
  --sh-tab-item-patient-text-margin-right: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-patient-collapsed-input-height=2.5rem] - collapsed patient input-height of condensed view
   */
  --sh-tab-item-condensed-patient-collapsed-input-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-patient-collapsed-input-padding=0rem 0.5rem] - collapsed patient padding of condensed view
   */
  --sh-tab-item-condensed-patient-collapsed-input-padding: 0rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-popover-max-height=12.25rem] - collapsed patient popover max-height of condensed view
   */
  --sh-tab-item-patient-popover-max-height: 12.25rem;
  /* 
   * @cssprop [--sh-tab-item-patient-collapsed-height=3.5rem] - collapsed patient popover item height
   */
  --sh-tab-item-patient-collapsed-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-popover-max-height=11.25rem] - collapsed popover max-height
   */
  --sh-tab-item-popover-max-height: 11.25rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-input-height=4.5rem] - collapsed input height
   */
  --sh-tab-item-collapsed-input-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-collapsed-input-height=2.5rem] - condensed collapsed input height
   */
  --sh-tab-item-condensed-collapsed-input-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-text-lh=1rem] - text line-height
   */
  --sh-tab-item-text-lh: 1rem;
  /* 
   * @cssprop [--sh-tab-item-patient-close-icon-right=0.5rem] - position of close icon right in tab-item
   */
  --sh-tab-item-patient-close-icon-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-context-closable-padding-right=2rem] - padding-right of close icon of closable tab inside access-context
   */
  --sh-tab-item-access-context-closable-padding-right: 2rem;
  /* 
   * @cssprop [--sh-tab-item-expand-icon-font-size=2rem] - font size of expand-icon
   */
  --sh-tab-item-expand-icon-font-size: 2rem;
  /* 
   * @cssprop [--sh-tab-item-patient-padding=1.25rem 0.5rem 1.125rem 0.5rem] - padding of pattient tab
   */
  --sh-tab-item-patient-padding: 1.25rem 0.5rem 1.125rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-label-line-height=2.5rem] - line-height of collapsed tab
   */
  --sh-tab-item-collapsed-label-line-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-href-wrapper-margin=1.25rem 0.5rem] - margin of patient href wrapper
   */
  --sh-tab-item-patient-href-wrapper-margin: 1.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-patient-href-wrapper-margin=0.75rem 0.5rem] - margin of patient in collapsed href wrapper
   */
  --sh-tab-item-collapsed-patient-href-wrapper-margin: 0.75rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-href-wrapper-margin=1.25rem 1rem] - margin of patient href wrapper in access bar
   */
  --sh-tab-item-access-bar-icon-href-wrapper-margin: 1.25rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin=0.75rem 0rem] - margin of patient href wrapper in collapsed tab in access bar
   */
  --sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin: 0.75rem 0rem;
  /* 
   * @cssprop [--sh-tab-item-href-wrapper-margin=1.5rem 1rem] - margin of href wrapper
   */
  --sh-tab-item-href-wrapper-margin: 1.5rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-href-badge-margin-top=-0.6875rem] - margin top of href badge
   */
  --sh-tab-item-href-badge-margin-top: -0.6875rem;
  /* 
   * @cssprop [--sh-tab-item-href-empty-badge-margin-top=-0.5rem] - margin top of href empty badge
   */
  --sh-tab-item-href-empty-badge-margin-top: -0.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-href-padding=0rem 1rem] - padding of icon href
   */
  --sh-tab-item-icon-href-padding: 0rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-href-badge-margin-top=-0.3125rem] - margin top of href badge in access bar
   */
  --sh-tab-item-access-bar-href-badge-margin-top: -0.3125rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-href-default-badge-margin-top=0rem] - margin top of href default badge in access bar
   */
  --sh-tab-item-access-bar-href-default-badge-margin-top: 0rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-access-bar-href-default-badge-margin-top=-0.0625rem] - margin top of href default badge in condensed access bar
   */
  --sh-tab-item-condensed-access-bar-href-default-badge-margin-top: -0.0625rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-pt-href-wrapper-margin=0.25rem 0.5rem] - margin of condensed patient href wrapper 
   */
  --sh-tab-item-condensed-pt-href-wrapper-margin: 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-condensed-pt-href-wrapper-margin=0.25rem 0.5rem] - margin of collapsed condensed patient href wrapper 
   */
  --sh-tab-item-collapsed-condensed-pt-href-wrapper-margin: 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-href-wrapper-margin=0.25rem 0rem 0.125rem] - margin of condensed icon href wrapper 
   */
  --sh-tab-item-condensed-icon-href-wrapper-margin: 0.25rem 0rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-href-condensed-height=2.5rem] - height of condensed href anchor tag
   */
  --sh-tab-item-href-condensed-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-href-wrapper-margin=0.75rem 0.5rem] - margin of patient href wrapper
   */
  --sh-tab-item-icon-href-wrapper-margin: 0.75rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-href-badge-margin-top=-0.1875rem] - margin top of condensed badge
   */
  --sh-tab-item-condensed-href-badge-margin-top: -0.1875rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-href-empty-badge-margin-top=-0.0625rem] - margin top of condensed empty badge
   */
  --sh-tab-item-condensed-href-empty-badge-margin-top: -0.0625rem;
  /* 
   * @cssprop [--sh-tab-item-closable-condensed-href-badge-margin-top=-0.3125rem] - margin top of condensed closable badge
   */
  --sh-tab-item-closable-condensed-href-badge-margin-top: -0.3125rem;
  /* 
   * @cssprop [--sh-tab-item-closable-condensed-empty-href-badge-margin-top=-0.625rem] - margin top of closable condensed empty badge
   */
  --sh-tab-item-closable-condensed-empty-href-badge-margin-top: -0.625rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-collapsed-icon-href-wrapper-margin=0.25rem 0rem 0.125rem] - margin of condensed collapsed icon href wrapper 
   */
  --sh-tab-item-condensed-collapsed-icon-href-wrapper-margin: 0.25rem 0rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-href-accessbar-height=3.5rem] - collapsed href access bar height
   */
  --sh-tab-item-collapsed-href-accessbar-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-item-icon-margin=0 0.5rem 0 0] - margin of tab item icon in collapsed view
   */
  --sh-tab-item-tab-item-icon-margin: 0 0.5rem 0 0;
  /* 
   * @cssprop [--sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left=0.5rem] - margin of condensed collapsed patient icon href wrapper
   */
  --sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-icon-height=3.5rem] - collapsed icon height
   */
  --sh-tab-item-collapsed-icon-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-pt-href-wrapper-margin=0.25rem 0.5rem 0.25rem 0.5rem] - margin of condensed icon href wrapper in patient tab
   */
  --sh-tab-item-condensed-icon-pt-href-wrapper-margin: 0.25rem 0.5rem 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-only-href-wrapper-margin=0.25rem 1rem 0.125rem] - margin of condensed only icon href wrapper 
   */
  --sh-tab-item-condensed-icon-only-href-wrapper-margin: 0.25rem 1rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-min-width-tab=4rem] - min width of the tab item
   */
  --sh-tab-item-min-width-tab: 4rem;
}

:host {
  font: var(--title-1);
  color: var(--text-secondary);
  position: relative;
  overflow: hidden;
  outline: 0;
  max-width: var(--sh-tab-item-tab-max-width);
  min-width: var(--sh-tab-item-tab-min-width);
  height: var(--sh-tab-item-normal-height);
  box-sizing: border-box;
  padding: var(--sh-tab-item-tab-item-padding);
  line-height: var(--sh-tab-item-tab-item-line-height);
  border-bottom: 0.125rem solid transparent;
  transition: var(--transition-time) border ease-in-out;
  text-align: center;
  cursor: pointer;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  display: flex;
  align-items: center;
}

:host(:not([label])) {
  min-width: var(--sh-tab-item-min-width-tab);
}

:host([disabled]) {
  background: transparent;
  color: var(--text-disabled);
  pointer-events: none;
}

.text {
  overflow: hidden;
  font-size: var(--title-1);
  line-height: var(--sh-tab-item-text-line-height);
}

:host([href]) .href-wrapper {
  margin: 1rem;
}

:host([patient][href]) .href-wrapper,
:host([href][badge]:not([icon])) .href-wrapper {
  display: flex;
}

:host([icon][href][access-context]:not([label]):not([condensed])) .href-wrapper {
  margin: var(--sh-tab-item-access-bar-icon-href-wrapper-margin);
}

:host([icon][href][access-context][collapsed]:not([label]):not([condensed])) .href-wrapper {
  margin: var(--sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin);
}

:host([access-context]) {
  padding: var(--sh-tab-item-access-bar-padding);
  height: var(--sh-tab-item-access-bar-height);
  line-height: var(--sh-tab-item-access-bar-line-height);
}

:host([access-context][patient]) {
  height: var(--sh-tab-item-patient-height);
}

:host([condensed][access-context][patient]) {
  padding: var(--sh-tab-item-condensed-padding);
  height: var(--sh-tab-item-condensed-height);
  line-height: var(--sh-tab-item-condensed-line-height);
}

:host([access-context][patient][href][icon]) .href-wrapper,
:host([access-context][patient][href]) .href-wrapper {
  display: flex;
  align-items: center;
  margin: var(--sh-tab-item-patient-href-wrapper-margin);
  min-width: 0rem;
}

:host([icon][href][access-context][patient][collapsed]:not([condensed])) .href-wrapper,
:host([access-context][patient][href][collapsed]:not([condensed])) .href-wrapper {
  margin: var(--sh-tab-item-collapsed-patient-href-wrapper-margin);
}

:host([access-context][href]) .href-wrapper {
  margin: var(--sh-tab-item-href-wrapper-margin);
}

:host([condensed][href]) .href-wrapper {
  margin: 0.5rem 1rem;
}

:host([condensed][href][patient]) .href-wrapper {
  margin: var(--sh-tab-item-condensed-pt-href-wrapper-margin);
}

:host([condensed][href][patient][collapsed]) .href-wrapper {
  margin: var(--sh-tab-item-collapsed-condensed-pt-href-wrapper-margin);
}

:host([icon][access-context][href]:not([collapsed])) .href-wrapper,
:host([icon][href]:not([label]):not([condensed])) .href-wrapper {
  margin: var(--sh-tab-item-icon-href-wrapper-margin);
}

:host([icon][href]) .href-wrapper,
:host([icon][access-context][href][condensed]) .href-wrapper {
  margin: var(--sh-tab-item-condensed-icon-href-wrapper-margin);
}

:host([icon][href]:not([label])) .href-wrapper,
:host([icon][href][access-context]:not([label])[condensed]) .href-wrapper {
  margin: var(--sh-tab-item-condensed-icon-only-href-wrapper-margin);
}

:host([icon][access-context][href][condensed][patient]) .href-wrapper {
  margin: var(--sh-tab-item-condensed-icon-pt-href-wrapper-margin);
}

:host([access-context][patient][href]) a,
:host([access-context][href][collapsed]) a,
:host([access-context][href][collapsed]) .href-wrapper {
  display: flex;
  align-items: center;
}

:host([access-context][href][collapsed]) .href-wrapper {
  min-width: 0rem;
}

:host([icon][access-context][href][condensed][collapsed]) .href-wrapper {
  margin: var(--sh-tab-item-condensed-collapsed-icon-href-wrapper-margin);
}

:host([icon][access-context][href][condensed][collapsed][patient]) .href-wrapper {
  margin-left: var(--sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left);
}

:host([icon][href][label]),
:host([icon][href][access-context]),
:host([icon]:not([label])[href]) {
  padding: 0rem;
}

:host([icon][access-context][href][condensed]:not([collapsed])) {
  padding: var(--sh-tab-item-icon-href-padding);
}

:host([icon][access-context][label][condensed][collapsed]:not([patient])),
:host([icon][access-context][label][collapsed]:not([patient])) {
  padding: 0.5rem;
}

:host a {
  color: currentColor;
  text-decoration: none;
  margin: -1rem;
  width: calc(100% + 2rem);
}

:host([access-context][href]) a {
  height: var(--sh-tab-item-access-bar-height);
  margin: -1.5rem -1rem;
}

:host([access-context][href][collapsed]) a {
  height: var(--sh-tab-item-collapsed-href-accessbar-height);
}

:host([access-context][href][condensed]) a {
  height: var(--sh-tab-item-href-condensed-height);
}

:host([access-context][patient][href]) a {
  margin: -1.5rem -0.5rem;
  width: calc(100% + 1rem);
}

:host([condensed][href]) a {
  margin: -0.5rem -1rem;
}

:host([condensed][patient]) a {
  margin: -0.25rem -0.5rem;
}

:host([icon][href]) a {
  margin: 0rem;
}

:host([icon]) .label {
  line-height: var(--sh-tab-item-label-line-height);
}

.label,
.info,
.name {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
}

:host([active]) #tab-item-icon {
  color: var(--text-primary);
}

:host([disabled]) #tab-item-icon {
  color: var(--text-disabled);
}

:host([patient][disabled]) #close {
  display: none;
}

:host([icon]) #tab-item:not([collapsed]) {
  padding: 0.25rem 1rem 0.125rem 1rem;
  line-height: 1rem;
  font-size: 0.75rem;
}

:host([icon]:not([label])) {
  height: var(--sh-tab-item-icon-height);
  line-height: var(--sh-tab-item-icon-line-height);
  padding: var(--sh-tab-item-icon-padding);
}

:host([access-context][icon][href]) {
  height: var(--sh-tab-item-access-bar-height);
}

:host([access-context][icon][condensed][collapsed]),
:host([access-context][icon][href][condensed]) {
  height: var(--sh-tab-item-condensed-icon-height);
}

:host([access-context][icon][href][collapsed]:not([condensed])) {
  height: var(--sh-tab-item-collapsed-icon-height);
}

:host([icon][href]) {
  height: var(--sh-tab-item-icon-height);
}

:host([active]) {
  color: var(--text-primary);
  border-bottom: 0.125rem solid rgba(var(--ui-2), var(--opacity-1));
}

#tab-item-icon {
  color: var(--text-secondary);
}

:host([patient]) #tab-item-icon {
  margin-right: var(--sh-tab-item-patient-mg-right);
  margin-left: var(--sh-tab-item-patient-mg-left);
}

/* functions slot */
:host([href]:not([active])) slot[name=functions]::slotted(*) {
  display: none;
}

:host([href][patient]) slot[name=functions]::slotted(*),
:host([patient]) > ::slotted(*[slot=functions]) {
  width: 2rem;
  margin-right: var(--sh-tab-item-slottedfn-mg-right);
  margin-left: var(--sh-tab-item-slottedfn-mg-left);
}

:host(:not([active])) > ::slotted(*[slot=functions]) {
  width: 0rem;
  display: none;
  min-width: unset;
  margin: 0rem;
  opacity: 0;
}

/* patient tab */
sh-icon#close {
  opacity: 0;
  position: absolute;
  top: 0rem;
  right: var(--sh-tab-item-close-icon-right);
}

:host([patient]) .text {
  margin-right: var(--sh-tab-item-patient-text-margin-right);
}

:host([patient][href]) .text {
  margin: auto var(--sh-tab-item-patient-text-margin-right) auto 0;
}

sh-icon[icon=patient] {
  margin-right: var(--sh-tab-item-patient-mg-right);
  margin-left: var(--sh-tab-item-patient-mg-left);
}

:host([patient]) sh-icon[icon=patient] {
  display: flex;
  color: var(--text-secondary);
}

:host([patient][active]) sh-icon[icon=patient] {
  color: var(--text-primary);
}

:host([patient]) {
  display: flex;
  padding: var(--sh-tab-item-patient-padding) !important;
  line-height: 1rem;
  text-align: left;
  align-items: center;
  width: fit-content;
  min-width: var(--sh-tab-item-patient-min-width);
  max-width: var(--sh-tab-item-patient-min-width);
}

:host([patient][active]:not([collapsed])) {
  max-width: var(--sh-tab-item-patient-active-max-width);
}

:host([patient]) .label {
  font: var(--title-1);
  line-height: var(--sh-tab-item-pt-label-lh);
}

:host([patient]) .info {
  display: block;
  font: var(--body-2);
  line-height: var(--sh-tab-item-pt-info-lh);
}

:host([disabled]) .info {
  color: var(--text-disabled);
}

:host([disabled]) sh-icon[icon=patient] {
  color: var(--text-disabled);
}

:host([patient][condensed]) {
  padding: 0.25rem 0.5rem 0.125rem 0.5rem !important;
}

:host([icon][label]) {
  padding: var(--sh-tab-item-icon-label-padding);
  line-height: var(--sh-tab-item-icon-label-line-height);
  height: var(--sh-tab-item-icon-label-height);
  width: fit-content;
}

:host([icon][label][access-context]:not([href])) {
  padding: var(--sh-tab-item-icon-label-padding-access-bar);
}

:host([icon][label][collapsed]) {
  width: 100%;
}

:host([icon][label]) #tab-item-icon {
  display: block;
}

:host([patient][active][size=l]),
:host([size=l]:not([patient])) {
  max-width: var(--sh-tab-item-tab-l-max-width);
}

/* access bar */
:host([icon][label][access-context]) #tab-item-icon,
:host([icon][label][footer-context]) #tab-item-icon {
  display: block;
}

:host([icon][label][access-context]:not([href])) {
  height: var(--sh-tab-item-patient-height);
}

:host([icon][access-context]:not([label]):not([href])) {
  height: var(--sh-tab-item-access-bar-icon-height);
  padding: var(--sh-tab-item-access-bar-icon-padding);
  line-height: var(--sh-tab-item-access-bar-icon-line-height);
}

:host([icon][access-context][collapsed]:not([label]):not([condensed])) {
  height: var(--sh-tab-item-normal-height);
}

:host([condensed]) {
  padding: var(--sh-tab-item-condensed-padding);
  height: var(--sh-tab-item-condensed-height);
  line-height: var(--sh-tab-item-condensed-line-height);
  display: flex;
}

:host([icon][label][condensed]) {
  line-height: var(condensed-icon-line-height);
}

:host([icon][condensed]),
:host([icon][condensed]:not([label]):not([href])),
:host([icon][label][condensed][access-context]:not([href])) {
  padding: var(--sh-tab-item-condensed-icon-padding);
  line-height: var(--sh-tab-item-condensed-icon-line-height);
  height: var(--sh-tab-item-condensed-icon-height);
  margin-top: 0rem;
}

/* collapsed */
:host([collapsed]) {
  height: var(--sh-tab-item-condensed-collapsed-input-height);
  padding: 0.5rem;
  width: 100%;
  max-width: none;
  text-align: left;
  font-weight: 500;
  border: 0rem transparent;
  display: flex;
}

:host([icon][label][access-context][collapsed]:not([href]):not([condensed])),
:host([patient][collapsed]) {
  height: var(--sh-tab-item-patient-collapsed-height);
}

:host([icon][collapsed]),
:host([patient][collapsed]:not([info])) {
  height: 3rem;
}

:host([patient][collapsed]:hover:not(.touch-device)) #close {
  right: var(--sh-tab-item-patient-close-icon-right);
  background: transparent;
}

:host([active][collapsed]) {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host([collapsed]:not([label])) .name {
  display: flex;
  font: var(--body-1);
}

:host([collapsed]:not([label])) {
  padding: 0.5rem !important;
}

:host([collapsed]:not([patient])) .name,
:host([collapsed]:not([patient])) .label {
  line-height: var(--sh-tab-item-collapsed-label-line-height);
}

:host([icon][collapsed]) .name,
:host([icon][collapsed]) .label {
  line-height: 2rem;
}

:host([icon][collapsed][patient]) .name,
:host([icon][collapsed][patient]) .label {
  line-height: var(--sh-tab-item-pt-label-lh);
}

:host([collapsed][icon]:not([patient])) {
  display: flex;
}

:host([collapsed]) #tab-item-icon {
  margin: var(--sh-tab-item-tab-item-icon-margin);
}

/* hover */
:host(:hover:not(.touch-device)) #tab-item-icon,
:host(.touch-device):hover #tab-item-icon {
  color: var(--text-primary);
}

:host(:hover:not(.touch-device)) .label,
:host(.touch-device):hover .label {
  color: var(--text-primary);
}

:host([patient]:hover:not(.touch-device)) #close,
:host([patient][active].touch-device) #close,
:host([patient].touch-device) #close,
#close:focus {
  opacity: 1;
  top: var(--sh-tab-item-close-icon-top);
}

#close.item-focused {
  outline: var(--focus-outline);
}

:host([patient]:hover:not(.touch-device)) sh-icon[icon=patient],
:host([patient].touch-device):hover sh-icon[icon=patient] {
  color: var(--text-primary);
}

:host([icon]:not([patient])) {
  display: block;
}

:host([icon][label]:not([patient]):not([collapsed])) #tab-item-icon {
  margin: auto;
}

:host([icon][access-context]) sh-badge {
  position: absolute;
  right: 0.375rem;
  top: 0.375rem;
  margin: 0rem;
}

:host([icon][access-context][badge=""]) sh-badge {
  position: absolute;
  right: 0.5rem;
  top: 0.5rem;
  margin: 0rem;
}

:host([icon][badge=""]) sh-badge,
:host([icon]) sh-badge {
  position: absolute;
  right: 0.25rem;
  top: 0.25rem;
  margin: 0rem;
}

sh-icon:not(#close) {
  transition: 0s color;
}

:host([access-context][badge][collapsed][href]:not([closable]):not([condensed])) sh-badge,
:host([access-context]) sh-badge {
  margin-top: -1.125rem;
}

:host([access-context][badge=""][href][collapsed]:not([closable]):not([condensed])) sh-badge,
:host([access-context][badge=""]) sh-badge {
  margin-top: -1rem;
}

:host(:not([patient]):not([icon])) {
  overflow: unset;
}

sh-badge {
  margin: var(--sh-tab-item-badge-margin);
  transition: var(--transition-time) all ease-in-out;
}

:host([badge][href]:not([closable])) sh-badge {
  margin-top: var(--sh-tab-item-href-badge-margin-top);
}

:host([badge=""][href]:not([closable])) sh-badge {
  margin-top: var(--sh-tab-item-href-empty-badge-margin-top);
}

:host([badge][href][access-context]:not([closable]):not([condensed])) sh-badge {
  margin-top: var(--sh-tab-item-access-bar-href-badge-margin-top);
}

:host([badge=""][href][access-context]:not([closable]):not([collapsed]):not([condensed])) sh-badge {
  margin-top: var(--sh-tab-item-access-bar-href-default-badge-margin-top);
}

:host([badge=""][href][access-context][condensed]) sh-badge {
  margin-top: var(--sh-tab-item-condensed-access-bar-href-default-badge-margin-top);
}

:host([condensed][badge][href]) sh-badge {
  margin-top: var(--sh-tab-item-condensed-href-badge-margin-top);
}

:host([condensed][badge=""][href]:not([closable]):not([collapsed]):not([access-context])) sh-badge {
  margin-top: var(--sh-tab-item-condensed-href-empty-badge-margin-top);
}

:host([condensed][badge][href][closable]) sh-badge {
  margin-top: var(--sh-tab-item-closable-condensed-href-badge-margin-top);
}

:host([condensed][badge=""][href][closable]) sh-badge {
  margin-top: var(--sh-tab-item-closable-condensed-empty-href-badge-margin-top);
}

:host([href][closable]) .href-wrapper {
  display: flex;
  align-items: center;
}

:host([badge=""]) sh-badge {
  margin: var(--sh-tab-item-empty-badge-margin);
}

:host([badge=""]) sh-badge + .tab-close {
  margin-left: var(--sh-tab-item-tab-close-margin);
}

:host([condensed]) sh-badge {
  margin: var(--sh-tab-item-condensed-badge-margin);
}

:host([badge=""][href][access-context][condensed][collapsed]:not([closable])) sh-badge,
:host([condensed][badge=""]) sh-badge {
  margin: var(--sh-tab-item-condensed-empty-badge-margin);
}

:host([condensed][badge=""]) sh-badge + .tab-close {
  margin-left: 0.75rem;
}

:host([active].item-focused) {
  box-shadow: var(--focus-color) 0px 0.125rem 0px 0px inset, var(--focus-color) 0.125rem 0px 0px 0px inset, var(--focus-color) -0.125rem 0px 0px 0px inset;
  outline: none;
}

:host([active][collapsed].item-focused) {
  outline: var(--focus-outline);
}

:host(.item-focused) {
  box-shadow: none;
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
}

.tab-close,
:host([access-context][closable][disabled][condensed]) sh-badge {
  margin-left: 0.5rem;
}

:host([closable]:not([disabled])) {
  padding-right: 0.5rem;
}

:host([access-context][closable]:not([disabled])) {
  padding-right: var(--sh-tab-item-access-context-closable-padding-right);
}

:host([access-context][closable]:not([disabled])) .tab-close {
  margin: 0rem;
  position: absolute;
  top: var(--sh-tab-item-close-icon-accessbar-top);
  right: var(--sh-tab-item-close-icon-accessbar-right);
}

:host([access-context][closable]:not([disabled])) .label {
  margin-right: 0.5rem;
}

:host([access-context][closable][condensed]) sh-badge {
  margin: -0.125rem 0 0 0;
}

:host([access-context][closable]) sh-badge {
  margin: -1.125rem 0 0 0;
}`;

  // ../sh-tabs/src/sh-tab-item.js
  var SHTabItem = class extends FocusBlurMixin2(ControlStateMixin2(s4)) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        name: { type: String, reflect: true },
        info: { type: String, reflect: true },
        href: { type: String, reflect: true },
        patient: { type: Boolean, reflect: true },
        active: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        role: { type: String, reflect: true },
        icon: { type: String, reflect: true },
        size: { type: String, reflect: true },
        collapsed: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        sticky: { type: Boolean, reflect: true },
        _accessContext: {
          type: Boolean,
          reflect: true,
          attribute: "access-context"
        },
        _footerContext: {
          type: Boolean,
          reflect: true,
          attribute: "footer-context"
        },
        badge: { type: String, reflect: true },
        closable: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sharedStyles, sh_tab_item_lit_scss_default];
    }
    constructor() {
      super();
      this.size = "m";
    }
    render() {
      return x`
      ${this.href ? x`<a href="${this.href}">
            <div class="href-wrapper">${this._getTabItemTemplate()}</div>
          </a>` : this._getTabItemTemplate()}
      ${!this.sticky && this.patient ? x` <sh-icon
            icon="cancel"
            button
            size="s"
            @click="${(e8) => this._removeTab(e8)}"
            id="close"
            tabindex="0"
          ></sh-icon>` : ""}
    `;
    }
    _getTabItemTemplate() {
      return x`${this.patient && !this.icon ? x` <sh-icon icon="patient"></sh-icon>` : this.icon ? x` <sh-icon icon="${this.icon}" id="tab-item-icon"></sh-icon>` : ""}
    ${this.label || this.name || this.info ? x` <div class="text">
          ${this.label ? x` <div class="label" @mouseenter="${(e8) => this._showTooltip(e8, this.label)}">
                ${this.label}
              </div>` : ""}
          ${this.collapsed && !this.label && this.name ? x` <div class="name">${this.name}</div>` : ""}
          ${this.patient && this.info ? x` <div class="info" @mouseenter="${(e8) => this._showTooltip(e8, this.info)}">
                ${this.info}
              </div>` : ""}
          <sh-tooltip placement="bottom-left" position-fixed-adjustment></sh-tooltip>
        </div>` : ""}
    ${!this.patient && this.badge !== null && (this.badge === "error" || this.badge === "success" || this.badge === "warning") ? x` <sh-badge type="${this.badge}" ?disabled="${this.disabled}"></sh-badge>` : ""}
    ${!this.patient && this.badge !== null && !isNaN(this.badge) && this.badge !== "" ? x` <sh-badge label="${this.badge}" ?disabled="${this.disabled}"></sh-badge>` : ""}
    ${!this.patient && this.badge !== null && this.badge === "" && this.closable ? x` <sh-badge ?disabled="${this.disabled}"></sh-badge>` : ""}
    ${!this.patient && this.closable && !this.disabled ? x` <sh-icon
          icon="cancel"
          size="s"
          button
          ?disabled="${this.disabled}"
          class="tab-close"
          @click="${(e8) => this._removeTab(e8)}"
        ></sh-icon>` : ""}
    ${this.patient ? x` <slot name="functions"></slot>` : ""}
    ${!this.patient && this.badge !== null && this.badge === "" && !this.closable ? x` <sh-badge ?disabled="${this.disabled}"></sh-badge>` : ""} `;
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.role = "tab";
      }
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    firstUpdated() {
      super.firstUpdated();
      this._setContext();
      this.addEventListener("click", this._clickEventListener);
      if (!this.active) {
        this.setAttribute("tabindex", "-1");
      } else {
        this.setAttribute("tabindex", "0");
      }
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("active")) {
        if (!this.active) {
          this.setAttribute("tabindex", "-1");
        } else {
          this.setAttribute("tabindex", "0");
        }
      }
      const listOfProperties = [
        "label",
        "name",
        "info",
        "href",
        "patient",
        "active",
        "disabled",
        "role",
        "icon",
        "size",
        "collapsed",
        "condensed",
        "sticky",
        "badge"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _showTooltip(e8, content) {
      const tooltip = this.shadowRoot.querySelector("sh-tooltip");
      DisplayTooltip(e8, content, tooltip);
    }
    _setContext() {
      const tabs = this.closest("sh-tabs");
      if (tabs) {
        this._accessContext = tabs._accessContext;
        this._footerContext = tabs._footerContext;
      }
    }
    _clickEventListener() {
      this._dispatchClickedEvent();
      if (this.href === void 0 || this.href === null)
        return;
      window.location.href = this.href;
    }
    _removeTab(e8) {
      e8.stopPropagation();
      dispatchCustomEvent(this, "closed");
    }
    _dispatchClickedEvent() {
      dispatchCustomEvent(this, "clicked");
      this.active = true;
    }
    handleKeyup(e8) {
      let siblings = this.parentElement.querySelectorAll("SH-TAB-ITEM:not([disabled])");
      let target;
      if (e8.code === "Tab" && !this.disabled) {
        if (document.activeElement === this && !this.shadowRoot.activeElement) {
          this.classList.add("item-focused");
        } else {
          this.classList.remove("item-focused");
        }
      }
      if ((e8.code === "Space" || e8.code === "Enter" || e8.code === "NumpadEnter") && document.activeElement === this && !this.shadowRoot.activeElement) {
        this._dispatchClickedEvent();
      } else if (e8.code === "ArrowRight" || e8.code === "ArrowDown") {
        let posThis = Array.from(siblings).indexOf(this);
        if (posThis === siblings.length - 1) {
          target = siblings[0];
        } else {
          target = siblings[posThis + 1];
        }
        this.handleArrowInput(e8, target);
      } else if (e8.code === "ArrowLeft" || e8.code === "ArrowUp") {
        let posThis = Array.from(siblings).indexOf(this);
        if (posThis === 0) {
          target = siblings[siblings.length - 1];
        } else {
          target = siblings[posThis - 1];
        }
        this.handleArrowInput(e8, target);
      }
    }
    handleArrowInput(e8, target) {
      if (target) {
        e8.preventDefault();
        target.focus();
        target.classList.add("item-focused");
      }
    }
  };
  customElements.define("sh-tab-item", SHTabItem);

  // ../sh-tabs/src/sh-tabs.lit.scss.js
  var sh_tabs_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-tab-item-text-line-height=1.5rem] - text line height
   */
  --sh-tab-item-text-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-height=3.5rem] - icon height
   */
  --sh-tab-item-icon-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-line-height=2rem] - icon line-height
   */
  --sh-tab-item-icon-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-icon-padding=0.75rem 1rem 0.625rem] - icon padding
   */
  --sh-tab-item-icon-padding: 0.75rem 1rem 0.625rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-padding=0.25rem 1rem 0.125rem] - icon label padding
   */
  --sh-tab-item-icon-label-padding: 0.25rem 1rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-padding-access-bar=0.75rem 1rem] - icon label padding in access bar
   */
  --sh-tab-item-icon-label-padding-access-bar: 0.75rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-line-height=2rem] - icon label line-height
   */
  --sh-tab-item-icon-label-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-label-line-height=1rem] - label line-height
   */
  --sh-tab-item-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-tab-item-icon-label-height=3.5rem] - icon label height
   */
  --sh-tab-item-icon-label-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-height=4.5rem] - access-bar icon height
   */
  --sh-tab-item-access-bar-icon-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-padding=1.25rem 1rem 1.125rem] - access-bar icon padding
   */
  --sh-tab-item-access-bar-icon-padding: 1.25rem 1rem 1.125rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-line-height=2rem] - access-bar icon line height
   */
  --sh-tab-item-access-bar-icon-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-padding=0.25rem 1rem 0.125rem] - condensed icon padding
   */
  --sh-tab-item-condensed-icon-padding: 0.25rem 1rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-line-height=2rem] - condensed icon line height
   */
  --sh-tab-item-condensed-icon-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-height=2.5rem] - condensed icon height
   */
  --sh-tab-item-condensed-icon-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-height=4.5rem] - height of patient tab
   */
  --sh-tab-item-patient-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-height=2.5rem] - height of condensed tab
   */
  --sh-tab-item-condensed-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-normal-height=3.5rem] - height of tab
   */
  --sh-tab-item-normal-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-arrow-icons-padding=0 0.5rem] - padding in-between arrow icons
   */
  --sh-tab-item-arrow-icons-padding: 0 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-arrow-icons-line-height=2rem] - line-height of arrow icons
   */
  --sh-tab-item-arrow-icons-line-height: 2rem;
  /* 
   * @cssprop [--sh-tab-item-tab-item-padding=1rem 1rem 0.875rem] - padding of tab-item
   */
  --sh-tab-item-tab-item-padding: 1rem 1rem 0.875rem;
  /* 
   * @cssprop [--sh-tab-item-tab-item-line-height=1.5rem] - line-height of tab-item
   */
  --sh-tab-item-tab-item-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-padding=1.5rem 1rem 1.375rem] - padding of tab-item access bar
   */
  --sh-tab-item-access-bar-padding: 1.5rem 1rem 1.375rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-height=4.5rem] - height of tab-item access bar
   */
  --sh-tab-item-access-bar-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-line-height=1.5rem] - line-height of tab-item access bar
   */
  --sh-tab-item-access-bar-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-padding=0.5rem 1rem 0.375rem] - padding of condensed tab-item
   */
  --sh-tab-item-condensed-padding: 0.5rem 1rem 0.375rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-line-height=1.5rem] - line-height of condensed tab-item
   */
  --sh-tab-item-condensed-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-badge-margin=-1.8125rem -0.625rem 0rem 0.375rem] - badge margin of tab-item
   */
  --sh-tab-item-badge-margin: -1.8125rem -0.625rem 0rem 0.375rem;
  /* 
   * @cssprop [--sh-tab-item-empty-badge-margin=-2rem -0.5rem 0rem 0.5rem] - empty badge margin of tab-item
   */
  --sh-tab-item-empty-badge-margin: -2rem -0.5rem 0rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-slottedfn-mg-right=2rem] - margin right of patient slotted function in tab-item
   */
  --sh-tab-item-slottedfn-mg-right: 2rem;
  /* 
   * @cssprop [--sh-tab-item-slottedfn-mg-left=-0.5rem] - margin left of patient slotted function in tab-item
   */
  --sh-tab-item-slottedfn-mg-left: -0.5rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-right=0.5rem] - position of close icon right in tab-item
   */
  --sh-tab-item-close-icon-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-top=0.5rem] - position of close icon top in tab-item
   */
  --sh-tab-item-close-icon-top: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-mg-right=0.5rem] - margin right of patient icon in tab-item
   */
  --sh-tab-item-patient-mg-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-mg-left=0rem] - margin left of patient icon in tab-item
   */
  --sh-tab-item-patient-mg-left: 0rem;
  /* 
   * @cssprop [--sh-tab-item-pt-label-lh=1rem] - line-height of patient label in tab-item
   */
  --sh-tab-item-pt-label-lh: 1rem;
  /* 
   * @cssprop [--sh-tab-item-pt-info-lh=1rem] - line-height of patient info in tab-item
   */
  --sh-tab-item-pt-info-lh: 1rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-accessbar-top=0.5rem] - close icon position top in accessbar
   */
  --sh-tab-item-close-icon-accessbar-top: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-close-icon-accessbar-right=0.5rem] - close icon position right in accessbar
   */
  --sh-tab-item-close-icon-accessbar-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-empty-badge-margin=-0.65rem -0.65rem 0.5rem 0.5rem] - empty badge margin for condensed tab
   */
  --sh-tab-item-condensed-empty-badge-margin: -0.65rem -0.65rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-badge-margin=-0.4rem -0.7rem 0.5rem 0.5rem] - badge margin for condensed tab
   */
  --sh-tab-item-condensed-badge-margin: -0.4rem -0.7rem 0.5rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-close-margin=0.8rem] - badge margin along with close icon
   */
  --sh-tab-item-tab-close-margin: 0.8rem;
  /* 
   * @cssprop [--sh-tab-item-tab-max-width=11.5rem] - max-width for a tab
   */
  --sh-tab-item-tab-max-width: 11.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-min-width=3.5rem] - min-width for a tab
   */
  --sh-tab-item-tab-min-width: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-l-max-width=23.5rem] - max-width of l size for a tab
   */
  --sh-tab-item-tab-l-max-width: 23.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-active-max-width=17.5rem] - max-width for patient tab
   */
  --sh-tab-item-patient-active-max-width: 17.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-min-width=11.5rem] - min-width for patient tab
   */
  --sh-tab-item-patient-min-width: 11.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-text-margin-right=1.5rem] - margin-right of text for patient tab
   */
  --sh-tab-item-patient-text-margin-right: 1.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-patient-collapsed-input-height=2.5rem] - collapsed patient input-height of condensed view
   */
  --sh-tab-item-condensed-patient-collapsed-input-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-patient-collapsed-input-padding=0rem 0.5rem] - collapsed patient padding of condensed view
   */
  --sh-tab-item-condensed-patient-collapsed-input-padding: 0rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-popover-max-height=12.25rem] - collapsed patient popover max-height of condensed view
   */
  --sh-tab-item-patient-popover-max-height: 12.25rem;
  /* 
   * @cssprop [--sh-tab-item-patient-collapsed-height=3.5rem] - collapsed patient popover item height
   */
  --sh-tab-item-patient-collapsed-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-popover-max-height=11.25rem] - collapsed popover max-height
   */
  --sh-tab-item-popover-max-height: 11.25rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-input-height=4.5rem] - collapsed input height
   */
  --sh-tab-item-collapsed-input-height: 4.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-collapsed-input-height=2.5rem] - condensed collapsed input height
   */
  --sh-tab-item-condensed-collapsed-input-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-text-lh=1rem] - text line-height
   */
  --sh-tab-item-text-lh: 1rem;
  /* 
   * @cssprop [--sh-tab-item-patient-close-icon-right=0.5rem] - position of close icon right in tab-item
   */
  --sh-tab-item-patient-close-icon-right: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-context-closable-padding-right=2rem] - padding-right of close icon of closable tab inside access-context
   */
  --sh-tab-item-access-context-closable-padding-right: 2rem;
  /* 
   * @cssprop [--sh-tab-item-expand-icon-font-size=2rem] - font size of expand-icon
   */
  --sh-tab-item-expand-icon-font-size: 2rem;
  /* 
   * @cssprop [--sh-tab-item-patient-padding=1.25rem 0.5rem 1.125rem 0.5rem] - padding of pattient tab
   */
  --sh-tab-item-patient-padding: 1.25rem 0.5rem 1.125rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-label-line-height=2.5rem] - line-height of collapsed tab
   */
  --sh-tab-item-collapsed-label-line-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-patient-href-wrapper-margin=1.25rem 0.5rem] - margin of patient href wrapper
   */
  --sh-tab-item-patient-href-wrapper-margin: 1.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-patient-href-wrapper-margin=0.75rem 0.5rem] - margin of patient in collapsed href wrapper
   */
  --sh-tab-item-collapsed-patient-href-wrapper-margin: 0.75rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-icon-href-wrapper-margin=1.25rem 1rem] - margin of patient href wrapper in access bar
   */
  --sh-tab-item-access-bar-icon-href-wrapper-margin: 1.25rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin=0.75rem 0rem] - margin of patient href wrapper in collapsed tab in access bar
   */
  --sh-tab-item-collapsed-access-bar-icon-href-wrapper-margin: 0.75rem 0rem;
  /* 
   * @cssprop [--sh-tab-item-href-wrapper-margin=1.5rem 1rem] - margin of href wrapper
   */
  --sh-tab-item-href-wrapper-margin: 1.5rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-href-badge-margin-top=-0.6875rem] - margin top of href badge
   */
  --sh-tab-item-href-badge-margin-top: -0.6875rem;
  /* 
   * @cssprop [--sh-tab-item-href-empty-badge-margin-top=-0.5rem] - margin top of href empty badge
   */
  --sh-tab-item-href-empty-badge-margin-top: -0.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-href-padding=0rem 1rem] - padding of icon href
   */
  --sh-tab-item-icon-href-padding: 0rem 1rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-href-badge-margin-top=-0.3125rem] - margin top of href badge in access bar
   */
  --sh-tab-item-access-bar-href-badge-margin-top: -0.3125rem;
  /* 
   * @cssprop [--sh-tab-item-access-bar-href-default-badge-margin-top=0rem] - margin top of href default badge in access bar
   */
  --sh-tab-item-access-bar-href-default-badge-margin-top: 0rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-access-bar-href-default-badge-margin-top=-0.0625rem] - margin top of href default badge in condensed access bar
   */
  --sh-tab-item-condensed-access-bar-href-default-badge-margin-top: -0.0625rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-pt-href-wrapper-margin=0.25rem 0.5rem] - margin of condensed patient href wrapper 
   */
  --sh-tab-item-condensed-pt-href-wrapper-margin: 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-condensed-pt-href-wrapper-margin=0.25rem 0.5rem] - margin of collapsed condensed patient href wrapper 
   */
  --sh-tab-item-collapsed-condensed-pt-href-wrapper-margin: 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-href-wrapper-margin=0.25rem 0rem 0.125rem] - margin of condensed icon href wrapper 
   */
  --sh-tab-item-condensed-icon-href-wrapper-margin: 0.25rem 0rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-href-condensed-height=2.5rem] - height of condensed href anchor tag
   */
  --sh-tab-item-href-condensed-height: 2.5rem;
  /* 
   * @cssprop [--sh-tab-item-icon-href-wrapper-margin=0.75rem 0.5rem] - margin of patient href wrapper
   */
  --sh-tab-item-icon-href-wrapper-margin: 0.75rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-href-badge-margin-top=-0.1875rem] - margin top of condensed badge
   */
  --sh-tab-item-condensed-href-badge-margin-top: -0.1875rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-href-empty-badge-margin-top=-0.0625rem] - margin top of condensed empty badge
   */
  --sh-tab-item-condensed-href-empty-badge-margin-top: -0.0625rem;
  /* 
   * @cssprop [--sh-tab-item-closable-condensed-href-badge-margin-top=-0.3125rem] - margin top of condensed closable badge
   */
  --sh-tab-item-closable-condensed-href-badge-margin-top: -0.3125rem;
  /* 
   * @cssprop [--sh-tab-item-closable-condensed-empty-href-badge-margin-top=-0.625rem] - margin top of closable condensed empty badge
   */
  --sh-tab-item-closable-condensed-empty-href-badge-margin-top: -0.625rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-collapsed-icon-href-wrapper-margin=0.25rem 0rem 0.125rem] - margin of condensed collapsed icon href wrapper 
   */
  --sh-tab-item-condensed-collapsed-icon-href-wrapper-margin: 0.25rem 0rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-href-accessbar-height=3.5rem] - collapsed href access bar height
   */
  --sh-tab-item-collapsed-href-accessbar-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-tab-item-icon-margin=0 0.5rem 0 0] - margin of tab item icon in collapsed view
   */
  --sh-tab-item-tab-item-icon-margin: 0 0.5rem 0 0;
  /* 
   * @cssprop [--sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left=0.5rem] - margin of condensed collapsed patient icon href wrapper
   */
  --sh-tab-item-condensed-collapsed-pt-icon-href-wrapper-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-collapsed-icon-height=3.5rem] - collapsed icon height
   */
  --sh-tab-item-collapsed-icon-height: 3.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-pt-href-wrapper-margin=0.25rem 0.5rem 0.25rem 0.5rem] - margin of condensed icon href wrapper in patient tab
   */
  --sh-tab-item-condensed-icon-pt-href-wrapper-margin: 0.25rem 0.5rem 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-tab-item-condensed-icon-only-href-wrapper-margin=0.25rem 1rem 0.125rem] - margin of condensed only icon href wrapper 
   */
  --sh-tab-item-condensed-icon-only-href-wrapper-margin: 0.25rem 1rem 0.125rem;
  /* 
   * @cssprop [--sh-tab-item-min-width-tab=4rem] - min width of the tab item
   */
  --sh-tab-item-min-width-tab: 4rem;
}

:host {
  position: relative;
  display: flex;
  flex-direction: row;
  align-items: center;
  overflow: hidden;
  border-bottom: 0.0625rem solid rgba(var(--ui-1), var(--opacity-7));
}

:host(.item-focused) {
  outline: var(--focus-outline);
  outline-offset: -0.125rem;
}

:host([access-context]),
:host([nav-context]),
:host([footer-context]) {
  border-bottom: none;
}

/* collapsed */
.collapsed-popover {
  position: absolute;
  top: 100%;
  left: 0rem;
  background: var(--base-3);
  box-shadow: var(--shadow-overlay);
  border-radius: 0.125rem;
  max-height: var(--sh-tab-item-popover-max-height);
  opacity: 0;
  transform: translateY(-1.5rem);
  overflow: hidden;
  display: none;
  transition: var(--transition-time) all ease-in-out;
}

:host([collapsed][active]) .collapsed-popover {
  overflow: auto;
  max-height: var(--sh-tab-item-patient-popover-max-height);
  opacity: 1;
  transform: none;
  display: block;
  width: fit-content;
}

:host([collapsed][active]) #expand-icon {
  transform: rotate(180deg);
}

:host([collapsed]) {
  overflow: visible;
}

:host([collapsed]) .collapsed-input {
  cursor: pointer;
  height: var(--sh-tab-item-collapsed-input-height);
  min-width: 6.25rem;
  max-width: 25.5rem;
  padding: 1.25rem 0.5rem;
  box-sizing: border-box;
  font: var(--body-1);
  color: var(--text-primary);
  line-height: 2rem;
  width: fit-content;
  display: flex;
  flex-direction: row;
  align-items: center;
}

:host([collapsed][condensed]) .collapsed-input {
  height: var(--sh-tab-item-condensed-patient-collapsed-input-height);
  padding: var(--sh-tab-item-condensed-patient-collapsed-input-padding);
}

:host([collapsed][condensed]) .text {
  line-height: var(--sh-tab-item-collapsed-label-line-height);
}

:host([collapsed][condensed]) .info {
  display: none;
}

#expand-icon {
  transition: 0s transform, var(--transition-time) color ease-in-out;
  margin-left: 0.5rem;
  color: rgba(var(--ui-1), var(--opacity-4));
  --sh-icon-font-size-m: var(--sh-tab-item-expand-icon-font-size);
}

#tab-icon {
  color: rgba(var(--ui-1), var(--opacity-2));
  margin-right: 0.5rem;
}

:host([info]) .text {
  font: var(--title-1);
  line-height: var(--sh-tab-item-text-lh);
}

.text {
  color: var(--text-primary);
  flex-direction: column;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  line-height: var(--sh-tab-item-collapsed-label-line-height);
}

.info {
  font: var(--body-2);
  color: var(--text-secondary);
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  line-height: var(--sh-tab-item-text-lh);
}

.items-scroll-wrapper {
  display: flex;
  width: fit-content;
  width: -moz-fit-content;
}

.items-wrapper {
  overflow-x: scroll;
  overflow-y: hidden;
  scrollbar-width: none;
  scroll-behavior: smooth;
  scroll-snap-type: x proximity;
}

.arrow-icons {
  align-items: center;
  padding: var(--sh-tab-item-arrow-icons-padding);
  line-height: var(--sh-tab-item-arrow-icons-line-height);
}

:host([condensed]) .arrow-icons {
  padding: var(--sh-tab-item-arrow-icons-padding);
  line-height: var(--sh-tab-item-arrow-icons-line-height);
}

:host([access-context]:not([condensed])) .arrow-icons {
  padding: 1.25rem 0;
}

::-webkit-scrollbar {
  height: 0rem;
}

.hidden,
:host([no-arrows]) .arrow-icons {
  display: none;
}

/* hover */
:host([collapsed]:not(.no-hovermq)) .collapsed-input:hover #expand-icon {
  color: rgba(var(--ui-1), var(--opacity-3));
}

:host([no-scroll]) .no-scroll {
  display: flex;
  margin: 0.0625rem 0;
}`;

  // ../sh-tabs/src/sh-tabs.js
  var SHTabs = class extends FocusBlurMixin2(s4) {
    static get properties() {
      return {
        role: { type: String, reflect: true },
        collapsed: { type: Boolean, reflect: true },
        active: { type: Boolean, reflect: true },
        label: { type: String, reflect: true },
        icon: { type: String, reflect: true },
        info: { type: String, reflect: true },
        _accessContext: {
          type: Boolean,
          reflect: true,
          attribute: "access-context"
        },
        _navContext: { type: Boolean, reflect: true, attribute: "nav-context" },
        _footerContext: {
          type: Boolean,
          reflect: true,
          attribute: "footer-context"
        },
        condensed: { type: Boolean, reflect: true },
        fixed: { type: Boolean, reflect: true },
        scrollable: { type: Boolean, reflect: true },
        noArrows: { type: Boolean, reflect: true, attribute: "no-arrows" },
        noScroll: { type: Boolean, reflect: true, attribute: "no-scroll" }
      };
    }
    static get styles() {
      return [sharedStyles, sh_tabs_lit_scss_default];
    }
    render() {
      return x`
      ${this.collapsed ? x` <div class="collapsed-input" @click="${() => this._show()}">
              ${this.icon ? x`<sh-icon icon="${this.icon}" id="tab-icon"></sh-icon>` : ``}

              <div class="text">
                ${this.label} ${this.info ? x` <div class="info">${this.info}</div> ` : ``}
              </div>
              ${this.info ? x` <div class="info"></div> ` : ``}
              <sh-icon icon="down-s" id="expand-icon"></sh-icon>
            </div>
            <div class="collapsed-popover">
              <slot id="collapsed-slot" @slotchange="${this._handleTabsSlotChange}"></slot>
            </div>` : x` ${this.scrollable && !this.noScroll ? x`<sh-icon
                icon="arrow-line-left-s"
                button
                @click="${() => this.scrollTabs("left")}"
                class="arrow-icons left hidden"
              ></sh-icon>` : ""}
          ${this.noScroll ? x` <div class="no-scroll">
                <slot id="main-slot" @slotchange="${this._handleTabsSlotChange}"></slot>
              </div>` : x` <div class="items-wrapper" @scroll="${this._handleArrows.bind(this)}">
                <div class="items-scroll-wrapper">
                  <slot id="main-slot" @slotchange="${this._handleTabsSlotChange}"></slot>
                </div>
              </div>`}
          ${this.scrollable && !this.noScroll ? x`<sh-icon
                icon="arrow-line-right-s"
                button
                @click="${() => this.scrollTabs("right")}"
                class="arrow-icons right"
              ></sh-icon>` : ""}`}
    `;
    }
    constructor() {
      super();
      this.fixed = false;
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.role = "navigation";
      }
      if (!Modernizr.hovermq) {
        this.classList.add("no-hovermq");
      }
      this.resizeObserver = new ResizeObserver(() => {
        if (this.collapsed)
          return;
        const itemsScrollWrapper = this.shadowRoot.querySelector(".items-scroll-wrapper");
        if (!itemsScrollWrapper)
          return;
        if (itemsScrollWrapper.getBoundingClientRect().width > this.getBoundingClientRect().width) {
          this._handleOverflow(true);
        } else {
          this._handleOverflow(false);
        }
      });
      this.resizeObserver.observe(this);
      this.addEventListener("clicked", function(e8) {
        this.label = e8.target.label;
        this.icon = e8.target.icon;
        if (e8.target.patient === true) {
          this.icon = "patient";
          this.info = e8.target.info;
        } else {
          this.info = null;
        }
        if (e8.target.label === void 0) {
          this.label = e8.target.name;
        }
        this._makeTabItemsInactive();
        this._hide();
      });
    }
    disconnectedCallback() {
      this.resizeObserver.disconnect();
      super.disconnectedCallback();
    }
    firstUpdated() {
      super.firstUpdated();
      if (this.condensed) {
        this.setAttribute("tabindex", "0");
      } else {
        this.removeAttribute("tabindex");
      }
      this.addEventListener("focusout", function(event) {
        if (this.contains(event.relatedTarget))
          return;
        this.active = false;
      });
    }
    updated(changedProperties) {
      if (changedProperties.has("collapsed")) {
        this._collapsedChanged();
      }
      if (changedProperties.has("condensed")) {
        this._condensedChanged();
      }
      const listOfProperties = [
        "role",
        "collapsed",
        "active",
        "label",
        "icon",
        "info",
        "condensed",
        "fixed"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    scrollTabs(direction) {
      const itemsWrapper = this.shadowRoot.querySelector(".items-wrapper");
      if (direction === "left") {
        itemsWrapper.scrollLeft -= 100;
      } else {
        itemsWrapper.scrollLeft += 100;
      }
    }
    _handleOverflow(isOverflowing) {
      this.scrollable = isOverflowing;
    }
    _handleArrows() {
      const itemsWrapper = this.shadowRoot.querySelector(".items-wrapper");
      if (!itemsWrapper)
        return;
      const leftIcon = this.shadowRoot.querySelector("sh-icon.left");
      const rightIcon = this.shadowRoot.querySelector("sh-icon.right");
      if (leftIcon) {
        if (itemsWrapper.scrollLeft == 0) {
          leftIcon.classList.add("hidden");
        } else {
          leftIcon.classList.remove("hidden");
        }
      }
      if (rightIcon) {
        if (Math.ceil(itemsWrapper.scrollLeft + itemsWrapper.offsetWidth) >= itemsWrapper.scrollWidth) {
          rightIcon.classList.add("hidden");
        } else {
          rightIcon.classList.remove("hidden");
        }
      }
    }
    _makeTabItemsInactive() {
      const children = this.querySelectorAll("sh-tab-item[active]");
      for (let i7 = 0; i7 < children.length; i7++) {
        children[i7].active = false;
      }
    }
    _setTabsProperties() {
      const activeTab = this.querySelector("[active]");
      if (activeTab === null)
        return;
      if (activeTab.attributes.name !== void 0) {
        this.label = activeTab.attributes.name.value;
      } else if (activeTab.attributes.label !== void 0) {
        this.label = activeTab.attributes.label.value;
      }
      if (activeTab.attributes.patient !== void 0) {
        this.icon = "patient";
        if (activeTab.attributes.info !== void 0) {
          this.info = activeTab.attributes.info.value;
        }
      } else if (activeTab.attributes.icon !== void 0) {
        this.icon = activeTab.attributes.icon.value;
      }
    }
    _condensedChanged() {
      const tabItems = this.querySelectorAll("sh-tab-item");
      for (let i7 = 0; i7 < tabItems.length; i7++) {
        tabItems[i7].condensed = this.condensed;
      }
    }
    _collapsedChanged() {
      const tabItems = this.querySelectorAll("sh-tab-item");
      for (let i7 = 0; i7 < tabItems.length; i7++) {
        tabItems[i7].collapsed = this.collapsed;
      }
      if (this.collapsed) {
        this.setAttribute("tabindex", "1");
      } else {
        this.removeAttribute("tabindex");
      }
    }
    _show() {
      if (this.active === true) {
        this._hide();
        return;
      }
      this.active = true;
    }
    _hide() {
      this.active = false;
    }
    _handleTabsSlotChange() {
      const tabItem = this.querySelectorAll("sh-tab-item");
      if (this._accessContext) {
        tabItem.forEach((el) => {
          el._accessContext = true;
        });
      }
      this._setTabsProperties();
      this._collapsedChanged();
      this._condensedChanged();
    }
    handleKeyup(e8) {
      super.handleKeyup(e8);
      if (e8.code === "Space" || e8.code === "Enter" || e8.code === "NumpadEnter") {
        this.toggleAttribute("active");
      }
      if (e8.code === "ArrowDown" && this.collapsed && this.active) {
        let fChild = this.querySelector("SH-TAB-ITEM:not([disabled])");
        fChild.focus();
        fChild.classList.add("item-focused");
      }
      if (e8.code === "ArrowUp" && this.collapsed && this.active) {
        let child = this.querySelectorAll("SH-TAB-ITEM:not([disabled])");
        let lChild = child[child.length - 1];
        lChild.focus();
        lChild.classList.add("item-focused");
      }
    }
  };
  customElements.define("sh-tabs", SHTabs);

  // ../sh-tag/src/sh-tag.lit.scss.js
  var sh_tag_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-tag-container-height=2rem] - height of container
   */
  --sh-tag-container-height: 2rem;
  /* 
   * @cssprop [--sh-tag-wrapper-border=0.0625rem] - border of tag wrapper
   */
  --sh-tag-wrapper-border: 0.0625rem;
  /* 
   * @cssprop [--sh-tag-padding=0 0.5rem] - left and right padding of tag
   */
  --sh-tag-padding: 0 0.5rem;
  /* 
   * @cssprop [--sh-tag-label-line-height=2rem] - line height of tag label
   */
  --sh-tag-label-line-height: 2rem;
  /* 
   * @cssprop [--sh-tag-icon-padding=0.5rem] - padding of the icon
   */
  --sh-tag-icon-padding: 0.5rem;
  /* 
   * @cssprop [--sh-tag-border-radius=0.125rem] - border radius
   */
  --sh-tag-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-tag-condensed-container-height=1.5rem] - height of the container in condensed view
   */
  --sh-tag-condensed-container-height: 1.5rem;
  /* 
   * @cssprop [--sh-tag-condensed-icon-padding=0.5rem] - padding of the icon in condensed view
   */
  --sh-tag-condensed-icon-padding: 0.5rem;
}

:host {
  height: var(--sh-tag-container-height);
  overflow-y: hidden;
  flex-direction: row;
  cursor: pointer;
  outline: 0;
  display: block;
  flex-shrink: 0;
}

:host([condensed]) {
  height: var(--sh-tag-condensed-container-height);
}

.tag-wrapper {
  max-width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  width: fit-content;
  width: -ms-fit-content;
  width: -moz-fit-content;
  height: 100%;
  border: var(--sh-tag-wrapper-border) solid rgba(var(--ui-1), var(--opacity-5));
  box-sizing: border-box;
  border-radius: var(--sh-tag-border-radius);
  padding: var(--sh-tag-padding);
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) border-color;
}

:host([removable]) .tag-wrapper {
  padding-right: 0;
  justify-content: flex-end;
}

:host([selectable][active]) .tag-wrapper {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

:host(:hover[selectable]) .tag-wrapper {
  border-color: rgba(var(--ui-1), var(--opacity-4));
}

.tag-wrapper .tag-label {
  font: var(--body-1);
  color: var(--text-primary);
  line-height: var(--sh-tag-label-line-height);
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  width: -webkit-fill-available;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
}

:host([condensed]) .tag-wrapper .tag-label {
  font: var(--body-2);
}

.tag-wrapper sh-icon {
  padding: var(--sh-tag-icon-padding);
}

:host([condensed]) .tag-wrapper sh-icon {
  padding: var(--sh-tag-condensed-icon-padding);
}

:host([removable]) .tag-wrapper .tag-label {
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}

:host([disabled]) {
  pointer-events: none;
}

:host(:not([selectable])) {
  pointer-events: none;
}

:host(:not([selectable]):not([disabled])[removable]) #clear {
  pointer-events: auto;
}

:host([disabled]) .tag-wrapper {
  border-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([disabled]) .tag-wrapper .tag-label {
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([disabled]) sh-icon {
  color: rgba(var(--ui-1), var(--opacity-6));
}`;

  // ../sh-tag/src/sh-tag.js
  var SHTag = class SHTag2 extends s4 {
    constructor() {
      super(...arguments);
      this.label = "Label";
      this.selectable = false;
      this.removable = false;
      this.disabled = false;
      this.condensed = false;
    }
    static get styles() {
      return [sharedStyles, sh_tag_lit_scss_default];
    }
    render() {
      return x`
      <div class="tag-wrapper" ?disabled="${this.disabled}" @click="${this.onClickTag}">
        <span class="tag-label">${this.label}</span>
        ${this.removable ? x`<sh-icon
              id="clear"
              button=""
              icon="cancel"
              size="xs"
              @click="${this.onRemoveTag}"
              tabindex="${!this.disabled ? "0" : "-1"}"
            ></sh-icon>` : ""}
      </div>
    `;
    }
    onRemoveTag() {
      if (!this.disabled) {
        dispatchCustomEvent(this, "closed");
      }
    }
    onClickTag() {
      if (this.selectable) {
        this.active = !this.active;
      }
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHTag.prototype, "label", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTag.prototype, "selectable", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTag.prototype, "removable", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTag.prototype, "active", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTag.prototype, "disabled", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHTag.prototype, "condensed", void 0);
  SHTag = __decorate([e4("sh-tag")], SHTag);

  // ../sh-thumbnail/src/sh-thumbnail.lit.scss.js
  var sh_thumbnail_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-thumbnail-image-wrapper-padding=0.5rem] - padding of image wrapper
   */
  --sh-thumbnail-image-wrapper-padding: 0.5rem;
  /* 
   * @cssprop [--sh-thumbnail-label-wrapper-margin=-0.25rem 0.5rem 0.25rem 0.5rem] - margin of label wrapper
   */
  --sh-thumbnail-label-wrapper-margin: -0.25rem 0.5rem 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-thumbnail-label-height=2rem] - height of label
   */
  --sh-thumbnail-label-height: 2rem;
  /* 
   * @cssprop [--sh-thumbnail-image-border-radius=0.125rem] - border radius of the image
   */
  --sh-thumbnail-image-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-thumbnail-thumbnail-border-radius=0.125rem] - border radius of the thumbnail
   */
  --sh-thumbnail-thumbnail-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-thumbnail-image-wrapper-padding-condensed=0.25rem] - padding of image wrapper in condensed mode
   */
  --sh-thumbnail-image-wrapper-padding-condensed: 0.25rem;
  /* 
   * @cssprop [--sh-thumbnail-label-wrapper-margin-condensed=0rem 0.25rem 0.25rem 0.25rem] - padding of image wrapper in condensed mode
   */
  --sh-thumbnail-label-wrapper-margin-condensed: 0rem 0.25rem 0.25rem 0.25rem;
  /* 
   * @cssprop [--sh-thumbnail-label-line-height=1rem] - line height of the label
   */
  --sh-thumbnail-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-thumbnail-icons-wrapper-margin=0rem 0rem 0.25rem 0.25rem] - margin of the icons in icons wrapper
   */
  --sh-thumbnail-icons-wrapper-margin: 0rem 0rem 0.25rem 0.25rem;
  /* 
   * @cssprop [--sh-thumbnail-thumbnail-border=0.0625rem] - border of the thumbnail
   */
  --sh-thumbnail-thumbnail-border: 0.0625rem;
  /* 
   * @cssprop [--sh-thumbnail-checkbox-border-radius=0.125rem] - border radius of the thumbnail checkbox
   */
  --sh-thumbnail-checkbox-border-radius: 0.125rem;
  /* 
   * @cssprop [--sh-thumbnail-new-icon-width=0.5rem] - width of the new icon
   */
  --sh-thumbnail-new-icon-width: 0.5rem;
  /* 
   * @cssprop [--sh-thumbnail-new-icon-height=0.5rem] - height of the new icon
   */
  --sh-thumbnail-new-icon-height: 0.5rem;
  /* 
   * @cssprop [--sh-thumbnail-new-icon-margin=0.5rem] - margin of the new icon
   */
  --sh-thumbnail-new-icon-margin: 0.5rem;
  /* 
   * @cssprop [--sh-thumbnail-badge-width=1rem] - width of the badge
   */
  --sh-thumbnail-badge-width: 1rem;
  /* 
   * @cssprop [--sh-thumbnail-badge-margin=0.5rem] - margin of the badge
   */
  --sh-thumbnail-badge-margin: 0.5rem;
  /* 
   * @cssprop [--sh-thumbnail-indications-wrapper-margin=0.125rem 0.125rem 0 0] - margin of the indications wrapper
   */
  --sh-thumbnail-indications-wrapper-margin: 0.125rem 0.125rem 0 0;
  /* 
   * @cssprop [--sh-thumbnail-indications-wrapper-margin-left=0.25rem] - margin of the indications wrapper
   */
  --sh-thumbnail-indications-wrapper-margin-left: 0.25rem;
  /* 
   * @cssprop [--sh-thumbnail-info-slot-wrapper-bottom=0.625rem] - vertical position of the info slot wrapper
   */
  --sh-thumbnail-info-slot-wrapper-bottom: 0.625rem;
  /* 
   * @cssprop [--sh-thumbnail-info-slot-wrapper-left=0.625rem] - horizontal position of the info slot wrapper
   */
  --sh-thumbnail-info-slot-wrapper-left: 0.625rem;
  /* 
   * @cssprop [--sh-thumbnail-info-slot-wrapper-padding=0.25rem] - padding of the info slot wrapper
   */
  --sh-thumbnail-info-slot-wrapper-padding: 0.25rem;
  /* 
   * @cssprop [--sh-thumbnail-checkbox-height=2rem] - height of the checkbox
   */
  --sh-thumbnail-checkbox-height: 2rem;
  /* 
   * @cssprop [--sh-thumbnail-checkbox-width=2rem] - height of the checkbox
   */
  --sh-thumbnail-checkbox-width: 2rem;
  /* 
   * @cssprop [--sh-thumbnail-thumbnail-icon-bottom=0.625rem] - vertical position of the thumbnail icon
   */
  --sh-thumbnail-thumbnail-icon-bottom: 0.625rem;
  /* 
   * @cssprop [--sh-thumbnail-thumbnail-icon-right=0.625rem] - horizontal position of the thumbnail icon
   */
  --sh-thumbnail-thumbnail-icon-right: 0.625rem;
  /* 
   * @cssprop [--sh-thumbnail-thumbnail-checkbox-top=0.625rem] - vertical position of the thumbnail checkbox
   */
  --sh-thumbnail-thumbnail-checkbox-top: 0.625rem;
  /* 
   * @cssprop [--sh-thumbnail-thumbnail-checkbox-left=0.625rem] - horizontal position of the thumbnail checkbox
   */
  --sh-thumbnail-thumbnail-checkbox-left: 0.625rem;
  /* 
   * @cssprop [--sh-thumbnail-label-margin-bottom=0rem] - margin bottom for label
   */
  --sh-thumbnail-label-margin-bottom: 0rem;
}

:host {
  display: block;
  height: fit-content;
  width: 100%;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background;
  position: relative;
  border-radius: var(--sh-thumbnail-thumbnail-border-radius);
  border: var(--sh-thumbnail-thumbnail-border) solid transparent;
  box-sizing: border-box;
}

:host([selectable]:not([checked]):not(:hover)) .thumbnail-checkbox,
.thumbnail-wrapper:not([empty-data-type]) .thumbnail-icon {
  display: none;
}

.thumbnail-wrapper {
  display: block;
  cursor: pointer;
  color: rgba(var(--ui-1), var(--opacity-3));
  position: relative;
}

.image-wrapper {
  display: flex;
  flex-direction: column;
  padding: var(--sh-thumbnail-image-wrapper-padding);
}

:host([condensed]) .image-wrapper {
  padding: var(--sh-thumbnail-image-wrapper-padding-condensed);
}

.image {
  background-size: contain;
  background-color: black;
  background-position: center;
  background-repeat: no-repeat;
  width: 100%;
  padding-top: 100%;
  box-sizing: border-box;
  transition: var(--transition-time) all ease-in-out;
  border-radius: var(--sh-thumbnail-image-border-radius);
}

.label {
  position: relative;
  overflow: hidden;
  text-overflow: ellipsis;
  word-break: break-all;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  flex: 1;
  height: var(--sh-thumbnail-label-height);
  line-height: var(--sh-thumbnail-label-line-height);
  margin-bottom: var(--sh-thumbnail-label-margin-bottom);
}

.label-wrapper {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: auto;
  color: rgba(var(--ui-1), var(--opacity-3));
  margin: var(--sh-thumbnail-label-wrapper-margin);
}

:host([condensed]) .label-wrapper {
  margin: var(--sh-thumbnail-label-wrapper-margin-condensed);
}

:host([selectable].touch-deviceq) .thumbnail-checkbox,
:host([selectable].touch-device:not([checked]):not(:hover)) .thumbnail-checkbox,
:host([selectable]:hover) .thumbnail-checkbox,
:host([checked]) .thumbnail-checkbox {
  display: inline-block;
  position: absolute;
  top: var(--sh-thumbnail-thumbnail-checkbox-top);
  left: var(--sh-thumbnail-thumbnail-checkbox-left);
  width: 1.5rem;
  padding: 0.25rem;
}

:host([selectable][condensed].touch-device) .thumbnail-checkbox,
:host([selectable][condensed].touch-device:not([checked]):not(:hover)) .thumbnail-checkbox,
:host([selectable][condensed]:hover) .thumbnail-checkbox,
:host([checked][condensed]) .thumbnail-checkbox {
  top: 0.375rem;
  left: 0.375rem;
}

:host([selectable][discard]) .thumbnail-checkbox {
  z-index: 1;
}

.thumbnail-checkbox::before,
.thumbnail-icon::before {
  top: 0rem;
  left: 0rem;
  content: "";
  background: var(--base-2);
  opacity: var(--opacity-2);
  position: absolute;
  border-radius: var(--sh-thumbnail-checkbox-border-radius);
}

.thumbnail-checkbox::before {
  height: var(--sh-thumbnail-checkbox-height);
  width: var(--sh-thumbnail-checkbox-width);
}

.thumbnail-icon::before {
  background: rgba(0, 0, 0, var(--opacity-3));
}

:host(:not([loading]):hover) {
  background: rgba(var(--ui-1), var(--opacity-7));
}

:host(:not([loading])[active]) {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host([active]) .label,
:host([focus]) .label {
  color: rgba(var(--ui-1), var(--opacity-2));
}

:host(:not([loading])[focus]) {
  border-color: rgb(var(--ui-0));
}

/* badge slot */
:host([badge]) .thumbnail-badge {
  display: block;
  width: var(--sh-thumbnail-badge-width);
  margin: var(--sh-thumbnail-badge-margin);
}

:host([badge=new]) .thumbnail-badge {
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 0.5rem;
  background-color: rgb(var(--ui-0));
}

:host([badge=warning]) .thumbnail-badge {
  margin: 0.25rem;
}

.thumbnail-icon {
  display: block;
  position: absolute;
  bottom: var(--sh-thumbnail-thumbnail-icon-bottom);
  right: var(--sh-thumbnail-thumbnail-icon-right);
  color: rgba(255, 255, 255, var(--opacity-3));
}

:host([condensed]) .thumbnail-icon {
  bottom: 0.375rem;
  right: 0.375rem;
}

/* icons slot */
.icons-wrapper {
  display: flex;
}

.icons-wrapper ::slotted(*) {
  margin: var(--sh-thumbnail-icons-wrapper-margin);
  color: var(--text-secondary);
}

:host(:not([condensed])) .icons-wrapper ::slotted(*:first-child) {
  margin-left: 0.5rem;
}

/* badge */
.new-icon {
  position: absolute;
  top: 0.625rem;
  right: 0.625rem;
  width: var(--sh-thumbnail-new-icon-width);
  margin: var(--sh-thumbnail-new-icon-margin);
  height: var(--sh-thumbnail-new-icon-height);
  border-radius: 0.5rem;
  background-color: rgb(var(--ui-0));
}

:host([condensed]) .new-icon {
  top: 0.375rem;
  right: 0.375rem;
}

/* info slot */
.info-slot-wrapper {
  display: flex;
  flex-direction: rows;
  position: absolute;
  bottom: var(--sh-thumbnail-info-slot-wrapper-bottom);
  left: var(--sh-thumbnail-info-slot-wrapper-left);
  background: var(--base-2);
  opacity: var(--opacity-2);
  padding: var(--sh-thumbnail-info-slot-wrapper-padding);
  border-radius: var(--sh-thumbnail-thumbnail-border-radius);
}

:host([condensed]) .info-slot-wrapper {
  bottom: 0.375rem;
  left: 0.375rem;
}

.thumbnail-wrapper[empty-info] .info-slot-wrapper {
  display: none;
}

:host([active]) .icons-wrapper ::slotted(*) {
  color: var(--text-primary);
}

/* data-type slot */
.data-type-wrapper {
  display: flex;
  bottom: 0.5rem;
  right: 0.5rem;
  margin: 0 0.125rem 0.125rem 0;
  position: absolute;
}

.thumbnail-wrapper[empty-data-type] .data-type-wrapper {
  display: none;
}

.data-type-wrapper ::slotted(*),
.indications-wrapper ::slotted(*) {
  background: rgb(0, 0, 0);
  color: rgb(255, 255, 255);
  opacity: var(--opacity-3);
  margin-left: var(--sh-thumbnail-indications-wrapper-margin-left);
  border-radius: 0.125rem;
  line-height: 1.75rem;
}

:host([condensed]) .data-type-wrapper {
  bottom: 0.25rem;
  right: 0.25rem;
}

/* indications slot */
.indications-wrapper {
  display: flex;
  top: 0.5rem;
  right: 0.5rem;
  margin: var(--sh-thumbnail-indications-wrapper-margin);
  position: absolute;
}

:host([condensed]) .indications-wrapper {
  top: 0.25rem;
  right: 0.25rem;
}

sh-tooltip {
  max-width: 25rem;
  overflow-wrap: break-word;
}

sh-popover {
  pointer-events: all;
}

sh-overlay {
  background: transparent;
}

.discard-icon {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: rgba(255, 255, 255, var(--opacity-3));
}

:host([discard]) .label {
  color: var(--text-disabled);
}

:host([discard]) .id-number,
:host([discard]) .icons-wrapper ::slotted(*),
:host([discard]) .data-type-wrapper ::slotted(*),
:host([discard]) .indications-wrapper ::slotted(*) {
  opacity: var(--opacity-4);
}

.discard-wrapper {
  position: absolute;
  width: calc(100% - 1rem);
  height: calc(100% - 1rem);
  background-color: rgba(0, 0, 0, var(--opacity-2));
  z-index: 1;
  display: flex;
}

.loading-wrapper {
  margin: 0.5rem;
  max-height: 100%;
}

.loading-image {
  border-radius: 0.125rem;
  margin-bottom: 0.25rem;
}

.loading-text {
  height: 1.5rem;
  width: 80%;
}

.loading {
  opacity: var(--opacity-5);
  background: linear-gradient(-70deg, rgba(var(--ui-1), var(--opacity-6)) 0%, rgba(var(--ui-1), var(--opacity-6)) 20%, rgba(var(--ui-1), var(--opacity-5)) 40%, rgba(var(--ui-1), var(--opacity-5)) 50%, rgba(var(--ui-1), var(--opacity-5)) 60%, rgba(var(--ui-1), var(--opacity-6)) 80%, rgba(var(--ui-1), var(--opacity-6)) 100%) repeat;
  background-size: 600% 200%;
  animation: gradient var(--animation-duration-thumbnail, 2s) ease-in-out infinite;
}

@keyframes gradient {
  0% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}
:host([outline-color]) .image {
  outline: 0.125rem solid var(--outline-color);
  box-shadow: inset 0px 0px 0px 0.125rem rgba(var(--ui-7), var(--opacity-2));
  border-radius: 0.0625rem;
}`;

  // ../sh-thumbnail/src/sh-thumbnail.js
  var SHThumbnail = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        src: { type: String, reflect: true },
        number: { type: Number, reflect: true },
        active: { type: Boolean, reflect: true },
        focus: { type: Boolean, reflect: true },
        selectable: { type: Boolean, reflect: true },
        new: { type: Boolean, reflect: true },
        badge: { type: String, reflect: true },
        checked: { type: Boolean, reflect: true },
        indeterminate: { type: Boolean, reflect: true },
        options: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        icon: { type: String, reflect: true },
        aspectRatio: { type: String, reflect: true, attribute: "aspect-ratio" },
        discard: { type: String, reflect: true },
        loading: { type: Boolean, reflect: true },
        showPopover: { type: Boolean, reflect: true },
        showTooltip: { type: Boolean, reflect: true },
        outlineColor: { type: String, reflect: true, attribute: "outline-color" },
        _emptyInfo: { type: Boolean },
        _emptyDataTypeIcons: { type: Boolean },
        _emptyIndications: { type: Boolean }
      };
    }
    static get styles() {
      return [sh_thumbnail_lit_scss_default];
    }
    render() {
      return x`
      ${!this.loading ? x`
            <div
              class="thumbnail-wrapper"
              id="thumbnailWrapper"
              ?empty-info="${this._emptyInfo}"
              ?empty-data-type="${this._emptyDataTypeIcons}"
              ?empty-indications="${this._emptyIndications}"
            >
              <div class="image-wrapper">
                <div
                  class="image"
                  style='background-image:url("${this.src ? this.src : ""}"); padding-top: calc(100% / (${this.aspectRatio}));
                    --outline-color:${this.outlineColor}'
                ></div>
                ${this._showDiscardWrapper()}
                ${this.icon ? x`<sh-icon class="thumbnail-icon" icon="${this.icon}"></sh-icon>` : ""}
                <div class="data-type-wrapper">
                  <slot
                    name="data-type"
                    class="data-type"
                    @slotchange="${this._dataTypeSlotObserver}"
                  ></slot>
                </div>
                ${this.selectable ? x` <sh-checkbox
                      label=""
                      class="thumbnail-checkbox"
                      ?active="${this.checked}"
                      @active-changed="${(e8) => {
        this.checked = e8.target.active;
      }}"
                      ?indeterminate="${this.indeterminate}"
                    ></sh-checkbox>` : ""}
                ${this.new ? x`<div class="new-icon"></div>` : ""}
                <div class="indications-wrapper">
                  ${this.badge ? x`<sh-badge class="thumbnail-badge" type="${this.badge}"></sh-badge>` : ""}
                  <slot
                    name="indications"
                    class="indications"
                    @slotchange="${this._indicationsSlotObserver}"
                  ></slot>
                </div>
                <div class="info-slot-wrapper">
                  <slot name="info" class="info" @slotchange="${this._infoSlotObserver}"></slot>
                </div>
              </div>
            </div>
            <div class="label-wrapper">
              ${this._isLabelOrNumber() ? this._getLabelOrNumber() : ""}
              ${this.options ? this._showIconsAndPopover() : x`<slot id="mainSlot" @slotchange="${this._mainSlotObserver}"></slot>`}
            </div>
            <div class="icons-wrapper">
              <slot name="icons" id="icons"></slot>
            </div>
          ` : x`
            <div class="loading-wrapper">
              <div
                class="loading-image loading"
                style="padding-top: calc(100% / (${this.aspectRatio}));"
              ></div>
              ${this._isLabelOrNumber() ? this._getLabelOrNumber() : x` <div class="loading-text loading"></div>`}
            </div>
          `}
    `;
    }
    constructor() {
      super();
      this.src = "";
      this.value = "";
      this.aspectRatio = "1/1";
      this._emptyInfo = true;
      this._emptyIndications = true;
      this._emptyDataTypeIcons = true;
    }
    connectedCallback() {
      super.connectedCallback();
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      this.documentClickListener = this.documentClickActions.bind(this);
    }
    updated(changedProperties) {
      const listOfProperties = [
        "label",
        "src",
        "number",
        "active",
        "focus",
        "selectable",
        "new",
        "badge",
        "checked",
        "indeterminate",
        "options",
        "condensed",
        "icon",
        "aspectRatio"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _getLabelOrNumber() {
      return x`
      <sh-text
        size="body-2"
        color="secondary"
        class="label"
        id="sh-thumbnail-text"
        @mouseenter="${(e8) => this._showTooltip(e8, this.label)}"
        @mouseleave="${() => this._hideTooltip()}"
      >
        ${this.number ? x`<b class="id-number"
              >${this.number} ${this.label && this.number ? x`•` : ""}
            </b>` : ""}
        ${this.label ? this.label : ""}
      </sh-text>
      ${this.label && this.showTooltip ? x`<sh-tooltip
            .label="${this.label}"
            delay
            placement="bottom-left"
            target="sh-thumbnail-text"
            position-fixed-adjustment
          ></sh-tooltip>` : ""}
    `;
    }
    documentClickActions(e8) {
      const optionsIcon = this.shadowRoot.querySelector(".options-icon");
      const notClickedHost = e8.target !== this;
      const popoverIsMobile = this.shadowRoot.querySelector(".options-popover") && this.shadowRoot.querySelector(".options-popover").mobile;
      const notClickedOptionsIcon = e8.composedPath().indexOf(optionsIcon) === -1;
      if ((notClickedHost || popoverIsMobile) && notClickedOptionsIcon) {
        this.showPopover = false;
      }
    }
    _showIconsAndPopover() {
      return x` <sh-icon
        button
        icon="more"
        class="options-icon"
        id="optionsIcon"
        @click="${() => this._showOptions()}"
      ></sh-icon>
      ${this.showPopover ? x` <sh-popover
            id="popover"
            class="options-popover"
            track-target-on="scrolling"
            scroll-action="refit"
            target="optionsIcon"
            position="bottom-left"
            @click="${this._handleMenuItemClick}"
            @keyup="${this._handleMenuItemKeyup}"
          >
            <slot id="mainSlot" @slotchange="${this._mainSlotObserver}"></slot>
          </sh-popover>` : ""}`;
    }
    _showDiscardWrapper() {
      return this.discard === "" || this.discard ? x` <div class="discard-wrapper">
          ${this.discard.length === 0 ? "" : x` <sh-icon class="discard-icon" icon=${this.discard}></sh-icon>`}
        </div>` : "";
    }
    _isLabelOrNumber() {
      return this.label || this.number;
    }
    _handleMenuItemClick(e8) {
      const clickedElement = e8.target;
      const hasClickedOnMenuItem = clickedElement.tagName.toString().toLowerCase() === "sh-menu-item";
      if (hasClickedOnMenuItem) {
        clickedElement.removeAttribute("active");
        this.showPopover = false;
      }
    }
    _handleMenuItemKeyup(e8) {
      const pressedElement = e8.target;
      const pressedEnter = e8.keyCode === KEYCODE.ENTER.keycode;
      const pressedSpace = e8.keyCode === KEYCODE.SPACE.keycode;
      const hasPressedOnMenuItem = pressedElement.tagName.toString().toLowerCase() === "sh-menu-item";
      if (hasPressedOnMenuItem && (pressedEnter || pressedSpace)) {
        this.showPopover = false;
      }
    }
    _dataTypeSlotObserver(e8) {
      const numberOfAssignedNodes = e8.target.assignedNodes({
        flatten: true
      }).length;
      this._emptyDataTypeIcons = numberOfAssignedNodes === 0;
    }
    _infoSlotObserver(e8) {
      const numberOfAssignedNodes = e8.target.assignedNodes({
        flatten: true
      }).length;
      this._emptyInfo = numberOfAssignedNodes === 0;
    }
    _indicationsSlotObserver(e8) {
      const numberOfAssignedNodes = e8.target.assignedNodes({
        flatten: true
      }).length;
      this._emptyIndications = numberOfAssignedNodes === 0;
    }
    _mainSlotObserver() {
      const numberOfMenuItems = this.querySelectorAll("sh-menu-item").length;
      this.options = numberOfMenuItems > 0;
    }
    _showOptions() {
      this.showPopover = !this.showPopover;
      if (this.showPopover) {
        document.body.addEventListener("click", this.documentClickListener);
      } else {
        document.body.removeEventListener("click", this.documentClickListener);
      }
      dispatchCustomEvent(this, "menu-clicked", this);
    }
    _showTooltip(e8, content) {
      if (toogleTooltip(e8)) {
        this.showTooltip = true;
        this.updateComplete.then(() => {
          const tooltip = this.shadowRoot.querySelector("sh-tooltip");
          displayTooltip(e8, content, tooltip);
        });
      }
    }
    _hideTooltip() {
      this.showTooltip = false;
    }
    disconnectedCallback() {
      document.body.removeEventListener("click", this.documentClickListener);
      super.disconnectedCallback();
    }
  };
  customElements.define("sh-thumbnail", SHThumbnail);

  // ../utils/number-formatter.js
  var prependZero = (number) => {
    const maxDigits = 2;
    const zerosReq = maxDigits - number.toString().length;
    const requiredValue = `${"0".repeat(zerosReq)}${number}`;
    return requiredValue;
  };

  // ../utils/time-value-generator.js
  var TwelveHourValues = () => {
    let hourValues = [];
    for (let i7 = 1; i7 <= 12; i7++) {
      hourValues.push(prependZero(parseInt(i7, 10)).toString());
    }
    return hourValues;
  };
  var TwentyFourHourValues = () => {
    let hourValues = [];
    for (let i7 = 0; i7 < 24; i7++) {
      hourValues.push(prependZero(parseInt(i7, 10)).toString());
    }
    return hourValues;
  };
  var MinuteValues = () => {
    let minuteValues = [];
    for (let i7 = 0; i7 < 60; i7++) {
      minuteValues.push(prependZero(parseInt(i7, 10)).toString());
    }
    return minuteValues;
  };
  var SecondValues = () => {
    let secondValues = [];
    for (let i7 = 0; i7 < 60; i7++) {
      secondValues.push(prependZero(parseInt(i7, 10)).toString());
    }
    return secondValues;
  };
  var AmPmValues = () => {
    return ["AM", "PM"];
  };

  // ../utils/wait.js
  var wait = (delay) => {
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve();
      }, delay);
    });
  };

  // ../sh-timepicker/src/sh-timepicker.lit.scss.js
  var sh_timepicker_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-timepicker-height=2.5rem] - timepicker height
   */
  --sh-timepicker-height: 2.5rem;
  /* 
   * @cssprop [--sh-timepicker-panel-height=8.5rem] - height of the timepicker panel
   */
  --sh-timepicker-panel-height: 8.5rem;
  /* 
   * @cssprop [--sh-timepicker-control-value-margin=1rem 0] - margin of the control-value
   */
  --sh-timepicker-control-value-margin: 1rem 0;
  /* 
   * @cssprop [--sh-timepicker-control-value-height=1.5rem] - height of the control value
   */
  --sh-timepicker-control-value-height: 1.5rem;
  /* 
   * @cssprop [--sh-timepicker-icon-wrapper-padding-right=0.5rem] - padding-right of the icon-wrapper
   */
  --sh-timepicker-icon-wrapper-padding-right: 0.5rem;
  /* 
   * @cssprop [--sh-timepicker-icon-wrapper-gap=0.5rem] - gap between icon in icon-wrapper
   */
  --sh-timepicker-icon-wrapper-gap: 0.5rem;
  /* 
   * @cssprop [--sh-timepicker-label-without-value-line-height=1.5rem] - line-height of the label without value
   */
  --sh-timepicker-label-without-value-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-timepicker-label-left=0.5rem] - left of the label
   */
  --sh-timepicker-label-left: 0.5rem;
  /* 
   * @cssprop [--sh-timepicker-label-top=0.5rem] - top pf the label
   */
  --sh-timepicker-label-top: 0.5rem;
  /* 
   * @cssprop [--sh-timepicker-label-with-value-top=0.25rem] - top of the label when value is present
   */
  --sh-timepicker-label-with-value-top: 0.25rem;
  /* 
   * @cssprop [--sh-timepicker-label-with-value-line-height=1rem] - line-height of the label with value
   */
  --sh-timepicker-label-with-value-line-height: 1rem;
  /* 
   * @cssprop [--sh-timepicker-input-field-height=1rem] - height of the input-field
   */
  --sh-timepicker-input-field-height: 1rem;
  /* 
   * @cssprop [--sh-timepicker-input-field-padding=1.25rem 0 0.25rem 0.5rem] - padding of the input-field
   */
  --sh-timepicker-input-field-padding: 1.25rem 0 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-timepicker-placeholder-height=var(--sh-timepicker-input-field-height)] - height of the placeholder
   */
  --sh-timepicker-placeholder-height: var(--sh-timepicker-input-field-height);
  /* 
   * @cssprop [--sh-timepicker-amPm-overlay-width=1.5rem] - width of the am and pm present in the overlay
   */
  --sh-timepicker-amPm-overlay-width: 1.5rem;
  /* 
   * @cssprop [--sh-timepicker-amPm-height=var(--sh-timepicker-input-field-height)] - height of the am and pm in the placeholder
   */
  --sh-timepicker-amPm-height: var(--sh-timepicker-input-field-height);
  /* 
   * @cssprop [--sh-timepicker-amPm-label-width=1.25rem] - width of the am and pm in the label
   */
  --sh-timepicker-amPm-label-width: 1.25rem;
  /* 
   * @cssprop [--sh-timepicker-seperator-width=0.25rem] - width of the seperator
   */
  --sh-timepicker-seperator-width: 0.25rem;
  /* 
   * @cssprop [--sh-timepicker-seperator-height=var(--sh-timepicker-input-field-height)] - height of the seperator
   */
  --sh-timepicker-seperator-height: var(--sh-timepicker-input-field-height);
  /* 
   * @cssprop [--sh-timepicker-condensed-height=2rem] - height of the condensed timepicker
   */
  --sh-timepicker-condensed-height: 2rem;
  /* 
   * @cssprop [--sh-timepicker-condensed-label-top=0.25rem] - top of the condensed label
   */
  --sh-timepicker-condensed-label-top: 0.25rem;
  /* 
   * @cssprop [--sh-timepicker-condensed-input-field-height=1.5rem] - height of the condensed input-field
   */
  --sh-timepicker-condensed-input-field-height: 1.5rem;
  /* 
   * @cssprop [--sh-timepicker-condensed-input-field-padding=0.25rem 0 0.25rem 0.5rem] - padding of the condensed input-field
   */
  --sh-timepicker-condensed-input-field-padding: 0.25rem 0 0.25rem 0.5rem;
  /* 
   * @cssprop [--sh-timepicker-helper-text-padding=0.25rem 0.5rem 0rem] - padding of the helper-text
   */
  --sh-timepicker-helper-text-padding: 0.25rem 0.5rem 0rem;
}

:host {
  outline: 0;
  width: 100%;
  height: var(--sh-timepicker-height);
  position: relative;
  display: flex;
  flex-direction: column;
}

/*--Idle state styles--*/
.timepicker-wrapper {
  width: 100%;
  height: var(--sh-timepicker-height);
  box-sizing: border-box;
  background-color: rgba(var(--ui-1), var(--opacity-7));
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  flex-direction: column;
  border-radius: 0.125rem 0.125rem 0rem 0rem;
  position: relative;
  transition: var(--transition-time) all ease-in-out;
  border-bottom: 0.0625rem solid transparent;
  border-color: rgba(var(--ui-1), var(--opacity-4));
}

.timepicker-input {
  display: flex;
  flex-direction: row;
}

.timepicker-panel {
  background: var(--base-4);
  height: var(--sh-timepicker-panel-height);
  position: absolute;
  width: 100%;
  box-sizing: border-box;
  box-shadow: 0.0625rem 0.125rem 0.0625rem var(--shadow-strong), -0.0625rem -0.0625rem 0.0625rem var(--shadow-light);
  padding: 1rem 0;
  display: flex;
  flex-direction: row;
  justify-content: center;
  border-radius: 0.125rem;
}

.timepicker-controls-wrapper {
  flex-direction: row;
  display: flex;
  align-items: center;
  justify-content: center;
}

.timepicker-controls-wrapper .seperator {
  width: 1.5rem;
}

.timepicker-controls {
  text-align: center;
}

.control-value {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: var(--sh-timepicker-control-value-margin);
  height: var(--sh-timepicker-control-value-height);
}

:host([error]) .timepicker-wrapper {
  border-color: rgb(var(--functional-red));
}

:host([safety]) .timepicker-wrapper {
  border-color: rgb(var(--functional-yellow));
}

:host([success]) .timepicker-wrapper {
  border-color: rgb(var(--functional-green));
}

.icon-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  width: fit-content;
  padding-right: var(--sh-timepicker-icon-wrapper-padding-right);
  gap: var(--sh-timepicker-icon-wrapper-gap);
}

.label-area {
  width: 100%;
  transition: var(--transition-time) all ease-in-out;
  flex: 1 1 auto;
  display: flex;
  flex-direction: column;
  position: relative;
}

.label {
  white-space: nowrap;
  overflow: hidden;
  -o-text-overflow: ellipsis;
  text-overflow: ellipsis;
}

.label-slot {
  color: var(--text-secondary);
  font: var(--body-1);
  line-height: var(--sh-timepicker-label-without-value-line-height);
  left: var(--sh-timepicker-label-left);
  width: calc(100% - var(--sh-timepicker-label-left));
  -webkit-transition: var(--transition-time) all ease-in-out, 0s line-height ease-in-out, 0s height ease-in-out;
  -o-transition: var(--transition-time) all ease-in-out, 0s line-height ease-in-out, 0s height ease-in-out;
  transition: var(--transition-time) all ease-in-out, 0s line-height ease-in-out, 0s height ease-in-out, 0s width ease-in-out;
  transform-origin: left;
  top: var(--sh-timepicker-label-top);
  transform: scale(1);
  position: absolute;
  display: flex;
}

.close-button {
  opacity: 0;
  position: relative;
  transition: var(--transition-time) opacity ease-in-out;
  pointer-events: none;
  --sh-icon-size-s: 0;
  --sh-icon-font-size-s: 0;
}

:host([error]:not([h=""])) .close-button,
:host([error]:not([m=""])) .close-button,
:host([error]:not([s=""])) .close-button,
:host(:hover:not([h=""])) .close-button,
:host(:hover:not([m=""])) .close-button,
:host(:hover:not([s=""])) .close-button {
  opacity: 1;
  pointer-events: all;
  --sh-icon-size-s: unset;
  --sh-icon-font-size-s: unset;
}

/*--Hover styles--*/
#closeIcon.item-focused {
  opacity: 1;
}

:host([active][responsive]:not([error]):not([safety]):not([success])) .timepicker-wrapper,
:host(:not([responsive]).hasCursor:not([error]):not([safety]):not([success])) .timepicker-wrapper {
  border-color: rgba(var(--ui-1), var(--opacity-2));
}

:host(:hover) .timepicker-wrapper {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host(.hasCursor) .timepicker-wrapper {
  background-color: rgba(var(--ui-1), var(--opacity-7));
}

/*--Focus Styles--*/
.timepicker-panel input::placeholder,
.time-input-wrapper input::placeholder {
  color: var(--text-disabled);
}

:host(.hasCursor) .label-slot,
:host(.hasValue) .label-slot {
  top: var(--sh-timepicker-label-with-value-top);
  font: var(--body-2);
  line-height: var(--sh-timepicker-label-with-value-line-height);
}

#time-input-field {
  opacity: 0;
  height: var(--sh-timepicker-input-field-height);
  padding: var(--sh-timepicker-input-field-padding);
  width: calc(100% - var(--sh-timepicker-label-left));
}

:host(.hasCursor) #time-input-field,
:host(.hasValue) #time-input-field {
  opacity: 1;
}

#h,
#m,
#s,
#h-label,
#m-label,
#s-label {
  width: 2ch;
  height: var(--sh-timepicker-placeholder-height);
  background: transparent;
  outline: none;
  border: none;
  padding: 0rem;
  font: var(--body-1);
  color: var(--text-primary);
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  -webkit-transition: all 0.01s ease-in-out;
  -o-transition: all 0.01s ease-in-out;
  transition: all 0.01s ease-in-out;
  overscroll-behavior: contain;
}

#m:placeholder-shown {
  width: 3ch;
}

#h-label {
  padding-right: 0.125rem;
}

#s-label {
  padding-left: 0.125rem;
}

:host([responsive]) .input-slot input {
  pointer-events: none;
}

#amOrPm,
#ap-label {
  width: var(--sh-timepicker-amPm-overlay-width);
  height: var(--sh-timepicker-amPm-height);
  background: transparent;
  outline: none;
  padding: 0rem;
  border: none;
  font: var(--body-1);
  color: var(--text-primary);
  -webkit-user-select: text;
  -moz-user-select: text;
  -ms-user-select: text;
  -webkit-transition: all 0.3s ease-in-out;
  -o-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
  overscroll-behavior: contain;
}

#amOrPm {
  text-align: center;
}

#ap-label {
  width: var(--sh-timepicker-amPm-label-width);
  padding-left: 0.125rem;
}

#m-label:not(:placeholder-shown) {
  padding: 0 0.125rem;
  text-align: center;
}

#s-label:not(:placeholder-shown) {
  text-align: center;
}

#m-label:placeholder-shown {
  width: 3ch;
  padding: 0 0.125rem;
}

.seperator {
  width: var(--sh-timepicker-seperator-width);
  height: var(--sh-timepicker-seperator-height);
  line-height: var(--sh-timepicker-seperator-height);
  text-align: center;
  color: var(--text-disabled);
}

:host([error][error-message]),
:host([hint]) {
  height: auto;
}

#mandatoryStarSymbol {
  color: rgba(var(--ui-2), var(--opacity-1));
}

.seperator.colon-active {
  color: var(--text-primary);
}

.time-input-wrapper {
  display: flex;
}

#time-panel {
  height: 0rem;
}

/*--disabled--*/
:host([disabled]) .timepicker-wrapper {
  background-color: rgba(var(--ui-1), var(--opacity-7));
  pointer-events: none;
}

:host([disabled]) *,
:host([disabled]) #h-label,
:host([disabled]) #m-label,
:host([disabled]) #s-label,
:host([disabled]) #ap-label,
:host([disabled]) input {
  pointer-events: none;
  color: var(--text-disabled);
}

:host([disabled]),
:host([disabled]) .label-slot,
:host([disabled]) .close-button {
  pointer-events: none;
}

:host([disabled]) #mandatoryStarSymbol {
  color: rgba(var(--ui-2), var(--opacity-5)) !important;
}

:host([disabled]) .helper-text {
  color: var(--text-disabled);
}

/*--Condensed Styles--*/
:host(:not([hint]):not([error])[condensed]) {
  height: var(--sh-timepicker-condensed-height);
}

:host([condensed]) .timepicker-wrapper {
  height: var(--sh-timepicker-condensed-height);
}

:host([condensed]) .label-slot {
  display: flex;
  top: var(--sh-timepicker-condensed-label-top);
}

:host([condensed]) #time-input-field {
  height: var(--sh-timepicker-condensed-input-field-height);
  padding: var(--sh-timepicker-condensed-input-field-padding);
  justify-content: center;
}

:host([condensed].hasValue) .label-slot,
:host([condensed].hasCursor) .label-slot,
:host([disabled]) .close-button,
:host([active=false]) .timepicker-panel,
:host([error][error-message]) .hint {
  display: none;
}

/*--helper text--*/
.helper-text {
  padding: var(--sh-timepicker-helper-text-padding);
  box-sizing: border-box;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  visibility: visible;
}

:host([no-border]) .timepicker-wrapper {
  border-bottom: none;
}

.overlay {
  box-shadow: var(--shadow-overlay);
}`;

  // ../sh-timepicker/src/time-input-state-handler-mixin.js
  var inputState = Object.freeze({
    hasCursor: "hasCursor",
    hasValue: "hasValue",
    noValue: "noValue"
  });
  var TimeInputStateHandlerMixin = (superClass) => class extends superClass {
    static get properties() {
      return {
        timeInputState: {
          type: String
        }
      };
    }
    connectedCallback() {
      super.connectedCallback();
      this.addEventListener("focus", this._updateInputFieldStateIfFocused.bind(this));
      this.addEventListener("blur", this._updateInputFieldStateBasedOnInputValue.bind(this));
    }
    _updateInputFieldStateIfFocused(e8) {
      let element = e8.currentTarget;
      if (!element.disabled && element.timeInputState !== inputState.hasCursor) {
        element.timeInputState = inputState.hasCursor;
        this.classList.remove("noValue");
        this.classList.remove("hasValue");
        this.classList.add(inputState.hasCursor);
      } else {
        e8.stopPropagation();
      }
    }
    _updateInputFieldStateBasedOnInputValue(e8) {
      let element = e8 ? e8.currentTarget : this;
      if (element) {
        if (!element.responsive) {
          element.active = false;
        }
        element.timeInputState = String(this.h).length > 0 || String(this.m).length > 0 || String(this.s).length > 0 || String(this.amPm).length > 0 ? inputState.hasValue : inputState.noValue;
        if (element.timeInputState === inputState.hasValue) {
          this.classList.remove("noValue");
          this.classList.remove("hasCursor");
          this.classList.add("hasValue");
        } else {
          this.classList.remove("hasValue");
          this.classList.remove("hasCursor");
          this.classList.add("noValue");
        }
      } else {
        if (e8) {
          e8.stopPropagation();
        }
      }
    }
  };

  // ../sh-timepicker/src/time-input-validator-mixin.js
  var TimeInputValidatorMixin = (superClass) => class extends superClass {
    onKeyupValidateTimeInput(event) {
      if (numberkeyInteraction(event)) {
        this.validateInput(event);
      } else {
        event.target.value = this._isNonDigit(event.target.value) ? "00" : event.target.value;
      }
      dispatchCustomEvent(this, "time-value-changed");
    }
    validateInput(event) {
      const h3 = this.shadowRoot.querySelector("#h-label");
      if (parseInt(event.target.value, 10) > Number(event.target.max)) {
        event.target.value = event.target == h3 ? this.getHourValueIfClockFormat24() : "00";
      }
      if (event.target.value == "00" && event.target == h3 && this.clockFormat === "12-hour") {
        event.target.value = "01";
      }
      if (event.target.value.length === parseInt(event.target.maxLength, 10)) {
        if (this.clockFormat === "24-hour" && event.target.nextElementSibling.nextElementSibling == null) {
          this.mini ? this.m = event.target.value : this.s = event.target.value;
        } else {
          event.target.nextElementSibling.nextElementSibling.focus();
          event.target.nextElementSibling.nextElementSibling.setSelectionRange(0, 2);
        }
      }
    }
    onKeyupValidateAmPm(e8) {
      let specialCharacterIsPressed = false;
      specialCharacterIsPressed = e8.key === " " || e8.key === "Backspace" || e8.key === "Tab" || e8.key === "Up" || e8.key === "ArrowUp" || e8.key === "ArrowDown" || e8.key === "Down";
      if (!specialCharacterIsPressed) {
        this.amPm = this._validateAmPmBasedOnInput(e8.target.value);
        e8.target.value = this.amPm;
      }
      dispatchCustomEvent(this, "time-value-changed");
    }
    validateTime() {
      this._validateTimeInputModified();
      this.amPm = this.amPm ? this._validateAmPmBasedOnInput(this.amPm) : "";
    }
    getHourValueIfClockFormat24() {
      if (this.clockFormat === "24-hour") {
        return "00";
      } else {
        return "01";
      }
    }
    _validateTimeInputModified() {
      this.h = this.h ? this._isNonDigit(this.h) ? this.getHourValueIfClockFormat24() : this.h : "";
      this.m = this.m ? this._isNonDigit(this.m) || this.m > 59 ? "00" : this.m : "";
      this.s = this.s ? this._isNonDigit(this.s) || this.s > 59 ? "00" : this.s : "";
      this.h = (this.h > 12 || this.h === "00") && this.clockFormat === "12-hour" ? "01" : this.h > 23 && this.clockFormat === "24-hour" ? "00" : this.h;
    }
    _isNonDigit(input) {
      return input.toString().match(/\D/i) !== null;
    }
    _validateAmPmBasedOnInput(input) {
      let valueOfAmPmInput = input.toString().toLowerCase();
      if (valueOfAmPmInput.length === 2) {
        return valueOfAmPmInput != "am" && valueOfAmPmInput != "pm" ? "AM" : valueOfAmPmInput === "pm" || valueOfAmPmInput === "am" ? valueOfAmPmInput.toUpperCase() : "";
      } else if (valueOfAmPmInput.length === 1) {
        return valueOfAmPmInput !== "p" ? "AM" : "PM";
      } else if (valueOfAmPmInput.length > 2) {
        return "AM";
      }
    }
  };

  // ../sh-timepicker/src/time-modifier-mixin.js
  var TimeModifierMixin = (superClass) => class extends superClass {
    incrementTime(keydownedInputBox) {
      this.previousHourValue = Number(this.h);
      if (this.h === "" || this.m === "" || this.s === "" && !this.mini) {
        this.updateWithSystemTime();
        return;
      }
      switch (keydownedInputBox.dataset.id) {
        case "s":
        case "s-ip":
          this.s = parseInt(this.s, 10) + parseInt(this.step, 10);
          if (this.s > 59) {
            this.m = parseInt(this.m, 10) + 1;
            this.s = this.s - 60;
          }
          if (this.s < 10) {
            this.s = `0${this.s}`;
          }
        case "m":
        case "m-ip":
          if (keydownedInputBox.dataset.id === "m" || keydownedInputBox.dataset.id === "m-ip") {
            this.m = parseInt(this.m, 10) + parseInt(this.step, 10);
          }
          if (this.m > 59) {
            this.h = parseInt(this.h, 10) + 1;
            this.m = this.m - 60;
          }
          if (Number(this.m) < 10) {
            this.m = `0${Number(this.m)}`;
          }
        case "h":
        case "h-ip":
          if (keydownedInputBox.dataset.id === "h" || keydownedInputBox.dataset.id === "h-ip") {
            this.h = parseInt(this.h, 10) + 1;
          }
          if (this.clockFormat === "12-hour") {
            if (this.h === 12 && this.previousHourValue === 11) {
              this.amPm = this.amPm === "PM" ? "AM" : "PM";
            }
            if (this.h === 13 && this.previousHourValue === 12) {
              this.h = 1;
            }
          } else {
            if (this.h === 24 && this.previousHourValue === 23) {
              this.h = 0;
            }
          }
          if (Number(this.h) < 10) {
            this.h = `0${Number(this.h)}`;
          }
        default:
          if (keydownedInputBox.dataset.id === "ap" || keydownedInputBox.dataset.id === "ap-ip") {
            this.amPm = this.amPm === "PM" ? "AM" : "PM";
          }
          break;
      }
      dispatchCustomEvent(this, "time-value-changed");
    }
    decrementTime(keydownedInputBox) {
      this.previousHourValue = Number(this.h);
      if (this.h === "" || this.m === "" || this.s === "" && !this.mini) {
        this.updateWithSystemTime(this);
        return;
      }
      switch (keydownedInputBox.dataset.id) {
        case "s":
        case "s-ip":
          this.s = parseInt(this.s, 10) - parseInt(this.step, 10);
          let subvalue = this.s % this.step === 0 ? this.step : this.s % this.step;
          if (this.s < 0) {
            this.m = parseInt(this.m, 10) - 1;
            this.s = 60 - Math.abs(parseInt(subvalue));
          }
          if (this.s < 10) {
            this.s = `0${this.s}`;
          }
        case "m":
        case "m-ip":
          if (keydownedInputBox.dataset.id === "m" || keydownedInputBox.dataset.id === "m-ip") {
            this.m = parseInt(this.m, 10) - parseInt(this.step, 10);
          }
          let minsubVal = this.m % this.step === 0 ? this.step : this.m % this.step;
          if (this.m < 0) {
            this.h = parseInt(this.h, 10) - 1;
            this.m = 60 - Math.abs(parseInt(minsubVal, 10));
          }
          if (Number(this.m) < 10) {
            this.m = `0${Number(this.m)}`;
          }
        case "h":
        case "h-ip":
          this.h = parseInt(this.h, 10);
          if (keydownedInputBox.dataset.id === "h" || keydownedInputBox.dataset.id === "h-ip") {
            this.h = parseInt(this.h, 10) - 1;
          }
          if (this.clockFormat === "12-hour") {
            if (this.h === 11 && this.previousHourValue === 12) {
              this.amPm = this.amPm === "PM" ? "AM" : "PM";
            }
            if (this.h === 0 && this.previousHourValue === 1 || this.h === -1 && this.previousHourValue === 0) {
              this.h = 12;
            }
          } else if (this.clockFormat === "24-hour") {
            if (this.h === -1 && this.previousHourValue === 0) {
              this.h = 23;
            }
          }
          if (Number(this.h) < 10) {
            this.h = `0${Number(this.h)}`;
          }
          break;
        default:
          if (keydownedInputBox.dataset.id === "ap" || keydownedInputBox.dataset.id === "ap-ip") {
            this.amPm = this.amPm === "PM" ? "AM" : "PM";
          }
          break;
      }
      dispatchCustomEvent(this, "time-value-changed");
    }
    updateWithSystemTime() {
      const presentBrowserTime = new Date();
      let hour = presentBrowserTime.getHours();
      if (this.clockFormat === "12-hour") {
        this.amPm = hour > 11 && hour !== 12 || hour === 12 ? "PM" : "AM";
        hour = hour > 11 && hour !== 12 ? hour - 12 : hour === 12 || hour === 0 ? 12 : hour;
      } else if (this.clockFormat === "24-hour") {
        this.amPm = "";
      }
      this.h = hour < 10 ? `0${hour}` : hour;
      this.m = presentBrowserTime.getMinutes() < 10 ? `0${presentBrowserTime.getMinutes()}` : presentBrowserTime.getMinutes();
      this.s = presentBrowserTime.getSeconds() < 10 ? `0${presentBrowserTime.getSeconds()}` : presentBrowserTime.getSeconds();
      dispatchCustomEvent(this, "time-value-changed");
    }
    incrementOrDecrementOnKeyDown(e8) {
      let eventSrc;
      if (e8.composedPath()) {
        eventSrc = e8.composedPath()[0];
      } else {
        eventSrc = e8.srcElement;
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_UP) || e8.key === "Up") {
        e8.preventDefault();
        this.incrementTime(eventSrc);
      }
      if (keyboardInteraction(e8, KEYCODE.ARROW_DOWN) || e8.key === "Down") {
        e8.preventDefault();
        this.decrementTime(eventSrc);
      }
      dispatchCustomEvent(this, "time-value-changed");
    }
  };

  // ../sh-timepicker/src/sh-timepicker-input.js
  var SHTimepickerInput = class extends TimeInputValidatorMixin(TimeModifierMixin(TimeInputStateHandlerMixin(s4))) {
    static get properties() {
      return {
        h: { type: String, reflect: true },
        m: { type: String, reflect: true },
        s: { type: String, reflect: true },
        amPm: { type: String, reflect: true, attribute: "am-pm" },
        mini: { type: Boolean, reflect: true },
        step: { type: String, reflect: true },
        clockFormat: { type: String, reflect: true, attribute: "clock-format" },
        disabled: { type: String, reflect: true }
      };
    }
    static get styles() {
      return [sh_timepicker_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      <div class="time-input-wrapper">
        <input
          type="text"
          placeholder="hh"
          data-id="h-ip"
          id="h-label"
          min="1"
          max="${this.clockFormat === "12-hour" ? 12 : 23}"
          @keyup=${this.onKeyupValidateTimeInput}
          maxlength="2"
          .value="${this.h}"
          @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
          size="2"
          ?disabled="${this.disabled}"
          @blur="${this._appendZeroAndUpdateTimeValue}"
        />
        <div
          class="seperator  ${!(this.h === "" && this.m === "" && this.s === "" && this.amPm === "") ? "colon-active" : ""}"
        >
          :
        </div>
        <input
          type="text"
          placeholder="mm"
          data-id="m-ip"
          id="m-label"
          min="0"
          max="59"
          @keyup=${this.onKeyupValidateTimeInput}
          maxlength="2"
          .value="${this.m}"
          @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
          size="2"
          ?disabled="${this.disabled}"
          @blur="${this._appendZeroAndUpdateTimeValue}"
        />
        ${!this.mini ? x`
              <div
                class="seperator ${!(this.h === "" && this.m === "" && this.s === "" && this.amPm === "") ? "colon-active" : ""} full"
              >
                :
              </div>
              <input
                type="text"
                placeholder="ss"
                data-id="s-ip"
                class="full"
                id="s-label"
                min="0"
                max="59"
                @keyup=${this.onKeyupValidateTimeInput}
                maxlength="2"
                .value="${this.s}"
                @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
                size="2"
                ?disabled="${this.disabled}"
                @blur="${this._appendZeroAndUpdateTimeValue}"
              />
            ` : ""}
        <div
          class="seperator ${!(this.h === "" && this.m === "" && this.s === "" && this.amPm === "") ? "colon-active" : ""}"
        ></div>
        ${this.clockFormat === "12-hour" ? x` <input
              type="text"
              data-id="ap-ip"
              id="ap-label"
              placeholder="AM"
              .value="${this.amPm}"
              size="2"
              maxlength="2"
              @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
              @keyup=${this.onKeyupValidateAmPm}
              ?disabled="${this.disabled}"
              @blur=${this._appendZeroAndUpdateTimeValue}
            />` : ""}
      </div>
    `;
    }
    constructor() {
      super();
      this.h = this.m = this.s = this.amPm = "";
      this.clockFormat = "12-hour";
      this.mini = false;
      this.step = 1;
    }
    firstUpdated() {
      if (this.h > 0 || this.h === "00" || this.m > 0 || this.s > 0 || this.amPm > 0) {
        this._updateTimeWhenInputFieldHasValue();
      }
    }
    updated(changedProperties) {
      if (changedProperties.has("timeInputState")) {
        this._handleInputFieldChanged();
      }
    }
    _handleInputFieldChanged() {
      if (this.timeInputState === "hasValue") {
        this._updateTimeWhenInputFieldHasValue();
      }
    }
    _onArrowKeyUpOrDownPressUpdateTime(e8) {
      this.incrementOrDecrementOnKeyDown(e8);
    }
    _appendZeroAndUpdateTimeValue(e8) {
      const element = e8.target;
      const elementId = e8.target.id;
      if (element.value !== "") {
        element.value = prependZero(element.value);
        switch (elementId) {
          case "h-label":
            this.h = element.value;
            break;
          case "m-label":
            this.m = element.value;
            break;
          case "s-label":
            this.s = element.value;
            break;
          default:
            this.amPm = element.value;
        }
      }
    }
    _updateTimeWhenInputFieldHasValue() {
      const hour = this.shadowRoot.querySelector("#h-label");
      const minute = this.shadowRoot.querySelector("#m-label");
      this._convertValueToZeroZeroIfValueIsEmptyForInput(hour);
      this._convertValueToZeroZeroIfValueIsEmptyForInput(minute);
      if (this.clockFormat === "12-hour") {
        const ampm = this.shadowRoot.querySelector("#ap-label");
        this._convertValueToAMIfValueIsEmptyForInput(ampm);
        this.amPm = ampm.value;
      }
      this.h = hour.value;
      this.m = minute.value;
      if (!this.mini) {
        const second = this.shadowRoot.querySelector("#s-label");
        this._convertValueToZeroZeroIfValueIsEmptyForInput(second);
        this.s = second.value;
      } else {
        this.s = "00";
      }
      dispatchCustomEvent(this, "time-value-changed");
    }
    _convertValueToZeroZeroIfValueIsEmptyForInput(inputBox) {
      if (inputBox.value === "" || inputBox.value === "00") {
        if (inputBox.id === "h-label") {
          inputBox.value = this.getHourValueIfClockFormat24();
        } else {
          inputBox.value = "00";
        }
      }
    }
    _convertValueToAMIfValueIsEmptyForInput(amPMInputBox) {
      if (amPMInputBox.value === "") {
        amPMInputBox.value = "AM";
      }
    }
  };
  customElements.define("sh-timepicker-input", SHTimepickerInput);

  // ../sh-timepicker/src/sh-timepicker-panel.js
  var SHTimepickerPanel = class extends TimeModifierMixin(s4) {
    static get properties() {
      return {
        h: { type: String, reflect: true },
        m: { type: String, reflect: true },
        s: { type: String, reflect: true },
        amPm: { type: String, reflect: true, attribute: "am-pm" },
        mini: { type: Boolean, reflect: true },
        step: { type: String, reflect: true },
        clockFormat: { type: String, reflect: true, attribute: "clock-format" },
        active: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sh_timepicker_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      <div class="timepicker-panel-wrapper">
        <div class="timepicker-panel">
          <div class="timepicker-controls-wrapper">
            <div class="timepicker-controls hour-control">
              <sh-icon
                icon="up-s"
                id="dropdown-icon"
                data-id="h"
                button=""
                size="s"
                @click=${this._incrementWithButton}
              ></sh-icon>
              <div class="control-value">
                <input
                  type="text"
                  readonly
                  placeholder="hh"
                  data-id="h-ip"
                  id="h"
                  min="1"
                  max="${this.clockFormat === "12-hour" ? 12 : 23}"
                  .value="${this.h}"
                  @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
                  size="2"
                />
              </div>
              <sh-icon
                icon="down-s"
                id="dropdown-icon"
                data-id="h"
                button=""
                size="s"
                @click=${this._decrementWithButton}
              ></sh-icon>
            </div>
            <div
              class="seperator ${!(this.h === "" && this.m === "" && this.s === "" && this.amPm === "") ? "colon-active" : ""}"
            >
              :
            </div>
            <div class="timepicker-controls min-control">
              <sh-icon
                icon="up-s"
                id="dropdown-icon"
                data-id="m"
                button=""
                size="s"
                @click=${this._incrementWithButton}
              ></sh-icon>
              <div class="control-value">
                <input
                  type="text"
                  readonly
                  placeholder="mm"
                  data-id="m-ip"
                  id="m"
                  min="0"
                  max="59"
                  size="2"
                  maxlength="2"
                  .value="${this.m}"
                  @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
                  size="2"
                />
              </div>
              <sh-icon
                icon="down-s"
                id="dropdown-icon"
                data-id="m"
                button=""
                size="s"
                @click=${this._decrementWithButton}
              ></sh-icon>
            </div>
            ${!this.mini ? x` <div
                    class="seperator ${!(this.h === "" && this.m === "" && this.s === "" && this.amPm === "") ? "colon-active" : ""} full"
                  >
                    :
                  </div>
                  <div class="timepicker-controls sec-control full">
                    <sh-icon
                      icon="up-s"
                      id="dropdown-icon"
                      data-id="s"
                      button=""
                      size="s"
                      @click=${this._incrementWithButton}
                    ></sh-icon>
                    <div class="control-value">
                      <input
                        type="text"
                        readonly
                        placeholder="ss"
                        data-id="s-ip"
                        class="full"
                        id="s"
                        min="0"
                        max="59"
                        maxlength="2"
                        .value="${this.s}"
                        @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
                        size="2"
                      />
                    </div>
                    <sh-icon
                      icon="down-s"
                      id="dropdown-icon"
                      data-id="s"
                      button=""
                      size="s"
                      @click=${this._decrementWithButton}
                    ></sh-icon>
                  </div>` : ""}
            <div
              class="seperator ${!(this.h === "" && this.m === "" && this.s === "" && this.amPm === "") ? "colon-active" : ""}"
            ></div>
            ${this.clockFormat === "12-hour" ? x` <div class="timepicker-controls ampm-control">
                  <sh-icon
                    icon="up-s"
                    id="dropdown-icon"
                    button=""
                    size="s"
                    data-id="ap"
                    @click=${this._incrementWithButton}
                  ></sh-icon>
                  <div class="control-value">
                    <input
                      type="text"
                      readonly
                      placeholder="AM"
                      readonly="true"
                      data-id="ap-ip"
                      id="amOrPm"
                      .value="${this.amPm}"
                      size="2"
                      maxlength="2"
                      @keydown=${this._onArrowKeyUpOrDownPressUpdateTime}
                    />
                  </div>
                  <sh-icon
                    icon="down-s"
                    id="dropdown-icon"
                    button=""
                    size="s"
                    data-id="ap"
                    @click=${this._decrementWithButton}
                  ></sh-icon>
                </div>` : ""}
          </div>
        </div>
      </div>
    `;
    }
    constructor() {
      super();
      this.h = this.m = this.s = this.amPm = "";
      this.clockFormat = "12-hour";
      this.mini = false;
      this.step = 1;
    }
    _onArrowKeyUpOrDownPressUpdateTime(e8) {
      this.incrementOrDecrementOnKeyDown(e8);
    }
    _incrementWithButton(e8) {
      e8.stopPropagation();
      this.incrementTime(e8.target);
    }
    _decrementWithButton(e8) {
      e8.stopPropagation();
      this.decrementTime(e8.target);
    }
  };
  customElements.define("sh-timepicker-panel", SHTimepickerPanel);

  // ../sh-timepicker/src/sh-timepicker.js
  var SHTimepicker = class extends TimeInputValidatorMixin(TimeInputStateHandlerMixin(TimeModifierMixin(s4))) {
    static get properties() {
      return {
        active: { type: Boolean, reflect: true },
        mini: { type: Boolean, reflect: true },
        step: { type: String, reflect: true },
        responsive: { type: Boolean, reflect: true },
        label: { type: String, reflect: true },
        disabled: { type: Boolean, reflect: true },
        h: { type: String, reflect: true },
        m: { type: String, reflect: true },
        s: { type: String, reflect: true },
        amPm: { type: String, reflect: true, attribute: "am-pm" },
        val: { type: String, reflect: true },
        clockFormat: { type: String, reflect: true, attribute: "clock-format" },
        error: { type: Boolean, reflect: true },
        errorMessage: { type: String, reflect: true, attribute: "error-message" },
        hint: { type: String, reflect: true },
        success: { type: Boolean, reflect: true },
        safety: { type: Boolean, reflect: true },
        noBorder: { type: Boolean, reflect: true },
        mandatory: { type: Boolean, reflect: true },
        open: { type: Boolean, reflect: true },
        close: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        _showDrawerDOM: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sh_timepicker_lit_scss_default, sharedStyles];
    }
    render() {
      return x`
      <div class="timepicker-wrapper" id="timepickerWrapper">
        <div class="timepicker-input" @click=${this._makeMobileTimepickerActive}>
          <div class="label-area">
            <sh-timepicker-input
              id="time-input-field"
              @time-value-changed=${(e8) => this._updateTimeBasedOnInputOrPanelValue(e8)}
              .h="${this.h}"
              .m="${this.m}"
              .s="${this.s}"
              .amPm=${this.amPm}
              .step=${this.step}
              .mini=${this.mini}
              ?disabled=${this.disabled}
              clock-format="${this.clockFormat}"
            >
            </sh-timepicker-input>
            <div class="label-slot">
              ${this.label ? x` <div class="label">${this.label}</div> ` : ""}
              ${this.mandatory ? x` <span id="mandatoryStarSymbol">*</span>` : ""}
            </div>
          </div>
          <div class="icon-wrapper">
            <sh-icon
              button
              tabindex="0"
              @click=${this._clearTimeInputField}
              size="s"
              icon="cancel"
              class="close-button"
              id="closeIcon"
            >
            </sh-icon>
            ${this.error || this.success ? x` <sh-icon
                  class="error-success-icon"
                  icon=${this.error ? "error" : "success"}
                  size="s"
                  ?disabled="${this.disabled}"
                ></sh-icon>` : ""}
            <sh-icon
              button
              tabindex=${this.disabled ? -1 : 0}
              @click=${this._makeTimepickerActive}
              size="s"
              icon="scheduled"
              id="scheduledIcon"
            >
            </sh-icon>
          </div>
        </div>
        ${this.responsive ? this._showDrawerDOM ? this._timepickerMobileTemplate() : "" : x`
              <sh-overlay
                class="overlay"
                style="width:${getComputedStyle(this).width}; height: var(--sh-timepicker-panel-height)"
                scroll-action="cancel"
                no-overlap
                horizontal-align="left"
                @overlay-canceled=${(e8) => {
        this._overlayCancelledCallback(e8);
      }}
              >
                <sh-timepicker-panel
                  id="time-panel"
                  @time-value-changed=${(e8) => this._updateTimeBasedOnInputOrPanelValue(e8)}
                  .h="${this.h}"
                  .m="${this.m}"
                  .s="${this.s}"
                  .amPm=${this.amPm}
                  .step=${this.step}
                  .mini=${this.mini}
                  active=${this.active}
                  clock-format="${this.clockFormat}"
                ></sh-timepicker-panel>
              </sh-overlay>
            `}
      </div>
      ${this.hint ? x` <sh-text size="body-2" class="helper-text hint" color="secondary"
            >${this.hint}</sh-text
          >` : ""}
      ${this.error && this.errorMessage ? x` <sh-text size="body-2" class="helper-text error-message" color="secondary"
            >${this.errorMessage}</sh-text
          >` : ""}
    `;
    }
    constructor() {
      super();
      this.h = this.m = this.s = this.amPm = "";
      this.clockFormat = "12-hour";
      this.label = "Time";
      this.mini = false;
      this.step = 1;
      this.error = this.safety = this.mandatory = this.noBorder = false;
    }
    connectedCallback() {
      super.connectedCallback();
      this._updateInputFieldStateBasedOnInputValue();
      if (!this.hasAttribute("tabindex")) {
        this.setAttribute("tabindex", 0);
      }
      this.addEventListener("keyup", this._toggleSubMenuIfPressedOnEnterAnywhereExceptScheduleIcon.bind(this));
    }
    updated(changedProperties) {
      if (changedProperties.has("h") || changedProperties.has("m") || changedProperties.has("s") || changedProperties.has("amPm")) {
        this._updateTimeInValue();
      }
      if (changedProperties.has("active")) {
        this._handleActiveChanged();
      }
      if (changedProperties.has("disabled")) {
        this.tabIndex = this.disabled ? -1 : 0;
      }
      const listOfProperties = [
        "mini",
        "condensed",
        "h",
        "m",
        "s",
        "amPm",
        "step",
        "clockFormat",
        "val"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _makeTimepickerActive() {
      if (!this.responsive) {
        this.active = !this.active;
      }
    }
    _overlayCancelledCallback(e8) {
      const event = e8.detail;
      if (event.type === "scroll") {
        this.active = false;
      }
    }
    _updateTimeBasedOnInputOrPanelValue(e8) {
      this.h = e8.target.h;
      this.m = e8.target.m;
      this.s = e8.target.s;
      this.amPm = e8.target.amPm;
      this.step = e8.target.step;
      this.clockFormat = e8.target.clockFormat;
      if (this.h > 0 && this.clockFormat === "12-hour" || (this.h > 0 || this.h === "00") && this.clockFormat === "24-hour" || this.m > 0 || this.s > 0 || this.amPm > 0) {
        this.classList.remove("noValue");
        this.classList.remove("hasCursor");
        this.classList.add("hasValue");
      }
    }
    _toggleSubMenuIfPressedOnEnterAnywhereExceptScheduleIcon(e8) {
      let enteredOnScheduleIcon = false;
      const scheduleIcon = this.shadowRoot.querySelector("#scheduledIcon");
      const closeIcon = this.shadowRoot.querySelector("#closeIcon");
      const keyupComposedPath = e8.composedPath();
      for (let i7 = 0; i7 < keyupComposedPath.length; i7++) {
        if (keyupComposedPath[i7] === scheduleIcon || keyupComposedPath[i7] === closeIcon) {
          enteredOnScheduleIcon = true;
          break;
        }
      }
      if (keyboardInteraction(e8, KEYCODE.ENTER) && !enteredOnScheduleIcon) {
        scheduleIcon.click();
      }
    }
    _updateTimeInValue() {
      this.validateTime();
      this.val = `${this.h}:${this.m}${!this.mini ? ":" + this.s : ""}${this.clockFormat === "12-hour" ? ":" + this.amPm : ""}`;
    }
    _handleOverlay() {
      if (this.active && !this.responsive) {
        const overlay = this.shadowRoot.querySelector(".overlay");
        overlay.open();
      }
    }
    _clearTimeInputField(e8) {
      e8.stopPropagation();
      if (e8.currentTarget === this.shadowRoot.querySelector(".close-button")) {
        this.h = this.m = this.s = this.amPm = "";
      }
      this._handleOverlay();
    }
    _handleActiveChanged() {
      if (this.responsive) {
        this.active ? this._openMobileDrawer() : this._closeMobileDrawer();
      } else {
        const overlay = this.shadowRoot.querySelector(".overlay");
        this.active ? overlay.open() : overlay.close();
      }
    }
    _timepickerMobileTemplate() {
      return x`<sh-scrollpicker
      @values-changed="${(e8) => {
        this._updateValueFromScrollPicker(e8.target);
      }}"
      @visible-changed="${(e8) => {
        if (!e8.target.visible) {
          this.active = false;
        }
      }}"
    ></sh-scrollpicker>`;
    }
    _makeMobileTimepickerActive() {
      if (this.responsive) {
        this.active = !this.active;
      } else {
        this._handleOverlay();
      }
    }
    _openMobileDrawer() {
      return __async(this, null, function* () {
        const beforeDrawerOpensWaitTime = 50;
        this._showDrawerDOM = true;
        yield wait(beforeDrawerOpensWaitTime);
        this._initialiseScrollpicker();
      });
    }
    _initialiseScrollpicker() {
      return __async(this, null, function* () {
        const scrollPicker = this.shadowRoot.querySelector("sh-scrollpicker");
        let hourValues = [];
        if (this.clockFormat === "12-hour") {
          hourValues = TwelveHourValues();
        } else {
          hourValues = TwentyFourHourValues();
        }
        let minuteValues = MinuteValues();
        let secValues = SecondValues();
        let amPmValues = AmPmValues();
        if (this.clockFormat === "12-hour") {
          if (!this.mini) {
            scrollPicker.items = [hourValues, minuteValues, secValues, amPmValues];
          } else {
            scrollPicker.items = [hourValues, minuteValues, amPmValues];
          }
        } else {
          if (!this.mini) {
            scrollPicker.items = [hourValues, minuteValues, secValues];
          } else {
            scrollPicker.items = [hourValues, minuteValues];
          }
        }
        scrollPicker.visible = true;
        if (!this.h || !this.m || !this.s && !this.mini || !this.amPm && this.clockFormat === "12-hour") {
          this.updateWithSystemTime();
          let selectedTimeValues = this._getSelectedValuesArray();
          scrollPicker.scrollToValues(selectedTimeValues);
        } else {
          let selectedTimeValues = this._getSelectedValuesArray();
          scrollPicker.scrollToValues(selectedTimeValues);
        }
      });
    }
    _getSelectedValuesArray() {
      let valuesArray = this.mini && this.clockFormat === "12-hour" ? [this.h.toString(), this.m.toString(), this.amPm] : !this.mini && this.clockFormat === "24-hour" ? [this.h.toString(), this.m.toString(), this.s.toString()] : this.mini && this.clockFormat === "24-hour" ? [this.h.toString(), this.m.toString()] : !this.mini && this.clockFormat === "12-hour" ? [this.h.toString(), this.m.toString(), this.s.toString(), this.amPm] : "";
      return valuesArray;
    }
    _updateValueFromScrollPicker(scrollpicker) {
      if (!this.mini) {
        this.s = scrollpicker.values[2];
      }
      this.m = scrollpicker.values[1];
      this.h = scrollpicker.values[0];
      if (this.clockFormat === "12-hour") {
        this.amPm = this.mini ? scrollpicker.values[2] : scrollpicker.values[3];
      }
    }
    _closeMobileDrawer() {
      this._showDrawerDOM = false;
    }
  };
  customElements.define("sh-timepicker", SHTimepicker);

  // ../utils/checkbox-toggle-mixin.js
  var CheckboxToggleMixin2 = (superClass) => {
    class CheckboxToggleMixinElement extends superClass {
      updated(changedProperties) {
        super.updated(changedProperties);
        const listOfProperties = ["active", "neutral"];
        dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
      }
      firstUpdated() {
        this.addEventListener("click", () => this.handleClick());
        this.addEventListener("focus", () => this.handleFocus());
        this.addEventListener("blur", () => this.handleBlur());
      }
      handleClick() {
        this.active = !this.active;
      }
    }
    __decorate([n5({ type: Boolean, reflect: true })], CheckboxToggleMixinElement.prototype, "active", void 0);
    __decorate([n5({ type: Boolean, reflect: true })], CheckboxToggleMixinElement.prototype, "neutral", void 0);
    return CheckboxToggleMixinElement;
  };

  // ../sh-toggle/src/sh-toggle.lit.scss.js
  var sh_toggle_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-toggle-height=1.25rem] - toggle height
   */
  --sh-toggle-height: 1.25rem;
  /* 
   * @cssprop [--sh-toggle-border-radius=0.625rem] - border radius
   */
  --sh-toggle-border-radius: 0.625rem;
  /* 
   * @cssprop [--sh-toggle-border-width=0.125rem] - border width
   */
  --sh-toggle-border-width: 0.125rem;
  /* 
   * @cssprop [--sh-toggle-circle-dimension=0.875rem] - toggle circle width and height
   */
  --sh-toggle-circle-dimension: 0.875rem;
  /* 
   * @cssprop [--sh-toggle-width=2.5rem] - toggle width
   */
  --sh-toggle-width: 2.5rem;
  /* 
   * @cssprop [--sh-toggle-margin=0.125rem 0.625rem 0.125rem 0.125rem] - toggle margin
   */
  --sh-toggle-margin: 0.125rem 0.625rem 0.125rem 0.125rem;
  /* 
   * @cssprop [--sh-toggle-circle-top=0.0625rem] - toggle circle top
   */
  --sh-toggle-circle-top: 0.0625rem;
  /* 
   * @cssprop [--sh-toggle-circle-left=0.0625rem] - toggle circle left
   */
  --sh-toggle-circle-left: 0.0625rem;
  /* 
   * @cssprop [--sh-toggle-active-left=1.25rem] - toggle circle left
   */
  --sh-toggle-active-left: 1.25rem;
  /* 
   * @cssprop [--sh-toggle-line-height=1.5rem] - toggle line height
   */
  --sh-toggle-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-toggle-label-line-height=1.5rem] - label line height
   */
  --sh-toggle-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-toggle-label-padding=0rem] - label padding
   */
  --sh-toggle-label-padding: 0rem;
}

:host {
  display: flex;
  flex-direction: row;
  width: 100%;
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  user-select: none;
  -moz-user-select: none;
  -webkit-user-select: none;
  font: var(--body-1);
  color: var(--text-primary);
  line-height: var(--sh-toggle-line-height);
  outline: 0;
  cursor: pointer;
  height: fit-content;
  position: relative;
}

.toggle {
  height: var(--sh-toggle-height);
  min-width: var(--sh-toggle-width);
  border-radius: var(--sh-toggle-border-radius);
  margin: var(--sh-toggle-margin);
  border: var(--sh-toggle-border-width) solid rgba(var(--ui-1), var(--opacity-4));
  box-sizing: border-box;
  position: relative;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background, var(--hover-transition-time) border-color;
  cursor: pointer;
}

:host([label=""]) .toggle,
:host(:not([label])) .toggle {
  margin-right: 0;
}

:host([label=""]),
:host(:not([label])) {
  width: fit-content;
  width: -moz-fit-content;
}

.toggle-label {
  display: block;
  width: calc(100% - var(--sh-toggle-width));
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
  line-height: var(--sh-toggle-label-line-height);
  padding: var(--sh-toggle-label-padding);
}

.toggle::before {
  position: absolute;
  left: var(--sh-toggle-circle-left);
  top: var(--sh-toggle-circle-top);
  height: var(--sh-toggle-circle-dimension);
  width: var(--sh-toggle-circle-dimension);
  content: "";
  background: rgba(var(--ui-1), var(--opacity-3));
  border-radius: 50%;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background;
}

:host([active]) .toggle {
  background-color: rgba(var(--ui-2), var(--opacity-1));
  border-color: transparent;
}

:host([active]) .toggle::before {
  background: rgb(255, 255, 255);
  left: var(--sh-toggle-active-left);
}

:host([active][disabled]) .toggle {
  opacity: 0.2;
}

:host([active][neutral]) .toggle {
  background-color: rgba(var(--ui-1), var(--opacity-4));
}

:host([disabled]) {
  cursor: default;
  pointer-events: none;
  color: rgba(var(--ui-1), var(--opacity-5));
}

:host([disabled]:not([active])) .toggle {
  border-color: rgba(var(--ui-1), var(--opacity-7));
}

:host([disabled]:not([active])) .toggle::before {
  background: rgba(var(--ui-1), var(--opacity-5));
}

/* hover */
:host(:not(.touch-device):not([active]):hover) .toggle {
  border-color: rgba(var(--ui-1), var(--opacity-3));
}

:host(:not(.touch-device)[active]:hover) .toggle {
  background: rgba(var(--ui-3), var(--opacity-1));
}

:host(:not(.touch-device)[active][neutral]:hover) .toggle {
  background: rgba(var(--ui-1), var(--opacity-3));
}

:host(:not(.touch-device):not([active]):hover) .toggle::before {
  background: rgba(var(--ui-1), var(--opacity-2));
}

/* focus */
.item-focused {
  outline: var(--focus-outline);
}`;

  // ../sh-toggle/src/sh-toggle.js
  var SHToggle = class SHToggle2 extends CheckboxToggleMixin2(ControlStateMixin2(FocusBlurMixin2(s4))) {
    static get styles() {
      return [sh_toggle_lit_scss_default, extendInteractiveArea()];
    }
    render() {
      return x`
      <div class="toggle focus-item"></div>
      ${this.label ? x` <span class="toggle-label">${this.label}</span> ` : ""}
    `;
    }
    attributeChangedCallback(name, oldValue, newValue) {
      super.attributeChangedCallback(name, oldValue, newValue);
      const hasValue = newValue !== null;
      if (name === "active") {
        this.setAttribute("aria-checked", JSON.stringify(hasValue));
      }
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      dispatchAttributeChangedEvent(this, changedProperties, ["label"]);
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("role")) {
        this.setAttribute("role", "switch");
      }
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
    }
    firstUpdated() {
      super.firstUpdated();
    }
    _spaceKeyAction() {
      super._spaceKeyAction();
      this.handleClick();
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHToggle.prototype, "label", void 0);
  SHToggle = __decorate([e4("sh-toggle")], SHToggle);

  // ../utils/event-fired-within-element-checker.js
  var EventFiredWithinElementChecker = class {
    checkClickEvent(event, targetLeft, targetTop, targetRight, targetBottom) {
      const clickedInsideElement = event.clientX >= targetLeft && event.clientX <= targetRight && event.clientY >= targetTop && event.clientY <= targetBottom;
      return event.type === "click" && clickedInsideElement;
    }
  };

  // ../sh-tool/src/sh-tool.lit.scss.js
  var sh_tool_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-tool-padding=0.1875rem] - padding of tool
   */
  --sh-tool-padding: 0.1875rem;
  /* 
   * @cssprop [--sh-tool-bottom-padding-with-icon=0.125rem] - padding-bottom of the tool when icon is present
   */
  --sh-tool-bottom-padding-with-icon: 0.125rem;
  /* 
   * @cssprop [--sh-tool-height=4.25rem] - height of tool
   */
  --sh-tool-height: 4.25rem;
  /* 
   * @cssprop [--sh-tool-width=var(--sh-tool-height)] - width of tool
   */
  --sh-tool-width: var(--sh-tool-height);
  /* 
   * @cssprop [--sh-tool-condensed-padding=0.0625rem] - padding of the condensed tool
   */
  --sh-tool-condensed-padding: 0.0625rem;
  /* 
   * @cssprop [--sh-tool-condensed-height=2.5rem] - height of the condensed tool
   */
  --sh-tool-condensed-height: 2.5rem;
  /* 
   * @cssprop [--sh-tool-condensed-width=var(--sh-tool-condensed-height)] - width of the condesed tool
   */
  --sh-tool-condensed-width: var(--sh-tool-condensed-height);
  /* 
   * @cssprop [--sh-tool-icon-value-label-font-size=0.75rem] - label font-size for select value and palette value of tool
   */
  --sh-tool-icon-value-label-font-size: 0.75rem;
  /* 
   * @cssprop [--sh-tool-icon-value-label-line-height=var(--sh-tool-icon-value-label-font-size)] - label line-height for select value and palette value of tool
   */
  --sh-tool-icon-value-label-line-height: var(--sh-tool-icon-value-label-font-size);
  /* 
   * @cssprop [--sh-tool-value-label-line-height=0.75rem] - label line-height for select and palette with value and without icon
   */
  --sh-tool-value-label-line-height: 0.75rem;
  /* 
   * @cssprop [--sh-tool-label-line-height=1rem] - line-height of label
   */
  --sh-tool-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-tool-label-with-icon-height=1.5625rem] - height of label with icon property
   */
  --sh-tool-label-with-icon-height: 1.5625rem;
  /* 
   * @cssprop [--sh-tool-icon-label-margin-top=0.25rem] - margin-top of label with icon property
   */
  --sh-tool-icon-label-margin-top: 0.25rem;
  /* 
   * @cssprop [--sh-tool-palette-height=1.25rem] - height of the palette
   */
  --sh-tool-palette-height: 1.25rem;
  /* 
   * @cssprop [--sh-tool-palette-width=var(--sh-tool-palette-height)] - width of the palette
   */
  --sh-tool-palette-width: var(--sh-tool-palette-height);
  /* 
   * @cssprop [--sh-tool-arrow-height=0.375rem] - height of the arrow in palette
   */
  --sh-tool-arrow-height: 0.375rem;
  /* 
   * @cssprop [--sh-tool-arrow-width=var(--sh-tool-arrow-height)] - width of the arrow in palette
   */
  --sh-tool-arrow-width: var(--sh-tool-arrow-height);
  /* 
   * @cssprop [--sh-tool-arrow-border=0.188rem] - border of the arrow in palette
   */
  --sh-tool-arrow-border: 0.188rem;
  /* 
   * @cssprop [--sh-tool-popover-max-height=12.25rem] - max-height of the popover
   */
  --sh-tool-popover-max-height: 12.25rem;
  /* 
   * @cssprop [--sh-tool-condensed-palette-height=0.75rem] - height of condensed palette
   */
  --sh-tool-condensed-palette-height: 0.75rem;
  /* 
   * @cssprop [--sh-tool-condensed-palette-width=var(--sh-tool-condensed-palette-height)] - width of condensed palette
   */
  --sh-tool-condensed-palette-width: var(--sh-tool-condensed-palette-height);
}

:host {
  padding: var(--sh-tool-padding);
  border: 0.0625rem solid transparent;
  background: rgba(var(--ui-1), var(--opacity-7));
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  border-radius: 0.125rem;
  cursor: pointer;
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) background;
  height: var(--sh-tool-height);
  min-height: var(--sh-tool-height);
  max-height: var(--sh-tool-height);
  flex: 1;
  position: relative;
  outline: 0rem;
}

:host([active]) {
  background: rgba(var(--ui-1), var(--opacity-5));
  border-color: rgba(var(--ui-1), var(--opacity-4));
}

:host([icon][label]:not([condensed]):not([label=""])) {
  padding-bottom: var(--sh-tool-bottom-padding-with-icon);
}

:host(:not([active]):not([disabled]):not(.touch-device):hover),
:host(:not([active]):not([disabled]):not(.touch-device):active) {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host(:not([stretch])) {
  width: var(--sh-tool-width);
  min-width: var(--sh-tool-width);
  max-width: var(--sh-tool-width);
  flex: 0;
}

:host([select][value]) .tool-label,
:host([palette][value]) .tool-label {
  font-size: var(--sh-tool-icon-value-label-font-size);
  line-height: var(--sh-tool-value-label-line-height);
}

:host([icononly][icon]) .tool-label,
:host([condensed][icon]) .tool-label {
  display: none;
}

.tool-label,
.tool-value {
  height: auto;
  text-align: center;
  color: var(--text-primary);
  line-height: var(--sh-tool-label-line-height);
  overflow: hidden;
  text-overflow: ellipsis;
  user-select: none;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  display: -webkit-box;
  overflow-wrap: normal;
  word-break: normal;
}

:host([icon]) .tool-label {
  height: var(--sh-tool-label-with-icon-height);
  line-height: var(--sh-tool-icon-value-label-line-height);
  font-size: var(--sh-tool-icon-value-label-font-size);
  margin-top: var(--sh-tool-icon-label-margin-top);
}

.palette {
  box-sizing: border-box;
  height: var(--sh-tool-palette-height);
  width: var(--sh-tool-palette-width);
  position: absolute;
  top: -0.0625rem;
  right: -0.0625rem;
}

.arrow {
  box-sizing: border-box;
  height: var(--sh-tool-arrow-height);
  width: var(--sh-tool-arrow-width);
  border-top: solid var(--sh-tool-arrow-border) rgba(var(--ui-1), var(--opacity-4));
  border-right: solid var(--sh-tool-arrow-border) rgba(var(--ui-1), var(--opacity-4));
  border-left: solid var(--sh-tool-arrow-border) transparent;
  border-bottom: solid var(--sh-tool-arrow-border) transparent;
  position: absolute;
  top: 0.1875rem;
  right: 0.1875rem;
}

:host([readonly]) .arrow {
  opacity: 0;
}

:host(:not([palette]):not([select])) sh-popover {
  transition: none;
}

/* flat styles */
:host([flat]) {
  border-style: none;
  background: transparent;
  box-shadow: none;
}

:host([active][flat]) {
  background: rgba(var(--ui-1), var(--opacity-6));
  border: none;
}

:host(:not([active]):not([disabled]):not(.touch-device):hover[flat]),
:host(:not([active]):not([disabled]):not(.touch-device):active[flat]) {
  background: rgba(var(--ui-1), var(--opacity-7));
}

/* condensed styles */
:host([condensed]) {
  padding: var(--sh-tool-condensed-padding);
  height: var(--sh-tool-condensed-height);
  min-height: var(--sh-tool-condensed-height);
  max-height: var(--sh-tool-condensed-height);
}

:host([condensed]:not([stretch])) {
  min-width: var(--sh-tool-condensed-width);
  max-width: var(--sh-tool-condensed-width);
}

:host([condensed]) .palette {
  height: var(--sh-tool-condensed-palette-height);
  width: var(--sh-tool-condensed-palette-width);
}

/* disabled styles */
:host([disabled]) {
  cursor: default;
  pointer-events: none;
}

:host([disabled]) .tool-label,
:host([disabled]) .tool-value {
  color: var(--text-disabled);
}

:host([disabled]) .arrow {
  opacity: 0.2;
}

sh-popover:not([mobile]) .popover-slot-wrapper {
  max-height: calc(var(--sh-tool-popover-max-height) - 2 * var(--sh-popover-headerless-body-top-padding));
}

.popover-slot-wrapper {
  overflow-y: auto;
  overflow-x: hidden;
  padding: var(--sh-popover-headerless-body-top-padding);
  margin: calc(-1 * var(--sh-popover-headerless-body-top-padding));
}`;

  // ../sh-tool/src/sh-tool.js
  var SHTool = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        value: { type: String, reflect: true },
        icon: { type: String, reflect: true },
        active: { type: Boolean, reflect: true },
        icononly: { type: Boolean, reflect: true },
        select: { type: Boolean, reflect: true },
        palette: { type: Boolean, reflect: true },
        toggle: { type: Boolean, reflect: true },
        expanded: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        condensed: { type: Boolean, reflect: true },
        stretch: { type: Boolean, reflect: true },
        flat: { type: Boolean, reflect: true },
        iconColor: { type: String, reflect: true, attribute: "icon-color" },
        popoverPosition: { type: String, reflect: true, attribute: "popover-position" },
        popoverPassive: { type: Boolean, reflect: true, attribute: "popover-passive" }
      };
    }
    static get styles() {
      return [sharedStyles, sh_tool_lit_scss_default];
    }
    render() {
      return x`
      ${this.icon || this.icononly && this.icon !== void 0 ? x`<sh-icon
            icon="${this.icon}"
            .color="${this.iconColor}"
            class="tool-icon"
            ?disabled="${this.disabled}"
          ></sh-icon>` : x``}
      ${this.label && !this.icononly ? x`<sh-text size="body-1" class="tool-label">${this.label}</sh-text>` : x``}
      ${this.value && this.select && (!this.icononly || !this.icon) ? x`<sh-text size="body-1" class="tool-value">${this.value}</sh-text>` : x``}
      ${this.palette || this.select ? x`<div class="arrow"></div>` : x``}
      ${this.palette ? x`<div class="palette" @click="${(e8) => this._expandPalette(e8)}"></div>` : x``}
      ${this.palette || this.select ? x`
            <sh-popover
              id="menu"
              manual-controlled
              .target=${this}
              position=${this.popoverPosition}
              ?passive="${this.popoverPassive}"
              ?visible="${this.expanded}"
              overlay-target-distance="0"
              suppress-placement-warning
              @click="${(e8) => {
        this._checkIfClickedWithinPopoverWrapper(e8);
      }}"
            >
              <div class="popover-slot-wrapper"><slot></slot></div>
            </sh-popover>
          ` : x``}
    `;
    }
    constructor() {
      super();
      this.popoverPosition = "right-up";
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("aria-labelledby") && this.label) {
        this.setAttribute("aria-labelledby", this.label);
      }
      this.addEventListener("click", function(e8) {
        if (e8.target.tagName === "SH-TOOL") {
          if (this.toggle && e8.composedPath()[0].className !== "palette") {
            this.active = !this.active;
          }
          if (this.select) {
            this.expanded = true;
            this._setActiveState();
          }
        }
      });
      this.addEventListener("visible-changed", (e8) => {
        if (e8.composedPath()[0].tagName === "SH-POPOVER" && !e8.composedPath()[0].visible && this.expanded) {
          this.expanded = false;
        }
      });
      this._setInitialValuesOnLoad();
      this.documentClick = this._closeTool.bind(this);
    }
    firstUpdated() {
      if (deviceIdentifier.isTouchDevice()) {
        this.classList.add("touch-device");
      }
      this.addEventListener("menu-item-active", this._activeChanged);
      const menu = this.shadowRoot.querySelector("#menu");
      if (menu) {
        this.shadowRoot.querySelector("#menu").addEventListener("clicked", this._activeChanged);
      }
      this.addEventListener("contextmenu", function(e8) {
        e8.preventDefault();
      });
      this.addEventListener("touchstart", function() {
        if (this.palette) {
          this._delay = setTimeout(() => {
            this._expandPalette();
          }, 500);
        }
      });
      this.addEventListener("touchend", function() {
        clearTimeout(this._delay);
      });
    }
    updated(changedProperties) {
      if (changedProperties.has("disabled")) {
        this.expanded = false;
      }
      if (changedProperties.has("expanded")) {
        this._handleExpandedChanged();
      }
      const listOfProperties = ["label", "value", "active", "icon", "expanded", "disabled", "flat"];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    _handleExpandedChanged() {
      if (this.expanded) {
        document.body.addEventListener("click", this.documentClick, true);
        document.body.addEventListener("touchstart", this.documentClick, true);
      } else {
        document.body.removeEventListener("click", this.documentClick, true);
        document.body.removeEventListener("touchstart", this.documentClick, true);
      }
    }
    disconnectedCallback() {
      if (this.expanded) {
        document.body.removeEventListener("click", this.documentClick, true);
        document.body.removeEventListener("touchstart", this.documentClick, true);
      }
      super.disconnectedCallback();
    }
    _closeTool(e8) {
      if (e8.target !== this && !e8.touches) {
        this.expanded = false;
      }
      if (e8.touches && e8.composedPath().indexOf(this) === -1) {
        this.expanded = false;
      }
    }
    _expandPalette(e8) {
      if (e8) {
        e8.stopPropagation();
      }
      this._setActiveState();
      this.expanded = true;
    }
    _setActiveState() {
      for (let i7 = 0; i7 < this.children.length; i7++) {
        if (this.label === this.children[i7].label || this.value === this.children[i7].label) {
          this.children[i7].active = true;
          break;
        }
      }
    }
    _setInitialValuesOnLoad() {
      for (let i7 = 0; i7 < this.childElementCount; i7++) {
        if (this.children[i7].active) {
          this._setMenuItemLabelIcon(this.children[i7]);
        }
      }
    }
    _setMenuItemLabelIcon(menuItem) {
      if (!this.select) {
        this.icon = menuItem.icon ? menuItem.icon : menuItem.parentNode.icon;
        if (this.palette) {
          this.label = menuItem.label;
        }
      } else {
        if (!menuItem.icon) {
          this.value = menuItem.label;
        } else {
          this.icon = menuItem.icon;
          this.label = menuItem.label;
        }
      }
    }
    _activeChanged(e8) {
      const tool = e8.target.parentElement;
      if (e8.type === "clicked" && e8.target.tagName === "SH-MENU-ITEM") {
        e8.stopPropagation();
        tool.expanded = false;
      }
      for (let i7 = 0; i7 < this.children.length; i7++) {
        if (this.label === this.children[i7].label) {
          this.children[i7].active = true;
          break;
        }
      }
      tool._unselectSiblings(e8.target.label);
      tool._setMenuItemLabelIcon(e8.target);
    }
    _unselectSiblings(label) {
      for (let i7 = 0; i7 < this.children.length; i7++) {
        if (label !== this.children[i7].label) {
          this.children[i7].removeAttribute("active");
        }
      }
    }
    _checkIfClickedWithinPopoverWrapper(e8) {
      if (e8.currentTarget.mobile) {
        const eventFiredWithinChecker = new EventFiredWithinElementChecker();
        const { left, right, top, bottom } = e8.currentTarget.shadowRoot.querySelector(".popover-wrapper").getBoundingClientRect();
        const clickedWithinPopoverWrapper = eventFiredWithinChecker.checkClickEvent(e8, left, top, right, bottom);
        if (!clickedWithinPopoverWrapper) {
          this.expanded = false;
        }
      }
    }
  };
  customElements.define("sh-tool", SHTool);

  // ../sh-user-identifier/src/sh-user-identifier.lit.scss.js
  var sh_user_identifier_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-user-identifier-margin-left=0.5rem] - info margin left
   */
  --sh-user-identifier-margin-left: 0.5rem;
  /* 
   * @cssprop [--sh-user-identifier-max-width=10rem] - max width of name and info
   */
  --sh-user-identifier-max-width: 10rem;
  /* 
   * @cssprop [--sh-user-identifier-height=1rem] - height of name and info
   */
  --sh-user-identifier-height: 1rem;
  /* 
   * @cssprop [--sh-user-identifier-circle-dimension=2rem] - height of name and info
   */
  --sh-user-identifier-circle-dimension: 2rem;
  /* 
   * @cssprop [--sh-user-identifier-image-circle=2rem] - width and height of image circle
   */
  --sh-user-identifier-image-circle: 2rem;
  /* 
   * @cssprop [--sh-user-identifier-margin=0rem] - width and height of image circle
   */
  --sh-user-identifier-margin: 0rem;
}

:host {
  display: flex;
  flex-direction: row;
  cursor: pointer;
  min-height: fit-content;
  min-height: -ms-fit-content;
  min-height: -moz-fit-content;
  outline: 0;
}

:host([access-context]) {
  width: fit-content;
  width: -ms-fit-content;
  width: -moz-fit-content;
}

.circle {
  width: var(--sh-user-identifier-circle-dimension);
  height: var(--sh-user-identifier-circle-dimension);
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgba(var(--ui-1), var(--opacity-6));
  border-radius: 50%;
  overflow: hidden;
  font: var(--title-1);
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
}

:host([image]) .circle {
  width: var(--sh-user-identifier-image-circle);
  height: var(--sh-user-identifier-image-circle);
}

:host([image]) sh-icon {
  --sh-icon-font-size-m: var(--sh-user-identifier-image-circle);
}

:host([unauthenticated]) .circle,
:host([initials]) .circle,
:host(:not([initials]):not([image]):not([unauthenticated])) .circle {
  width: var(--sh-user-identifier-circle-dimension);
  height: var(--sh-user-identifier-circle-dimension);
  margin: var(--sh-user-identifier-margin);
}

.info-wrapper {
  max-width: var(--sh-user-identifier-max-width);
  flex-direction: column;
  display: flex;
  margin-left: var(--sh-user-identifier-margin-left);
  justify-content: center;
  flex: 1;
  overflow: hidden;
}

:host([access-context]) .info-wrapper {
  max-width: var(--sh-user-identifier-max-width);
}

.name,
.info {
  max-width: var(--sh-user-identifier-max-width);
  line-height: var(--sh-user-identifier-height);
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  font-family: siemens sans, sans-serif;
  -webkit-font-smoothing: antialiased !important;
  text-rendering: optimizeLegibility !important;
  -moz-osx-font-smoothing: grayscale !important;
  height: var(--sh-user-identifier-height);
  transition: var(--transition-time) all ease-in-out, var(--hover-transition-time) color;
}

:host .name,
:host .info,
:host .circle,
:host sh-icon[icon=user] {
  color: var(--text-secondary);
}

:host(:hover) .name,
:host(:hover) .info,
:host(:hover) .circle,
:host(:hover) sh-icon[icon=user],
:host(:hover) sh-icon[icon=user-avatar] {
  color: var(--text-primary);
}

.name {
  font: var(--title-1);
  line-height: var(--sh-user-identifier-height);
}

.info {
  font: var(--body-2);
}

/* unauthenticated */
:host([unauthenticated]:not([name])) .circle {
  border-radius: initial;
  background-color: unset;
}

/* condensed access-bar */
:host([access-context][condensed]) {
  margin: -0.25rem 0;
}

/* medium screens */
@media only screen and (max-width: 64.0625rem) {
  :host([access-context]) .info-wrapper {
    display: none;
  }
}
/* focus */
:host(.focus) {
  outline: var(--focus-outline);
}

:host sh-icon[icon=user-avatar] {
  color: var(--text-secondary);
}`;

  // ../sh-user-identifier/src/sh-user-identifier.js
  var SHUserIdentifier = class SHUserIdentifier2 extends TooltipEllipsisCheckerMixin(s4) {
    static get styles() {
      return [sh_user_identifier_lit_scss_default];
    }
    render() {
      return x`
      <div class="circle">
        ${this.unauthenticated ? x`
              ${this.name ? x` <sh-icon icon="user-avatar"></sh-icon> ` : x` <sh-icon icon="user"></sh-icon> `}
            ` : x`
              ${this.image ? x` <sh-icon icon="${this.image}"></sh-icon> ` : x`
                    ${this.initials ? this.formatInitials(this.initials) : this.name ? this.getInitials(this.name) : A}
                  `}
            `}
      </div>
      ${this.name ? x`
            <div class="info-wrapper">
              <div class="name" @mouseenter="${(e8) => this.showTooltip(e8, this.name)}">
                ${this.name}
              </div>
              ${this.info && !this.unauthenticated ? x`
                    <div class="info" @mouseenter="${(e8) => this.showTooltip(e8, this.info)}">
                      ${this.info}
                    </div>
                  ` : A}
            </div>
            <sh-tooltip placement="bottom-left" position-fixed-adjustment></sh-tooltip>
          ` : A}
    `;
    }
    attributeChangedCallback(name, oldval, newval) {
      super.attributeChangedCallback(name, oldval, newval);
      this.dispatchEvent(new Event(`${name}-changed`));
    }
    connectedCallback() {
      super.connectedCallback();
      if (!this.hasAttribute("tabindex")) {
        this.setAttribute("tabindex", "0");
      }
    }
    firstUpdated() {
      this.addEventListener("focus", () => {
        this.onkeyup = (e8) => {
          if (keyboardInteraction2(e8, KEYCODE2.TAB)) {
            this.classList.add("focus");
          }
        };
      });
      this.addEventListener("blur", () => {
        this.classList.remove("focus");
      });
    }
    showTooltip(e8, content) {
      const tooltip = this.renderRoot.querySelector("sh-tooltip");
      if (content && tooltip) {
        const target = e8.target;
        const isEllipsis = this.ellipsisChecker(target.scrollWidth, target.offsetWidth, target.scrollHeight, target.offsetHeight, "horizontal");
        if (isEllipsis) {
          tooltip.target = target;
          tooltip.visible = true;
          tooltip.label = content;
        } else {
          tooltip.target = "";
          tooltip.visible = false;
          tooltip.label = "";
        }
      }
    }
    getInitials(name) {
      const initials = name.split(/\s/).reduce((response, word) => response += word.slice(0, 1), "");
      return this.formatInitials(initials);
    }
    formatInitials(initials) {
      const firstChar = initials.length > 0 ? initials.charAt(0) : "";
      const lastChar = initials.length > 1 ? initials.charAt(initials.length - 1) : "";
      return (firstChar + lastChar).toUpperCase();
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHUserIdentifier.prototype, "image", void 0);
  __decorate([n5({ type: String, reflect: true })], SHUserIdentifier.prototype, "initials", void 0);
  __decorate([n5({ type: String, reflect: true })], SHUserIdentifier.prototype, "name", void 0);
  __decorate([n5({ type: String, reflect: true })], SHUserIdentifier.prototype, "info", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHUserIdentifier.prototype, "condensed", void 0);
  __decorate([n5({ type: Boolean, reflect: true })], SHUserIdentifier.prototype, "unauthenticated", void 0);
  SHUserIdentifier = __decorate([e4("sh-user-identifier")], SHUserIdentifier);

  // ../sh-value-indicator/src/sh-value-indicator.lit.scss.js
  var sh_value_indicator_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-value-indicator-l-value-line-height=4rem] - line height of value for l size
   */
  --sh-value-indicator-l-value-line-height: 4rem;
  /* 
   * @cssprop [--sh-value-indicator-l-label-line-height=1.5rem] - line height of label for l size
   */
  --sh-value-indicator-l-label-line-height: 1.5rem;
  /* 
   * @cssprop [--sh-value-indicator-s-label-line-height=1rem] - line height of label for s size
   */
  --sh-value-indicator-s-label-line-height: 1rem;
  /* 
   * @cssprop [--sh-value-indicator-l-icon-size-m=4rem] - icon size for l size
   */
  --sh-value-indicator-l-icon-size-m: 4rem;
  /* 
   * @cssprop [--sh-value-indicator-s-icon-size-m=2rem] - icon size for s size
   */
  --sh-value-indicator-s-icon-size-m: 2rem;
  /* 
   * @cssprop [--sh-value-indicator-s-value-line-height=2rem] - line height of value for s size
   */
  --sh-value-indicator-s-value-line-height: 2rem;
  /* 
   * @cssprop [--sh-value-indicator-l-unit-line-height=2.5rem] - line height of unit for l size
   */
  --sh-value-indicator-l-unit-line-height: 2.5rem;
  /* 
   * @cssprop [--sh-value-indicator-s-unit-line-height=1.25rem] - line height of unit for s size
   */
  --sh-value-indicator-s-unit-line-height: 1.25rem;
  /* 
   * @cssprop [--sh-value-indicator-l-unit-font-size=1.75rem] - line height of unit for s size
   */
  --sh-value-indicator-l-unit-font-size: 1.75rem;
  /* 
   * @cssprop [--sh-value-indicator-s-unit-font-size=0.875rem] - line height of unit for s size
   */
  --sh-value-indicator-s-unit-font-size: 0.875rem;
  /* 
   * @cssprop [--sh-value-indicator-l-icon-font-size-m=4rem] - font size of icon for l size
   */
  --sh-value-indicator-l-icon-font-size-m: 4rem;
  /* 
   * @cssprop [--sh-value-indicator-s-icon-font-size-m=2rem] - font size of icon for s size
   */
  --sh-value-indicator-s-icon-font-size-m: 2rem;
  /* 
   * @cssprop [--sh-value-indicator-l-value-font-size=3.5rem] - font size of value for l size
   */
  --sh-value-indicator-l-value-font-size: 3.5rem;
  /* 
   * @cssprop [--sh-value-indicator-s-value-font-size=1.75rem] - font size of value for s size
   */
  --sh-value-indicator-s-value-font-size: 1.75rem;
  /* 
   * @cssprop [--sh-value-indicator-l-label-font-size=1rem] - font size of label for l size
   */
  --sh-value-indicator-l-label-font-size: 1rem;
  /* 
   * @cssprop [--sh-value-indicator-s-label-font-size=0.875rem] - font size of label for s size
   */
  --sh-value-indicator-s-label-font-size: 0.875rem;
  /* 
   * @cssprop [--sh-value-indicator-s-status-size-m=1.5rem] - size of status for s size
   */
  --sh-value-indicator-s-status-size-m: 1.5rem;
  /* 
   * @cssprop [--sh-value-indicator-s-status-font-size-m=1.5rem] - font size of status for s size
   */
  --sh-value-indicator-s-status-font-size-m: 1.5rem;
  /* 
   * @cssprop [--sh-value-indicator-s-icon-margin-right=0.25rem] - margin right of icon for s size
   */
  --sh-value-indicator-s-icon-margin-right: 0.25rem;
  /* 
   * @cssprop [--sh-value-indicator-l-icon-margin-right=0.5rem] - margin right of icon for l size
   */
  --sh-value-indicator-l-icon-margin-right: 0.5rem;
  /* 
   * @cssprop [--sh-value-indicator-s-unit-padding-top=0.625rem] - padding top of unit for s size
   */
  --sh-value-indicator-s-unit-padding-top: 0.625rem;
  /* 
   * @cssprop [--sh-value-indicator-l-unit-padding-top=1.23rem] - padding top of unit for l size
   */
  --sh-value-indicator-l-unit-padding-top: 1.23rem;
}

:host {
  display: flex;
  flex-direction: column;
}

:host > * + * {
  margin-top: 0.25rem;
}

.value-wrapper {
  display: flex;
  align-items: center;
}

.status,
.unit {
  margin-left: 0.25rem;
}

:host([size=s]) .unit {
  padding-top: var(--sh-value-indicator-s-unit-padding-top);
}

:host([size=l]) .unit {
  padding-top: var(--sh-value-indicator-l-unit-padding-top);
}

:host([size=s]) .icon {
  margin-right: var(--sh-value-indicator-s-icon-margin-right);
}

:host([size=l]) .icon {
  margin-right: var(--sh-value-indicator-l-icon-margin-right);
}

sh-text {
  width: auto;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* size */
:host([size=l]) {
  align-items: center;
  padding: 0.5rem;
}

:host([size=s]) {
  align-items: left;
}

.value,
.label {
  font: var(--body-1);
}

:host([size=l]) .value {
  line-height: var(--sh-value-indicator-l-value-line-height);
}

:host([size=l]) .label {
  font-size: var(--sh-value-indicator-l-label-font-size);
  line-height: var(--sh-value-indicator-l-label-line-height);
}

:host([size=s]) .label {
  line-height: var(--sh-value-indicator-s-label-line-height);
  font-size: var(--sh-value-indicator-s-label-font-size);
}

:host([size=l]) .value {
  font-size: var(--sh-value-indicator-l-value-font-size);
}

:host([size=l]) .unit {
  line-height: var(--sh-value-indicator-l-unit-line-height);
  font-size: var(--sh-value-indicator-l-unit-font-size);
}

:host([size=s]) .unit {
  line-height: var(--sh-value-indicator-s-unit-line-height);
  font-size: var(--sh-value-indicator-s-unit-font-size);
}

:host([size=l]) .icon {
  --sh-icon-size-m: var(--sh-value-indicator-l-icon-size-m);
  --sh-icon-font-size-m: var(--sh-value-indicator-l-icon-font-size-m);
}

:host([size=s]) .icon {
  --sh-icon-size-m: var(--sh-value-indicator-s-icon-size-m);
  --sh-icon-font-size-m: var(--sh-value-indicator-s-icon-font-size-m);
}

:host([size=s]) .value {
  line-height: var(--sh-value-indicator-s-value-line-height);
  font-size: var(--sh-value-indicator-s-value-font-size);
}

slot {
  display: flex;
}

:host([size=s]) .status {
  --sh-icon-size-m: var(--sh-value-indicator-s-status-size-m);
  --sh-icon-font-size-m: var(--sh-value-indicator-s-status-font-size-m);
}`;

  // ../sh-value-indicator/src/sh-value-indicator.js
  var SHValueIndicator = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        value: { type: String, reflect: true },
        unit: { type: String, reflect: true },
        icon: { type: String, reflect: true },
        status: { type: String, reflect: true },
        size: { type: String, reflect: true },
        iconColor: { type: String, reflect: true, attribute: "icon-color" }
      };
    }
    static get styles() {
      return [sh_value_indicator_lit_scss_default];
    }
    render() {
      return x`
      <div class="value-wrapper">
        ${this.icon ? x` <sh-icon icon="${this.icon}" class="icon" .color="${this.iconColor}"></sh-icon> ` : ""}
        ${this.value ? x` <sh-text class="value">${this.value}</sh-text> ` : ""}
        ${this.unit ? x` <sh-text class="unit">${this.unit}</sh-text> ` : ""}
        ${this.status ? x` <sh-icon icon="${this.status}" class="status"></sh-icon> ` : ""}
      </div>
      ${this.label ? x` <sh-text class="label">${this.label}</sh-text> ` : ""}
      <slot name="footer"></slot>
    `;
    }
    constructor() {
      super();
      this.size = "l";
    }
  };
  customElements.define("sh-value-indicator", SHValueIndicator);

  // ../sh-workline/src/sh-workline-group.lit.scss.js
  var sh_workline_group_lit_scss_default = i`:host {
  display: flex;
  border-radius: 5rem;
  background: rgba(var(--ui-1), var(--opacity-5));
  box-sizing: border-box;
  align-items: center;
  box-shadow: inset 0 0 0 0.0625rem rgba(var(--ui-1), var(--opacity-5));
  margin-left: var(--sh-workline-item-margin);
}

:host > ::slotted(:last-child[type=information]) {
  margin-right: 1rem;
}

:host > ::slotted(*[type=information]),
:host > ::slotted(*:not(sh-workline-item:first-of-type):not([slot=badge])) {
  margin-left: var(--sh-workline-item-margin);
}

:host > ::slotted(div) {
  margin-left: 0rem !important;
}

:host > ::slotted(.sentinel:first-child) {
  transform: translateX(-1rem);
}

:host > ::slotted(sh-workline-item:not([active])) {
  background: transparent;
}

:host > ::slotted(sh-workline-item[current]) {
  background: rgba(var(--ui-1), var(--opacity-6));
}

:host > ::slotted(sh-workline-item.leftfix),
:host > ::slotted(sh-workline-item.rightfix),
:host > ::slotted(sh-workline-item.leftfix[current]),
:host > ::slotted(sh-workline-item.rightfix[current]),
:host > ::slotted(sh-workline-item.rightfix:not(:first-child):not([slot=badge])),
:host > ::slotted(sh-workline-item.leftfix:not(:first-child):not([slot=badge])),
:host > ::slotted(sh-workline-item.leftfix[type=information]),
:host > ::slotted(sh-workline-item.rightfix[type=information]) {
  z-index: 3;
  background-color: rgba(var(--ui-5), var(--opacity-1));
  box-shadow: var(--shadow-overlay);
  /* margin-right: 0; */
}

:host > ::slotted(*.rightfix) {
  background-color: rgba(var(--ui-5), var(--opacity-1));
  box-shadow: var(--shadow-overlay);
}

:host > ::slotted(*.rightfix[active]),
:host > ::slotted(*.leftfix[active]),
:host > ::slotted(sh-workline-item.leftfix[active]),
:host > ::slotted(sh-workline-item.rightfix[active]),
:host > ::slotted(sh-workline-item.rightfix:not(:first-child):not([slot=badge])[active]),
:host > ::slotted(sh-workline-item.leftfix:not(:first-child):not([slot=badge])[active]),
:host > ::slotted(sh-workline-item.leftfix[type=information][active]),
:host > ::slotted(sh-workline-item.rightfix[type=information][active]) {
  box-shadow: var(--shadow-overlay), inset 0rem 0rem 0rem 0.0625rem rgba(var(--ui-1), var(--opacity-1));
}

:host > ::slotted(*.leftfix) {
  background-color: rgba(var(--ui-5), var(--opacity-1));
  box-shadow: var(--shadow-overlay);
}`;

  // ../sh-workline/src/sh-workline-group.js
  var SHWorklineGroup = class extends s4 {
    static get styles() {
      return [sh_workline_group_lit_scss_default];
    }
    render() {
      return x`<slot></slot>`;
    }
  };
  customElements.define("sh-workline-group", SHWorklineGroup);

  // ../sh-workline/src/sh-workline-item.lit.scss.js
  var sh_workline_item_lit_scss_default = i`:root,
[sh-scale=s] {
  /* 
   * @cssprop [--sh-workline-item-svg-height-width=3.5rem] - height of the progress ring svg
   */
  --sh-workline-item-svg-height-width: 3.5rem;
  /* 
   * @cssprop [--sh-workline-item-type-info-height-width=3rem] - height of the workline item wrapper when it is of information type
   */
  --sh-workline-item-type-info-height-width: 3rem;
  /* 
   * @cssprop [--sh-workline-item-progress-circle=3.25rem] - height or width of the progress circle
   */
  --sh-workline-item-progress-circle: 3.25rem;
  /* 
   * @cssprop [--sh-workline-item-circle-stroke-width=0.1875rem] - stroke width of the circle
   */
  --sh-workline-item-circle-stroke-width: 0.1875rem;
  /* 
   * @cssprop [--sh-workline-item-circle-stroke-dasharray=0,5.83] - stroke width of the circle
   */
  --sh-workline-item-circle-stroke-dasharray: 0,5.83;
  /* 
   * @cssprop [--sh-workline-item-label-height=2rem] - height of the workline item label
   */
  --sh-workline-item-label-height: 2rem;
  /* 
   * @cssprop [--sh-workline-item-wrapper-margin=0.75rem] - margin of the item wrapper
   */
  --sh-workline-item-wrapper-margin: 0.75rem;
  /* 
   * @cssprop [--sh-workline-item-badge-wrapper-position=0.5rem] - badge wrapper position top and right 
   */
  --sh-workline-item-badge-wrapper-position: 0.5rem;
  /* 
   * @cssprop [--sh-workline-item-icon-size-m=0.5rem] - size of the icon badge
   */
  --sh-workline-item-icon-size-m: 0.5rem;
  /* 
   * @cssprop [--sh-workline-item-triangle-height=4rem] - height of the two triangles for current item
   */
  --sh-workline-item-triangle-height: 4rem;
  /* 
   * @cssprop [--sh-workline-item-triangle-border-left-right=0.375rem] - border left right of the two triangles in the current item
   */
  --sh-workline-item-triangle-border-left-right: 0.375rem;
  /* 
   * @cssprop [--sh-workline-item-triangle-border-top-bottom=0.5rem] - border top bottom of the two triangles in the current item
   */
  --sh-workline-item-triangle-border-top-bottom: 0.5rem;
  /* 
   * @cssprop [--sh-workline-item-badge-slotted-position-top=-0.3rem] - position top value for the badge when info slots have been used
   */
  --sh-workline-item-badge-slotted-position-top: -0.3rem;
  /* 
   * @cssprop [--sh-workline-item-badge-slotted-position-right=-0.5rem] - position right value for the badge when info slots have been used
   */
  --sh-workline-item-badge-slotted-position-right: -0.5rem;
  /* 
   * @cssprop [--sh-workline-item-thumbnail-width-height=3rem] - height and width of the thumbnail wrapper
   */
  --sh-workline-item-thumbnail-width-height: 3rem;
  /* 
   * @cssprop [--sh-workline-item-active-icon-size-m=2rem] - size of the badge icon when active
   */
  --sh-workline-item-active-icon-size-m: 2rem;
  /* 
   * @cssprop [--sh-workline-item-info-line-height=1.5rem] - line height of the workline item info
   */
  --sh-workline-item-info-line-height: 1.5rem;
}

:host {
  z-index: 0;
  position: relative;
  position: -webkit-sticky;
  display: flex;
  /* flex-direction: column; */
  align-items: center;
  justify-content: center;
  height: fit-content;
  width: fit-content;
  background: rgba(var(--ui-1), var(--opacity-5));
  border-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
  text-align: center;
  box-sizing: border-box;
  transition: var(--transition-time) all ease-in-out, left 0s linear, right 0s linear, top 0s linear, "z-index" 0s linear, "margin" 0s linear, "background-image" 0s linear, "box-shadow" 0s linear;
  cursor: pointer;
}

:host([type=information]) {
  background: transparent;
}
:host([type=information]) > .item-wrapper {
  margin: 0rem;
  background: transparent;
  height: var(--sh-workline-item-type-info-height-width);
  width: var(--sh-workline-item-type-info-height-width);
}
:host([type=information]) > .item-wrapper > #itemIcon {
  color: rgba(var(--ui-1), var(--opacity-3));
}

/* item wrapper */
.item-wrapper {
  margin: var(--sh-workline-item-wrapper-margin);
  position: relative;
  background: rgba(var(--ui-6), var(--opacity-1));
  display: flex;
  align-items: center;
  justify-content: center;
  height: var(--sh-workline-item-svg-height-width);
  width: var(--sh-workline-item-svg-height-width);
  box-sizing: border-box;
  border-radius: 50%;
  transition: var(--transition-time) all ease-in-out;
}

/* thumbnail */
.thumbnail-wrapper {
  position: absolute;
  height: var(--sh-workline-item-thumbnail-width-height);
  width: var(--sh-workline-item-thumbnail-width-height);
  overflow: hidden;
  border-radius: 50%;
  display: block;
}

#itemThumbnail {
  position: relative;
  width: 100%;
  height: 100%;
  background-size: contain;
  opacity: var(--opacity-3);
  top: 50%;
  left: 50%;
  image-rendering: -webkit-optimize-contrast;
  -webkit-transform: translateY(-50%) translateX(-50%);
  -ms-transform: translateY(-50%) translateX(-50%);
  transform: translateY(-50%) translateX(-50%);
}

:host([active]) #itemThumbnail {
  opacity: var(--opacity-1);
}

/* label, info */
.item-label {
  position: absolute;
  bottom: calc(-1 * (var(--sh-workline-item-label-height) + 0.5rem));
  height: var(--sh-workline-item-label-height);
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  left: 0rem;
}

.item-label,
.item-info {
  color: var(--text-secondary);
}

:host([active]) .item-label,
:host([active]) .item-info {
  color: var(--text-primary);
}

.item-info,
#itemIcon {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* triangles */
.triangles {
  width: 0;
  height: var(--sh-workline-item-triangle-height);
  position: absolute;
  border-left: var(--sh-workline-item-triangle-border-left-right) solid transparent;
  border-right: var(--sh-workline-item-triangle-border-left-right) solid transparent;
  border-bottom: var(--sh-workline-item-triangle-border-top-bottom) solid rgba(var(--ui-1), var(--opacity-1));
  border-top: var(--sh-workline-item-triangle-border-top-bottom) solid rgba(var(--ui-1), var(--opacity-1));
}

:host([progress="100"][new]) #progress-ring {
  stroke: rgba(var(--ui-0), var(--opacity-1));
}

/* progress ring */
.progress-wrapper {
  height: var(--sh-workline-item-svg-height-width);
  width: var(--sh-workline-item-svg-height-width);
  position: absolute;
  transition: var(--transition-time) all ease-in-out;
  opacity: var(--opacity-3);
}

svg {
  stroke-width: calc(var(--sh-workline-item-circle-stroke-width) + 0.0625rem);
  fill: transparent;
  cx: 50%;
  cy: 50%;
  transition: var(--transition-time) all ease-in-out;
  transform: rotate(-90deg);
}

:host([progress="0"]) svg,
:host([progress="100"]) svg {
  stroke-width: var(--sh-workline-item-circle-stroke-width);
  r: 1.53125rem;
}

:host(:not([indeterminate])) .progress-wrapper > svg:nth-child(2) {
  animation: none;
}

/* badges */
:host(:not([empty-info])[active]) .badge-wrapper,
:host(:not([empty-info-right])[active]) .badge-wrapper {
  top: var(--sh-workline-item-badge-slotted-position-top);
  right: var(--sh-workline-item-badge-slotted-position-right);
}

:host(:not([empty-info-right])[current]) .info-right-wrapper,
:host(:not([empty-info-right])[active]) .info-right-wrapper {
  margin-right: 0.5rem;
}

.badge-wrapper {
  display: flex;
  position: absolute;
  right: var(--sh-workline-item-badge-wrapper-position);
  top: var(--sh-workline-item-badge-wrapper-position);
  transition: var(--transition-time) all ease-in-out;
}

.badge-wrapper > ::slotted(sh-icon) {
  transition: 0s all ease-in-out;
  --sh-icon-size-m: var(--sh-workline-item-icon-size-m);
  --sh-icon-size-s: var(--sh-workline-item-icon-size-m);
  --sh-icon-font-size-m: var(--sh-workline-item-icon-size-m);
  --sh-icon-font-size-s: var(--sh-workline-item-icon-size-m);
}

:host(:not([empty-info-right])[active]) .badge-wrapper > ::slotted(sh-icon),
:host(:not([empty-info])[active]) .badge-wrapper > ::slotted(sh-icon) {
  line-height: var(--sh-workline-item-active-icon-size-m);
  font-size: var(--sh-workline-item-active-icon-size-m);
  max-height: var(--sh-workline-item-active-icon-size-m);
  min-height: var(--sh-workline-item-active-icon-size-m);
  min-width: var(--sh-workline-item-active-icon-size-m);
}

/* info slot */
.info-right-wrapper,
.info-wrapper {
  opacity: 0;
  width: auto;
  display: flex;
  max-width: 0rem;
  overflow: hidden;
  align-items: center;
  transition: var(--transition-time) max-width ease-in-out;
}

:host([active]) .info-right-wrapper,
:host([current]) .info-right-wrapper,
:host([active]) .info-wrapper,
:host([current]) .info-wrapper {
  opacity: 1;
  max-width: 12.5rem;
}

.info-wrapper > ::slotted(*:first-child) {
  margin-left: 1rem;
}

.info-wrapper > ::slotted(*:not(:first-child)) {
  margin-left: 0.5rem;
}

.info-right-wrapper > ::slotted(*) {
  margin-right: 0.5rem;
}

/* active */
:host([active]) {
  background: rgba(var(--ui-1), var(--opacity-5));
  box-shadow: inset 0rem 0rem 0rem 0.0625rem rgba(var(--ui-1), var(--opacity-1));
}

:host([active][type=information]) {
  background: transparent;
  box-shadow: none;
}

:host([active]) .item-wrapper {
  background: rgba(var(--ui-7), var(--opacity-1));
}

:host([type=information][active]) .item-wrapper {
  background: transparent;
}

:host([active]) .progress-wrapper {
  opacity: var(--opacity-1);
}

/* readonly */
:host([disabled]),
:host([readonly]) {
  pointer-events: none;
  cursor: default;
}

/* disabled */
:host([disabled]) .item-label,
:host([disabled]) .item-info {
  color: var(--text-disabled);
}

:host([disabled]) .progress-wrapper {
  opacity: var(--opacity-5);
}

:host([disabled]) {
  opacity: var(--opacity-4);
}

/* indeterminate */
:host([indeterminate]) .progress-wrapper > svg:nth-child(2) {
  animation: indeterminate 1.5s linear infinite;
}

@keyframes indeterminate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
/* message */
sh-popover {
  width: fit-content;
  width: -moz-fit-content;
  height: auto;
  cursor: default;
  text-align: left;
  max-width: 75rem;
  max-height: 50rem;
  transition: 0s transform linear;
}

:host(.no-transitions),
:host(.no-transitions) *,
:host(.no-transitions) * > ::slotted(*) {
  transition: all 0s linear;
}

:host(:not([disabled]):not([readonly]).repeat-animate) {
  animation-name: repeat-animate;
  animation-duration: 0.6s;
  animation-timing-function: cubic-bezier(0, 0.5, 1, 0.5);
}

:host(:not([disabled]):not([readonly]).repeat-animate) .item-label {
  animation-name: fade-in;
  animation-duration: inherit;
  animation-timing-function: inherit;
}

:host(:not([disabled]):not([readonly]).repeat-animate) .item-wrapper {
  animation-name: shrink-expand-shrink;
  animation-duration: inherit;
  animation-timing-function: inherit;
}

@keyframes fade-in {
  0% {
    opacity: 0;
    visibility: hidden;
  }
  80% {
    opacity: 0;
    visibility: hidden;
  }
  100% {
    opacity: 1;
    visibility: visible;
  }
}
@keyframes shrink-expand-shrink {
  0% {
    transform: scale(0.7);
  }
  50% {
    transform: scale(1.2);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes repeat-animate {
  0% {
    transform: translate(-2rem, 0.9375rem);
    height: calc(0.7 * var(--sh-workline-item-item-wrapper-height));
    width: calc(0.7 * var(--sh-workline-item-item-wrapper-height));
    margin-left: 0rem;
    margin-right: 0rem;
    border-radius: 50%;
  }
  50% {
    transform: translate(0rem, -0.5rem);
    height: calc(1.2 * var(--sh-workline-item-item-wrapper-height));
    width: calc(1.2 * var(--sh-workline-item-item-wrapper-height));
    margin-left: 0.5rem;
    margin-right: -0.5rem;
    border-radius: 50%;
  }
  100% {
    transform: translate(0rem, 0rem);
    height: calc(var(--sh-workline-item-item-wrapper-height));
    width: calc(var(--sh-workline-item-item-wrapper-height));
    border-radius: 50%;
  }
}
.progress-ring-svg {
  transform: rotate(-90deg);
  height: var(--sh-workline-item-svg-height-width);
  width: var(--sh-workline-item-svg-height-width);
  position: absolute;
  left: 0;
  top: 0;
}

:host([type=information]) sh-popover[position=top] {
  transform: translateY(-1rem);
}

:host(.leftfix[float]) {
  position: absolute;
  z-index: 3;
  margin: 0;
  background-color: rgba(var(--ui-5), var(--opacity-1));
}

:host(.rightfix[float]) {
  position: absolute;
  z-index: 3;
  margin: 0;
  background-color: rgba(var(--ui-5), var(--opacity-1));
}

.item-info {
  line-height: var(--sh-workline-item-info-line-height);
}

.circle-ring {
  cx: calc(var(--sh-workline-item-svg-height-width) / 2);
  cy: calc(var(--sh-workline-item-svg-height-width) / 2);
  r: calc(var(--sh-workline-item-progress-circle) / 2);
}

#dash-ring {
  stroke-width: var(--sh-workline-item-circle-stroke-width);
}`;

  // ../sh-workline/src/sh-workline-item.js
  var SHWorklineItem = class extends s4 {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        info: { type: String, reflect: true },
        color: { type: String, reflect: true },
        icon: { type: String, reflect: true },
        progress: { type: Number, reflect: true },
        indeterminate: { type: Boolean, reflect: true },
        active: { type: Boolean, reflect: true },
        current: { type: Boolean, reflect: true },
        disabled: { type: Boolean, reflect: true },
        readonly: { type: Boolean, reflect: true },
        messageVisible: { type: Boolean, reflect: true, attribute: "message-visible" },
        repeat: { type: Boolean, reflect: true },
        float: { type: Boolean, reflect: true },
        thumbnail: { type: String, reflect: true },
        new: { type: Boolean, reflect: true },
        type: { type: String, reflect: true },
        badge: { type: String, reflect: true },
        _emptyMessage: { type: Boolean, value: true },
        _emptyinfo: { type: Boolean, reflect: true, attribute: "empty-info" },
        _emptyinforight: { type: Boolean, reflect: true, attribute: "empty-info-right" },
        iconColor: { type: String, reflect: true, attribute: "icon-color" }
      };
    }
    static get styles() {
      return [sh_workline_item_lit_scss_default];
    }
    render() {
      return x`
      ${this.type !== "information" ? x` <div class="info-wrapper">
            <slot
              name="info"
              id="info"
              @slotchange=${(e8) => this._updateEmptySlotFlag(e8.target, "_emptyinfo")}
            ></slot>
          </div>` : ""}
      <!-- Adding on-click="stopEvent" as a fix for the bug 22078 in Azure Devops -->
      <!-- Bug link : https://dev.azure.com/shs-ti-ux/SHUI/_workitems/edit/22078 -->
      <sh-popover
        passive
        .visible="${this.messageVisible && !this._emptyMessage}"
        @visible-changed=${(e8) => {
        e8.target.visible = this.messageVisible && !this._emptyMessage;
      }}
        @mobile-changed=${(e8) => {
        e8.target.mobile = false;
      }}
        sticky
        @click="${this.stopEvent}"
        .target="${this._getPopoverTarget()}"
      >
        <slot
          name="message"
          id="messageSlot"
          @slotchange=${(e8) => this._updateEmptySlotFlag(e8.target, "_emptyMessage")}
        ></slot>
      </sh-popover>
      <div class="item-wrapper">
        ${this.type !== "information" ? x` ${this.progress >= 0 ? x`<div class="progress-wrapper">
              ${this._createDashRing()}
              ${this._createProgressRing()}
            </div> </div>` : ""}
            ${this.info && !this.icon ? x`<sh-text size="body-1" class="item-info">${this.info}</sh-text>` : ""}
            ${this.thumbnail ? x` <div class="thumbnail-wrapper">
                  <div id="itemThumbnail" style="background-image:url('${this.thumbnail}');"></div>
                </div>` : ""}` : ""}
        ${this.icon ? x` <sh-icon id="itemIcon" .color="${this.iconColor}" icon=${this.icon}></sh-icon>` : ""}
        ${this.type !== "information" ? x` ${this.current ? x` <div class="triangles"></div>` : ""}` : ""}
      </div>
      ${this.type !== "information" ? x` <div class="info-right-wrapper">
              <slot
                name="info-right"
                id="infoRight"
                @slotchange=${(e8) => this._updateEmptySlotFlag(e8.target, "_emptyinforight")}
              ></slot>
            </div>
            <div class="badge-wrapper">
              <slot name="badge" id="badgeSlot"></slot>
            </div>
            ${this.label ? x`<sh-text size="body-2" class="item-label">${this.label}</sh-text>` : ""}` : ""}
    `;
    }
    updated(changedProperties) {
      super.updated(changedProperties);
      if (changedProperties.has("repeat")) {
        this._handleRepeatChange();
      }
      if (changedProperties.has("float")) {
        this._handleFloatChange();
      }
      const listOfProperties = [
        "label",
        "info",
        "color",
        "icon",
        "indeterminate",
        "active",
        "current",
        "disabled",
        "readonly",
        "messageVisible",
        "thumbnail",
        "new",
        "type"
      ];
      dispatchAttributeChangedEvent(this, changedProperties, listOfProperties);
    }
    constructor() {
      super();
      this.new = false;
      this.repeat = false;
      this.progress = "0";
      this.indeterminate = false;
      this.messageVisible = false;
      this._emptyMessage = true;
      this.active = false;
      this.readonly = false;
      this.disabled = false;
      this._emptyinfo = true;
      this._emptyinforight = true;
    }
    firstUpdated(changedProperties) {
      if (changedProperties.has("repeat")) {
        this._handleRepeatChange();
      }
      const infowrapper = this.shadowRoot.querySelector(".info-wrapper");
      infowrapper == null ? void 0 : infowrapper.removeEventListener("transitionend", this._transitionendHandler);
      infowrapper == null ? void 0 : infowrapper.addEventListener("transitionend", this._transitionendHandler);
    }
    connectedCallback() {
      super.connectedCallback();
      this._resizeObserver = new ResizeObserver(() => {
        this.requestUpdate();
      });
      this._resizeObserver.observe(this);
      this._transitionendListener = this._transitionendHandler.bind(this);
    }
    _transitionendHandler() {
      dispatchCustomEvent(this, "workline-item-size-changed");
    }
    _updateEmptySlotFlag(slot, emptySlotFlag) {
      this[emptySlotFlag] = slot.assignedNodes({
        flatten: true
      }).length === 0;
    }
    switchOffTransitions() {
      this.classList.add("no-transitions");
    }
    resetTransitions() {
      this.classList.remove("no-transitions");
    }
    _handleFloatChange() {
      dispatchCustomEvent(this, "workline-item-float-changed");
    }
    _handleRepeatChange() {
      if (this.repeat) {
        this.classList.add("repeat-animate");
        this.classList.add("no-transitions");
        this.addEventListener("animationend", function animationEndListener() {
          this.classList.remove("repeat-animate");
          this.classList.remove("no-transitions");
          this.removeEventListener("animationend", animationEndListener);
          dispatchCustomEvent(this, "workline-animation-ended");
        });
      }
    }
    _createProgressRing() {
      const computedSize = calculatedBaseFontSize / 16;
      const circleFillValue = computedSize * (parseFloat(getComputedStyle(this).getPropertyValue("--sh-workline-item-progress-circle")) * 16 * Math.PI);
      return x`<svg class="progress-ring-svg">
      ><circle
        class="circle-ring"
        id="progress-ring"
        stroke="${this.color}"
        fill="transparent"
        stroke-dasharray="${circleFillValue * ((this.indeterminate ? 25 : this.progress) / 100)},
    ${circleFillValue}"
      /></svg`;
    }
    _createDashRing() {
      const computedSize = calculatedBaseFontSize / 16;
      return x`<svg class="progress-ring-svg">
      <circle
        id="dash-ring"
        class="circle-ring"
        stroke="${this.color}"
        stroke-dasharray="0, ${computedSize * getComputedStyle(this).getPropertyValue("--sh-workline-item-circle-stroke-dasharray")}"
        fill="transparent"
        stroke-linecap="round"
      />
    </svg>`;
    }
    stopEvent(e8) {
      e8.stopPropagation();
    }
    _getPopoverTarget() {
      return this;
    }
  };
  customElements.define("sh-workline-item", SHWorklineItem);

  // ../sh-workline/src/sh-workline.lit.scss.js
  var sh_workline_lit_scss_default = i`:root,
[sh-scale=s] { /* 
 * @cssprop [--sh-workline-item-wrapper-height=5rem] - height of the items wrapper
 */
  --sh-workline-item-wrapper-height: 5rem;
  /* 
   * @cssprop [--sh-workline-wrapper-height=7.375rem] - height of the workline wrapper
   */
  --sh-workline-wrapper-height: 7.375rem;
  /* 
   * @cssprop [--sh-workline-wrapper-top-padding=0.5rem] - Top padding of the workline wrapper
   */
  --sh-workline-wrapper-top-padding: 0.5rem;
  /* 
   * @cssprop [--sh-workline-item-margin=1rem] - margin between the workline items
   */
  --sh-workline-item-margin: 1rem;
  /* 
   * @cssprop [--sh-workline-label-height=2rem] - height/line-height of the workline label 
   */
  --sh-workline-label-height: 2rem;
  /* 
   * @cssprop [--sh-workline-right-wrapper-margin=1rem] - right margin of the right wrapper
   */
  --sh-workline-right-wrapper-margin: 1rem;
  /* 
   * @cssprop [--sh-workline-right-wrapper-left-padding=1.5rem] - left padding of the right wrapper
   */
  --sh-workline-right-wrapper-left-padding: 1.5rem;
}

:host {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  flex-direction: column;
  overflow: visible;
  position: relative;
  width: 100%;
}

.workline-wrapper {
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
  flex-direction: row;
  height: var(--sh-workline-wrapper-height);
  overflow-x: auto;
  overflow-y: hidden;
  padding-bottom: 0.75rem;
  width: 100%;
  padding-top: var(--sh-workline-wrapper-top-padding);
}

.workline-label {
  position: relative;
}

.items-wrapper {
  -webkit-box-flex: 1;
  flex: 1;
  display: -webkit-box;
  display: flex;
  -webkit-box-pack: center;
  justify-content: center;
  height: var(--sh-workline-item-wrapper-height);
  min-width: -webkit-fit-content;
  min-width: -moz-fit-content;
  min-width: fit-content;
  background: var(--base-2);
  align-items: center;
}

/* slots */
.items-wrapper > ::slotted(sh-workline-item) {
  margin-left: var(--sh-workline-item-margin);
}

.left-wrapper > ::slotted(*) {
  display: -webkit-box;
  margin-left: var(--sh-workline-wrapper-top-padding);
}

.right-wrapper > ::slotted(*) {
  margin-right: var(--sh-workline-right-wrapper-margin);
}

.right-wrapper {
  height: var(--sh-workline-item-wrapper-height);
  padding-left: var(--sh-workline-right-wrapper-left-padding);
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
  align-items: center;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  border-top-right-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
  border-bottom-right-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
  background: var(--base-2);
  position: relative;
  margin-top: var(--sh-workline-wrapper-top-padding);
}

.left-wrapper {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  display: -webkit-box;
  display: flex;
  border-top-left-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
  border-bottom-left-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
  background: var(--base-2);
  position: relative;
  height: var(--sh-workline-item-wrapper-height);
  padding-right: 1.5rem;
  -webkit-box-align: center;
  align-items: center;
  margin-top: var(--sh-workline-wrapper-top-padding);
}

/* hide slots */
:host([_emptyright]) .right-wrapper,
:host([_emptyleft]) .left-wrapper {
  display: none;
}

.total-wrapper {
  display: -webkit-box;
  display: flex;
  height: -webkit-fit-content;
  height: -moz-fit-content;
  height: fit-content;
  width: 100%;
  -webkit-box-pack: justify;
  justify-content: space-between;
  position: relative;
}

:host([_withoutanyslots]) .items-wrapper {
  border-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
}

:host([_onlyleftslot]) .items-wrapper {
  border-top-right-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
  border-bottom-right-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
}

:host([_onlyrightslot]) .items-wrapper {
  border-top-left-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
  border-bottom-left-radius: calc(var(--sh-workline-item-wrapper-height) / 2);
}

.left-float,
.right-float {
  position: absolute;
  height: calc(var(--sh-workline-wrapper-height) + 0.25rem);
  z-index: 1;
  margin-top: var(--sh-workline-wrapper-top-padding);
  display: flex;
}

:host([no-scrollbar]) .workline-wrapper::-webkit-scrollbar {
  display: none;
}

:host([no-scrollbar]) .workline-wrapper {
  padding-bottom: 0rem;
}

.right-float {
  right: 0rem;
  flex-direction: row-reverse;
  background-image: linear-gradient(to bottom, transparent, transparent var(--sh-workline-item-wrapper-height), var(--base-1) var(--sh-workline-item-wrapper-height), var(--base-1) calc(var(--sh-workline-wrapper-height) + 0.25rem)), linear-gradient(to right, transparent, transparent calc(var(--sh-workline-item-svg-height-width) / 2), var(--base-2) calc(var(--sh-workline-item-svg-height-width) / 2)) !important;
}

.left-float {
  left: 0rem;
  background-image: linear-gradient(to bottom, transparent, transparent var(--sh-workline-item-wrapper-height), var(--base-1) var(--sh-workline-item-wrapper-height), var(--base-1) calc(var(--sh-workline-wrapper-height) + 0.25rem)), linear-gradient(to left, transparent calc(var(--sh-workline-item-svg-height-width) / 2), var(--base-2) calc(var(--sh-workline-item-svg-height-width) / 2)) !important;
}

.items-wrapper > ::slotted(*.stuck-right),
.items-wrapper > ::slotted(*.stuck-left) {
  background-color: rgba(var(--ui-5), var(--opacity-1));
  box-shadow: var(--shadow-overlay);
}

.items-wrapper > ::slotted(*.stuck-right[active]),
.items-wrapper > ::slotted(*.stuck-left[active]) {
  box-shadow: var(--shadow-overlay), inset 0rem 0rem 0rem 0.0625rem rgba(var(--ui-1), var(--opacity-1));
}`;

  // ../sh-workline/src/workline-float-positioner-mixin.js
  var marginPadding = calculatedBaseFontSize;
  var WorklineFloatPositionerMixin = (superClass) => class extends superClass {
    static get properties() {
      return {
        _floatPositions: { type: Object, reflect: false }
      };
    }
    calculateFloatPositions() {
      var _a4;
      marginPadding = parseFloat(getComputedStyle(this).getPropertyValue("--sh-workline-item-margin")) * 16;
      const BodyChilds = (_a4 = this.shadowRoot.querySelector("#body")) == null ? void 0 : _a4.assignedNodes({
        flatten: true
      });
      if (!BodyChilds) {
        return;
      }
      const floatElements = this.querySelectorAll("sh-workline-item[float]");
      if (floatElements.length == 0) {
        return;
      }
      let allChildren = [];
      for (let index = 0; index < BodyChilds.length; index++) {
        if (BodyChilds[index].tagName == "SH-WORKLINE-GROUP") {
          let worklineGroup = BodyChilds[index].childNodes;
          for (let index1 = 0; index1 < worklineGroup.length; index1++) {
            if (worklineGroup[index1].tagName == "SH-WORKLINE-ITEM") {
              allChildren.push(worklineGroup[index1]);
            }
          }
        } else if (BodyChilds[index].tagName == "SH-WORKLINE-ITEM") {
          allChildren.push(BodyChilds[index]);
        }
      }
      const workline = this.shadowRoot.querySelector(".workline-wrapper");
      const total = this.shadowRoot.querySelector(".total-wrapper");
      let worklineLeft = workline.getBoundingClientRect().x - total.getBoundingClientRect().x;
      let worklineRight = worklineLeft + workline.getBoundingClientRect().width;
      let leftFloatMarginLists = this._getLeftPositionAfterfloat(floatElements, worklineLeft);
      let leftFloatPosLists = this._getLeftPositionTostartfloat(allChildren, floatElements);
      let fixRightList = this._getRightFixedElement(allChildren, floatElements);
      let rightFloatPosLists = this._getRightPositionTostartfloat(floatElements, fixRightList, worklineLeft, worklineRight);
      let rightFloatMarginLists = [];
      let marginRightFloat = convertToRem(worklineRight - floatElements[floatElements.length - 1].getBoundingClientRect().width - marginPadding - marginPadding);
      rightFloatMarginLists = this._rightPositionAfterfloat(floatElements, marginRightFloat);
      this._floatPositions = {
        leftFloatPosLists,
        rightFloatPosLists,
        leftFloatMarginLists,
        rightFloatMarginLists
      };
    }
    fixFloatItems() {
      var _a4;
      let floatElements = this.querySelectorAll("sh-workline-item[float]");
      if (floatElements.length == 0)
        return;
      const BodyChilds = (_a4 = this.shadowRoot.querySelector("#body")) == null ? void 0 : _a4.assignedNodes({
        flatten: true
      });
      if (!BodyChilds) {
        return;
      }
      let scrollelement = this.shadowRoot.querySelector(".workline-wrapper");
      for (let i7 = 0; i7 < floatElements.length; i7++) {
        const fixedEl = floatElements[i7];
        const refLeft = this._floatPositions.leftFloatPosLists[i7];
        const refRight = this._floatPositions.rightFloatPosLists[i7];
        if (convertToRem(scrollelement.scrollLeft) > refLeft) {
          this._leftFloatFix(fixedEl, this._floatPositions.leftFloatMarginLists, i7);
          this._updateFloatwrapper("leftfix", this.shadowRoot.querySelector(".left-float"));
        } else if (convertToRem(scrollelement.scrollLeft) < refRight) {
          this._rightFloatFix(fixedEl, this._floatPositions.rightFloatMarginLists, i7);
          this._updateFloatwrapper("rightfix", this.shadowRoot.querySelector(".right-float"));
        } else {
          this._removeFloatFix(fixedEl);
        }
      }
    }
    _rightFloatFix(fixedElement, rightPosList, index) {
      let elementWidth = 0;
      let IsLastElement = this.shadowRoot.querySelector("#body").assignedNodes({
        flatten: true
      }).filter((x2) => x2.tagName == "SH-WORKLINE-ITEM").reverse()[0] === fixedElement;
      if (IsLastElement) {
        elementWidth = fixedElement.getBoundingClientRect().width + marginPadding;
      } else {
        elementWidth = fixedElement.getBoundingClientRect().width;
      }
      fixedElement.previousElementSibling.style.minWidth = convertToRem(elementWidth) + "rem";
      fixedElement.previousElementSibling.style.marginLeft = fixedElement.style.marginLeft;
      fixedElement.previousElementSibling.style.visibility = "visible";
      fixedElement.classList.add("rightfix");
      fixedElement.style.left = rightPosList[index] + "rem";
    }
    _leftFloatFix(fixedElement, leftFloatMarginLists, index) {
      fixedElement.previousElementSibling.style.marginLeft = "1rem";
      fixedElement.previousElementSibling.style.minWidth = convertToRem(fixedElement.getBoundingClientRect().width) + "rem";
      fixedElement.previousElementSibling.style.visibility = "visible";
      fixedElement.classList.add("leftfix");
      fixedElement.style.left = leftFloatMarginLists[index] + "rem";
    }
    _updateFloatwrapper(fix, floatwrapper) {
      let wrapperWidth = 0;
      this.querySelectorAll("sh-workline-item[float]").forEach((element) => {
        if (element.classList.contains(fix)) {
          wrapperWidth += element.getBoundingClientRect().width + marginPadding;
        }
      });
      floatwrapper.style.zIndex = "2";
      floatwrapper.style.minWidth = convertToRem(wrapperWidth) + "rem";
      if (floatwrapper.style.minWidth === "0rem") {
        floatwrapper.style.display = "none";
      } else {
        floatwrapper.style.display = "flex";
      }
    }
    _removeFloatFix(fixedElement) {
      if (fixedElement.classList.contains("leftfix")) {
        fixedElement.classList.remove("leftfix");
        fixedElement.style.left = "unset";
        fixedElement.previousElementSibling.style.minWidth = "0rem";
        fixedElement.previousElementSibling.style.marginLeft = "0rem";
        fixedElement.previousElementSibling.style.visibility = "collapse";
        this._updateFloatwrapper("leftfix", this.shadowRoot.querySelector(".left-float"));
      } else if (fixedElement.classList.contains("rightfix")) {
        fixedElement.classList.remove("rightfix");
        fixedElement.style.left = "unset";
        fixedElement.previousElementSibling.style.minWidth = "0rem";
        fixedElement.previousElementSibling.style.marginLeft = "0rem";
        fixedElement.previousElementSibling.style.visibility = "collapse";
        this._updateFloatwrapper("rightfix", this.shadowRoot.querySelector(".right-float"));
      }
    }
    _getLeftPositionAfterfloat(floatElements, worklineLeft) {
      let leftPosSum = worklineLeft;
      let leftPosList = [];
      for (let i7 = 0; i7 < floatElements.length; i7++) {
        const fixedEl = floatElements[i7];
        if (i7 === 0) {
          leftPosList[0] = convertToRem(leftPosSum);
        } else {
          leftPosList[i7] = convertToRem(leftPosSum);
        }
        leftPosSum += fixedEl.getBoundingClientRect().width + marginPadding;
      }
      return leftPosList;
    }
    _getLeftPositionTostartfloat(allChildren, floatElements) {
      let leftPosSum = 0;
      let refLeftList = [];
      for (let i7 = 0; i7 < floatElements.length; i7++) {
        let fixLeft = 0;
        const fixedEl = floatElements[i7];
        const fixedElIndex = Array.from(allChildren).indexOf(fixedEl);
        for (let i8 = 0; i8 < fixedElIndex; i8++) {
          fixLeft += allChildren[i8].getBoundingClientRect().width + marginPadding;
        }
        if (i7 === 0) {
          refLeftList[i7] = convertToRem(fixLeft);
        } else {
          refLeftList[i7] = convertToRem(fixLeft - leftPosSum);
        }
        leftPosSum += fixedEl.getBoundingClientRect().width + marginPadding;
      }
      return refLeftList;
    }
    _getRightFixedElement(allChildren, floatElements) {
      let fixRightList = [];
      for (let i7 = 0; i7 < floatElements.length; i7++) {
        let fixLeft = 0;
        const fixedEl = floatElements[i7];
        const fixedElIndex = Array.from(allChildren).indexOf(fixedEl);
        for (let i8 = 0; i8 < fixedElIndex; i8++) {
          fixLeft += allChildren[i8].getBoundingClientRect().width + marginPadding;
        }
        if (i7 == 0) {
          fixRightList[i7] = convertToRem(fixLeft + fixedEl.getBoundingClientRect().width);
        } else {
          fixRightList[i7] = convertToRem(fixLeft + fixedEl.getBoundingClientRect().width + marginPadding);
        }
      }
      return fixRightList;
    }
    _getRightPositionTostartfloat(floatElements, fixRightList, worklineLeft, worklineRight) {
      let refRightList = [];
      let rightPosSum = 0;
      for (let i7 = 0; i7 < floatElements.length; i7++) {
        let j = floatElements.length - 1 - i7;
        const fixedEl = floatElements[j];
        if (j === floatElements.length - 1) {
          refRightList[j] = fixRightList[j] + convertToRem(worklineLeft) - convertToRem(worklineRight) + convertToRem(marginPadding + 1e-4);
        } else {
          refRightList[j] = fixRightList[j] + convertToRem(worklineLeft) - convertToRem(worklineRight) + convertToRem(rightPosSum) + convertToRem(marginPadding);
        }
        rightPosSum += fixedEl.getBoundingClientRect().width + marginPadding;
      }
      return refRightList;
    }
    _rightPositionAfterfloat(floatElements, rightPos) {
      let rightPosList = [];
      for (let i7 = 0; i7 < floatElements.length; i7++) {
        if (floatElements[i7].parentNode.tagName == "SH-WORKLINE-GROUP") {
          let worklineitems = floatElements[i7].parentNode.querySelectorAll("sh-workline-item")[0];
          if (floatElements[i7] == worklineitems) {
            rightPos += convertToRem(marginPadding);
          }
        }
        let j = floatElements.length - 1 - i7;
        if (j !== floatElements.length - 1) {
          const fixedEl = floatElements[j];
          rightPosList[j] = rightPosList[j + 1] - convertToRem(marginPadding) - convertToRem(fixedEl.getBoundingClientRect().width);
        } else {
          rightPosList[j] = rightPos;
        }
      }
      return rightPosList;
    }
  };

  // ../sh-workline/src/sh-workline.js
  var renderDelay = 400;
  var SHWorkline = class extends WorklineFloatPositionerMixin(s4) {
    static get properties() {
      return {
        label: { type: String, reflect: true },
        handleActive: { type: Boolean, reflect: true, attribute: "handle-active" },
        noScrollbar: { type: Boolean, reflect: false, attribute: "no-scrollbar" },
        _onlyleftslot: { type: Boolean, reflect: true },
        _onlyrightslot: { type: Boolean, reflect: true },
        _withoutanyslots: { type: Boolean, reflect: true },
        _emptyleft: { type: Boolean, reflect: true },
        _emptyright: { type: Boolean, reflect: true }
      };
    }
    static get styles() {
      return [sharedStyles, sh_workline_lit_scss_default];
    }
    render() {
      return x`
      ${this.label ? x` <sh-text size="super-header" class="workline-label">${this.label}</sh-text>` : ""}
      <div class="total-wrapper">
        <div class="left-float"></div>
        <div class="left-wrapper">
          <slot
            name="left"
            id="left"
            @slotchange="${(e8) => this._handleLeftSlotChanged(e8.target)}"
          ></slot>
        </div>
        <div class="workline-wrapper" @scroll="${() => this._handleScroll()}">
          <div class="items-wrapper">
            <slot id="body" @slotchange="${() => this._handleBodySlotChanged()}"></slot>
          </div>
        </div>
        <div class="right-wrapper">
          <slot
            name="right"
            id="right"
            @slotchange="${(e8) => this._handleRightSlotChanged(e8.target)}"
          ></slot>
        </div>
        <div class="right-float"></div>
      </div>
    `;
    }
    constructor() {
      super();
      this.handleActive = false;
      this._emptyleft = true;
      this._emptyright = true;
      this._onlyleftslot = false;
      this._onlyrightslot = false;
      this._withoutanyslots = true;
    }
    firstUpdated() {
      super.firstUpdated();
    }
    connectedCallback() {
      super.connectedCallback();
      this._worklineitemfloatchangedListener = (e8) => {
        this._handleFloatChange(e8);
      };
      this.resizeObserver = new ResizeObserver(() => {
        this._handleSizeFloatChange();
      });
      this.resizeObserver.observe(this);
      this._worklineitemsizechangedListener = this._handleSizeFloatChange.bind(this);
      this._worklineclickListener = this._handleActive.bind(this);
      this.addEventListener("click", this._worklineclickListener);
      this.addEventListener("workline-item-float-changed", this._worklineitemfloatchangedListener);
    }
    disconnectedCallback() {
      this.removeEventListener("workline-item-float-changed", this._worklineitemfloatchangedListener);
      this.removeEventListener("workline-item-size-changed", this._worklineitemsizechangedListener);
      this.removeEventListener("click", this._worklineclickListener);
      if (this.resizeObserver)
        this.resizeObserver.disconnect();
      super.disconnectedCallback();
    }
    _handleFloatChange(e8) {
      const floatElements = this.querySelectorAll("sh-workline-item[float]");
      if (e8.target.tagName === "sh-workline-item".toUpperCase() && e8.target.hasAttribute("float")) {
        this._addEmptySpace(floatElements);
      } else {
        this._removeFloatFix(e8.target);
      }
      this.calculateFloatPositions();
      this.fixFloatItems();
    }
    _handleSizeFloatChange() {
      const floatElements = this.querySelectorAll("sh-workline-item[float]");
      if (floatElements.length == 0) {
        return;
      }
      this.calculateFloatPositions();
      this.fixFloatItems();
    }
    _addEmptySpace(floatElements) {
      floatElements.forEach((element) => {
        if (element.previousElementSibling) {
          if (element.previousElementSibling.tagName !== "DIV") {
            let emptySpace = document.createElement("div");
            emptySpace.style.minWidth = "0rem";
            element.parentNode.insertBefore(emptySpace, element);
          }
        } else {
          let emptySpace = document.createElement("div");
          emptySpace.style.minWidth = "0rem";
          element.parentNode.insertBefore(emptySpace, element);
        }
      });
    }
    _handleLeftSlotChanged(slot) {
      const numberOfElementsInLeftSlot = slot.assignedNodes({
        flatten: true
      }).length;
      if (numberOfElementsInLeftSlot > 0) {
        this._emptyleft = false;
        this._onlyleftslot = true;
        this._withoutanyslots = false;
      }
      if (this._onlyrightslot && this._onlyleftslot) {
        this._onlyrightslot = false;
        this._onlyleftslot = false;
      }
      this.leftSlotDelay = setTimeout(() => {
        clearTimeout(this.leftSlotDelay);
        this.shadowRoot.querySelector(".left-float").style.left = `${this.shadowRoot.querySelector(".left-wrapper").getBoundingClientRect().width / calculatedBaseFontSize}rem`;
        this.calculateFloatPositions();
        this.fixFloatItems();
      }, renderDelay);
    }
    _handleRightSlotChanged(slot) {
      const numberOfElementsInrightSlot = slot.assignedNodes({
        flatten: true
      }).length;
      if (numberOfElementsInrightSlot > 0) {
        this._emptyright = false;
        this._onlyrightslot = true;
        this._withoutanyslots = false;
      }
      if (this._onlyrightslot && this._onlyleftslot) {
        this._onlyrightslot = false;
        this._onlyleftslot = false;
      }
      this.rightSlotDelay = setTimeout(() => {
        clearTimeout(this.rightSlotDelay);
        this.shadowRoot.querySelector(".right-float").style.right = `${this.shadowRoot.querySelector(".right-wrapper").getBoundingClientRect().width / calculatedBaseFontSize}rem`;
        this.calculateFloatPositions();
        this.fixFloatItems();
      }, renderDelay);
    }
    _handleBodySlotChanged() {
      this._handleSizeFloatChange();
      const floatElements = this.querySelectorAll("sh-workline-item[float]");
      this._addEmptySpace(floatElements);
      this.addEventListener("workline-item-size-changed", this._worklineitemsizechangedListener);
    }
    _handleScroll() {
      const floatElements = this.querySelectorAll("sh-workline-item[float]");
      if (floatElements.length === 0) {
        return;
      }
      this.fixFloatItems();
    }
    _handleActive(event) {
      const BodyChilds = this.shadowRoot.querySelector("#body").assignedNodes({
        flatten: true
      });
      let allChildren = [];
      for (let index = 0; index < BodyChilds.length; index++) {
        if (BodyChilds[index].tagName == "SH-WORKLINE-GROUP") {
          let worklineGroup = BodyChilds[index].childNodes;
          for (let index1 = 0; index1 < worklineGroup.length; index1++) {
            if (worklineGroup[index1].tagName == "SH-WORKLINE-ITEM") {
              allChildren.push(worklineGroup[index1]);
            }
          }
        } else if (BodyChilds[index].tagName == "SH-WORKLINE-ITEM") {
          allChildren.push(BodyChilds[index]);
        }
      }
      if (event.target.tagName === "SH-WORKLINE-ITEM" && this.handleActive === true) {
        for (let i7 = 0; i7 < allChildren.length; i7++) {
          if (allChildren[i7].hasAttribute("active")) {
            allChildren[i7].active = false;
          }
        }
        event.target.active = true;
      }
    }
  };
  customElements.define("sh-workline", SHWorkline);

  // ../sh-wrapper/src/sh-wrapper.lit.scss.js
  var sh_wrapper_lit_scss_default = i`:host {
  display: flex;
  flex-wrap: wrap;
}

/* direction */
:host([direction=row]) {
  flex-direction: row;
}

:host([direction=column]) {
  flex-direction: column;
}

/* spacing */
:host([spacing=none]) {
  width: 100%;
}

:host([spacing=xs]) {
  width: 100%;
  gap: 0.125rem;
}

:host([spacing=s]) {
  width: 100%;
  gap: 0.25rem;
}

:host([spacing=m]) {
  width: 100%;
  gap: 0.5rem;
}

:host([spacing=l]) {
  width: 100%;
  gap: 1rem;
}`;

  // ../sh-wrapper/src/sh-wrapper.js
  var SHWrapper = class SHWrapper2 extends s4 {
    constructor() {
      super(...arguments);
      this.direction = "row";
      this.spacing = "s";
    }
    static get styles() {
      return [sh_wrapper_lit_scss_default];
    }
    render() {
      return x` <slot></slot> `;
    }
  };
  __decorate([n5({ type: String, reflect: true })], SHWrapper.prototype, "direction", void 0);
  __decorate([n5({ type: String, reflect: true })], SHWrapper.prototype, "spacing", void 0);
  SHWrapper = __decorate([e4("sh-wrapper")], SHWrapper);

  // index.js
  console.warn(`The bundles at @shui/core/shui/shui(.min).js will be moved soon.`);
  console.warn(`If you KNOW you need all components, use this: '@shui/core';`);
  var _a3, _b2;
  (_b2 = (_a3 = s4).disableWarning) == null ? void 0 : _b2.call(_a3, "change-in-update");
})();
/*!
 * Chart.js v2.9.4
 * https://www.chartjs.org
 * (c) 2020 Chart.js Contributors
 * Released under the MIT License
 */
/*!
 * chartjs-plugin-datalabels v0.6.0
 * https://chartjs-plugin-datalabels.netlify.com
 * (c) 2019 Chart.js Contributors
 * Released under the MIT license
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! modernizr 3.6.0 (Custom Build) | MIT *
 * https://modernizr.com/download/?-hovermq-setclasses !*/
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2021 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
/**
@license
Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.29.4
//# sourceMappingURL=shui.js.map
